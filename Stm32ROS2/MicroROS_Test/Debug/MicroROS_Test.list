
MicroROS_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011ca8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b08  08011e78  08011e78  00021e78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012980  08012980  000300d0  2**0
                  CONTENTS
  4 .ARM          00000008  08012980  08012980  00022980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012988  08012988  000300d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012988  08012988  00022988  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801298c  0801298c  0002298c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d0  20000000  08012990  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000109d0  200000d0  08012a60  000300d0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20010aa0  08012a60  00030aa0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001dc93  00000000  00000000  00030100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000458d  00000000  00000000  0004dd93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001770  00000000  00000000  00052320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001588  00000000  00000000  00053a90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027ca4  00000000  00000000  00055018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001dda5  00000000  00000000  0007ccbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e4339  00000000  00000000  0009aa61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000a9  00000000  00000000  0017ed9a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e10  00000000  00000000  0017ee44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000d0 	.word	0x200000d0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08011e60 	.word	0x08011e60

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000d4 	.word	0x200000d4
 800020c:	08011e60 	.word	0x08011e60

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_ldivmod>:
 80002e0:	b97b      	cbnz	r3, 8000302 <__aeabi_ldivmod+0x22>
 80002e2:	b972      	cbnz	r2, 8000302 <__aeabi_ldivmod+0x22>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bfbe      	ittt	lt
 80002e8:	2000      	movlt	r0, #0
 80002ea:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80002ee:	e006      	blt.n	80002fe <__aeabi_ldivmod+0x1e>
 80002f0:	bf08      	it	eq
 80002f2:	2800      	cmpeq	r0, #0
 80002f4:	bf1c      	itt	ne
 80002f6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80002fa:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002fe:	f000 b9bf 	b.w	8000680 <__aeabi_idiv0>
 8000302:	f1ad 0c08 	sub.w	ip, sp, #8
 8000306:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030a:	2900      	cmp	r1, #0
 800030c:	db09      	blt.n	8000322 <__aeabi_ldivmod+0x42>
 800030e:	2b00      	cmp	r3, #0
 8000310:	db1a      	blt.n	8000348 <__aeabi_ldivmod+0x68>
 8000312:	f000 f84d 	bl	80003b0 <__udivmoddi4>
 8000316:	f8dd e004 	ldr.w	lr, [sp, #4]
 800031a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031e:	b004      	add	sp, #16
 8000320:	4770      	bx	lr
 8000322:	4240      	negs	r0, r0
 8000324:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000328:	2b00      	cmp	r3, #0
 800032a:	db1b      	blt.n	8000364 <__aeabi_ldivmod+0x84>
 800032c:	f000 f840 	bl	80003b0 <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4240      	negs	r0, r0
 800033c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000340:	4252      	negs	r2, r2
 8000342:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000346:	4770      	bx	lr
 8000348:	4252      	negs	r2, r2
 800034a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800034e:	f000 f82f 	bl	80003b0 <__udivmoddi4>
 8000352:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000356:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800035a:	b004      	add	sp, #16
 800035c:	4240      	negs	r0, r0
 800035e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000362:	4770      	bx	lr
 8000364:	4252      	negs	r2, r2
 8000366:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800036a:	f000 f821 	bl	80003b0 <__udivmoddi4>
 800036e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000372:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000376:	b004      	add	sp, #16
 8000378:	4252      	negs	r2, r2
 800037a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037e:	4770      	bx	lr

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000390:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b08a      	sub	sp, #40	; 0x28
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800068c:	2300      	movs	r3, #0
 800068e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000690:	f005 fe1a 	bl	80062c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000694:	4b58      	ldr	r3, [pc, #352]	; (80007f8 <pvPortMallocMicroROS+0x174>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d101      	bne.n	80006a0 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 800069c:	f000 f980 	bl	80009a0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80006a0:	4b56      	ldr	r3, [pc, #344]	; (80007fc <pvPortMallocMicroROS+0x178>)
 80006a2:	681a      	ldr	r2, [r3, #0]
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	4013      	ands	r3, r2
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	f040 808e 	bne.w	80007ca <pvPortMallocMicroROS+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d01d      	beq.n	80006f0 <pvPortMallocMicroROS+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80006b4:	2208      	movs	r2, #8
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	4413      	add	r3, r2
 80006ba:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	f003 0307 	and.w	r3, r3, #7
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d014      	beq.n	80006f0 <pvPortMallocMicroROS+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	f023 0307 	bic.w	r3, r3, #7
 80006cc:	3308      	adds	r3, #8
 80006ce:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	f003 0307 	and.w	r3, r3, #7
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d00a      	beq.n	80006f0 <pvPortMallocMicroROS+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80006da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006de:	f383 8811 	msr	BASEPRI, r3
 80006e2:	f3bf 8f6f 	isb	sy
 80006e6:	f3bf 8f4f 	dsb	sy
 80006ea:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80006ec:	bf00      	nop
 80006ee:	e7fe      	b.n	80006ee <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d069      	beq.n	80007ca <pvPortMallocMicroROS+0x146>
 80006f6:	4b42      	ldr	r3, [pc, #264]	; (8000800 <pvPortMallocMicroROS+0x17c>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	687a      	ldr	r2, [r7, #4]
 80006fc:	429a      	cmp	r2, r3
 80006fe:	d864      	bhi.n	80007ca <pvPortMallocMicroROS+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8000700:	4b40      	ldr	r3, [pc, #256]	; (8000804 <pvPortMallocMicroROS+0x180>)
 8000702:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8000704:	4b3f      	ldr	r3, [pc, #252]	; (8000804 <pvPortMallocMicroROS+0x180>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800070a:	e004      	b.n	8000716 <pvPortMallocMicroROS+0x92>
				{
					pxPreviousBlock = pxBlock;
 800070c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800070e:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8000710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000718:	685b      	ldr	r3, [r3, #4]
 800071a:	687a      	ldr	r2, [r7, #4]
 800071c:	429a      	cmp	r2, r3
 800071e:	d903      	bls.n	8000728 <pvPortMallocMicroROS+0xa4>
 8000720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d1f1      	bne.n	800070c <pvPortMallocMicroROS+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000728:	4b33      	ldr	r3, [pc, #204]	; (80007f8 <pvPortMallocMicroROS+0x174>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800072e:	429a      	cmp	r2, r3
 8000730:	d04b      	beq.n	80007ca <pvPortMallocMicroROS+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000732:	6a3b      	ldr	r3, [r7, #32]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	2208      	movs	r2, #8
 8000738:	4413      	add	r3, r2
 800073a:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800073c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800073e:	681a      	ldr	r2, [r3, #0]
 8000740:	6a3b      	ldr	r3, [r7, #32]
 8000742:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000746:	685a      	ldr	r2, [r3, #4]
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	1ad2      	subs	r2, r2, r3
 800074c:	2308      	movs	r3, #8
 800074e:	005b      	lsls	r3, r3, #1
 8000750:	429a      	cmp	r2, r3
 8000752:	d91f      	bls.n	8000794 <pvPortMallocMicroROS+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000754:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	4413      	add	r3, r2
 800075a:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800075c:	69bb      	ldr	r3, [r7, #24]
 800075e:	f003 0307 	and.w	r3, r3, #7
 8000762:	2b00      	cmp	r3, #0
 8000764:	d00a      	beq.n	800077c <pvPortMallocMicroROS+0xf8>
	__asm volatile
 8000766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800076a:	f383 8811 	msr	BASEPRI, r3
 800076e:	f3bf 8f6f 	isb	sy
 8000772:	f3bf 8f4f 	dsb	sy
 8000776:	613b      	str	r3, [r7, #16]
}
 8000778:	bf00      	nop
 800077a:	e7fe      	b.n	800077a <pvPortMallocMicroROS+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800077c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800077e:	685a      	ldr	r2, [r3, #4]
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	1ad2      	subs	r2, r2, r3
 8000784:	69bb      	ldr	r3, [r7, #24]
 8000786:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800078a:	687a      	ldr	r2, [r7, #4]
 800078c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800078e:	69b8      	ldr	r0, [r7, #24]
 8000790:	f000 f968 	bl	8000a64 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000794:	4b1a      	ldr	r3, [pc, #104]	; (8000800 <pvPortMallocMicroROS+0x17c>)
 8000796:	681a      	ldr	r2, [r3, #0]
 8000798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800079a:	685b      	ldr	r3, [r3, #4]
 800079c:	1ad3      	subs	r3, r2, r3
 800079e:	4a18      	ldr	r2, [pc, #96]	; (8000800 <pvPortMallocMicroROS+0x17c>)
 80007a0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80007a2:	4b17      	ldr	r3, [pc, #92]	; (8000800 <pvPortMallocMicroROS+0x17c>)
 80007a4:	681a      	ldr	r2, [r3, #0]
 80007a6:	4b18      	ldr	r3, [pc, #96]	; (8000808 <pvPortMallocMicroROS+0x184>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	429a      	cmp	r2, r3
 80007ac:	d203      	bcs.n	80007b6 <pvPortMallocMicroROS+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80007ae:	4b14      	ldr	r3, [pc, #80]	; (8000800 <pvPortMallocMicroROS+0x17c>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	4a15      	ldr	r2, [pc, #84]	; (8000808 <pvPortMallocMicroROS+0x184>)
 80007b4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80007b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007b8:	685a      	ldr	r2, [r3, #4]
 80007ba:	4b10      	ldr	r3, [pc, #64]	; (80007fc <pvPortMallocMicroROS+0x178>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	431a      	orrs	r2, r3
 80007c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80007c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80007ca:	f005 fd8b 	bl	80062e4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80007ce:	69fb      	ldr	r3, [r7, #28]
 80007d0:	f003 0307 	and.w	r3, r3, #7
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d00a      	beq.n	80007ee <pvPortMallocMicroROS+0x16a>
	__asm volatile
 80007d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007dc:	f383 8811 	msr	BASEPRI, r3
 80007e0:	f3bf 8f6f 	isb	sy
 80007e4:	f3bf 8f4f 	dsb	sy
 80007e8:	60fb      	str	r3, [r7, #12]
}
 80007ea:	bf00      	nop
 80007ec:	e7fe      	b.n	80007ec <pvPortMallocMicroROS+0x168>
	return pvReturn;
 80007ee:	69fb      	ldr	r3, [r7, #28]
}
 80007f0:	4618      	mov	r0, r3
 80007f2:	3728      	adds	r7, #40	; 0x28
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	20003cf4 	.word	0x20003cf4
 80007fc:	20003d00 	.word	0x20003d00
 8000800:	20003cf8 	.word	0x20003cf8
 8000804:	20003cec 	.word	0x20003cec
 8000808:	20003cfc 	.word	0x20003cfc

0800080c <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b086      	sub	sp, #24
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	2b00      	cmp	r3, #0
 800081c:	d048      	beq.n	80008b0 <vPortFreeMicroROS+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800081e:	2308      	movs	r3, #8
 8000820:	425b      	negs	r3, r3
 8000822:	697a      	ldr	r2, [r7, #20]
 8000824:	4413      	add	r3, r2
 8000826:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8000828:	697b      	ldr	r3, [r7, #20]
 800082a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800082c:	693b      	ldr	r3, [r7, #16]
 800082e:	685a      	ldr	r2, [r3, #4]
 8000830:	4b21      	ldr	r3, [pc, #132]	; (80008b8 <vPortFreeMicroROS+0xac>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4013      	ands	r3, r2
 8000836:	2b00      	cmp	r3, #0
 8000838:	d10a      	bne.n	8000850 <vPortFreeMicroROS+0x44>
	__asm volatile
 800083a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800083e:	f383 8811 	msr	BASEPRI, r3
 8000842:	f3bf 8f6f 	isb	sy
 8000846:	f3bf 8f4f 	dsb	sy
 800084a:	60fb      	str	r3, [r7, #12]
}
 800084c:	bf00      	nop
 800084e:	e7fe      	b.n	800084e <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000850:	693b      	ldr	r3, [r7, #16]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d00a      	beq.n	800086e <vPortFreeMicroROS+0x62>
	__asm volatile
 8000858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800085c:	f383 8811 	msr	BASEPRI, r3
 8000860:	f3bf 8f6f 	isb	sy
 8000864:	f3bf 8f4f 	dsb	sy
 8000868:	60bb      	str	r3, [r7, #8]
}
 800086a:	bf00      	nop
 800086c:	e7fe      	b.n	800086c <vPortFreeMicroROS+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800086e:	693b      	ldr	r3, [r7, #16]
 8000870:	685a      	ldr	r2, [r3, #4]
 8000872:	4b11      	ldr	r3, [pc, #68]	; (80008b8 <vPortFreeMicroROS+0xac>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	4013      	ands	r3, r2
 8000878:	2b00      	cmp	r3, #0
 800087a:	d019      	beq.n	80008b0 <vPortFreeMicroROS+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800087c:	693b      	ldr	r3, [r7, #16]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d115      	bne.n	80008b0 <vPortFreeMicroROS+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8000884:	693b      	ldr	r3, [r7, #16]
 8000886:	685a      	ldr	r2, [r3, #4]
 8000888:	4b0b      	ldr	r3, [pc, #44]	; (80008b8 <vPortFreeMicroROS+0xac>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	43db      	mvns	r3, r3
 800088e:	401a      	ands	r2, r3
 8000890:	693b      	ldr	r3, [r7, #16]
 8000892:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8000894:	f005 fd18 	bl	80062c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000898:	693b      	ldr	r3, [r7, #16]
 800089a:	685a      	ldr	r2, [r3, #4]
 800089c:	4b07      	ldr	r3, [pc, #28]	; (80008bc <vPortFreeMicroROS+0xb0>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4413      	add	r3, r2
 80008a2:	4a06      	ldr	r2, [pc, #24]	; (80008bc <vPortFreeMicroROS+0xb0>)
 80008a4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80008a6:	6938      	ldr	r0, [r7, #16]
 80008a8:	f000 f8dc 	bl	8000a64 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80008ac:	f005 fd1a 	bl	80062e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80008b0:	bf00      	nop
 80008b2:	3718      	adds	r7, #24
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	20003d00 	.word	0x20003d00
 80008bc:	20003cf8 	.word	0x20003cf8

080008c0 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 80008c0:	b480      	push	{r7}
 80008c2:	b087      	sub	sp, #28
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 80008cc:	2308      	movs	r3, #8
 80008ce:	425b      	negs	r3, r3
 80008d0:	697a      	ldr	r2, [r7, #20]
 80008d2:	4413      	add	r3, r2
 80008d4:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 80008d6:	697b      	ldr	r3, [r7, #20]
 80008d8:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 80008da:	693b      	ldr	r3, [r7, #16]
 80008dc:	685a      	ldr	r2, [r3, #4]
 80008de:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <getBlockSize+0x38>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	43db      	mvns	r3, r3
 80008e4:	4013      	ands	r3, r2
 80008e6:	60fb      	str	r3, [r7, #12]

	return count;
 80008e8:	68fb      	ldr	r3, [r7, #12]
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	371c      	adds	r7, #28
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	20003d00 	.word	0x20003d00

080008fc <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b084      	sub	sp, #16
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
 8000904:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000906:	f005 fcdf 	bl	80062c8 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 800090a:	6838      	ldr	r0, [r7, #0]
 800090c:	f7ff feba 	bl	8000684 <pvPortMallocMicroROS>
 8000910:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8000912:	68bb      	ldr	r3, [r7, #8]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d017      	beq.n	8000948 <pvPortReallocMicroROS+0x4c>
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d014      	beq.n	8000948 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 800091e:	6878      	ldr	r0, [r7, #4]
 8000920:	f7ff ffce 	bl	80008c0 <getBlockSize>
 8000924:	4603      	mov	r3, r0
 8000926:	2208      	movs	r2, #8
 8000928:	1a9b      	subs	r3, r3, r2
 800092a:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 800092c:	683a      	ldr	r2, [r7, #0]
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	429a      	cmp	r2, r3
 8000932:	d201      	bcs.n	8000938 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8000938:	68fa      	ldr	r2, [r7, #12]
 800093a:	6879      	ldr	r1, [r7, #4]
 800093c:	68b8      	ldr	r0, [r7, #8]
 800093e:	f00f ff03 	bl	8010748 <memcpy>

		vPortFreeMicroROS(pv);
 8000942:	6878      	ldr	r0, [r7, #4]
 8000944:	f7ff ff62 	bl	800080c <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8000948:	f005 fccc 	bl	80062e4 <xTaskResumeAll>

	return newmem;
 800094c:	68bb      	ldr	r3, [r7, #8]
}
 800094e:	4618      	mov	r0, r3
 8000950:	3710      	adds	r7, #16
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}

08000956 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8000956:	b580      	push	{r7, lr}
 8000958:	b086      	sub	sp, #24
 800095a:	af00      	add	r7, sp, #0
 800095c:	6078      	str	r0, [r7, #4]
 800095e:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000960:	f005 fcb2 	bl	80062c8 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	687a      	ldr	r2, [r7, #4]
 8000968:	fb02 f303 	mul.w	r3, r2, r3
 800096c:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 800096e:	6978      	ldr	r0, [r7, #20]
 8000970:	f7ff fe88 	bl	8000684 <pvPortMallocMicroROS>
 8000974:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	613b      	str	r3, [r7, #16]

  	while(count--)
 800097a:	e004      	b.n	8000986 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 800097c:	693b      	ldr	r3, [r7, #16]
 800097e:	1c5a      	adds	r2, r3, #1
 8000980:	613a      	str	r2, [r7, #16]
 8000982:	2200      	movs	r2, #0
 8000984:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8000986:	697b      	ldr	r3, [r7, #20]
 8000988:	1e5a      	subs	r2, r3, #1
 800098a:	617a      	str	r2, [r7, #20]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d1f5      	bne.n	800097c <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8000990:	f005 fca8 	bl	80062e4 <xTaskResumeAll>
  	return mem;
 8000994:	68fb      	ldr	r3, [r7, #12]
}
 8000996:	4618      	mov	r0, r3
 8000998:	3718      	adds	r7, #24
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
	...

080009a0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80009a0:	b480      	push	{r7}
 80009a2:	b085      	sub	sp, #20
 80009a4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80009a6:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80009aa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80009ac:	4b27      	ldr	r3, [pc, #156]	; (8000a4c <prvHeapInit+0xac>)
 80009ae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	f003 0307 	and.w	r3, r3, #7
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d00c      	beq.n	80009d4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	3307      	adds	r3, #7
 80009be:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	f023 0307 	bic.w	r3, r3, #7
 80009c6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80009c8:	68ba      	ldr	r2, [r7, #8]
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	1ad3      	subs	r3, r2, r3
 80009ce:	4a1f      	ldr	r2, [pc, #124]	; (8000a4c <prvHeapInit+0xac>)
 80009d0:	4413      	add	r3, r2
 80009d2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80009d8:	4a1d      	ldr	r2, [pc, #116]	; (8000a50 <prvHeapInit+0xb0>)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80009de:	4b1c      	ldr	r3, [pc, #112]	; (8000a50 <prvHeapInit+0xb0>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	68ba      	ldr	r2, [r7, #8]
 80009e8:	4413      	add	r3, r2
 80009ea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80009ec:	2208      	movs	r2, #8
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	1a9b      	subs	r3, r3, r2
 80009f2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	f023 0307 	bic.w	r3, r3, #7
 80009fa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	4a15      	ldr	r2, [pc, #84]	; (8000a54 <prvHeapInit+0xb4>)
 8000a00:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8000a02:	4b14      	ldr	r3, [pc, #80]	; (8000a54 <prvHeapInit+0xb4>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	2200      	movs	r2, #0
 8000a08:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000a0a:	4b12      	ldr	r3, [pc, #72]	; (8000a54 <prvHeapInit+0xb4>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	2200      	movs	r2, #0
 8000a10:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	68fa      	ldr	r2, [r7, #12]
 8000a1a:	1ad2      	subs	r2, r2, r3
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000a20:	4b0c      	ldr	r3, [pc, #48]	; (8000a54 <prvHeapInit+0xb4>)
 8000a22:	681a      	ldr	r2, [r3, #0]
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	4a0a      	ldr	r2, [pc, #40]	; (8000a58 <prvHeapInit+0xb8>)
 8000a2e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	685b      	ldr	r3, [r3, #4]
 8000a34:	4a09      	ldr	r2, [pc, #36]	; (8000a5c <prvHeapInit+0xbc>)
 8000a36:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000a38:	4b09      	ldr	r3, [pc, #36]	; (8000a60 <prvHeapInit+0xc0>)
 8000a3a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000a3e:	601a      	str	r2, [r3, #0]
}
 8000a40:	bf00      	nop
 8000a42:	3714      	adds	r7, #20
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr
 8000a4c:	200000ec 	.word	0x200000ec
 8000a50:	20003cec 	.word	0x20003cec
 8000a54:	20003cf4 	.word	0x20003cf4
 8000a58:	20003cfc 	.word	0x20003cfc
 8000a5c:	20003cf8 	.word	0x20003cf8
 8000a60:	20003d00 	.word	0x20003d00

08000a64 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000a64:	b480      	push	{r7}
 8000a66:	b085      	sub	sp, #20
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000a6c:	4b28      	ldr	r3, [pc, #160]	; (8000b10 <prvInsertBlockIntoFreeList+0xac>)
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	e002      	b.n	8000a78 <prvInsertBlockIntoFreeList+0x14>
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	60fb      	str	r3, [r7, #12]
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	687a      	ldr	r2, [r7, #4]
 8000a7e:	429a      	cmp	r2, r3
 8000a80:	d8f7      	bhi.n	8000a72 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	685b      	ldr	r3, [r3, #4]
 8000a8a:	68ba      	ldr	r2, [r7, #8]
 8000a8c:	4413      	add	r3, r2
 8000a8e:	687a      	ldr	r2, [r7, #4]
 8000a90:	429a      	cmp	r2, r3
 8000a92:	d108      	bne.n	8000aa6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	685a      	ldr	r2, [r3, #4]
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	685b      	ldr	r3, [r3, #4]
 8000a9c:	441a      	add	r2, r3
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	685b      	ldr	r3, [r3, #4]
 8000aae:	68ba      	ldr	r2, [r7, #8]
 8000ab0:	441a      	add	r2, r3
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	429a      	cmp	r2, r3
 8000ab8:	d118      	bne.n	8000aec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	681a      	ldr	r2, [r3, #0]
 8000abe:	4b15      	ldr	r3, [pc, #84]	; (8000b14 <prvInsertBlockIntoFreeList+0xb0>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	429a      	cmp	r2, r3
 8000ac4:	d00d      	beq.n	8000ae2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	685a      	ldr	r2, [r3, #4]
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	441a      	add	r2, r3
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	681a      	ldr	r2, [r3, #0]
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	e008      	b.n	8000af4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000ae2:	4b0c      	ldr	r3, [pc, #48]	; (8000b14 <prvInsertBlockIntoFreeList+0xb0>)
 8000ae4:	681a      	ldr	r2, [r3, #0]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	601a      	str	r2, [r3, #0]
 8000aea:	e003      	b.n	8000af4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000af4:	68fa      	ldr	r2, [r7, #12]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	429a      	cmp	r2, r3
 8000afa:	d002      	beq.n	8000b02 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	687a      	ldr	r2, [r7, #4]
 8000b00:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000b02:	bf00      	nop
 8000b04:	3714      	adds	r7, #20
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	20003cec 	.word	0x20003cec
 8000b14:	20003cf4 	.word	0x20003cf4

08000b18 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	607b      	str	r3, [r7, #4]
 8000b22:	4b10      	ldr	r3, [pc, #64]	; (8000b64 <MX_DMA_Init+0x4c>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	4a0f      	ldr	r2, [pc, #60]	; (8000b64 <MX_DMA_Init+0x4c>)
 8000b28:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2e:	4b0d      	ldr	r3, [pc, #52]	; (8000b64 <MX_DMA_Init+0x4c>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b36:	607b      	str	r3, [r7, #4]
 8000b38:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	2105      	movs	r1, #5
 8000b3e:	2010      	movs	r0, #16
 8000b40:	f000 ffde 	bl	8001b00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000b44:	2010      	movs	r0, #16
 8000b46:	f000 fff7 	bl	8001b38 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	2105      	movs	r1, #5
 8000b4e:	2011      	movs	r0, #17
 8000b50:	f000 ffd6 	bl	8001b00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000b54:	2011      	movs	r0, #17
 8000b56:	f000 ffef 	bl	8001b38 <HAL_NVIC_EnableIRQ>

}
 8000b5a:	bf00      	nop
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40023800 	.word	0x40023800

08000b68 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000b6c:	4a04      	ldr	r2, [pc, #16]	; (8000b80 <MX_FREERTOS_Init+0x18>)
 8000b6e:	2100      	movs	r1, #0
 8000b70:	4804      	ldr	r0, [pc, #16]	; (8000b84 <MX_FREERTOS_Init+0x1c>)
 8000b72:	f004 faeb 	bl	800514c <osThreadNew>
 8000b76:	4603      	mov	r3, r0
 8000b78:	4a03      	ldr	r2, [pc, #12]	; (8000b88 <MX_FREERTOS_Init+0x20>)
 8000b7a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000b7c:	bf00      	nop
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	08011f10 	.word	0x08011f10
 8000b84:	08000b8d 	.word	0x08000b8d
 8000b88:	20003d08 	.word	0x20003d08

08000b8c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000b8c:	b5b0      	push	{r4, r5, r7, lr}
 8000b8e:	b0a8      	sub	sp, #160	; 0xa0
 8000b90:	af02      	add	r7, sp, #8
 8000b92:	61f8      	str	r0, [r7, #28]
  /* USER CODE BEGIN StartDefaultTask */
    /* Infinite loop */
    // micro-ROS configuration

    rmw_uros_set_custom_transport(
 8000b94:	4b39      	ldr	r3, [pc, #228]	; (8000c7c <StartDefaultTask+0xf0>)
 8000b96:	9301      	str	r3, [sp, #4]
 8000b98:	4b39      	ldr	r3, [pc, #228]	; (8000c80 <StartDefaultTask+0xf4>)
 8000b9a:	9300      	str	r3, [sp, #0]
 8000b9c:	4b39      	ldr	r3, [pc, #228]	; (8000c84 <StartDefaultTask+0xf8>)
 8000b9e:	4a3a      	ldr	r2, [pc, #232]	; (8000c88 <StartDefaultTask+0xfc>)
 8000ba0:	493a      	ldr	r1, [pc, #232]	; (8000c8c <StartDefaultTask+0x100>)
 8000ba2:	2001      	movs	r0, #1
 8000ba4:	f007 fc3a 	bl	800841c <rmw_uros_set_custom_transport>
      cubemx_transport_open,
      cubemx_transport_close,
      cubemx_transport_write,
      cubemx_transport_read);

    rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8000ba8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000bac:	4618      	mov	r0, r3
 8000bae:	f007 fa05 	bl	8007fbc <rcutils_get_zero_initialized_allocator>
    freeRTOS_allocator.allocate = microros_allocate;
 8000bb2:	4b37      	ldr	r3, [pc, #220]	; (8000c90 <StartDefaultTask+0x104>)
 8000bb4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    freeRTOS_allocator.deallocate = microros_deallocate;
 8000bb8:	4b36      	ldr	r3, [pc, #216]	; (8000c94 <StartDefaultTask+0x108>)
 8000bba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    freeRTOS_allocator.reallocate = microros_reallocate;
 8000bbe:	4b36      	ldr	r3, [pc, #216]	; (8000c98 <StartDefaultTask+0x10c>)
 8000bc0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8000bc4:	4b35      	ldr	r3, [pc, #212]	; (8000c9c <StartDefaultTask+0x110>)
 8000bc6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

    if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8000bca:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f007 fa02 	bl	8007fd8 <rcutils_set_default_allocator>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	f083 0301 	eor.w	r3, r3, #1
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d003      	beq.n	8000be8 <StartDefaultTask+0x5c>
        printf("Error on default allocators (line %d)\n", __LINE__);
 8000be0:	21a5      	movs	r1, #165	; 0xa5
 8000be2:	482f      	ldr	r0, [pc, #188]	; (8000ca0 <StartDefaultTask+0x114>)
 8000be4:	f00f febc 	bl	8010960 <iprintf>
    rclc_support_t support;
    rcl_allocator_t allocator;
    rcl_node_t node;
//    rcl_node_t node1;

    allocator = rcl_get_default_allocator();
 8000be8:	463b      	mov	r3, r7
 8000bea:	4618      	mov	r0, r3
 8000bec:	f007 fa14 	bl	8008018 <rcutils_get_default_allocator>
 8000bf0:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8000bf4:	463d      	mov	r5, r7
 8000bf6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bf8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bfa:	682b      	ldr	r3, [r5, #0]
 8000bfc:	6023      	str	r3, [r4, #0]

    //create init_options
    rclc_support_init(&support, 0, NULL, &allocator);
 8000bfe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c02:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8000c06:	2200      	movs	r2, #0
 8000c08:	2100      	movs	r1, #0
 8000c0a:	f007 f911 	bl	8007e30 <rclc_support_init>

    // create node
    rclc_node_init_default(&node, "cubemx_node", "", &support);
 8000c0e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c12:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8000c16:	4a23      	ldr	r2, [pc, #140]	; (8000ca4 <StartDefaultTask+0x118>)
 8000c18:	4923      	ldr	r1, [pc, #140]	; (8000ca8 <StartDefaultTask+0x11c>)
 8000c1a:	f007 f957 	bl	8007ecc <rclc_node_init_default>
//    rclc_node_init_default(&node1, "cubemx_node_sub", "", &support);


    // create publisher
	rclc_publisher_init_default(&publisher, &node,
 8000c1e:	f008 f841 	bl	8008ca4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8000c22:	4602      	mov	r2, r0
 8000c24:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000c28:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 8000c2c:	4b1f      	ldr	r3, [pc, #124]	; (8000cac <StartDefaultTask+0x120>)
 8000c2e:	f007 f989 	bl	8007f44 <rclc_publisher_init_default>
			"cubemx_publisher");

//    rcl_ret_t ret1 = rclc_subscription_init_default(&subscripber, &node1,
//			ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
//			"cubemx_publisher");
    msg.data = 0;
 8000c32:	2300      	movs	r3, #0
 8000c34:	67bb      	str	r3, [r7, #120]	; 0x78

    for(;;)
    {


      rcl_ret_t ret = rcl_publish(&publisher, &msg, NULL);
 8000c36:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8000c3a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000c3e:	2200      	movs	r2, #0
 8000c40:	4618      	mov	r0, r3
 8000c42:	f007 f8d1 	bl	8007de8 <rcl_publish>
 8000c46:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
      if (ret != RCL_RET_OK)
 8000c4a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d003      	beq.n	8000c5a <StartDefaultTask+0xce>
      {
        printf("Error publishing (line %d)\n", __LINE__);
 8000c52:	21cd      	movs	r1, #205	; 0xcd
 8000c54:	4816      	ldr	r0, [pc, #88]	; (8000cb0 <StartDefaultTask+0x124>)
 8000c56:	f00f fe83 	bl	8010960 <iprintf>
//  			"cubemx_subscripber");
//      if( RCL_RET_OK != ret1){
////    	  return -1;
//    	    printf("Error publishing (line %d)\n", __LINE__);
//      }
      counter = HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8000c5a:	213c      	movs	r1, #60	; 0x3c
 8000c5c:	4815      	ldr	r0, [pc, #84]	; (8000cb4 <StartDefaultTask+0x128>)
 8000c5e:	f002 fc63 	bl	8003528 <HAL_TIM_Encoder_Start>
 8000c62:	4603      	mov	r3, r0
 8000c64:	461a      	mov	r2, r3
 8000c66:	4b14      	ldr	r3, [pc, #80]	; (8000cb8 <StartDefaultTask+0x12c>)
 8000c68:	601a      	str	r2, [r3, #0]

      msg.data = HAL_GetTick();
 8000c6a:	f000 fe85 	bl	8001978 <HAL_GetTick>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	67bb      	str	r3, [r7, #120]	; 0x78
      osDelay(10);
 8000c72:	200a      	movs	r0, #10
 8000c74:	f004 fafc 	bl	8005270 <osDelay>
    {
 8000c78:	e7dd      	b.n	8000c36 <StartDefaultTask+0xaa>
 8000c7a:	bf00      	nop
 8000c7c:	08001811 	.word	0x08001811
 8000c80:	080017a9 	.word	0x080017a9
 8000c84:	08001789 	.word	0x08001789
 8000c88:	0800175d 	.word	0x0800175d
 8000c8c:	20006ce8 	.word	0x20006ce8
 8000c90:	08000e31 	.word	0x08000e31
 8000c94:	08000e75 	.word	0x08000e75
 8000c98:	08000ead 	.word	0x08000ead
 8000c9c:	08000f19 	.word	0x08000f19
 8000ca0:	08011e84 	.word	0x08011e84
 8000ca4:	08011eac 	.word	0x08011eac
 8000ca8:	08011eb0 	.word	0x08011eb0
 8000cac:	08011ebc 	.word	0x08011ebc
 8000cb0:	08011ed0 	.word	0x08011ed0
 8000cb4:	20006ca0 	.word	0x20006ca0
 8000cb8:	20003d04 	.word	0x20003d04

08000cbc <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	607b      	str	r3, [r7, #4]
 8000cc6:	4b09      	ldr	r3, [pc, #36]	; (8000cec <MX_GPIO_Init+0x30>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	4a08      	ldr	r2, [pc, #32]	; (8000cec <MX_GPIO_Init+0x30>)
 8000ccc:	f043 0301 	orr.w	r3, r3, #1
 8000cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd2:	4b06      	ldr	r3, [pc, #24]	; (8000cec <MX_GPIO_Init+0x30>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	f003 0301 	and.w	r3, r3, #1
 8000cda:	607b      	str	r3, [r7, #4]
 8000cdc:	687b      	ldr	r3, [r7, #4]

}
 8000cde:	bf00      	nop
 8000ce0:	370c      	adds	r7, #12
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	40023800 	.word	0x40023800

08000cf0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cf4:	f000 fe0a 	bl	800190c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cf8:	f000 f810 	bl	8000d1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cfc:	f7ff ffde 	bl	8000cbc <MX_GPIO_Init>
  MX_DMA_Init();
 8000d00:	f7ff ff0a 	bl	8000b18 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000d04:	f000 fc48 	bl	8001598 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000d08:	f000 fbac 	bl	8001464 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000d0c:	f004 f9d4 	bl	80050b8 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000d10:	f7ff ff2a 	bl	8000b68 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000d14:	f004 f9f4 	bl	8005100 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d18:	e7fe      	b.n	8000d18 <main+0x28>
	...

08000d1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b094      	sub	sp, #80	; 0x50
 8000d20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d22:	f107 031c 	add.w	r3, r7, #28
 8000d26:	2234      	movs	r2, #52	; 0x34
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f00f fd1a 	bl	8010764 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d30:	f107 0308 	add.w	r3, r7, #8
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	60da      	str	r2, [r3, #12]
 8000d3e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d40:	2300      	movs	r3, #0
 8000d42:	607b      	str	r3, [r7, #4]
 8000d44:	4b2c      	ldr	r3, [pc, #176]	; (8000df8 <SystemClock_Config+0xdc>)
 8000d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d48:	4a2b      	ldr	r2, [pc, #172]	; (8000df8 <SystemClock_Config+0xdc>)
 8000d4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d4e:	6413      	str	r3, [r2, #64]	; 0x40
 8000d50:	4b29      	ldr	r3, [pc, #164]	; (8000df8 <SystemClock_Config+0xdc>)
 8000d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d58:	607b      	str	r3, [r7, #4]
 8000d5a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	603b      	str	r3, [r7, #0]
 8000d60:	4b26      	ldr	r3, [pc, #152]	; (8000dfc <SystemClock_Config+0xe0>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a25      	ldr	r2, [pc, #148]	; (8000dfc <SystemClock_Config+0xe0>)
 8000d66:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d6a:	6013      	str	r3, [r2, #0]
 8000d6c:	4b23      	ldr	r3, [pc, #140]	; (8000dfc <SystemClock_Config+0xe0>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d74:	603b      	str	r3, [r7, #0]
 8000d76:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d78:	2302      	movs	r3, #2
 8000d7a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d80:	2310      	movs	r3, #16
 8000d82:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d84:	2302      	movs	r3, #2
 8000d86:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000d8c:	2308      	movs	r3, #8
 8000d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000d90:	23b4      	movs	r3, #180	; 0xb4
 8000d92:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d94:	2302      	movs	r3, #2
 8000d96:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000da0:	f107 031c 	add.w	r3, r7, #28
 8000da4:	4618      	mov	r0, r3
 8000da6:	f001 ffb1 	bl	8002d0c <HAL_RCC_OscConfig>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000db0:	f000 f838 	bl	8000e24 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000db4:	f001 fc64 	bl	8002680 <HAL_PWREx_EnableOverDrive>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000dbe:	f000 f831 	bl	8000e24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dc2:	230f      	movs	r3, #15
 8000dc4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000dce:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000dd2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000dd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dd8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000dda:	f107 0308 	add.w	r3, r7, #8
 8000dde:	2105      	movs	r1, #5
 8000de0:	4618      	mov	r0, r3
 8000de2:	f001 fc9d 	bl	8002720 <HAL_RCC_ClockConfig>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000dec:	f000 f81a 	bl	8000e24 <Error_Handler>
  }
}
 8000df0:	bf00      	nop
 8000df2:	3750      	adds	r7, #80	; 0x50
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	40023800 	.word	0x40023800
 8000dfc:	40007000 	.word	0x40007000

08000e00 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a04      	ldr	r2, [pc, #16]	; (8000e20 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d101      	bne.n	8000e16 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e12:	f000 fd9d 	bl	8001950 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e16:	bf00      	nop
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40010000 	.word	0x40010000

08000e24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e28:	b672      	cpsid	i
}
 8000e2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e2c:	e7fe      	b.n	8000e2c <Error_Handler+0x8>
	...

08000e30 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8000e3a:	4b0c      	ldr	r3, [pc, #48]	; (8000e6c <microros_allocate+0x3c>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	461a      	mov	r2, r3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	4413      	add	r3, r2
 8000e44:	461a      	mov	r2, r3
 8000e46:	4b09      	ldr	r3, [pc, #36]	; (8000e6c <microros_allocate+0x3c>)
 8000e48:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8000e4a:	4b09      	ldr	r3, [pc, #36]	; (8000e70 <microros_allocate+0x40>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	461a      	mov	r2, r3
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	4413      	add	r3, r2
 8000e54:	461a      	mov	r2, r3
 8000e56:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <microros_allocate+0x40>)
 8000e58:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8000e5a:	6878      	ldr	r0, [r7, #4]
 8000e5c:	f7ff fc12 	bl	8000684 <pvPortMallocMicroROS>
 8000e60:	4603      	mov	r3, r0
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	20006c48 	.word	0x20006c48
 8000e70:	20006c4c 	.word	0x20006c4c

08000e74 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d00c      	beq.n	8000e9e <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8000e84:	6878      	ldr	r0, [r7, #4]
 8000e86:	f7ff fd1b 	bl	80008c0 <getBlockSize>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	4a06      	ldr	r2, [pc, #24]	; (8000ea8 <microros_deallocate+0x34>)
 8000e8e:	6812      	ldr	r2, [r2, #0]
 8000e90:	1ad3      	subs	r3, r2, r3
 8000e92:	461a      	mov	r2, r3
 8000e94:	4b04      	ldr	r3, [pc, #16]	; (8000ea8 <microros_deallocate+0x34>)
 8000e96:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8000e98:	6878      	ldr	r0, [r7, #4]
 8000e9a:	f7ff fcb7 	bl	800080c <vPortFreeMicroROS>
  }
}
 8000e9e:	bf00      	nop
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	20006c4c 	.word	0x20006c4c

08000eac <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	60f8      	str	r0, [r7, #12]
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8000eb8:	4b15      	ldr	r3, [pc, #84]	; (8000f10 <microros_reallocate+0x64>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	4413      	add	r3, r2
 8000ec2:	461a      	mov	r2, r3
 8000ec4:	4b12      	ldr	r3, [pc, #72]	; (8000f10 <microros_reallocate+0x64>)
 8000ec6:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8000ec8:	4b12      	ldr	r3, [pc, #72]	; (8000f14 <microros_reallocate+0x68>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	461a      	mov	r2, r3
 8000ece:	68bb      	ldr	r3, [r7, #8]
 8000ed0:	4413      	add	r3, r2
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	4b0f      	ldr	r3, [pc, #60]	; (8000f14 <microros_reallocate+0x68>)
 8000ed6:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d104      	bne.n	8000ee8 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8000ede:	68b8      	ldr	r0, [r7, #8]
 8000ee0:	f7ff fbd0 	bl	8000684 <pvPortMallocMicroROS>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	e00e      	b.n	8000f06 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8000ee8:	68f8      	ldr	r0, [r7, #12]
 8000eea:	f7ff fce9 	bl	80008c0 <getBlockSize>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	4a08      	ldr	r2, [pc, #32]	; (8000f14 <microros_reallocate+0x68>)
 8000ef2:	6812      	ldr	r2, [r2, #0]
 8000ef4:	1ad3      	subs	r3, r2, r3
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <microros_reallocate+0x68>)
 8000efa:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8000efc:	68b9      	ldr	r1, [r7, #8]
 8000efe:	68f8      	ldr	r0, [r7, #12]
 8000f00:	f7ff fcfc 	bl	80008fc <pvPortReallocMicroROS>
 8000f04:	4603      	mov	r3, r0
  }
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3710      	adds	r7, #16
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	20006c48 	.word	0x20006c48
 8000f14:	20006c4c 	.word	0x20006c4c

08000f18 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	60f8      	str	r0, [r7, #12]
 8000f20:	60b9      	str	r1, [r7, #8]
 8000f22:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	68ba      	ldr	r2, [r7, #8]
 8000f28:	fb02 f303 	mul.w	r3, r2, r3
 8000f2c:	4a0c      	ldr	r2, [pc, #48]	; (8000f60 <microros_zero_allocate+0x48>)
 8000f2e:	6812      	ldr	r2, [r2, #0]
 8000f30:	4413      	add	r3, r2
 8000f32:	461a      	mov	r2, r3
 8000f34:	4b0a      	ldr	r3, [pc, #40]	; (8000f60 <microros_zero_allocate+0x48>)
 8000f36:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	68ba      	ldr	r2, [r7, #8]
 8000f3c:	fb02 f303 	mul.w	r3, r2, r3
 8000f40:	4a08      	ldr	r2, [pc, #32]	; (8000f64 <microros_zero_allocate+0x4c>)
 8000f42:	6812      	ldr	r2, [r2, #0]
 8000f44:	4413      	add	r3, r2
 8000f46:	461a      	mov	r2, r3
 8000f48:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <microros_zero_allocate+0x4c>)
 8000f4a:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8000f4c:	68b9      	ldr	r1, [r7, #8]
 8000f4e:	68f8      	ldr	r0, [r7, #12]
 8000f50:	f7ff fd01 	bl	8000956 <pvPortCallocMicroROS>
 8000f54:	4603      	mov	r3, r0
 8000f56:	4618      	mov	r0, r3
 8000f58:	3710      	adds	r7, #16
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	20006c48 	.word	0x20006c48
 8000f64:	20006c4c 	.word	0x20006c4c

08000f68 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8000f68:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000f6c:	b086      	sub	sp, #24
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8000f74:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8000f76:	2300      	movs	r3, #0
 8000f78:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8000f7a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000f7e:	a320      	add	r3, pc, #128	; (adr r3, 8001000 <UTILS_NanosecondsToTimespec+0x98>)
 8000f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f84:	f7ff f9ac 	bl	80002e0 <__aeabi_ldivmod>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	460b      	mov	r3, r1
 8000f8c:	6879      	ldr	r1, [r7, #4]
 8000f8e:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8000f92:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000f96:	a31a      	add	r3, pc, #104	; (adr r3, 8001000 <UTILS_NanosecondsToTimespec+0x98>)
 8000f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f9c:	f7ff f9a0 	bl	80002e0 <__aeabi_ldivmod>
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	689b      	ldr	r3, [r3, #8]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	da20      	bge.n	8000fee <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	4a11      	ldr	r2, [pc, #68]	; (8000ff8 <UTILS_NanosecondsToTimespec+0x90>)
 8000fb2:	fb82 1203 	smull	r1, r2, r2, r3
 8000fb6:	1712      	asrs	r2, r2, #28
 8000fb8:	17db      	asrs	r3, r3, #31
 8000fba:	1ad3      	subs	r3, r2, r3
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fc6:	6979      	ldr	r1, [r7, #20]
 8000fc8:	17c8      	asrs	r0, r1, #31
 8000fca:	460c      	mov	r4, r1
 8000fcc:	4605      	mov	r5, r0
 8000fce:	ebb2 0804 	subs.w	r8, r2, r4
 8000fd2:	eb63 0905 	sbc.w	r9, r3, r5
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	689a      	ldr	r2, [r3, #8]
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	4906      	ldr	r1, [pc, #24]	; (8000ffc <UTILS_NanosecondsToTimespec+0x94>)
 8000fe4:	fb01 f303 	mul.w	r3, r1, r3
 8000fe8:	441a      	add	r2, r3
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	609a      	str	r2, [r3, #8]
    }
}
 8000fee:	bf00      	nop
 8000ff0:	3718      	adds	r7, #24
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000ff8:	44b82fa1 	.word	0x44b82fa1
 8000ffc:	3b9aca00 	.word	0x3b9aca00
 8001000:	3b9aca00 	.word	0x3b9aca00
 8001004:	00000000 	.word	0x00000000

08001008 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8001008:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800100c:	b08e      	sub	sp, #56	; 0x38
 800100e:	af00      	add	r7, sp, #0
 8001010:	6278      	str	r0, [r7, #36]	; 0x24
 8001012:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8001014:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001018:	2300      	movs	r3, #0
 800101a:	6013      	str	r3, [r2, #0]
 800101c:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 800101e:	f04f 0200 	mov.w	r2, #0
 8001022:	f04f 0300 	mov.w	r3, #0
 8001026:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 800102a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800102e:	4618      	mov	r0, r3
 8001030:	f005 fbd2 	bl	80067d8 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8001034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001036:	17da      	asrs	r2, r3, #31
 8001038:	61bb      	str	r3, [r7, #24]
 800103a:	61fa      	str	r2, [r7, #28]
 800103c:	f04f 0200 	mov.w	r2, #0
 8001040:	f04f 0300 	mov.w	r3, #0
 8001044:	69b9      	ldr	r1, [r7, #24]
 8001046:	000b      	movs	r3, r1
 8001048:	2200      	movs	r2, #0
 800104a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 800104e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001050:	2200      	movs	r2, #0
 8001052:	461c      	mov	r4, r3
 8001054:	4615      	mov	r5, r2
 8001056:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800105a:	1911      	adds	r1, r2, r4
 800105c:	60b9      	str	r1, [r7, #8]
 800105e:	416b      	adcs	r3, r5
 8001060:	60fb      	str	r3, [r7, #12]
 8001062:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001066:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 800106a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800106e:	4602      	mov	r2, r0
 8001070:	460b      	mov	r3, r1
 8001072:	f04f 0400 	mov.w	r4, #0
 8001076:	f04f 0500 	mov.w	r5, #0
 800107a:	015d      	lsls	r5, r3, #5
 800107c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001080:	0154      	lsls	r4, r2, #5
 8001082:	4622      	mov	r2, r4
 8001084:	462b      	mov	r3, r5
 8001086:	ebb2 0800 	subs.w	r8, r2, r0
 800108a:	eb63 0901 	sbc.w	r9, r3, r1
 800108e:	f04f 0200 	mov.w	r2, #0
 8001092:	f04f 0300 	mov.w	r3, #0
 8001096:	ea4f 2349 	mov.w	r3, r9, lsl #9
 800109a:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 800109e:	ea4f 2248 	mov.w	r2, r8, lsl #9
 80010a2:	4690      	mov	r8, r2
 80010a4:	4699      	mov	r9, r3
 80010a6:	eb18 0a00 	adds.w	sl, r8, r0
 80010aa:	eb49 0b01 	adc.w	fp, r9, r1
 80010ae:	f04f 0200 	mov.w	r2, #0
 80010b2:	f04f 0300 	mov.w	r3, #0
 80010b6:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80010ba:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80010be:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80010c2:	ebb2 040a 	subs.w	r4, r2, sl
 80010c6:	603c      	str	r4, [r7, #0]
 80010c8:	eb63 030b 	sbc.w	r3, r3, fp
 80010cc:	607b      	str	r3, [r7, #4]
 80010ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80010d2:	4623      	mov	r3, r4
 80010d4:	181b      	adds	r3, r3, r0
 80010d6:	613b      	str	r3, [r7, #16]
 80010d8:	462b      	mov	r3, r5
 80010da:	eb41 0303 	adc.w	r3, r1, r3
 80010de:	617b      	str	r3, [r7, #20]
 80010e0:	6a3a      	ldr	r2, [r7, #32]
 80010e2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80010e6:	f7ff ff3f 	bl	8000f68 <UTILS_NanosecondsToTimespec>

    return 0;
 80010ea:	2300      	movs	r3, #0
 80010ec:	4618      	mov	r0, r3
 80010ee:	3738      	adds	r7, #56	; 0x38
 80010f0:	46bd      	mov	sp, r7
 80010f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080010f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	607b      	str	r3, [r7, #4]
 8001102:	4b12      	ldr	r3, [pc, #72]	; (800114c <HAL_MspInit+0x54>)
 8001104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001106:	4a11      	ldr	r2, [pc, #68]	; (800114c <HAL_MspInit+0x54>)
 8001108:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800110c:	6453      	str	r3, [r2, #68]	; 0x44
 800110e:	4b0f      	ldr	r3, [pc, #60]	; (800114c <HAL_MspInit+0x54>)
 8001110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001112:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001116:	607b      	str	r3, [r7, #4]
 8001118:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	603b      	str	r3, [r7, #0]
 800111e:	4b0b      	ldr	r3, [pc, #44]	; (800114c <HAL_MspInit+0x54>)
 8001120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001122:	4a0a      	ldr	r2, [pc, #40]	; (800114c <HAL_MspInit+0x54>)
 8001124:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001128:	6413      	str	r3, [r2, #64]	; 0x40
 800112a:	4b08      	ldr	r3, [pc, #32]	; (800114c <HAL_MspInit+0x54>)
 800112c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001132:	603b      	str	r3, [r7, #0]
 8001134:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001136:	2200      	movs	r2, #0
 8001138:	210f      	movs	r1, #15
 800113a:	f06f 0001 	mvn.w	r0, #1
 800113e:	f000 fcdf 	bl	8001b00 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001142:	bf00      	nop
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40023800 	.word	0x40023800

08001150 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b08c      	sub	sp, #48	; 0x30
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001158:	2300      	movs	r3, #0
 800115a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 800115c:	2300      	movs	r3, #0
 800115e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001160:	2300      	movs	r3, #0
 8001162:	60bb      	str	r3, [r7, #8]
 8001164:	4b2f      	ldr	r3, [pc, #188]	; (8001224 <HAL_InitTick+0xd4>)
 8001166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001168:	4a2e      	ldr	r2, [pc, #184]	; (8001224 <HAL_InitTick+0xd4>)
 800116a:	f043 0301 	orr.w	r3, r3, #1
 800116e:	6453      	str	r3, [r2, #68]	; 0x44
 8001170:	4b2c      	ldr	r3, [pc, #176]	; (8001224 <HAL_InitTick+0xd4>)
 8001172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001174:	f003 0301 	and.w	r3, r3, #1
 8001178:	60bb      	str	r3, [r7, #8]
 800117a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800117c:	f107 020c 	add.w	r2, r7, #12
 8001180:	f107 0310 	add.w	r3, r7, #16
 8001184:	4611      	mov	r1, r2
 8001186:	4618      	mov	r0, r3
 8001188:	f001 fbe4 	bl	8002954 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800118c:	f001 fbce 	bl	800292c <HAL_RCC_GetPCLK2Freq>
 8001190:	4603      	mov	r3, r0
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001198:	4a23      	ldr	r2, [pc, #140]	; (8001228 <HAL_InitTick+0xd8>)
 800119a:	fba2 2303 	umull	r2, r3, r2, r3
 800119e:	0c9b      	lsrs	r3, r3, #18
 80011a0:	3b01      	subs	r3, #1
 80011a2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80011a4:	4b21      	ldr	r3, [pc, #132]	; (800122c <HAL_InitTick+0xdc>)
 80011a6:	4a22      	ldr	r2, [pc, #136]	; (8001230 <HAL_InitTick+0xe0>)
 80011a8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80011aa:	4b20      	ldr	r3, [pc, #128]	; (800122c <HAL_InitTick+0xdc>)
 80011ac:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011b0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80011b2:	4a1e      	ldr	r2, [pc, #120]	; (800122c <HAL_InitTick+0xdc>)
 80011b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80011b8:	4b1c      	ldr	r3, [pc, #112]	; (800122c <HAL_InitTick+0xdc>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011be:	4b1b      	ldr	r3, [pc, #108]	; (800122c <HAL_InitTick+0xdc>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011c4:	4b19      	ldr	r3, [pc, #100]	; (800122c <HAL_InitTick+0xdc>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80011ca:	4818      	ldr	r0, [pc, #96]	; (800122c <HAL_InitTick+0xdc>)
 80011cc:	f002 f83c 	bl	8003248 <HAL_TIM_Base_Init>
 80011d0:	4603      	mov	r3, r0
 80011d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80011d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d11b      	bne.n	8001216 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80011de:	4813      	ldr	r0, [pc, #76]	; (800122c <HAL_InitTick+0xdc>)
 80011e0:	f002 f88c 	bl	80032fc <HAL_TIM_Base_Start_IT>
 80011e4:	4603      	mov	r3, r0
 80011e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80011ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d111      	bne.n	8001216 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80011f2:	2019      	movs	r0, #25
 80011f4:	f000 fca0 	bl	8001b38 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2b0f      	cmp	r3, #15
 80011fc:	d808      	bhi.n	8001210 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80011fe:	2200      	movs	r2, #0
 8001200:	6879      	ldr	r1, [r7, #4]
 8001202:	2019      	movs	r0, #25
 8001204:	f000 fc7c 	bl	8001b00 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001208:	4a0a      	ldr	r2, [pc, #40]	; (8001234 <HAL_InitTick+0xe4>)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6013      	str	r3, [r2, #0]
 800120e:	e002      	b.n	8001216 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8001210:	2301      	movs	r3, #1
 8001212:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001216:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800121a:	4618      	mov	r0, r3
 800121c:	3730      	adds	r7, #48	; 0x30
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40023800 	.word	0x40023800
 8001228:	431bde83 	.word	0x431bde83
 800122c:	20006c50 	.word	0x20006c50
 8001230:	40010000 	.word	0x40010000
 8001234:	20000008 	.word	0x20000008

08001238 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800123c:	e7fe      	b.n	800123c <NMI_Handler+0x4>

0800123e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800123e:	b480      	push	{r7}
 8001240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001242:	e7fe      	b.n	8001242 <HardFault_Handler+0x4>

08001244 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001248:	e7fe      	b.n	8001248 <MemManage_Handler+0x4>

0800124a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800124a:	b480      	push	{r7}
 800124c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800124e:	e7fe      	b.n	800124e <BusFault_Handler+0x4>

08001250 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001254:	e7fe      	b.n	8001254 <UsageFault_Handler+0x4>

08001256 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001256:	b480      	push	{r7}
 8001258:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800125a:	bf00      	nop
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001268:	4802      	ldr	r0, [pc, #8]	; (8001274 <DMA1_Stream5_IRQHandler+0x10>)
 800126a:	f000 fe0b 	bl	8001e84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	20006d2c 	.word	0x20006d2c

08001278 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800127c:	4802      	ldr	r0, [pc, #8]	; (8001288 <DMA1_Stream6_IRQHandler+0x10>)
 800127e:	f000 fe01 	bl	8001e84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001282:	bf00      	nop
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	20006d8c 	.word	0x20006d8c

0800128c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001290:	4802      	ldr	r0, [pc, #8]	; (800129c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001292:	f002 f9d7 	bl	8003644 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	20006c50 	.word	0x20006c50

080012a0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80012a4:	4802      	ldr	r0, [pc, #8]	; (80012b0 <USART2_IRQHandler+0x10>)
 80012a6:	f002 fdcf 	bl	8003e48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	20006ce8 	.word	0x20006ce8

080012b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
	return 1;
 80012b8:	2301      	movs	r3, #1
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr

080012c4 <_kill>:

int _kill(int pid, int sig)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80012ce:	f00f f9b9 	bl	8010644 <__errno>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2216      	movs	r2, #22
 80012d6:	601a      	str	r2, [r3, #0]
	return -1;
 80012d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <_exit>:

void _exit (int status)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80012ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f7ff ffe7 	bl	80012c4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80012f6:	e7fe      	b.n	80012f6 <_exit+0x12>

080012f8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b086      	sub	sp, #24
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	60f8      	str	r0, [r7, #12]
 8001300:	60b9      	str	r1, [r7, #8]
 8001302:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001304:	2300      	movs	r3, #0
 8001306:	617b      	str	r3, [r7, #20]
 8001308:	e00a      	b.n	8001320 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800130a:	f3af 8000 	nop.w
 800130e:	4601      	mov	r1, r0
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	1c5a      	adds	r2, r3, #1
 8001314:	60ba      	str	r2, [r7, #8]
 8001316:	b2ca      	uxtb	r2, r1
 8001318:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	3301      	adds	r3, #1
 800131e:	617b      	str	r3, [r7, #20]
 8001320:	697a      	ldr	r2, [r7, #20]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	429a      	cmp	r2, r3
 8001326:	dbf0      	blt.n	800130a <_read+0x12>
	}

return len;
 8001328:	687b      	ldr	r3, [r7, #4]
}
 800132a:	4618      	mov	r0, r3
 800132c:	3718      	adds	r7, #24
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b086      	sub	sp, #24
 8001336:	af00      	add	r7, sp, #0
 8001338:	60f8      	str	r0, [r7, #12]
 800133a:	60b9      	str	r1, [r7, #8]
 800133c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800133e:	2300      	movs	r3, #0
 8001340:	617b      	str	r3, [r7, #20]
 8001342:	e009      	b.n	8001358 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	1c5a      	adds	r2, r3, #1
 8001348:	60ba      	str	r2, [r7, #8]
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	4618      	mov	r0, r3
 800134e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	3301      	adds	r3, #1
 8001356:	617b      	str	r3, [r7, #20]
 8001358:	697a      	ldr	r2, [r7, #20]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	429a      	cmp	r2, r3
 800135e:	dbf1      	blt.n	8001344 <_write+0x12>
	}
	return len;
 8001360:	687b      	ldr	r3, [r7, #4]
}
 8001362:	4618      	mov	r0, r3
 8001364:	3718      	adds	r7, #24
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <_close>:

int _close(int file)
{
 800136a:	b480      	push	{r7}
 800136c:	b083      	sub	sp, #12
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
	return -1;
 8001372:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001376:	4618      	mov	r0, r3
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr

08001382 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001382:	b480      	push	{r7}
 8001384:	b083      	sub	sp, #12
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]
 800138a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001392:	605a      	str	r2, [r3, #4]
	return 0;
 8001394:	2300      	movs	r3, #0
}
 8001396:	4618      	mov	r0, r3
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr

080013a2 <_isatty>:

int _isatty(int file)
{
 80013a2:	b480      	push	{r7}
 80013a4:	b083      	sub	sp, #12
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	6078      	str	r0, [r7, #4]
	return 1;
 80013aa:	2301      	movs	r3, #1
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	370c      	adds	r7, #12
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b085      	sub	sp, #20
 80013bc:	af00      	add	r7, sp, #0
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	60b9      	str	r1, [r7, #8]
 80013c2:	607a      	str	r2, [r7, #4]
	return 0;
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3714      	adds	r7, #20
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
	...

080013d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b086      	sub	sp, #24
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013dc:	4a14      	ldr	r2, [pc, #80]	; (8001430 <_sbrk+0x5c>)
 80013de:	4b15      	ldr	r3, [pc, #84]	; (8001434 <_sbrk+0x60>)
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013e8:	4b13      	ldr	r3, [pc, #76]	; (8001438 <_sbrk+0x64>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d102      	bne.n	80013f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013f0:	4b11      	ldr	r3, [pc, #68]	; (8001438 <_sbrk+0x64>)
 80013f2:	4a12      	ldr	r2, [pc, #72]	; (800143c <_sbrk+0x68>)
 80013f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013f6:	4b10      	ldr	r3, [pc, #64]	; (8001438 <_sbrk+0x64>)
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4413      	add	r3, r2
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	429a      	cmp	r2, r3
 8001402:	d207      	bcs.n	8001414 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001404:	f00f f91e 	bl	8010644 <__errno>
 8001408:	4603      	mov	r3, r0
 800140a:	220c      	movs	r2, #12
 800140c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800140e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001412:	e009      	b.n	8001428 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001414:	4b08      	ldr	r3, [pc, #32]	; (8001438 <_sbrk+0x64>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800141a:	4b07      	ldr	r3, [pc, #28]	; (8001438 <_sbrk+0x64>)
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4413      	add	r3, r2
 8001422:	4a05      	ldr	r2, [pc, #20]	; (8001438 <_sbrk+0x64>)
 8001424:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001426:	68fb      	ldr	r3, [r7, #12]
}
 8001428:	4618      	mov	r0, r3
 800142a:	3718      	adds	r7, #24
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	20020000 	.word	0x20020000
 8001434:	00000400 	.word	0x00000400
 8001438:	20006c9c 	.word	0x20006c9c
 800143c:	20010aa0 	.word	0x20010aa0

08001440 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001444:	4b06      	ldr	r3, [pc, #24]	; (8001460 <SystemInit+0x20>)
 8001446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800144a:	4a05      	ldr	r2, [pc, #20]	; (8001460 <SystemInit+0x20>)
 800144c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001450:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001454:	bf00      	nop
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	e000ed00 	.word	0xe000ed00

08001464 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b08c      	sub	sp, #48	; 0x30
 8001468:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800146a:	f107 030c 	add.w	r3, r7, #12
 800146e:	2224      	movs	r2, #36	; 0x24
 8001470:	2100      	movs	r1, #0
 8001472:	4618      	mov	r0, r3
 8001474:	f00f f976 	bl	8010764 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001478:	1d3b      	adds	r3, r7, #4
 800147a:	2200      	movs	r2, #0
 800147c:	601a      	str	r2, [r3, #0]
 800147e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001480:	4b21      	ldr	r3, [pc, #132]	; (8001508 <MX_TIM2_Init+0xa4>)
 8001482:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001486:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001488:	4b1f      	ldr	r3, [pc, #124]	; (8001508 <MX_TIM2_Init+0xa4>)
 800148a:	2200      	movs	r2, #0
 800148c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800148e:	4b1e      	ldr	r3, [pc, #120]	; (8001508 <MX_TIM2_Init+0xa4>)
 8001490:	2200      	movs	r2, #0
 8001492:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001494:	4b1c      	ldr	r3, [pc, #112]	; (8001508 <MX_TIM2_Init+0xa4>)
 8001496:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800149a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800149c:	4b1a      	ldr	r3, [pc, #104]	; (8001508 <MX_TIM2_Init+0xa4>)
 800149e:	2200      	movs	r2, #0
 80014a0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014a2:	4b19      	ldr	r3, [pc, #100]	; (8001508 <MX_TIM2_Init+0xa4>)
 80014a4:	2280      	movs	r2, #128	; 0x80
 80014a6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80014a8:	2303      	movs	r3, #3
 80014aa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80014ac:	2300      	movs	r3, #0
 80014ae:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80014b0:	2301      	movs	r3, #1
 80014b2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80014b4:	2300      	movs	r3, #0
 80014b6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80014b8:	2300      	movs	r3, #0
 80014ba:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80014bc:	2300      	movs	r3, #0
 80014be:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80014c0:	2301      	movs	r3, #1
 80014c2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80014c4:	2300      	movs	r3, #0
 80014c6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80014c8:	2300      	movs	r3, #0
 80014ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80014cc:	f107 030c 	add.w	r3, r7, #12
 80014d0:	4619      	mov	r1, r3
 80014d2:	480d      	ldr	r0, [pc, #52]	; (8001508 <MX_TIM2_Init+0xa4>)
 80014d4:	f001 ff82 	bl	80033dc <HAL_TIM_Encoder_Init>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80014de:	f7ff fca1 	bl	8000e24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014e2:	2300      	movs	r3, #0
 80014e4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014e6:	2300      	movs	r3, #0
 80014e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014ea:	1d3b      	adds	r3, r7, #4
 80014ec:	4619      	mov	r1, r3
 80014ee:	4806      	ldr	r0, [pc, #24]	; (8001508 <MX_TIM2_Init+0xa4>)
 80014f0:	f002 fa9e 	bl	8003a30 <HAL_TIMEx_MasterConfigSynchronization>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80014fa:	f7ff fc93 	bl	8000e24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80014fe:	bf00      	nop
 8001500:	3730      	adds	r7, #48	; 0x30
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	20006ca0 	.word	0x20006ca0

0800150c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b08a      	sub	sp, #40	; 0x28
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001514:	f107 0314 	add.w	r3, r7, #20
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	605a      	str	r2, [r3, #4]
 800151e:	609a      	str	r2, [r3, #8]
 8001520:	60da      	str	r2, [r3, #12]
 8001522:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800152c:	d12b      	bne.n	8001586 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	613b      	str	r3, [r7, #16]
 8001532:	4b17      	ldr	r3, [pc, #92]	; (8001590 <HAL_TIM_Encoder_MspInit+0x84>)
 8001534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001536:	4a16      	ldr	r2, [pc, #88]	; (8001590 <HAL_TIM_Encoder_MspInit+0x84>)
 8001538:	f043 0301 	orr.w	r3, r3, #1
 800153c:	6413      	str	r3, [r2, #64]	; 0x40
 800153e:	4b14      	ldr	r3, [pc, #80]	; (8001590 <HAL_TIM_Encoder_MspInit+0x84>)
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	613b      	str	r3, [r7, #16]
 8001548:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	60fb      	str	r3, [r7, #12]
 800154e:	4b10      	ldr	r3, [pc, #64]	; (8001590 <HAL_TIM_Encoder_MspInit+0x84>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	4a0f      	ldr	r2, [pc, #60]	; (8001590 <HAL_TIM_Encoder_MspInit+0x84>)
 8001554:	f043 0301 	orr.w	r3, r3, #1
 8001558:	6313      	str	r3, [r2, #48]	; 0x30
 800155a:	4b0d      	ldr	r3, [pc, #52]	; (8001590 <HAL_TIM_Encoder_MspInit+0x84>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	f003 0301 	and.w	r3, r3, #1
 8001562:	60fb      	str	r3, [r7, #12]
 8001564:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001566:	2303      	movs	r3, #3
 8001568:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156a:	2302      	movs	r3, #2
 800156c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156e:	2300      	movs	r3, #0
 8001570:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001572:	2300      	movs	r3, #0
 8001574:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001576:	2301      	movs	r3, #1
 8001578:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800157a:	f107 0314 	add.w	r3, r7, #20
 800157e:	4619      	mov	r1, r3
 8001580:	4804      	ldr	r0, [pc, #16]	; (8001594 <HAL_TIM_Encoder_MspInit+0x88>)
 8001582:	f000 fee9 	bl	8002358 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001586:	bf00      	nop
 8001588:	3728      	adds	r7, #40	; 0x28
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	40023800 	.word	0x40023800
 8001594:	40020000 	.word	0x40020000

08001598 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800159c:	4b11      	ldr	r3, [pc, #68]	; (80015e4 <MX_USART2_UART_Init+0x4c>)
 800159e:	4a12      	ldr	r2, [pc, #72]	; (80015e8 <MX_USART2_UART_Init+0x50>)
 80015a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015a2:	4b10      	ldr	r3, [pc, #64]	; (80015e4 <MX_USART2_UART_Init+0x4c>)
 80015a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015aa:	4b0e      	ldr	r3, [pc, #56]	; (80015e4 <MX_USART2_UART_Init+0x4c>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015b0:	4b0c      	ldr	r3, [pc, #48]	; (80015e4 <MX_USART2_UART_Init+0x4c>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015b6:	4b0b      	ldr	r3, [pc, #44]	; (80015e4 <MX_USART2_UART_Init+0x4c>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015bc:	4b09      	ldr	r3, [pc, #36]	; (80015e4 <MX_USART2_UART_Init+0x4c>)
 80015be:	220c      	movs	r2, #12
 80015c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015c2:	4b08      	ldr	r3, [pc, #32]	; (80015e4 <MX_USART2_UART_Init+0x4c>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015c8:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <MX_USART2_UART_Init+0x4c>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015ce:	4805      	ldr	r0, [pc, #20]	; (80015e4 <MX_USART2_UART_Init+0x4c>)
 80015d0:	f002 fabe 	bl	8003b50 <HAL_UART_Init>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80015da:	f7ff fc23 	bl	8000e24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015de:	bf00      	nop
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	20006ce8 	.word	0x20006ce8
 80015e8:	40004400 	.word	0x40004400

080015ec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b08a      	sub	sp, #40	; 0x28
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f4:	f107 0314 	add.w	r3, r7, #20
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	605a      	str	r2, [r3, #4]
 80015fe:	609a      	str	r2, [r3, #8]
 8001600:	60da      	str	r2, [r3, #12]
 8001602:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a4d      	ldr	r2, [pc, #308]	; (8001740 <HAL_UART_MspInit+0x154>)
 800160a:	4293      	cmp	r3, r2
 800160c:	f040 8093 	bne.w	8001736 <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001610:	2300      	movs	r3, #0
 8001612:	613b      	str	r3, [r7, #16]
 8001614:	4b4b      	ldr	r3, [pc, #300]	; (8001744 <HAL_UART_MspInit+0x158>)
 8001616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001618:	4a4a      	ldr	r2, [pc, #296]	; (8001744 <HAL_UART_MspInit+0x158>)
 800161a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800161e:	6413      	str	r3, [r2, #64]	; 0x40
 8001620:	4b48      	ldr	r3, [pc, #288]	; (8001744 <HAL_UART_MspInit+0x158>)
 8001622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001624:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001628:	613b      	str	r3, [r7, #16]
 800162a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800162c:	2300      	movs	r3, #0
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	4b44      	ldr	r3, [pc, #272]	; (8001744 <HAL_UART_MspInit+0x158>)
 8001632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001634:	4a43      	ldr	r2, [pc, #268]	; (8001744 <HAL_UART_MspInit+0x158>)
 8001636:	f043 0301 	orr.w	r3, r3, #1
 800163a:	6313      	str	r3, [r2, #48]	; 0x30
 800163c:	4b41      	ldr	r3, [pc, #260]	; (8001744 <HAL_UART_MspInit+0x158>)
 800163e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001640:	f003 0301 	and.w	r3, r3, #1
 8001644:	60fb      	str	r3, [r7, #12]
 8001646:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001648:	230c      	movs	r3, #12
 800164a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800164c:	2302      	movs	r3, #2
 800164e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001650:	2300      	movs	r3, #0
 8001652:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001654:	2303      	movs	r3, #3
 8001656:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001658:	2307      	movs	r3, #7
 800165a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800165c:	f107 0314 	add.w	r3, r7, #20
 8001660:	4619      	mov	r1, r3
 8001662:	4839      	ldr	r0, [pc, #228]	; (8001748 <HAL_UART_MspInit+0x15c>)
 8001664:	f000 fe78 	bl	8002358 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001668:	4b38      	ldr	r3, [pc, #224]	; (800174c <HAL_UART_MspInit+0x160>)
 800166a:	4a39      	ldr	r2, [pc, #228]	; (8001750 <HAL_UART_MspInit+0x164>)
 800166c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800166e:	4b37      	ldr	r3, [pc, #220]	; (800174c <HAL_UART_MspInit+0x160>)
 8001670:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001674:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001676:	4b35      	ldr	r3, [pc, #212]	; (800174c <HAL_UART_MspInit+0x160>)
 8001678:	2200      	movs	r2, #0
 800167a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800167c:	4b33      	ldr	r3, [pc, #204]	; (800174c <HAL_UART_MspInit+0x160>)
 800167e:	2200      	movs	r2, #0
 8001680:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001682:	4b32      	ldr	r3, [pc, #200]	; (800174c <HAL_UART_MspInit+0x160>)
 8001684:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001688:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800168a:	4b30      	ldr	r3, [pc, #192]	; (800174c <HAL_UART_MspInit+0x160>)
 800168c:	2200      	movs	r2, #0
 800168e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001690:	4b2e      	ldr	r3, [pc, #184]	; (800174c <HAL_UART_MspInit+0x160>)
 8001692:	2200      	movs	r2, #0
 8001694:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001696:	4b2d      	ldr	r3, [pc, #180]	; (800174c <HAL_UART_MspInit+0x160>)
 8001698:	f44f 7280 	mov.w	r2, #256	; 0x100
 800169c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800169e:	4b2b      	ldr	r3, [pc, #172]	; (800174c <HAL_UART_MspInit+0x160>)
 80016a0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80016a4:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016a6:	4b29      	ldr	r3, [pc, #164]	; (800174c <HAL_UART_MspInit+0x160>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80016ac:	4827      	ldr	r0, [pc, #156]	; (800174c <HAL_UART_MspInit+0x160>)
 80016ae:	f000 fa51 	bl	8001b54 <HAL_DMA_Init>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 80016b8:	f7ff fbb4 	bl	8000e24 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	4a23      	ldr	r2, [pc, #140]	; (800174c <HAL_UART_MspInit+0x160>)
 80016c0:	639a      	str	r2, [r3, #56]	; 0x38
 80016c2:	4a22      	ldr	r2, [pc, #136]	; (800174c <HAL_UART_MspInit+0x160>)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80016c8:	4b22      	ldr	r3, [pc, #136]	; (8001754 <HAL_UART_MspInit+0x168>)
 80016ca:	4a23      	ldr	r2, [pc, #140]	; (8001758 <HAL_UART_MspInit+0x16c>)
 80016cc:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80016ce:	4b21      	ldr	r3, [pc, #132]	; (8001754 <HAL_UART_MspInit+0x168>)
 80016d0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016d4:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016d6:	4b1f      	ldr	r3, [pc, #124]	; (8001754 <HAL_UART_MspInit+0x168>)
 80016d8:	2240      	movs	r2, #64	; 0x40
 80016da:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016dc:	4b1d      	ldr	r3, [pc, #116]	; (8001754 <HAL_UART_MspInit+0x168>)
 80016de:	2200      	movs	r2, #0
 80016e0:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80016e2:	4b1c      	ldr	r3, [pc, #112]	; (8001754 <HAL_UART_MspInit+0x168>)
 80016e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016e8:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016ea:	4b1a      	ldr	r3, [pc, #104]	; (8001754 <HAL_UART_MspInit+0x168>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016f0:	4b18      	ldr	r3, [pc, #96]	; (8001754 <HAL_UART_MspInit+0x168>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80016f6:	4b17      	ldr	r3, [pc, #92]	; (8001754 <HAL_UART_MspInit+0x168>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80016fc:	4b15      	ldr	r3, [pc, #84]	; (8001754 <HAL_UART_MspInit+0x168>)
 80016fe:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001702:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001704:	4b13      	ldr	r3, [pc, #76]	; (8001754 <HAL_UART_MspInit+0x168>)
 8001706:	2200      	movs	r2, #0
 8001708:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800170a:	4812      	ldr	r0, [pc, #72]	; (8001754 <HAL_UART_MspInit+0x168>)
 800170c:	f000 fa22 	bl	8001b54 <HAL_DMA_Init>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8001716:	f7ff fb85 	bl	8000e24 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4a0d      	ldr	r2, [pc, #52]	; (8001754 <HAL_UART_MspInit+0x168>)
 800171e:	635a      	str	r2, [r3, #52]	; 0x34
 8001720:	4a0c      	ldr	r2, [pc, #48]	; (8001754 <HAL_UART_MspInit+0x168>)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001726:	2200      	movs	r2, #0
 8001728:	2105      	movs	r1, #5
 800172a:	2026      	movs	r0, #38	; 0x26
 800172c:	f000 f9e8 	bl	8001b00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001730:	2026      	movs	r0, #38	; 0x26
 8001732:	f000 fa01 	bl	8001b38 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001736:	bf00      	nop
 8001738:	3728      	adds	r7, #40	; 0x28
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	40004400 	.word	0x40004400
 8001744:	40023800 	.word	0x40023800
 8001748:	40020000 	.word	0x40020000
 800174c:	20006d2c 	.word	0x20006d2c
 8001750:	40026088 	.word	0x40026088
 8001754:	20006d8c 	.word	0x20006d8c
 8001758:	400260a0 	.word	0x400260a0

0800175c <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800176a:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 800176c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001770:	4904      	ldr	r1, [pc, #16]	; (8001784 <cubemx_transport_open+0x28>)
 8001772:	68f8      	ldr	r0, [r7, #12]
 8001774:	f002 fab8 	bl	8003ce8 <HAL_UART_Receive_DMA>
    return true;
 8001778:	2301      	movs	r3, #1
}
 800177a:	4618      	mov	r0, r3
 800177c:	3710      	adds	r7, #16
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	20006dec 	.word	0x20006dec

08001788 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001796:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8001798:	68f8      	ldr	r0, [r7, #12]
 800179a:	f002 fad5 	bl	8003d48 <HAL_UART_DMAStop>
    return true;
 800179e:	2301      	movs	r3, #1
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3710      	adds	r7, #16
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b086      	sub	sp, #24
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	60f8      	str	r0, [r7, #12]
 80017b0:	60b9      	str	r1, [r7, #8]
 80017b2:	607a      	str	r2, [r7, #4]
 80017b4:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80017bc:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	2b20      	cmp	r3, #32
 80017c8:	d11c      	bne.n	8001804 <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	461a      	mov	r2, r3
 80017d0:	68b9      	ldr	r1, [r7, #8]
 80017d2:	6978      	ldr	r0, [r7, #20]
 80017d4:	f002 fa0a 	bl	8003bec <HAL_UART_Transmit_DMA>
 80017d8:	4603      	mov	r3, r0
 80017da:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 80017dc:	e002      	b.n	80017e4 <cubemx_transport_write+0x3c>
            osDelay(1);
 80017de:	2001      	movs	r0, #1
 80017e0:	f003 fd46 	bl	8005270 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 80017e4:	7cfb      	ldrb	r3, [r7, #19]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d105      	bne.n	80017f6 <cubemx_transport_write+0x4e>
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	2b20      	cmp	r3, #32
 80017f4:	d1f3      	bne.n	80017de <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 80017f6:	7cfb      	ldrb	r3, [r7, #19]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d101      	bne.n	8001800 <cubemx_transport_write+0x58>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	e002      	b.n	8001806 <cubemx_transport_write+0x5e>
 8001800:	2300      	movs	r3, #0
 8001802:	e000      	b.n	8001806 <cubemx_transport_write+0x5e>
    }else{
        return 0;
 8001804:	2300      	movs	r3, #0
    }
}
 8001806:	4618      	mov	r0, r3
 8001808:	3718      	adds	r7, #24
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
	...

08001810 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8001810:	b580      	push	{r7, lr}
 8001812:	b088      	sub	sp, #32
 8001814:	af00      	add	r7, sp, #0
 8001816:	60f8      	str	r0, [r7, #12]
 8001818:	60b9      	str	r1, [r7, #8]
 800181a:	607a      	str	r2, [r7, #4]
 800181c:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001824:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8001826:	2300      	movs	r3, #0
 8001828:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800182a:	b672      	cpsid	i
}
 800182c:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 800183a:	4a1c      	ldr	r2, [pc, #112]	; (80018ac <cubemx_transport_read+0x9c>)
 800183c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800183e:	b662      	cpsie	i
}
 8001840:	bf00      	nop
        __enable_irq();
        ms_used++;
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	3301      	adds	r3, #1
 8001846:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8001848:	2001      	movs	r0, #1
 800184a:	f003 fd11 	bl	8005270 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 800184e:	4b18      	ldr	r3, [pc, #96]	; (80018b0 <cubemx_transport_read+0xa0>)
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	4b16      	ldr	r3, [pc, #88]	; (80018ac <cubemx_transport_read+0x9c>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	429a      	cmp	r2, r3
 8001858:	d103      	bne.n	8001862 <cubemx_transport_read+0x52>
 800185a:	69fa      	ldr	r2, [r7, #28]
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	429a      	cmp	r2, r3
 8001860:	dbe3      	blt.n	800182a <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8001862:	2300      	movs	r3, #0
 8001864:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001866:	e011      	b.n	800188c <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8001868:	4b11      	ldr	r3, [pc, #68]	; (80018b0 <cubemx_transport_read+0xa0>)
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	68b9      	ldr	r1, [r7, #8]
 800186e:	69bb      	ldr	r3, [r7, #24]
 8001870:	440b      	add	r3, r1
 8001872:	4910      	ldr	r1, [pc, #64]	; (80018b4 <cubemx_transport_read+0xa4>)
 8001874:	5c8a      	ldrb	r2, [r1, r2]
 8001876:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8001878:	4b0d      	ldr	r3, [pc, #52]	; (80018b0 <cubemx_transport_read+0xa0>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	3301      	adds	r3, #1
 800187e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001882:	4a0b      	ldr	r2, [pc, #44]	; (80018b0 <cubemx_transport_read+0xa0>)
 8001884:	6013      	str	r3, [r2, #0]
        wrote++;
 8001886:	69bb      	ldr	r3, [r7, #24]
 8001888:	3301      	adds	r3, #1
 800188a:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 800188c:	4b08      	ldr	r3, [pc, #32]	; (80018b0 <cubemx_transport_read+0xa0>)
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	4b06      	ldr	r3, [pc, #24]	; (80018ac <cubemx_transport_read+0x9c>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	429a      	cmp	r2, r3
 8001896:	d003      	beq.n	80018a0 <cubemx_transport_read+0x90>
 8001898:	69ba      	ldr	r2, [r7, #24]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	429a      	cmp	r2, r3
 800189e:	d3e3      	bcc.n	8001868 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 80018a0:	69bb      	ldr	r3, [r7, #24]
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3720      	adds	r7, #32
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	200075f0 	.word	0x200075f0
 80018b0:	200075ec 	.word	0x200075ec
 80018b4:	20006dec 	.word	0x20006dec

080018b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80018b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018f0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018bc:	480d      	ldr	r0, [pc, #52]	; (80018f4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80018be:	490e      	ldr	r1, [pc, #56]	; (80018f8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80018c0:	4a0e      	ldr	r2, [pc, #56]	; (80018fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018c4:	e002      	b.n	80018cc <LoopCopyDataInit>

080018c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018ca:	3304      	adds	r3, #4

080018cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018d0:	d3f9      	bcc.n	80018c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018d2:	4a0b      	ldr	r2, [pc, #44]	; (8001900 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80018d4:	4c0b      	ldr	r4, [pc, #44]	; (8001904 <LoopFillZerobss+0x26>)
  movs r3, #0
 80018d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018d8:	e001      	b.n	80018de <LoopFillZerobss>

080018da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018dc:	3204      	adds	r2, #4

080018de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018e0:	d3fb      	bcc.n	80018da <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80018e2:	f7ff fdad 	bl	8001440 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018e6:	f00e fefb 	bl	80106e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018ea:	f7ff fa01 	bl	8000cf0 <main>
  bx  lr    
 80018ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018f8:	200000d0 	.word	0x200000d0
  ldr r2, =_sidata
 80018fc:	08012990 	.word	0x08012990
  ldr r2, =_sbss
 8001900:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
 8001904:	20010aa0 	.word	0x20010aa0

08001908 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001908:	e7fe      	b.n	8001908 <ADC_IRQHandler>
	...

0800190c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001910:	4b0e      	ldr	r3, [pc, #56]	; (800194c <HAL_Init+0x40>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a0d      	ldr	r2, [pc, #52]	; (800194c <HAL_Init+0x40>)
 8001916:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800191a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800191c:	4b0b      	ldr	r3, [pc, #44]	; (800194c <HAL_Init+0x40>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a0a      	ldr	r2, [pc, #40]	; (800194c <HAL_Init+0x40>)
 8001922:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001926:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001928:	4b08      	ldr	r3, [pc, #32]	; (800194c <HAL_Init+0x40>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a07      	ldr	r2, [pc, #28]	; (800194c <HAL_Init+0x40>)
 800192e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001932:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001934:	2003      	movs	r0, #3
 8001936:	f000 f8d8 	bl	8001aea <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800193a:	200f      	movs	r0, #15
 800193c:	f7ff fc08 	bl	8001150 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001940:	f7ff fbda 	bl	80010f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001944:	2300      	movs	r3, #0
}
 8001946:	4618      	mov	r0, r3
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	40023c00 	.word	0x40023c00

08001950 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001954:	4b06      	ldr	r3, [pc, #24]	; (8001970 <HAL_IncTick+0x20>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	461a      	mov	r2, r3
 800195a:	4b06      	ldr	r3, [pc, #24]	; (8001974 <HAL_IncTick+0x24>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4413      	add	r3, r2
 8001960:	4a04      	ldr	r2, [pc, #16]	; (8001974 <HAL_IncTick+0x24>)
 8001962:	6013      	str	r3, [r2, #0]
}
 8001964:	bf00      	nop
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	2000000c 	.word	0x2000000c
 8001974:	200075f4 	.word	0x200075f4

08001978 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  return uwTick;
 800197c:	4b03      	ldr	r3, [pc, #12]	; (800198c <HAL_GetTick+0x14>)
 800197e:	681b      	ldr	r3, [r3, #0]
}
 8001980:	4618      	mov	r0, r3
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	200075f4 	.word	0x200075f4

08001990 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001990:	b480      	push	{r7}
 8001992:	b085      	sub	sp, #20
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f003 0307 	and.w	r3, r3, #7
 800199e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019a0:	4b0c      	ldr	r3, [pc, #48]	; (80019d4 <__NVIC_SetPriorityGrouping+0x44>)
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019a6:	68ba      	ldr	r2, [r7, #8]
 80019a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019ac:	4013      	ands	r3, r2
 80019ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019c2:	4a04      	ldr	r2, [pc, #16]	; (80019d4 <__NVIC_SetPriorityGrouping+0x44>)
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	60d3      	str	r3, [r2, #12]
}
 80019c8:	bf00      	nop
 80019ca:	3714      	adds	r7, #20
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr
 80019d4:	e000ed00 	.word	0xe000ed00

080019d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019dc:	4b04      	ldr	r3, [pc, #16]	; (80019f0 <__NVIC_GetPriorityGrouping+0x18>)
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	0a1b      	lsrs	r3, r3, #8
 80019e2:	f003 0307 	and.w	r3, r3, #7
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr
 80019f0:	e000ed00 	.word	0xe000ed00

080019f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	4603      	mov	r3, r0
 80019fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	db0b      	blt.n	8001a1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a06:	79fb      	ldrb	r3, [r7, #7]
 8001a08:	f003 021f 	and.w	r2, r3, #31
 8001a0c:	4907      	ldr	r1, [pc, #28]	; (8001a2c <__NVIC_EnableIRQ+0x38>)
 8001a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a12:	095b      	lsrs	r3, r3, #5
 8001a14:	2001      	movs	r0, #1
 8001a16:	fa00 f202 	lsl.w	r2, r0, r2
 8001a1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a1e:	bf00      	nop
 8001a20:	370c      	adds	r7, #12
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	e000e100 	.word	0xe000e100

08001a30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	4603      	mov	r3, r0
 8001a38:	6039      	str	r1, [r7, #0]
 8001a3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	db0a      	blt.n	8001a5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	b2da      	uxtb	r2, r3
 8001a48:	490c      	ldr	r1, [pc, #48]	; (8001a7c <__NVIC_SetPriority+0x4c>)
 8001a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4e:	0112      	lsls	r2, r2, #4
 8001a50:	b2d2      	uxtb	r2, r2
 8001a52:	440b      	add	r3, r1
 8001a54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a58:	e00a      	b.n	8001a70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	b2da      	uxtb	r2, r3
 8001a5e:	4908      	ldr	r1, [pc, #32]	; (8001a80 <__NVIC_SetPriority+0x50>)
 8001a60:	79fb      	ldrb	r3, [r7, #7]
 8001a62:	f003 030f 	and.w	r3, r3, #15
 8001a66:	3b04      	subs	r3, #4
 8001a68:	0112      	lsls	r2, r2, #4
 8001a6a:	b2d2      	uxtb	r2, r2
 8001a6c:	440b      	add	r3, r1
 8001a6e:	761a      	strb	r2, [r3, #24]
}
 8001a70:	bf00      	nop
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr
 8001a7c:	e000e100 	.word	0xe000e100
 8001a80:	e000ed00 	.word	0xe000ed00

08001a84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b089      	sub	sp, #36	; 0x24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	60f8      	str	r0, [r7, #12]
 8001a8c:	60b9      	str	r1, [r7, #8]
 8001a8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	f003 0307 	and.w	r3, r3, #7
 8001a96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	f1c3 0307 	rsb	r3, r3, #7
 8001a9e:	2b04      	cmp	r3, #4
 8001aa0:	bf28      	it	cs
 8001aa2:	2304      	movcs	r3, #4
 8001aa4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	3304      	adds	r3, #4
 8001aaa:	2b06      	cmp	r3, #6
 8001aac:	d902      	bls.n	8001ab4 <NVIC_EncodePriority+0x30>
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	3b03      	subs	r3, #3
 8001ab2:	e000      	b.n	8001ab6 <NVIC_EncodePriority+0x32>
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac2:	43da      	mvns	r2, r3
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	401a      	ands	r2, r3
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001acc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad6:	43d9      	mvns	r1, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001adc:	4313      	orrs	r3, r2
         );
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3724      	adds	r7, #36	; 0x24
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr

08001aea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b082      	sub	sp, #8
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f7ff ff4c 	bl	8001990 <__NVIC_SetPriorityGrouping>
}
 8001af8:	bf00      	nop
 8001afa:	3708      	adds	r7, #8
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b086      	sub	sp, #24
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	4603      	mov	r3, r0
 8001b08:	60b9      	str	r1, [r7, #8]
 8001b0a:	607a      	str	r2, [r7, #4]
 8001b0c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b12:	f7ff ff61 	bl	80019d8 <__NVIC_GetPriorityGrouping>
 8001b16:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	68b9      	ldr	r1, [r7, #8]
 8001b1c:	6978      	ldr	r0, [r7, #20]
 8001b1e:	f7ff ffb1 	bl	8001a84 <NVIC_EncodePriority>
 8001b22:	4602      	mov	r2, r0
 8001b24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b28:	4611      	mov	r1, r2
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7ff ff80 	bl	8001a30 <__NVIC_SetPriority>
}
 8001b30:	bf00      	nop
 8001b32:	3718      	adds	r7, #24
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	4603      	mov	r3, r0
 8001b40:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7ff ff54 	bl	80019f4 <__NVIC_EnableIRQ>
}
 8001b4c:	bf00      	nop
 8001b4e:	3708      	adds	r7, #8
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b086      	sub	sp, #24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001b60:	f7ff ff0a 	bl	8001978 <HAL_GetTick>
 8001b64:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d101      	bne.n	8001b70 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e099      	b.n	8001ca4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2202      	movs	r2, #2
 8001b74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f022 0201 	bic.w	r2, r2, #1
 8001b8e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b90:	e00f      	b.n	8001bb2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b92:	f7ff fef1 	bl	8001978 <HAL_GetTick>
 8001b96:	4602      	mov	r2, r0
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	2b05      	cmp	r3, #5
 8001b9e:	d908      	bls.n	8001bb2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2220      	movs	r2, #32
 8001ba4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2203      	movs	r2, #3
 8001baa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e078      	b.n	8001ca4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0301 	and.w	r3, r3, #1
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d1e8      	bne.n	8001b92 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001bc8:	697a      	ldr	r2, [r7, #20]
 8001bca:	4b38      	ldr	r3, [pc, #224]	; (8001cac <HAL_DMA_Init+0x158>)
 8001bcc:	4013      	ands	r3, r2
 8001bce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	685a      	ldr	r2, [r3, #4]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001bde:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	691b      	ldr	r3, [r3, #16]
 8001be4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	699b      	ldr	r3, [r3, #24]
 8001bf0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bf6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6a1b      	ldr	r3, [r3, #32]
 8001bfc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001bfe:	697a      	ldr	r2, [r7, #20]
 8001c00:	4313      	orrs	r3, r2
 8001c02:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c08:	2b04      	cmp	r3, #4
 8001c0a:	d107      	bne.n	8001c1c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c14:	4313      	orrs	r3, r2
 8001c16:	697a      	ldr	r2, [r7, #20]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	697a      	ldr	r2, [r7, #20]
 8001c22:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	695b      	ldr	r3, [r3, #20]
 8001c2a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	f023 0307 	bic.w	r3, r3, #7
 8001c32:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c38:	697a      	ldr	r2, [r7, #20]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c42:	2b04      	cmp	r3, #4
 8001c44:	d117      	bne.n	8001c76 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c4a:	697a      	ldr	r2, [r7, #20]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d00e      	beq.n	8001c76 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	f000 fb01 	bl	8002260 <DMA_CheckFifoParam>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d008      	beq.n	8001c76 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2240      	movs	r2, #64	; 0x40
 8001c68:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001c72:	2301      	movs	r3, #1
 8001c74:	e016      	b.n	8001ca4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	697a      	ldr	r2, [r7, #20]
 8001c7c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f000 fab8 	bl	80021f4 <DMA_CalcBaseAndBitshift>
 8001c84:	4603      	mov	r3, r0
 8001c86:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c8c:	223f      	movs	r2, #63	; 0x3f
 8001c8e:	409a      	lsls	r2, r3
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2200      	movs	r2, #0
 8001c98:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001ca2:	2300      	movs	r3, #0
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3718      	adds	r7, #24
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	f010803f 	.word	0xf010803f

08001cb0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b086      	sub	sp, #24
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	607a      	str	r2, [r7, #4]
 8001cbc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cc6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d101      	bne.n	8001cd6 <HAL_DMA_Start_IT+0x26>
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	e040      	b.n	8001d58 <HAL_DMA_Start_IT+0xa8>
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2201      	movs	r2, #1
 8001cda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d12f      	bne.n	8001d4a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2202      	movs	r2, #2
 8001cee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	68b9      	ldr	r1, [r7, #8]
 8001cfe:	68f8      	ldr	r0, [r7, #12]
 8001d00:	f000 fa4a 	bl	8002198 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d08:	223f      	movs	r2, #63	; 0x3f
 8001d0a:	409a      	lsls	r2, r3
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f042 0216 	orr.w	r2, r2, #22
 8001d1e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d007      	beq.n	8001d38 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f042 0208 	orr.w	r2, r2, #8
 8001d36:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f042 0201 	orr.w	r2, r2, #1
 8001d46:	601a      	str	r2, [r3, #0]
 8001d48:	e005      	b.n	8001d56 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001d52:	2302      	movs	r3, #2
 8001d54:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001d56:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3718      	adds	r7, #24
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d6c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001d6e:	f7ff fe03 	bl	8001978 <HAL_GetTick>
 8001d72:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d008      	beq.n	8001d92 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2280      	movs	r2, #128	; 0x80
 8001d84:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e052      	b.n	8001e38 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f022 0216 	bic.w	r2, r2, #22
 8001da0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	695a      	ldr	r2, [r3, #20]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001db0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d103      	bne.n	8001dc2 <HAL_DMA_Abort+0x62>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d007      	beq.n	8001dd2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f022 0208 	bic.w	r2, r2, #8
 8001dd0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f022 0201 	bic.w	r2, r2, #1
 8001de0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001de2:	e013      	b.n	8001e0c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001de4:	f7ff fdc8 	bl	8001978 <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	2b05      	cmp	r3, #5
 8001df0:	d90c      	bls.n	8001e0c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2220      	movs	r2, #32
 8001df6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2203      	movs	r2, #3
 8001dfc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	e015      	b.n	8001e38 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d1e4      	bne.n	8001de4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e1e:	223f      	movs	r2, #63	; 0x3f
 8001e20:	409a      	lsls	r2, r3
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2201      	movs	r2, #1
 8001e2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001e36:	2300      	movs	r3, #0
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3710      	adds	r7, #16
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d004      	beq.n	8001e5e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2280      	movs	r2, #128	; 0x80
 8001e58:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e00c      	b.n	8001e78 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2205      	movs	r2, #5
 8001e62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f022 0201 	bic.w	r2, r2, #1
 8001e74:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001e76:	2300      	movs	r3, #0
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b086      	sub	sp, #24
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001e90:	4b8e      	ldr	r3, [pc, #568]	; (80020cc <HAL_DMA_IRQHandler+0x248>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a8e      	ldr	r2, [pc, #568]	; (80020d0 <HAL_DMA_IRQHandler+0x24c>)
 8001e96:	fba2 2303 	umull	r2, r3, r2, r3
 8001e9a:	0a9b      	lsrs	r3, r3, #10
 8001e9c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eae:	2208      	movs	r2, #8
 8001eb0:	409a      	lsls	r2, r3
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d01a      	beq.n	8001ef0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0304 	and.w	r3, r3, #4
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d013      	beq.n	8001ef0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f022 0204 	bic.w	r2, r2, #4
 8001ed6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001edc:	2208      	movs	r2, #8
 8001ede:	409a      	lsls	r2, r3
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ee8:	f043 0201 	orr.w	r2, r3, #1
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	409a      	lsls	r2, r3
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	4013      	ands	r3, r2
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d012      	beq.n	8001f26 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	695b      	ldr	r3, [r3, #20]
 8001f06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d00b      	beq.n	8001f26 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f12:	2201      	movs	r2, #1
 8001f14:	409a      	lsls	r2, r3
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f1e:	f043 0202 	orr.w	r2, r3, #2
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f2a:	2204      	movs	r2, #4
 8001f2c:	409a      	lsls	r2, r3
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	4013      	ands	r3, r2
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d012      	beq.n	8001f5c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 0302 	and.w	r3, r3, #2
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d00b      	beq.n	8001f5c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f48:	2204      	movs	r2, #4
 8001f4a:	409a      	lsls	r2, r3
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f54:	f043 0204 	orr.w	r2, r3, #4
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f60:	2210      	movs	r2, #16
 8001f62:	409a      	lsls	r2, r3
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	4013      	ands	r3, r2
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d043      	beq.n	8001ff4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0308 	and.w	r3, r3, #8
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d03c      	beq.n	8001ff4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f7e:	2210      	movs	r2, #16
 8001f80:	409a      	lsls	r2, r3
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d018      	beq.n	8001fc6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d108      	bne.n	8001fb4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d024      	beq.n	8001ff4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	4798      	blx	r3
 8001fb2:	e01f      	b.n	8001ff4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d01b      	beq.n	8001ff4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	4798      	blx	r3
 8001fc4:	e016      	b.n	8001ff4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d107      	bne.n	8001fe4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f022 0208 	bic.w	r2, r2, #8
 8001fe2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d003      	beq.n	8001ff4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ff8:	2220      	movs	r2, #32
 8001ffa:	409a      	lsls	r2, r3
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	4013      	ands	r3, r2
 8002000:	2b00      	cmp	r3, #0
 8002002:	f000 808f 	beq.w	8002124 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0310 	and.w	r3, r3, #16
 8002010:	2b00      	cmp	r3, #0
 8002012:	f000 8087 	beq.w	8002124 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800201a:	2220      	movs	r2, #32
 800201c:	409a      	lsls	r2, r3
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002028:	b2db      	uxtb	r3, r3
 800202a:	2b05      	cmp	r3, #5
 800202c:	d136      	bne.n	800209c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f022 0216 	bic.w	r2, r2, #22
 800203c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	695a      	ldr	r2, [r3, #20]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800204c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002052:	2b00      	cmp	r3, #0
 8002054:	d103      	bne.n	800205e <HAL_DMA_IRQHandler+0x1da>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800205a:	2b00      	cmp	r3, #0
 800205c:	d007      	beq.n	800206e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f022 0208 	bic.w	r2, r2, #8
 800206c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002072:	223f      	movs	r2, #63	; 0x3f
 8002074:	409a      	lsls	r2, r3
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2201      	movs	r2, #1
 800207e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800208e:	2b00      	cmp	r3, #0
 8002090:	d07e      	beq.n	8002190 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	4798      	blx	r3
        }
        return;
 800209a:	e079      	b.n	8002190 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d01d      	beq.n	80020e6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d10d      	bne.n	80020d4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d031      	beq.n	8002124 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	4798      	blx	r3
 80020c8:	e02c      	b.n	8002124 <HAL_DMA_IRQHandler+0x2a0>
 80020ca:	bf00      	nop
 80020cc:	20000004 	.word	0x20000004
 80020d0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d023      	beq.n	8002124 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	4798      	blx	r3
 80020e4:	e01e      	b.n	8002124 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d10f      	bne.n	8002114 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f022 0210 	bic.w	r2, r2, #16
 8002102:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2201      	movs	r2, #1
 8002108:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2200      	movs	r2, #0
 8002110:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002118:	2b00      	cmp	r3, #0
 800211a:	d003      	beq.n	8002124 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002128:	2b00      	cmp	r3, #0
 800212a:	d032      	beq.n	8002192 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002130:	f003 0301 	and.w	r3, r3, #1
 8002134:	2b00      	cmp	r3, #0
 8002136:	d022      	beq.n	800217e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2205      	movs	r2, #5
 800213c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f022 0201 	bic.w	r2, r2, #1
 800214e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	3301      	adds	r3, #1
 8002154:	60bb      	str	r3, [r7, #8]
 8002156:	697a      	ldr	r2, [r7, #20]
 8002158:	429a      	cmp	r2, r3
 800215a:	d307      	bcc.n	800216c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0301 	and.w	r3, r3, #1
 8002166:	2b00      	cmp	r3, #0
 8002168:	d1f2      	bne.n	8002150 <HAL_DMA_IRQHandler+0x2cc>
 800216a:	e000      	b.n	800216e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800216c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2201      	movs	r2, #1
 8002172:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002182:	2b00      	cmp	r3, #0
 8002184:	d005      	beq.n	8002192 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	4798      	blx	r3
 800218e:	e000      	b.n	8002192 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002190:	bf00      	nop
    }
  }
}
 8002192:	3718      	adds	r7, #24
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}

08002198 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002198:	b480      	push	{r7}
 800219a:	b085      	sub	sp, #20
 800219c:	af00      	add	r7, sp, #0
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	60b9      	str	r1, [r7, #8]
 80021a2:	607a      	str	r2, [r7, #4]
 80021a4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80021b4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	683a      	ldr	r2, [r7, #0]
 80021bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	2b40      	cmp	r3, #64	; 0x40
 80021c4:	d108      	bne.n	80021d8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	68ba      	ldr	r2, [r7, #8]
 80021d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80021d6:	e007      	b.n	80021e8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	68ba      	ldr	r2, [r7, #8]
 80021de:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	60da      	str	r2, [r3, #12]
}
 80021e8:	bf00      	nop
 80021ea:	3714      	adds	r7, #20
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b085      	sub	sp, #20
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	b2db      	uxtb	r3, r3
 8002202:	3b10      	subs	r3, #16
 8002204:	4a14      	ldr	r2, [pc, #80]	; (8002258 <DMA_CalcBaseAndBitshift+0x64>)
 8002206:	fba2 2303 	umull	r2, r3, r2, r3
 800220a:	091b      	lsrs	r3, r3, #4
 800220c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800220e:	4a13      	ldr	r2, [pc, #76]	; (800225c <DMA_CalcBaseAndBitshift+0x68>)
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	4413      	add	r3, r2
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	461a      	mov	r2, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2b03      	cmp	r3, #3
 8002220:	d909      	bls.n	8002236 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800222a:	f023 0303 	bic.w	r3, r3, #3
 800222e:	1d1a      	adds	r2, r3, #4
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	659a      	str	r2, [r3, #88]	; 0x58
 8002234:	e007      	b.n	8002246 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800223e:	f023 0303 	bic.w	r3, r3, #3
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800224a:	4618      	mov	r0, r3
 800224c:	3714      	adds	r7, #20
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	aaaaaaab 	.word	0xaaaaaaab
 800225c:	08011f4c 	.word	0x08011f4c

08002260 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002260:	b480      	push	{r7}
 8002262:	b085      	sub	sp, #20
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002268:	2300      	movs	r3, #0
 800226a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002270:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	699b      	ldr	r3, [r3, #24]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d11f      	bne.n	80022ba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	2b03      	cmp	r3, #3
 800227e:	d856      	bhi.n	800232e <DMA_CheckFifoParam+0xce>
 8002280:	a201      	add	r2, pc, #4	; (adr r2, 8002288 <DMA_CheckFifoParam+0x28>)
 8002282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002286:	bf00      	nop
 8002288:	08002299 	.word	0x08002299
 800228c:	080022ab 	.word	0x080022ab
 8002290:	08002299 	.word	0x08002299
 8002294:	0800232f 	.word	0x0800232f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800229c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d046      	beq.n	8002332 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022a8:	e043      	b.n	8002332 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80022b2:	d140      	bne.n	8002336 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022b8:	e03d      	b.n	8002336 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	699b      	ldr	r3, [r3, #24]
 80022be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022c2:	d121      	bne.n	8002308 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	2b03      	cmp	r3, #3
 80022c8:	d837      	bhi.n	800233a <DMA_CheckFifoParam+0xda>
 80022ca:	a201      	add	r2, pc, #4	; (adr r2, 80022d0 <DMA_CheckFifoParam+0x70>)
 80022cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022d0:	080022e1 	.word	0x080022e1
 80022d4:	080022e7 	.word	0x080022e7
 80022d8:	080022e1 	.word	0x080022e1
 80022dc:	080022f9 	.word	0x080022f9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	73fb      	strb	r3, [r7, #15]
      break;
 80022e4:	e030      	b.n	8002348 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d025      	beq.n	800233e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022f6:	e022      	b.n	800233e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022fc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002300:	d11f      	bne.n	8002342 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002306:	e01c      	b.n	8002342 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	2b02      	cmp	r3, #2
 800230c:	d903      	bls.n	8002316 <DMA_CheckFifoParam+0xb6>
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	2b03      	cmp	r3, #3
 8002312:	d003      	beq.n	800231c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002314:	e018      	b.n	8002348 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	73fb      	strb	r3, [r7, #15]
      break;
 800231a:	e015      	b.n	8002348 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002320:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d00e      	beq.n	8002346 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	73fb      	strb	r3, [r7, #15]
      break;
 800232c:	e00b      	b.n	8002346 <DMA_CheckFifoParam+0xe6>
      break;
 800232e:	bf00      	nop
 8002330:	e00a      	b.n	8002348 <DMA_CheckFifoParam+0xe8>
      break;
 8002332:	bf00      	nop
 8002334:	e008      	b.n	8002348 <DMA_CheckFifoParam+0xe8>
      break;
 8002336:	bf00      	nop
 8002338:	e006      	b.n	8002348 <DMA_CheckFifoParam+0xe8>
      break;
 800233a:	bf00      	nop
 800233c:	e004      	b.n	8002348 <DMA_CheckFifoParam+0xe8>
      break;
 800233e:	bf00      	nop
 8002340:	e002      	b.n	8002348 <DMA_CheckFifoParam+0xe8>
      break;   
 8002342:	bf00      	nop
 8002344:	e000      	b.n	8002348 <DMA_CheckFifoParam+0xe8>
      break;
 8002346:	bf00      	nop
    }
  } 
  
  return status; 
 8002348:	7bfb      	ldrb	r3, [r7, #15]
}
 800234a:	4618      	mov	r0, r3
 800234c:	3714      	adds	r7, #20
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop

08002358 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002358:	b480      	push	{r7}
 800235a:	b089      	sub	sp, #36	; 0x24
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002362:	2300      	movs	r3, #0
 8002364:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002366:	2300      	movs	r3, #0
 8002368:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800236a:	2300      	movs	r3, #0
 800236c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800236e:	2300      	movs	r3, #0
 8002370:	61fb      	str	r3, [r7, #28]
 8002372:	e165      	b.n	8002640 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002374:	2201      	movs	r2, #1
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	fa02 f303 	lsl.w	r3, r2, r3
 800237c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	697a      	ldr	r2, [r7, #20]
 8002384:	4013      	ands	r3, r2
 8002386:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002388:	693a      	ldr	r2, [r7, #16]
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	429a      	cmp	r2, r3
 800238e:	f040 8154 	bne.w	800263a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	f003 0303 	and.w	r3, r3, #3
 800239a:	2b01      	cmp	r3, #1
 800239c:	d005      	beq.n	80023aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d130      	bne.n	800240c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	005b      	lsls	r3, r3, #1
 80023b4:	2203      	movs	r2, #3
 80023b6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ba:	43db      	mvns	r3, r3
 80023bc:	69ba      	ldr	r2, [r7, #24]
 80023be:	4013      	ands	r3, r2
 80023c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	68da      	ldr	r2, [r3, #12]
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	005b      	lsls	r3, r3, #1
 80023ca:	fa02 f303 	lsl.w	r3, r2, r3
 80023ce:	69ba      	ldr	r2, [r7, #24]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	69ba      	ldr	r2, [r7, #24]
 80023d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023e0:	2201      	movs	r2, #1
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	fa02 f303 	lsl.w	r3, r2, r3
 80023e8:	43db      	mvns	r3, r3
 80023ea:	69ba      	ldr	r2, [r7, #24]
 80023ec:	4013      	ands	r3, r2
 80023ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	091b      	lsrs	r3, r3, #4
 80023f6:	f003 0201 	and.w	r2, r3, #1
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	4313      	orrs	r3, r2
 8002404:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f003 0303 	and.w	r3, r3, #3
 8002414:	2b03      	cmp	r3, #3
 8002416:	d017      	beq.n	8002448 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	005b      	lsls	r3, r3, #1
 8002422:	2203      	movs	r2, #3
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	43db      	mvns	r3, r3
 800242a:	69ba      	ldr	r2, [r7, #24]
 800242c:	4013      	ands	r3, r2
 800242e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	689a      	ldr	r2, [r3, #8]
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	005b      	lsls	r3, r3, #1
 8002438:	fa02 f303 	lsl.w	r3, r2, r3
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	4313      	orrs	r3, r2
 8002440:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f003 0303 	and.w	r3, r3, #3
 8002450:	2b02      	cmp	r3, #2
 8002452:	d123      	bne.n	800249c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	08da      	lsrs	r2, r3, #3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	3208      	adds	r2, #8
 800245c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002460:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	f003 0307 	and.w	r3, r3, #7
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	220f      	movs	r2, #15
 800246c:	fa02 f303 	lsl.w	r3, r2, r3
 8002470:	43db      	mvns	r3, r3
 8002472:	69ba      	ldr	r2, [r7, #24]
 8002474:	4013      	ands	r3, r2
 8002476:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	691a      	ldr	r2, [r3, #16]
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	f003 0307 	and.w	r3, r3, #7
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	fa02 f303 	lsl.w	r3, r2, r3
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	4313      	orrs	r3, r2
 800248c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	08da      	lsrs	r2, r3, #3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	3208      	adds	r2, #8
 8002496:	69b9      	ldr	r1, [r7, #24]
 8002498:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	005b      	lsls	r3, r3, #1
 80024a6:	2203      	movs	r2, #3
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	43db      	mvns	r3, r3
 80024ae:	69ba      	ldr	r2, [r7, #24]
 80024b0:	4013      	ands	r3, r2
 80024b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f003 0203 	and.w	r2, r3, #3
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	005b      	lsls	r3, r3, #1
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	f000 80ae 	beq.w	800263a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024de:	2300      	movs	r3, #0
 80024e0:	60fb      	str	r3, [r7, #12]
 80024e2:	4b5d      	ldr	r3, [pc, #372]	; (8002658 <HAL_GPIO_Init+0x300>)
 80024e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e6:	4a5c      	ldr	r2, [pc, #368]	; (8002658 <HAL_GPIO_Init+0x300>)
 80024e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024ec:	6453      	str	r3, [r2, #68]	; 0x44
 80024ee:	4b5a      	ldr	r3, [pc, #360]	; (8002658 <HAL_GPIO_Init+0x300>)
 80024f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024f6:	60fb      	str	r3, [r7, #12]
 80024f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024fa:	4a58      	ldr	r2, [pc, #352]	; (800265c <HAL_GPIO_Init+0x304>)
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	089b      	lsrs	r3, r3, #2
 8002500:	3302      	adds	r3, #2
 8002502:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002506:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	f003 0303 	and.w	r3, r3, #3
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	220f      	movs	r2, #15
 8002512:	fa02 f303 	lsl.w	r3, r2, r3
 8002516:	43db      	mvns	r3, r3
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	4013      	ands	r3, r2
 800251c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a4f      	ldr	r2, [pc, #316]	; (8002660 <HAL_GPIO_Init+0x308>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d025      	beq.n	8002572 <HAL_GPIO_Init+0x21a>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a4e      	ldr	r2, [pc, #312]	; (8002664 <HAL_GPIO_Init+0x30c>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d01f      	beq.n	800256e <HAL_GPIO_Init+0x216>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a4d      	ldr	r2, [pc, #308]	; (8002668 <HAL_GPIO_Init+0x310>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d019      	beq.n	800256a <HAL_GPIO_Init+0x212>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a4c      	ldr	r2, [pc, #304]	; (800266c <HAL_GPIO_Init+0x314>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d013      	beq.n	8002566 <HAL_GPIO_Init+0x20e>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a4b      	ldr	r2, [pc, #300]	; (8002670 <HAL_GPIO_Init+0x318>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d00d      	beq.n	8002562 <HAL_GPIO_Init+0x20a>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a4a      	ldr	r2, [pc, #296]	; (8002674 <HAL_GPIO_Init+0x31c>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d007      	beq.n	800255e <HAL_GPIO_Init+0x206>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a49      	ldr	r2, [pc, #292]	; (8002678 <HAL_GPIO_Init+0x320>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d101      	bne.n	800255a <HAL_GPIO_Init+0x202>
 8002556:	2306      	movs	r3, #6
 8002558:	e00c      	b.n	8002574 <HAL_GPIO_Init+0x21c>
 800255a:	2307      	movs	r3, #7
 800255c:	e00a      	b.n	8002574 <HAL_GPIO_Init+0x21c>
 800255e:	2305      	movs	r3, #5
 8002560:	e008      	b.n	8002574 <HAL_GPIO_Init+0x21c>
 8002562:	2304      	movs	r3, #4
 8002564:	e006      	b.n	8002574 <HAL_GPIO_Init+0x21c>
 8002566:	2303      	movs	r3, #3
 8002568:	e004      	b.n	8002574 <HAL_GPIO_Init+0x21c>
 800256a:	2302      	movs	r3, #2
 800256c:	e002      	b.n	8002574 <HAL_GPIO_Init+0x21c>
 800256e:	2301      	movs	r3, #1
 8002570:	e000      	b.n	8002574 <HAL_GPIO_Init+0x21c>
 8002572:	2300      	movs	r3, #0
 8002574:	69fa      	ldr	r2, [r7, #28]
 8002576:	f002 0203 	and.w	r2, r2, #3
 800257a:	0092      	lsls	r2, r2, #2
 800257c:	4093      	lsls	r3, r2
 800257e:	69ba      	ldr	r2, [r7, #24]
 8002580:	4313      	orrs	r3, r2
 8002582:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002584:	4935      	ldr	r1, [pc, #212]	; (800265c <HAL_GPIO_Init+0x304>)
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	089b      	lsrs	r3, r3, #2
 800258a:	3302      	adds	r3, #2
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002592:	4b3a      	ldr	r3, [pc, #232]	; (800267c <HAL_GPIO_Init+0x324>)
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	43db      	mvns	r3, r3
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	4013      	ands	r3, r2
 80025a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d003      	beq.n	80025b6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80025ae:	69ba      	ldr	r2, [r7, #24]
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025b6:	4a31      	ldr	r2, [pc, #196]	; (800267c <HAL_GPIO_Init+0x324>)
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025bc:	4b2f      	ldr	r3, [pc, #188]	; (800267c <HAL_GPIO_Init+0x324>)
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	43db      	mvns	r3, r3
 80025c6:	69ba      	ldr	r2, [r7, #24]
 80025c8:	4013      	ands	r3, r2
 80025ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d003      	beq.n	80025e0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	4313      	orrs	r3, r2
 80025de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025e0:	4a26      	ldr	r2, [pc, #152]	; (800267c <HAL_GPIO_Init+0x324>)
 80025e2:	69bb      	ldr	r3, [r7, #24]
 80025e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80025e6:	4b25      	ldr	r3, [pc, #148]	; (800267c <HAL_GPIO_Init+0x324>)
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	43db      	mvns	r3, r3
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	4013      	ands	r3, r2
 80025f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d003      	beq.n	800260a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002602:	69ba      	ldr	r2, [r7, #24]
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	4313      	orrs	r3, r2
 8002608:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800260a:	4a1c      	ldr	r2, [pc, #112]	; (800267c <HAL_GPIO_Init+0x324>)
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002610:	4b1a      	ldr	r3, [pc, #104]	; (800267c <HAL_GPIO_Init+0x324>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	43db      	mvns	r3, r3
 800261a:	69ba      	ldr	r2, [r7, #24]
 800261c:	4013      	ands	r3, r2
 800261e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d003      	beq.n	8002634 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	4313      	orrs	r3, r2
 8002632:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002634:	4a11      	ldr	r2, [pc, #68]	; (800267c <HAL_GPIO_Init+0x324>)
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	3301      	adds	r3, #1
 800263e:	61fb      	str	r3, [r7, #28]
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	2b0f      	cmp	r3, #15
 8002644:	f67f ae96 	bls.w	8002374 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002648:	bf00      	nop
 800264a:	bf00      	nop
 800264c:	3724      	adds	r7, #36	; 0x24
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	40023800 	.word	0x40023800
 800265c:	40013800 	.word	0x40013800
 8002660:	40020000 	.word	0x40020000
 8002664:	40020400 	.word	0x40020400
 8002668:	40020800 	.word	0x40020800
 800266c:	40020c00 	.word	0x40020c00
 8002670:	40021000 	.word	0x40021000
 8002674:	40021400 	.word	0x40021400
 8002678:	40021800 	.word	0x40021800
 800267c:	40013c00 	.word	0x40013c00

08002680 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002686:	2300      	movs	r3, #0
 8002688:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800268a:	2300      	movs	r3, #0
 800268c:	603b      	str	r3, [r7, #0]
 800268e:	4b20      	ldr	r3, [pc, #128]	; (8002710 <HAL_PWREx_EnableOverDrive+0x90>)
 8002690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002692:	4a1f      	ldr	r2, [pc, #124]	; (8002710 <HAL_PWREx_EnableOverDrive+0x90>)
 8002694:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002698:	6413      	str	r3, [r2, #64]	; 0x40
 800269a:	4b1d      	ldr	r3, [pc, #116]	; (8002710 <HAL_PWREx_EnableOverDrive+0x90>)
 800269c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026a2:	603b      	str	r3, [r7, #0]
 80026a4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80026a6:	4b1b      	ldr	r3, [pc, #108]	; (8002714 <HAL_PWREx_EnableOverDrive+0x94>)
 80026a8:	2201      	movs	r2, #1
 80026aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80026ac:	f7ff f964 	bl	8001978 <HAL_GetTick>
 80026b0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80026b2:	e009      	b.n	80026c8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80026b4:	f7ff f960 	bl	8001978 <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80026c2:	d901      	bls.n	80026c8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80026c4:	2303      	movs	r3, #3
 80026c6:	e01f      	b.n	8002708 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80026c8:	4b13      	ldr	r3, [pc, #76]	; (8002718 <HAL_PWREx_EnableOverDrive+0x98>)
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026d4:	d1ee      	bne.n	80026b4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80026d6:	4b11      	ldr	r3, [pc, #68]	; (800271c <HAL_PWREx_EnableOverDrive+0x9c>)
 80026d8:	2201      	movs	r2, #1
 80026da:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80026dc:	f7ff f94c 	bl	8001978 <HAL_GetTick>
 80026e0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80026e2:	e009      	b.n	80026f8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80026e4:	f7ff f948 	bl	8001978 <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80026f2:	d901      	bls.n	80026f8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80026f4:	2303      	movs	r3, #3
 80026f6:	e007      	b.n	8002708 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80026f8:	4b07      	ldr	r3, [pc, #28]	; (8002718 <HAL_PWREx_EnableOverDrive+0x98>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002700:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002704:	d1ee      	bne.n	80026e4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002706:	2300      	movs	r3, #0
}
 8002708:	4618      	mov	r0, r3
 800270a:	3708      	adds	r7, #8
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	40023800 	.word	0x40023800
 8002714:	420e0040 	.word	0x420e0040
 8002718:	40007000 	.word	0x40007000
 800271c:	420e0044 	.word	0x420e0044

08002720 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d101      	bne.n	8002734 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e0cc      	b.n	80028ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002734:	4b68      	ldr	r3, [pc, #416]	; (80028d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 030f 	and.w	r3, r3, #15
 800273c:	683a      	ldr	r2, [r7, #0]
 800273e:	429a      	cmp	r2, r3
 8002740:	d90c      	bls.n	800275c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002742:	4b65      	ldr	r3, [pc, #404]	; (80028d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002744:	683a      	ldr	r2, [r7, #0]
 8002746:	b2d2      	uxtb	r2, r2
 8002748:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800274a:	4b63      	ldr	r3, [pc, #396]	; (80028d8 <HAL_RCC_ClockConfig+0x1b8>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 030f 	and.w	r3, r3, #15
 8002752:	683a      	ldr	r2, [r7, #0]
 8002754:	429a      	cmp	r2, r3
 8002756:	d001      	beq.n	800275c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e0b8      	b.n	80028ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0302 	and.w	r3, r3, #2
 8002764:	2b00      	cmp	r3, #0
 8002766:	d020      	beq.n	80027aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0304 	and.w	r3, r3, #4
 8002770:	2b00      	cmp	r3, #0
 8002772:	d005      	beq.n	8002780 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002774:	4b59      	ldr	r3, [pc, #356]	; (80028dc <HAL_RCC_ClockConfig+0x1bc>)
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	4a58      	ldr	r2, [pc, #352]	; (80028dc <HAL_RCC_ClockConfig+0x1bc>)
 800277a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800277e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0308 	and.w	r3, r3, #8
 8002788:	2b00      	cmp	r3, #0
 800278a:	d005      	beq.n	8002798 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800278c:	4b53      	ldr	r3, [pc, #332]	; (80028dc <HAL_RCC_ClockConfig+0x1bc>)
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	4a52      	ldr	r2, [pc, #328]	; (80028dc <HAL_RCC_ClockConfig+0x1bc>)
 8002792:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002796:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002798:	4b50      	ldr	r3, [pc, #320]	; (80028dc <HAL_RCC_ClockConfig+0x1bc>)
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	494d      	ldr	r1, [pc, #308]	; (80028dc <HAL_RCC_ClockConfig+0x1bc>)
 80027a6:	4313      	orrs	r3, r2
 80027a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d044      	beq.n	8002840 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d107      	bne.n	80027ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027be:	4b47      	ldr	r3, [pc, #284]	; (80028dc <HAL_RCC_ClockConfig+0x1bc>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d119      	bne.n	80027fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e07f      	b.n	80028ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d003      	beq.n	80027de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027da:	2b03      	cmp	r3, #3
 80027dc:	d107      	bne.n	80027ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027de:	4b3f      	ldr	r3, [pc, #252]	; (80028dc <HAL_RCC_ClockConfig+0x1bc>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d109      	bne.n	80027fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e06f      	b.n	80028ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ee:	4b3b      	ldr	r3, [pc, #236]	; (80028dc <HAL_RCC_ClockConfig+0x1bc>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0302 	and.w	r3, r3, #2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d101      	bne.n	80027fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e067      	b.n	80028ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027fe:	4b37      	ldr	r3, [pc, #220]	; (80028dc <HAL_RCC_ClockConfig+0x1bc>)
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f023 0203 	bic.w	r2, r3, #3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	4934      	ldr	r1, [pc, #208]	; (80028dc <HAL_RCC_ClockConfig+0x1bc>)
 800280c:	4313      	orrs	r3, r2
 800280e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002810:	f7ff f8b2 	bl	8001978 <HAL_GetTick>
 8002814:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002816:	e00a      	b.n	800282e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002818:	f7ff f8ae 	bl	8001978 <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	f241 3288 	movw	r2, #5000	; 0x1388
 8002826:	4293      	cmp	r3, r2
 8002828:	d901      	bls.n	800282e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e04f      	b.n	80028ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800282e:	4b2b      	ldr	r3, [pc, #172]	; (80028dc <HAL_RCC_ClockConfig+0x1bc>)
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	f003 020c 	and.w	r2, r3, #12
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	429a      	cmp	r2, r3
 800283e:	d1eb      	bne.n	8002818 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002840:	4b25      	ldr	r3, [pc, #148]	; (80028d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 030f 	and.w	r3, r3, #15
 8002848:	683a      	ldr	r2, [r7, #0]
 800284a:	429a      	cmp	r2, r3
 800284c:	d20c      	bcs.n	8002868 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800284e:	4b22      	ldr	r3, [pc, #136]	; (80028d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002850:	683a      	ldr	r2, [r7, #0]
 8002852:	b2d2      	uxtb	r2, r2
 8002854:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002856:	4b20      	ldr	r3, [pc, #128]	; (80028d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 030f 	and.w	r3, r3, #15
 800285e:	683a      	ldr	r2, [r7, #0]
 8002860:	429a      	cmp	r2, r3
 8002862:	d001      	beq.n	8002868 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e032      	b.n	80028ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0304 	and.w	r3, r3, #4
 8002870:	2b00      	cmp	r3, #0
 8002872:	d008      	beq.n	8002886 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002874:	4b19      	ldr	r3, [pc, #100]	; (80028dc <HAL_RCC_ClockConfig+0x1bc>)
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	4916      	ldr	r1, [pc, #88]	; (80028dc <HAL_RCC_ClockConfig+0x1bc>)
 8002882:	4313      	orrs	r3, r2
 8002884:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0308 	and.w	r3, r3, #8
 800288e:	2b00      	cmp	r3, #0
 8002890:	d009      	beq.n	80028a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002892:	4b12      	ldr	r3, [pc, #72]	; (80028dc <HAL_RCC_ClockConfig+0x1bc>)
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	691b      	ldr	r3, [r3, #16]
 800289e:	00db      	lsls	r3, r3, #3
 80028a0:	490e      	ldr	r1, [pc, #56]	; (80028dc <HAL_RCC_ClockConfig+0x1bc>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028a6:	f000 f887 	bl	80029b8 <HAL_RCC_GetSysClockFreq>
 80028aa:	4602      	mov	r2, r0
 80028ac:	4b0b      	ldr	r3, [pc, #44]	; (80028dc <HAL_RCC_ClockConfig+0x1bc>)
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	091b      	lsrs	r3, r3, #4
 80028b2:	f003 030f 	and.w	r3, r3, #15
 80028b6:	490a      	ldr	r1, [pc, #40]	; (80028e0 <HAL_RCC_ClockConfig+0x1c0>)
 80028b8:	5ccb      	ldrb	r3, [r1, r3]
 80028ba:	fa22 f303 	lsr.w	r3, r2, r3
 80028be:	4a09      	ldr	r2, [pc, #36]	; (80028e4 <HAL_RCC_ClockConfig+0x1c4>)
 80028c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80028c2:	4b09      	ldr	r3, [pc, #36]	; (80028e8 <HAL_RCC_ClockConfig+0x1c8>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7fe fc42 	bl	8001150 <HAL_InitTick>

  return HAL_OK;
 80028cc:	2300      	movs	r3, #0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3710      	adds	r7, #16
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	40023c00 	.word	0x40023c00
 80028dc:	40023800 	.word	0x40023800
 80028e0:	08011f34 	.word	0x08011f34
 80028e4:	20000004 	.word	0x20000004
 80028e8:	20000008 	.word	0x20000008

080028ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028f0:	4b03      	ldr	r3, [pc, #12]	; (8002900 <HAL_RCC_GetHCLKFreq+0x14>)
 80028f2:	681b      	ldr	r3, [r3, #0]
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
 80028fe:	bf00      	nop
 8002900:	20000004 	.word	0x20000004

08002904 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002908:	f7ff fff0 	bl	80028ec <HAL_RCC_GetHCLKFreq>
 800290c:	4602      	mov	r2, r0
 800290e:	4b05      	ldr	r3, [pc, #20]	; (8002924 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	0a9b      	lsrs	r3, r3, #10
 8002914:	f003 0307 	and.w	r3, r3, #7
 8002918:	4903      	ldr	r1, [pc, #12]	; (8002928 <HAL_RCC_GetPCLK1Freq+0x24>)
 800291a:	5ccb      	ldrb	r3, [r1, r3]
 800291c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002920:	4618      	mov	r0, r3
 8002922:	bd80      	pop	{r7, pc}
 8002924:	40023800 	.word	0x40023800
 8002928:	08011f44 	.word	0x08011f44

0800292c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002930:	f7ff ffdc 	bl	80028ec <HAL_RCC_GetHCLKFreq>
 8002934:	4602      	mov	r2, r0
 8002936:	4b05      	ldr	r3, [pc, #20]	; (800294c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	0b5b      	lsrs	r3, r3, #13
 800293c:	f003 0307 	and.w	r3, r3, #7
 8002940:	4903      	ldr	r1, [pc, #12]	; (8002950 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002942:	5ccb      	ldrb	r3, [r1, r3]
 8002944:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002948:	4618      	mov	r0, r3
 800294a:	bd80      	pop	{r7, pc}
 800294c:	40023800 	.word	0x40023800
 8002950:	08011f44 	.word	0x08011f44

08002954 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	220f      	movs	r2, #15
 8002962:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002964:	4b12      	ldr	r3, [pc, #72]	; (80029b0 <HAL_RCC_GetClockConfig+0x5c>)
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f003 0203 	and.w	r2, r3, #3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002970:	4b0f      	ldr	r3, [pc, #60]	; (80029b0 <HAL_RCC_GetClockConfig+0x5c>)
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800297c:	4b0c      	ldr	r3, [pc, #48]	; (80029b0 <HAL_RCC_GetClockConfig+0x5c>)
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002988:	4b09      	ldr	r3, [pc, #36]	; (80029b0 <HAL_RCC_GetClockConfig+0x5c>)
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	08db      	lsrs	r3, r3, #3
 800298e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002996:	4b07      	ldr	r3, [pc, #28]	; (80029b4 <HAL_RCC_GetClockConfig+0x60>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 020f 	and.w	r2, r3, #15
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	601a      	str	r2, [r3, #0]
}
 80029a2:	bf00      	nop
 80029a4:	370c      	adds	r7, #12
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	40023800 	.word	0x40023800
 80029b4:	40023c00 	.word	0x40023c00

080029b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029bc:	b0a6      	sub	sp, #152	; 0x98
 80029be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80029c0:	2300      	movs	r3, #0
 80029c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 80029c6:	2300      	movs	r3, #0
 80029c8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 80029cc:	2300      	movs	r3, #0
 80029ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 80029d2:	2300      	movs	r3, #0
 80029d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 80029d8:	2300      	movs	r3, #0
 80029da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029de:	4bc8      	ldr	r3, [pc, #800]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x348>)
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f003 030c 	and.w	r3, r3, #12
 80029e6:	2b0c      	cmp	r3, #12
 80029e8:	f200 817e 	bhi.w	8002ce8 <HAL_RCC_GetSysClockFreq+0x330>
 80029ec:	a201      	add	r2, pc, #4	; (adr r2, 80029f4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80029ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029f2:	bf00      	nop
 80029f4:	08002a29 	.word	0x08002a29
 80029f8:	08002ce9 	.word	0x08002ce9
 80029fc:	08002ce9 	.word	0x08002ce9
 8002a00:	08002ce9 	.word	0x08002ce9
 8002a04:	08002a31 	.word	0x08002a31
 8002a08:	08002ce9 	.word	0x08002ce9
 8002a0c:	08002ce9 	.word	0x08002ce9
 8002a10:	08002ce9 	.word	0x08002ce9
 8002a14:	08002a39 	.word	0x08002a39
 8002a18:	08002ce9 	.word	0x08002ce9
 8002a1c:	08002ce9 	.word	0x08002ce9
 8002a20:	08002ce9 	.word	0x08002ce9
 8002a24:	08002ba3 	.word	0x08002ba3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a28:	4bb6      	ldr	r3, [pc, #728]	; (8002d04 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002a2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8002a2e:	e15f      	b.n	8002cf0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a30:	4bb5      	ldr	r3, [pc, #724]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x350>)
 8002a32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002a36:	e15b      	b.n	8002cf0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a38:	4bb1      	ldr	r3, [pc, #708]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x348>)
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a40:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a44:	4bae      	ldr	r3, [pc, #696]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x348>)
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d031      	beq.n	8002ab4 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a50:	4bab      	ldr	r3, [pc, #684]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x348>)
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	099b      	lsrs	r3, r3, #6
 8002a56:	2200      	movs	r2, #0
 8002a58:	66bb      	str	r3, [r7, #104]	; 0x68
 8002a5a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002a5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a62:	663b      	str	r3, [r7, #96]	; 0x60
 8002a64:	2300      	movs	r3, #0
 8002a66:	667b      	str	r3, [r7, #100]	; 0x64
 8002a68:	4ba7      	ldr	r3, [pc, #668]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x350>)
 8002a6a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002a6e:	462a      	mov	r2, r5
 8002a70:	fb03 f202 	mul.w	r2, r3, r2
 8002a74:	2300      	movs	r3, #0
 8002a76:	4621      	mov	r1, r4
 8002a78:	fb01 f303 	mul.w	r3, r1, r3
 8002a7c:	4413      	add	r3, r2
 8002a7e:	4aa2      	ldr	r2, [pc, #648]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x350>)
 8002a80:	4621      	mov	r1, r4
 8002a82:	fba1 1202 	umull	r1, r2, r1, r2
 8002a86:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002a88:	460a      	mov	r2, r1
 8002a8a:	67ba      	str	r2, [r7, #120]	; 0x78
 8002a8c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002a8e:	4413      	add	r3, r2
 8002a90:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002a92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a96:	2200      	movs	r2, #0
 8002a98:	65bb      	str	r3, [r7, #88]	; 0x58
 8002a9a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002a9c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002aa0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8002aa4:	f7fd fc6c 	bl	8000380 <__aeabi_uldivmod>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	460b      	mov	r3, r1
 8002aac:	4613      	mov	r3, r2
 8002aae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002ab2:	e064      	b.n	8002b7e <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ab4:	4b92      	ldr	r3, [pc, #584]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x348>)
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	099b      	lsrs	r3, r3, #6
 8002aba:	2200      	movs	r2, #0
 8002abc:	653b      	str	r3, [r7, #80]	; 0x50
 8002abe:	657a      	str	r2, [r7, #84]	; 0x54
 8002ac0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ac2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ac6:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ac8:	2300      	movs	r3, #0
 8002aca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002acc:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8002ad0:	4622      	mov	r2, r4
 8002ad2:	462b      	mov	r3, r5
 8002ad4:	f04f 0000 	mov.w	r0, #0
 8002ad8:	f04f 0100 	mov.w	r1, #0
 8002adc:	0159      	lsls	r1, r3, #5
 8002ade:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ae2:	0150      	lsls	r0, r2, #5
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	460b      	mov	r3, r1
 8002ae8:	4621      	mov	r1, r4
 8002aea:	1a51      	subs	r1, r2, r1
 8002aec:	6139      	str	r1, [r7, #16]
 8002aee:	4629      	mov	r1, r5
 8002af0:	eb63 0301 	sbc.w	r3, r3, r1
 8002af4:	617b      	str	r3, [r7, #20]
 8002af6:	f04f 0200 	mov.w	r2, #0
 8002afa:	f04f 0300 	mov.w	r3, #0
 8002afe:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b02:	4659      	mov	r1, fp
 8002b04:	018b      	lsls	r3, r1, #6
 8002b06:	4651      	mov	r1, sl
 8002b08:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b0c:	4651      	mov	r1, sl
 8002b0e:	018a      	lsls	r2, r1, #6
 8002b10:	4651      	mov	r1, sl
 8002b12:	ebb2 0801 	subs.w	r8, r2, r1
 8002b16:	4659      	mov	r1, fp
 8002b18:	eb63 0901 	sbc.w	r9, r3, r1
 8002b1c:	f04f 0200 	mov.w	r2, #0
 8002b20:	f04f 0300 	mov.w	r3, #0
 8002b24:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b28:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b2c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b30:	4690      	mov	r8, r2
 8002b32:	4699      	mov	r9, r3
 8002b34:	4623      	mov	r3, r4
 8002b36:	eb18 0303 	adds.w	r3, r8, r3
 8002b3a:	60bb      	str	r3, [r7, #8]
 8002b3c:	462b      	mov	r3, r5
 8002b3e:	eb49 0303 	adc.w	r3, r9, r3
 8002b42:	60fb      	str	r3, [r7, #12]
 8002b44:	f04f 0200 	mov.w	r2, #0
 8002b48:	f04f 0300 	mov.w	r3, #0
 8002b4c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002b50:	4629      	mov	r1, r5
 8002b52:	028b      	lsls	r3, r1, #10
 8002b54:	4621      	mov	r1, r4
 8002b56:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b5a:	4621      	mov	r1, r4
 8002b5c:	028a      	lsls	r2, r1, #10
 8002b5e:	4610      	mov	r0, r2
 8002b60:	4619      	mov	r1, r3
 8002b62:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b66:	2200      	movs	r2, #0
 8002b68:	643b      	str	r3, [r7, #64]	; 0x40
 8002b6a:	647a      	str	r2, [r7, #68]	; 0x44
 8002b6c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002b70:	f7fd fc06 	bl	8000380 <__aeabi_uldivmod>
 8002b74:	4602      	mov	r2, r0
 8002b76:	460b      	mov	r3, r1
 8002b78:	4613      	mov	r3, r2
 8002b7a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b7e:	4b60      	ldr	r3, [pc, #384]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x348>)
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	0c1b      	lsrs	r3, r3, #16
 8002b84:	f003 0303 	and.w	r3, r3, #3
 8002b88:	3301      	adds	r3, #1
 8002b8a:	005b      	lsls	r3, r3, #1
 8002b8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8002b90:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002b94:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b9c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002ba0:	e0a6      	b.n	8002cf0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ba2:	4b57      	ldr	r3, [pc, #348]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x348>)
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002baa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002bae:	4b54      	ldr	r3, [pc, #336]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x348>)
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d02a      	beq.n	8002c10 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bba:	4b51      	ldr	r3, [pc, #324]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x348>)
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	099b      	lsrs	r3, r3, #6
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	63bb      	str	r3, [r7, #56]	; 0x38
 8002bc4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bc8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002bcc:	2100      	movs	r1, #0
 8002bce:	4b4e      	ldr	r3, [pc, #312]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x350>)
 8002bd0:	fb03 f201 	mul.w	r2, r3, r1
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	fb00 f303 	mul.w	r3, r0, r3
 8002bda:	4413      	add	r3, r2
 8002bdc:	4a4a      	ldr	r2, [pc, #296]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x350>)
 8002bde:	fba0 1202 	umull	r1, r2, r0, r2
 8002be2:	677a      	str	r2, [r7, #116]	; 0x74
 8002be4:	460a      	mov	r2, r1
 8002be6:	673a      	str	r2, [r7, #112]	; 0x70
 8002be8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002bea:	4413      	add	r3, r2
 8002bec:	677b      	str	r3, [r7, #116]	; 0x74
 8002bee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	633b      	str	r3, [r7, #48]	; 0x30
 8002bf6:	637a      	str	r2, [r7, #52]	; 0x34
 8002bf8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002bfc:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8002c00:	f7fd fbbe 	bl	8000380 <__aeabi_uldivmod>
 8002c04:	4602      	mov	r2, r0
 8002c06:	460b      	mov	r3, r1
 8002c08:	4613      	mov	r3, r2
 8002c0a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002c0e:	e05b      	b.n	8002cc8 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c10:	4b3b      	ldr	r3, [pc, #236]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x348>)
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	099b      	lsrs	r3, r3, #6
 8002c16:	2200      	movs	r2, #0
 8002c18:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c22:	623b      	str	r3, [r7, #32]
 8002c24:	2300      	movs	r3, #0
 8002c26:	627b      	str	r3, [r7, #36]	; 0x24
 8002c28:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002c2c:	4642      	mov	r2, r8
 8002c2e:	464b      	mov	r3, r9
 8002c30:	f04f 0000 	mov.w	r0, #0
 8002c34:	f04f 0100 	mov.w	r1, #0
 8002c38:	0159      	lsls	r1, r3, #5
 8002c3a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c3e:	0150      	lsls	r0, r2, #5
 8002c40:	4602      	mov	r2, r0
 8002c42:	460b      	mov	r3, r1
 8002c44:	4641      	mov	r1, r8
 8002c46:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c4a:	4649      	mov	r1, r9
 8002c4c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c50:	f04f 0200 	mov.w	r2, #0
 8002c54:	f04f 0300 	mov.w	r3, #0
 8002c58:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c5c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c60:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002c64:	ebb2 040a 	subs.w	r4, r2, sl
 8002c68:	eb63 050b 	sbc.w	r5, r3, fp
 8002c6c:	f04f 0200 	mov.w	r2, #0
 8002c70:	f04f 0300 	mov.w	r3, #0
 8002c74:	00eb      	lsls	r3, r5, #3
 8002c76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c7a:	00e2      	lsls	r2, r4, #3
 8002c7c:	4614      	mov	r4, r2
 8002c7e:	461d      	mov	r5, r3
 8002c80:	4643      	mov	r3, r8
 8002c82:	18e3      	adds	r3, r4, r3
 8002c84:	603b      	str	r3, [r7, #0]
 8002c86:	464b      	mov	r3, r9
 8002c88:	eb45 0303 	adc.w	r3, r5, r3
 8002c8c:	607b      	str	r3, [r7, #4]
 8002c8e:	f04f 0200 	mov.w	r2, #0
 8002c92:	f04f 0300 	mov.w	r3, #0
 8002c96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c9a:	4629      	mov	r1, r5
 8002c9c:	028b      	lsls	r3, r1, #10
 8002c9e:	4621      	mov	r1, r4
 8002ca0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ca4:	4621      	mov	r1, r4
 8002ca6:	028a      	lsls	r2, r1, #10
 8002ca8:	4610      	mov	r0, r2
 8002caa:	4619      	mov	r1, r3
 8002cac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	61bb      	str	r3, [r7, #24]
 8002cb4:	61fa      	str	r2, [r7, #28]
 8002cb6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cba:	f7fd fb61 	bl	8000380 <__aeabi_uldivmod>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	460b      	mov	r3, r1
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002cc8:	4b0d      	ldr	r3, [pc, #52]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x348>)
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	0f1b      	lsrs	r3, r3, #28
 8002cce:	f003 0307 	and.w	r3, r3, #7
 8002cd2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8002cd6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002cda:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ce2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002ce6:	e003      	b.n	8002cf0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ce8:	4b06      	ldr	r3, [pc, #24]	; (8002d04 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002cea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002cee:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cf0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3798      	adds	r7, #152	; 0x98
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002cfe:	bf00      	nop
 8002d00:	40023800 	.word	0x40023800
 8002d04:	00f42400 	.word	0x00f42400
 8002d08:	017d7840 	.word	0x017d7840

08002d0c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b086      	sub	sp, #24
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d101      	bne.n	8002d1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e28d      	b.n	800323a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0301 	and.w	r3, r3, #1
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	f000 8083 	beq.w	8002e32 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002d2c:	4b94      	ldr	r3, [pc, #592]	; (8002f80 <HAL_RCC_OscConfig+0x274>)
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	f003 030c 	and.w	r3, r3, #12
 8002d34:	2b04      	cmp	r3, #4
 8002d36:	d019      	beq.n	8002d6c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002d38:	4b91      	ldr	r3, [pc, #580]	; (8002f80 <HAL_RCC_OscConfig+0x274>)
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002d40:	2b08      	cmp	r3, #8
 8002d42:	d106      	bne.n	8002d52 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002d44:	4b8e      	ldr	r3, [pc, #568]	; (8002f80 <HAL_RCC_OscConfig+0x274>)
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d50:	d00c      	beq.n	8002d6c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d52:	4b8b      	ldr	r3, [pc, #556]	; (8002f80 <HAL_RCC_OscConfig+0x274>)
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002d5a:	2b0c      	cmp	r3, #12
 8002d5c:	d112      	bne.n	8002d84 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d5e:	4b88      	ldr	r3, [pc, #544]	; (8002f80 <HAL_RCC_OscConfig+0x274>)
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d6a:	d10b      	bne.n	8002d84 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d6c:	4b84      	ldr	r3, [pc, #528]	; (8002f80 <HAL_RCC_OscConfig+0x274>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d05b      	beq.n	8002e30 <HAL_RCC_OscConfig+0x124>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d157      	bne.n	8002e30 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e25a      	b.n	800323a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d8c:	d106      	bne.n	8002d9c <HAL_RCC_OscConfig+0x90>
 8002d8e:	4b7c      	ldr	r3, [pc, #496]	; (8002f80 <HAL_RCC_OscConfig+0x274>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a7b      	ldr	r2, [pc, #492]	; (8002f80 <HAL_RCC_OscConfig+0x274>)
 8002d94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d98:	6013      	str	r3, [r2, #0]
 8002d9a:	e01d      	b.n	8002dd8 <HAL_RCC_OscConfig+0xcc>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002da4:	d10c      	bne.n	8002dc0 <HAL_RCC_OscConfig+0xb4>
 8002da6:	4b76      	ldr	r3, [pc, #472]	; (8002f80 <HAL_RCC_OscConfig+0x274>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a75      	ldr	r2, [pc, #468]	; (8002f80 <HAL_RCC_OscConfig+0x274>)
 8002dac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002db0:	6013      	str	r3, [r2, #0]
 8002db2:	4b73      	ldr	r3, [pc, #460]	; (8002f80 <HAL_RCC_OscConfig+0x274>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a72      	ldr	r2, [pc, #456]	; (8002f80 <HAL_RCC_OscConfig+0x274>)
 8002db8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dbc:	6013      	str	r3, [r2, #0]
 8002dbe:	e00b      	b.n	8002dd8 <HAL_RCC_OscConfig+0xcc>
 8002dc0:	4b6f      	ldr	r3, [pc, #444]	; (8002f80 <HAL_RCC_OscConfig+0x274>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a6e      	ldr	r2, [pc, #440]	; (8002f80 <HAL_RCC_OscConfig+0x274>)
 8002dc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dca:	6013      	str	r3, [r2, #0]
 8002dcc:	4b6c      	ldr	r3, [pc, #432]	; (8002f80 <HAL_RCC_OscConfig+0x274>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a6b      	ldr	r2, [pc, #428]	; (8002f80 <HAL_RCC_OscConfig+0x274>)
 8002dd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d013      	beq.n	8002e08 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de0:	f7fe fdca 	bl	8001978 <HAL_GetTick>
 8002de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002de6:	e008      	b.n	8002dfa <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002de8:	f7fe fdc6 	bl	8001978 <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	2b64      	cmp	r3, #100	; 0x64
 8002df4:	d901      	bls.n	8002dfa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e21f      	b.n	800323a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dfa:	4b61      	ldr	r3, [pc, #388]	; (8002f80 <HAL_RCC_OscConfig+0x274>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d0f0      	beq.n	8002de8 <HAL_RCC_OscConfig+0xdc>
 8002e06:	e014      	b.n	8002e32 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e08:	f7fe fdb6 	bl	8001978 <HAL_GetTick>
 8002e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e0e:	e008      	b.n	8002e22 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e10:	f7fe fdb2 	bl	8001978 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	2b64      	cmp	r3, #100	; 0x64
 8002e1c:	d901      	bls.n	8002e22 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e20b      	b.n	800323a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e22:	4b57      	ldr	r3, [pc, #348]	; (8002f80 <HAL_RCC_OscConfig+0x274>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d1f0      	bne.n	8002e10 <HAL_RCC_OscConfig+0x104>
 8002e2e:	e000      	b.n	8002e32 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0302 	and.w	r3, r3, #2
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d06f      	beq.n	8002f1e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002e3e:	4b50      	ldr	r3, [pc, #320]	; (8002f80 <HAL_RCC_OscConfig+0x274>)
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f003 030c 	and.w	r3, r3, #12
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d017      	beq.n	8002e7a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002e4a:	4b4d      	ldr	r3, [pc, #308]	; (8002f80 <HAL_RCC_OscConfig+0x274>)
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002e52:	2b08      	cmp	r3, #8
 8002e54:	d105      	bne.n	8002e62 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002e56:	4b4a      	ldr	r3, [pc, #296]	; (8002f80 <HAL_RCC_OscConfig+0x274>)
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d00b      	beq.n	8002e7a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e62:	4b47      	ldr	r3, [pc, #284]	; (8002f80 <HAL_RCC_OscConfig+0x274>)
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002e6a:	2b0c      	cmp	r3, #12
 8002e6c:	d11c      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e6e:	4b44      	ldr	r3, [pc, #272]	; (8002f80 <HAL_RCC_OscConfig+0x274>)
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d116      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e7a:	4b41      	ldr	r3, [pc, #260]	; (8002f80 <HAL_RCC_OscConfig+0x274>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0302 	and.w	r3, r3, #2
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d005      	beq.n	8002e92 <HAL_RCC_OscConfig+0x186>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	68db      	ldr	r3, [r3, #12]
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d001      	beq.n	8002e92 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e1d3      	b.n	800323a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e92:	4b3b      	ldr	r3, [pc, #236]	; (8002f80 <HAL_RCC_OscConfig+0x274>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	691b      	ldr	r3, [r3, #16]
 8002e9e:	00db      	lsls	r3, r3, #3
 8002ea0:	4937      	ldr	r1, [pc, #220]	; (8002f80 <HAL_RCC_OscConfig+0x274>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ea6:	e03a      	b.n	8002f1e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d020      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002eb0:	4b34      	ldr	r3, [pc, #208]	; (8002f84 <HAL_RCC_OscConfig+0x278>)
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb6:	f7fe fd5f 	bl	8001978 <HAL_GetTick>
 8002eba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ebc:	e008      	b.n	8002ed0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ebe:	f7fe fd5b 	bl	8001978 <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d901      	bls.n	8002ed0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	e1b4      	b.n	800323a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ed0:	4b2b      	ldr	r3, [pc, #172]	; (8002f80 <HAL_RCC_OscConfig+0x274>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0302 	and.w	r3, r3, #2
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d0f0      	beq.n	8002ebe <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002edc:	4b28      	ldr	r3, [pc, #160]	; (8002f80 <HAL_RCC_OscConfig+0x274>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	691b      	ldr	r3, [r3, #16]
 8002ee8:	00db      	lsls	r3, r3, #3
 8002eea:	4925      	ldr	r1, [pc, #148]	; (8002f80 <HAL_RCC_OscConfig+0x274>)
 8002eec:	4313      	orrs	r3, r2
 8002eee:	600b      	str	r3, [r1, #0]
 8002ef0:	e015      	b.n	8002f1e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ef2:	4b24      	ldr	r3, [pc, #144]	; (8002f84 <HAL_RCC_OscConfig+0x278>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef8:	f7fe fd3e 	bl	8001978 <HAL_GetTick>
 8002efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002efe:	e008      	b.n	8002f12 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f00:	f7fe fd3a 	bl	8001978 <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d901      	bls.n	8002f12 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e193      	b.n	800323a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f12:	4b1b      	ldr	r3, [pc, #108]	; (8002f80 <HAL_RCC_OscConfig+0x274>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0302 	and.w	r3, r3, #2
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d1f0      	bne.n	8002f00 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0308 	and.w	r3, r3, #8
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d036      	beq.n	8002f98 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	695b      	ldr	r3, [r3, #20]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d016      	beq.n	8002f60 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f32:	4b15      	ldr	r3, [pc, #84]	; (8002f88 <HAL_RCC_OscConfig+0x27c>)
 8002f34:	2201      	movs	r2, #1
 8002f36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f38:	f7fe fd1e 	bl	8001978 <HAL_GetTick>
 8002f3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f3e:	e008      	b.n	8002f52 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f40:	f7fe fd1a 	bl	8001978 <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d901      	bls.n	8002f52 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e173      	b.n	800323a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f52:	4b0b      	ldr	r3, [pc, #44]	; (8002f80 <HAL_RCC_OscConfig+0x274>)
 8002f54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f56:	f003 0302 	and.w	r3, r3, #2
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d0f0      	beq.n	8002f40 <HAL_RCC_OscConfig+0x234>
 8002f5e:	e01b      	b.n	8002f98 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f60:	4b09      	ldr	r3, [pc, #36]	; (8002f88 <HAL_RCC_OscConfig+0x27c>)
 8002f62:	2200      	movs	r2, #0
 8002f64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f66:	f7fe fd07 	bl	8001978 <HAL_GetTick>
 8002f6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f6c:	e00e      	b.n	8002f8c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f6e:	f7fe fd03 	bl	8001978 <HAL_GetTick>
 8002f72:	4602      	mov	r2, r0
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d907      	bls.n	8002f8c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	e15c      	b.n	800323a <HAL_RCC_OscConfig+0x52e>
 8002f80:	40023800 	.word	0x40023800
 8002f84:	42470000 	.word	0x42470000
 8002f88:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f8c:	4b8a      	ldr	r3, [pc, #552]	; (80031b8 <HAL_RCC_OscConfig+0x4ac>)
 8002f8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f90:	f003 0302 	and.w	r3, r3, #2
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d1ea      	bne.n	8002f6e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0304 	and.w	r3, r3, #4
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	f000 8097 	beq.w	80030d4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002faa:	4b83      	ldr	r3, [pc, #524]	; (80031b8 <HAL_RCC_OscConfig+0x4ac>)
 8002fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d10f      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	60bb      	str	r3, [r7, #8]
 8002fba:	4b7f      	ldr	r3, [pc, #508]	; (80031b8 <HAL_RCC_OscConfig+0x4ac>)
 8002fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbe:	4a7e      	ldr	r2, [pc, #504]	; (80031b8 <HAL_RCC_OscConfig+0x4ac>)
 8002fc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fc4:	6413      	str	r3, [r2, #64]	; 0x40
 8002fc6:	4b7c      	ldr	r3, [pc, #496]	; (80031b8 <HAL_RCC_OscConfig+0x4ac>)
 8002fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fce:	60bb      	str	r3, [r7, #8]
 8002fd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fd6:	4b79      	ldr	r3, [pc, #484]	; (80031bc <HAL_RCC_OscConfig+0x4b0>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d118      	bne.n	8003014 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fe2:	4b76      	ldr	r3, [pc, #472]	; (80031bc <HAL_RCC_OscConfig+0x4b0>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a75      	ldr	r2, [pc, #468]	; (80031bc <HAL_RCC_OscConfig+0x4b0>)
 8002fe8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fee:	f7fe fcc3 	bl	8001978 <HAL_GetTick>
 8002ff2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ff4:	e008      	b.n	8003008 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ff6:	f7fe fcbf 	bl	8001978 <HAL_GetTick>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	2b02      	cmp	r3, #2
 8003002:	d901      	bls.n	8003008 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e118      	b.n	800323a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003008:	4b6c      	ldr	r3, [pc, #432]	; (80031bc <HAL_RCC_OscConfig+0x4b0>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003010:	2b00      	cmp	r3, #0
 8003012:	d0f0      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	2b01      	cmp	r3, #1
 800301a:	d106      	bne.n	800302a <HAL_RCC_OscConfig+0x31e>
 800301c:	4b66      	ldr	r3, [pc, #408]	; (80031b8 <HAL_RCC_OscConfig+0x4ac>)
 800301e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003020:	4a65      	ldr	r2, [pc, #404]	; (80031b8 <HAL_RCC_OscConfig+0x4ac>)
 8003022:	f043 0301 	orr.w	r3, r3, #1
 8003026:	6713      	str	r3, [r2, #112]	; 0x70
 8003028:	e01c      	b.n	8003064 <HAL_RCC_OscConfig+0x358>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	2b05      	cmp	r3, #5
 8003030:	d10c      	bne.n	800304c <HAL_RCC_OscConfig+0x340>
 8003032:	4b61      	ldr	r3, [pc, #388]	; (80031b8 <HAL_RCC_OscConfig+0x4ac>)
 8003034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003036:	4a60      	ldr	r2, [pc, #384]	; (80031b8 <HAL_RCC_OscConfig+0x4ac>)
 8003038:	f043 0304 	orr.w	r3, r3, #4
 800303c:	6713      	str	r3, [r2, #112]	; 0x70
 800303e:	4b5e      	ldr	r3, [pc, #376]	; (80031b8 <HAL_RCC_OscConfig+0x4ac>)
 8003040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003042:	4a5d      	ldr	r2, [pc, #372]	; (80031b8 <HAL_RCC_OscConfig+0x4ac>)
 8003044:	f043 0301 	orr.w	r3, r3, #1
 8003048:	6713      	str	r3, [r2, #112]	; 0x70
 800304a:	e00b      	b.n	8003064 <HAL_RCC_OscConfig+0x358>
 800304c:	4b5a      	ldr	r3, [pc, #360]	; (80031b8 <HAL_RCC_OscConfig+0x4ac>)
 800304e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003050:	4a59      	ldr	r2, [pc, #356]	; (80031b8 <HAL_RCC_OscConfig+0x4ac>)
 8003052:	f023 0301 	bic.w	r3, r3, #1
 8003056:	6713      	str	r3, [r2, #112]	; 0x70
 8003058:	4b57      	ldr	r3, [pc, #348]	; (80031b8 <HAL_RCC_OscConfig+0x4ac>)
 800305a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800305c:	4a56      	ldr	r2, [pc, #344]	; (80031b8 <HAL_RCC_OscConfig+0x4ac>)
 800305e:	f023 0304 	bic.w	r3, r3, #4
 8003062:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d015      	beq.n	8003098 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800306c:	f7fe fc84 	bl	8001978 <HAL_GetTick>
 8003070:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003072:	e00a      	b.n	800308a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003074:	f7fe fc80 	bl	8001978 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003082:	4293      	cmp	r3, r2
 8003084:	d901      	bls.n	800308a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e0d7      	b.n	800323a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800308a:	4b4b      	ldr	r3, [pc, #300]	; (80031b8 <HAL_RCC_OscConfig+0x4ac>)
 800308c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800308e:	f003 0302 	and.w	r3, r3, #2
 8003092:	2b00      	cmp	r3, #0
 8003094:	d0ee      	beq.n	8003074 <HAL_RCC_OscConfig+0x368>
 8003096:	e014      	b.n	80030c2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003098:	f7fe fc6e 	bl	8001978 <HAL_GetTick>
 800309c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800309e:	e00a      	b.n	80030b6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030a0:	f7fe fc6a 	bl	8001978 <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d901      	bls.n	80030b6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e0c1      	b.n	800323a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030b6:	4b40      	ldr	r3, [pc, #256]	; (80031b8 <HAL_RCC_OscConfig+0x4ac>)
 80030b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d1ee      	bne.n	80030a0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030c2:	7dfb      	ldrb	r3, [r7, #23]
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d105      	bne.n	80030d4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030c8:	4b3b      	ldr	r3, [pc, #236]	; (80031b8 <HAL_RCC_OscConfig+0x4ac>)
 80030ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030cc:	4a3a      	ldr	r2, [pc, #232]	; (80031b8 <HAL_RCC_OscConfig+0x4ac>)
 80030ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030d2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	699b      	ldr	r3, [r3, #24]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	f000 80ad 	beq.w	8003238 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030de:	4b36      	ldr	r3, [pc, #216]	; (80031b8 <HAL_RCC_OscConfig+0x4ac>)
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f003 030c 	and.w	r3, r3, #12
 80030e6:	2b08      	cmp	r3, #8
 80030e8:	d060      	beq.n	80031ac <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	699b      	ldr	r3, [r3, #24]
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d145      	bne.n	800317e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030f2:	4b33      	ldr	r3, [pc, #204]	; (80031c0 <HAL_RCC_OscConfig+0x4b4>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f8:	f7fe fc3e 	bl	8001978 <HAL_GetTick>
 80030fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030fe:	e008      	b.n	8003112 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003100:	f7fe fc3a 	bl	8001978 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	2b02      	cmp	r3, #2
 800310c:	d901      	bls.n	8003112 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e093      	b.n	800323a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003112:	4b29      	ldr	r3, [pc, #164]	; (80031b8 <HAL_RCC_OscConfig+0x4ac>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d1f0      	bne.n	8003100 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	69da      	ldr	r2, [r3, #28]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6a1b      	ldr	r3, [r3, #32]
 8003126:	431a      	orrs	r2, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312c:	019b      	lsls	r3, r3, #6
 800312e:	431a      	orrs	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003134:	085b      	lsrs	r3, r3, #1
 8003136:	3b01      	subs	r3, #1
 8003138:	041b      	lsls	r3, r3, #16
 800313a:	431a      	orrs	r2, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003140:	061b      	lsls	r3, r3, #24
 8003142:	431a      	orrs	r2, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003148:	071b      	lsls	r3, r3, #28
 800314a:	491b      	ldr	r1, [pc, #108]	; (80031b8 <HAL_RCC_OscConfig+0x4ac>)
 800314c:	4313      	orrs	r3, r2
 800314e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003150:	4b1b      	ldr	r3, [pc, #108]	; (80031c0 <HAL_RCC_OscConfig+0x4b4>)
 8003152:	2201      	movs	r2, #1
 8003154:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003156:	f7fe fc0f 	bl	8001978 <HAL_GetTick>
 800315a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800315c:	e008      	b.n	8003170 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800315e:	f7fe fc0b 	bl	8001978 <HAL_GetTick>
 8003162:	4602      	mov	r2, r0
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	2b02      	cmp	r3, #2
 800316a:	d901      	bls.n	8003170 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800316c:	2303      	movs	r3, #3
 800316e:	e064      	b.n	800323a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003170:	4b11      	ldr	r3, [pc, #68]	; (80031b8 <HAL_RCC_OscConfig+0x4ac>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d0f0      	beq.n	800315e <HAL_RCC_OscConfig+0x452>
 800317c:	e05c      	b.n	8003238 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800317e:	4b10      	ldr	r3, [pc, #64]	; (80031c0 <HAL_RCC_OscConfig+0x4b4>)
 8003180:	2200      	movs	r2, #0
 8003182:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003184:	f7fe fbf8 	bl	8001978 <HAL_GetTick>
 8003188:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800318a:	e008      	b.n	800319e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800318c:	f7fe fbf4 	bl	8001978 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	2b02      	cmp	r3, #2
 8003198:	d901      	bls.n	800319e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e04d      	b.n	800323a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800319e:	4b06      	ldr	r3, [pc, #24]	; (80031b8 <HAL_RCC_OscConfig+0x4ac>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d1f0      	bne.n	800318c <HAL_RCC_OscConfig+0x480>
 80031aa:	e045      	b.n	8003238 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	699b      	ldr	r3, [r3, #24]
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d107      	bne.n	80031c4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e040      	b.n	800323a <HAL_RCC_OscConfig+0x52e>
 80031b8:	40023800 	.word	0x40023800
 80031bc:	40007000 	.word	0x40007000
 80031c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80031c4:	4b1f      	ldr	r3, [pc, #124]	; (8003244 <HAL_RCC_OscConfig+0x538>)
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	699b      	ldr	r3, [r3, #24]
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d030      	beq.n	8003234 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031dc:	429a      	cmp	r2, r3
 80031de:	d129      	bne.n	8003234 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d122      	bne.n	8003234 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031ee:	68fa      	ldr	r2, [r7, #12]
 80031f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80031f4:	4013      	ands	r3, r2
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80031fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d119      	bne.n	8003234 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800320a:	085b      	lsrs	r3, r3, #1
 800320c:	3b01      	subs	r3, #1
 800320e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003210:	429a      	cmp	r2, r3
 8003212:	d10f      	bne.n	8003234 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800321e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003220:	429a      	cmp	r2, r3
 8003222:	d107      	bne.n	8003234 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003230:	429a      	cmp	r2, r3
 8003232:	d001      	beq.n	8003238 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e000      	b.n	800323a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	3718      	adds	r7, #24
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	40023800 	.word	0x40023800

08003248 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d101      	bne.n	800325a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e041      	b.n	80032de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003260:	b2db      	uxtb	r3, r3
 8003262:	2b00      	cmp	r3, #0
 8003264:	d106      	bne.n	8003274 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f000 f839 	bl	80032e6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2202      	movs	r2, #2
 8003278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	3304      	adds	r3, #4
 8003284:	4619      	mov	r1, r3
 8003286:	4610      	mov	r0, r2
 8003288:	f000 fb0c 	bl	80038a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2201      	movs	r2, #1
 80032a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2201      	movs	r2, #1
 80032d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032dc:	2300      	movs	r3, #0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3708      	adds	r7, #8
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}

080032e6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80032e6:	b480      	push	{r7}
 80032e8:	b083      	sub	sp, #12
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80032ee:	bf00      	nop
 80032f0:	370c      	adds	r7, #12
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr
	...

080032fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b085      	sub	sp, #20
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800330a:	b2db      	uxtb	r3, r3
 800330c:	2b01      	cmp	r3, #1
 800330e:	d001      	beq.n	8003314 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e04e      	b.n	80033b2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2202      	movs	r2, #2
 8003318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	68da      	ldr	r2, [r3, #12]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f042 0201 	orr.w	r2, r2, #1
 800332a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a23      	ldr	r2, [pc, #140]	; (80033c0 <HAL_TIM_Base_Start_IT+0xc4>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d022      	beq.n	800337c <HAL_TIM_Base_Start_IT+0x80>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800333e:	d01d      	beq.n	800337c <HAL_TIM_Base_Start_IT+0x80>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a1f      	ldr	r2, [pc, #124]	; (80033c4 <HAL_TIM_Base_Start_IT+0xc8>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d018      	beq.n	800337c <HAL_TIM_Base_Start_IT+0x80>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a1e      	ldr	r2, [pc, #120]	; (80033c8 <HAL_TIM_Base_Start_IT+0xcc>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d013      	beq.n	800337c <HAL_TIM_Base_Start_IT+0x80>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a1c      	ldr	r2, [pc, #112]	; (80033cc <HAL_TIM_Base_Start_IT+0xd0>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d00e      	beq.n	800337c <HAL_TIM_Base_Start_IT+0x80>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a1b      	ldr	r2, [pc, #108]	; (80033d0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d009      	beq.n	800337c <HAL_TIM_Base_Start_IT+0x80>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a19      	ldr	r2, [pc, #100]	; (80033d4 <HAL_TIM_Base_Start_IT+0xd8>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d004      	beq.n	800337c <HAL_TIM_Base_Start_IT+0x80>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a18      	ldr	r2, [pc, #96]	; (80033d8 <HAL_TIM_Base_Start_IT+0xdc>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d111      	bne.n	80033a0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f003 0307 	and.w	r3, r3, #7
 8003386:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2b06      	cmp	r3, #6
 800338c:	d010      	beq.n	80033b0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f042 0201 	orr.w	r2, r2, #1
 800339c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800339e:	e007      	b.n	80033b0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f042 0201 	orr.w	r2, r2, #1
 80033ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3714      	adds	r7, #20
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	40010000 	.word	0x40010000
 80033c4:	40000400 	.word	0x40000400
 80033c8:	40000800 	.word	0x40000800
 80033cc:	40000c00 	.word	0x40000c00
 80033d0:	40010400 	.word	0x40010400
 80033d4:	40014000 	.word	0x40014000
 80033d8:	40001800 	.word	0x40001800

080033dc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b086      	sub	sp, #24
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d101      	bne.n	80033f0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e097      	b.n	8003520 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d106      	bne.n	800340a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f7fe f881 	bl	800150c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2202      	movs	r2, #2
 800340e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	6812      	ldr	r2, [r2, #0]
 800341c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003420:	f023 0307 	bic.w	r3, r3, #7
 8003424:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	3304      	adds	r3, #4
 800342e:	4619      	mov	r1, r3
 8003430:	4610      	mov	r0, r2
 8003432:	f000 fa37 	bl	80038a4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	699b      	ldr	r3, [r3, #24]
 8003444:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	6a1b      	ldr	r3, [r3, #32]
 800344c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	697a      	ldr	r2, [r7, #20]
 8003454:	4313      	orrs	r3, r2
 8003456:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800345e:	f023 0303 	bic.w	r3, r3, #3
 8003462:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	689a      	ldr	r2, [r3, #8]
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	699b      	ldr	r3, [r3, #24]
 800346c:	021b      	lsls	r3, r3, #8
 800346e:	4313      	orrs	r3, r2
 8003470:	693a      	ldr	r2, [r7, #16]
 8003472:	4313      	orrs	r3, r2
 8003474:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800347c:	f023 030c 	bic.w	r3, r3, #12
 8003480:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003488:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800348c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	68da      	ldr	r2, [r3, #12]
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	69db      	ldr	r3, [r3, #28]
 8003496:	021b      	lsls	r3, r3, #8
 8003498:	4313      	orrs	r3, r2
 800349a:	693a      	ldr	r2, [r7, #16]
 800349c:	4313      	orrs	r3, r2
 800349e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	691b      	ldr	r3, [r3, #16]
 80034a4:	011a      	lsls	r2, r3, #4
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	6a1b      	ldr	r3, [r3, #32]
 80034aa:	031b      	lsls	r3, r3, #12
 80034ac:	4313      	orrs	r3, r2
 80034ae:	693a      	ldr	r2, [r7, #16]
 80034b0:	4313      	orrs	r3, r2
 80034b2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80034ba:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80034c2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	685a      	ldr	r2, [r3, #4]
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	695b      	ldr	r3, [r3, #20]
 80034cc:	011b      	lsls	r3, r3, #4
 80034ce:	4313      	orrs	r3, r2
 80034d0:	68fa      	ldr	r2, [r7, #12]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	697a      	ldr	r2, [r7, #20]
 80034dc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	693a      	ldr	r2, [r7, #16]
 80034e4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	68fa      	ldr	r2, [r7, #12]
 80034ec:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2201      	movs	r2, #1
 80034f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2201      	movs	r2, #1
 80034fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2201      	movs	r2, #1
 8003502:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2201      	movs	r2, #1
 800350a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2201      	movs	r2, #1
 8003512:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2201      	movs	r2, #1
 800351a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800351e:	2300      	movs	r3, #0
}
 8003520:	4618      	mov	r0, r3
 8003522:	3718      	adds	r7, #24
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}

08003528 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003538:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003540:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003548:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003550:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d110      	bne.n	800357a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003558:	7bfb      	ldrb	r3, [r7, #15]
 800355a:	2b01      	cmp	r3, #1
 800355c:	d102      	bne.n	8003564 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800355e:	7b7b      	ldrb	r3, [r7, #13]
 8003560:	2b01      	cmp	r3, #1
 8003562:	d001      	beq.n	8003568 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e069      	b.n	800363c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2202      	movs	r2, #2
 800356c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2202      	movs	r2, #2
 8003574:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003578:	e031      	b.n	80035de <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	2b04      	cmp	r3, #4
 800357e:	d110      	bne.n	80035a2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003580:	7bbb      	ldrb	r3, [r7, #14]
 8003582:	2b01      	cmp	r3, #1
 8003584:	d102      	bne.n	800358c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003586:	7b3b      	ldrb	r3, [r7, #12]
 8003588:	2b01      	cmp	r3, #1
 800358a:	d001      	beq.n	8003590 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e055      	b.n	800363c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2202      	movs	r2, #2
 8003594:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2202      	movs	r2, #2
 800359c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80035a0:	e01d      	b.n	80035de <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80035a2:	7bfb      	ldrb	r3, [r7, #15]
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d108      	bne.n	80035ba <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80035a8:	7bbb      	ldrb	r3, [r7, #14]
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d105      	bne.n	80035ba <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80035ae:	7b7b      	ldrb	r3, [r7, #13]
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d102      	bne.n	80035ba <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80035b4:	7b3b      	ldrb	r3, [r7, #12]
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d001      	beq.n	80035be <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e03e      	b.n	800363c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2202      	movs	r2, #2
 80035c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2202      	movs	r2, #2
 80035ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2202      	movs	r2, #2
 80035d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2202      	movs	r2, #2
 80035da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d003      	beq.n	80035ec <HAL_TIM_Encoder_Start+0xc4>
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	2b04      	cmp	r3, #4
 80035e8:	d008      	beq.n	80035fc <HAL_TIM_Encoder_Start+0xd4>
 80035ea:	e00f      	b.n	800360c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	2201      	movs	r2, #1
 80035f2:	2100      	movs	r1, #0
 80035f4:	4618      	mov	r0, r3
 80035f6:	f000 f9f5 	bl	80039e4 <TIM_CCxChannelCmd>
      break;
 80035fa:	e016      	b.n	800362a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2201      	movs	r2, #1
 8003602:	2104      	movs	r1, #4
 8003604:	4618      	mov	r0, r3
 8003606:	f000 f9ed 	bl	80039e4 <TIM_CCxChannelCmd>
      break;
 800360a:	e00e      	b.n	800362a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2201      	movs	r2, #1
 8003612:	2100      	movs	r1, #0
 8003614:	4618      	mov	r0, r3
 8003616:	f000 f9e5 	bl	80039e4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	2201      	movs	r2, #1
 8003620:	2104      	movs	r1, #4
 8003622:	4618      	mov	r0, r3
 8003624:	f000 f9de 	bl	80039e4 <TIM_CCxChannelCmd>
      break;
 8003628:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f042 0201 	orr.w	r2, r2, #1
 8003638:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800363a:	2300      	movs	r3, #0
}
 800363c:	4618      	mov	r0, r3
 800363e:	3710      	adds	r7, #16
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}

08003644 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	f003 0302 	and.w	r3, r3, #2
 8003656:	2b02      	cmp	r3, #2
 8003658:	d122      	bne.n	80036a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	f003 0302 	and.w	r3, r3, #2
 8003664:	2b02      	cmp	r3, #2
 8003666:	d11b      	bne.n	80036a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f06f 0202 	mvn.w	r2, #2
 8003670:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2201      	movs	r2, #1
 8003676:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	699b      	ldr	r3, [r3, #24]
 800367e:	f003 0303 	and.w	r3, r3, #3
 8003682:	2b00      	cmp	r3, #0
 8003684:	d003      	beq.n	800368e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 f8ee 	bl	8003868 <HAL_TIM_IC_CaptureCallback>
 800368c:	e005      	b.n	800369a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f000 f8e0 	bl	8003854 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f000 f8f1 	bl	800387c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	691b      	ldr	r3, [r3, #16]
 80036a6:	f003 0304 	and.w	r3, r3, #4
 80036aa:	2b04      	cmp	r3, #4
 80036ac:	d122      	bne.n	80036f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	f003 0304 	and.w	r3, r3, #4
 80036b8:	2b04      	cmp	r3, #4
 80036ba:	d11b      	bne.n	80036f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f06f 0204 	mvn.w	r2, #4
 80036c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2202      	movs	r2, #2
 80036ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	699b      	ldr	r3, [r3, #24]
 80036d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d003      	beq.n	80036e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f000 f8c4 	bl	8003868 <HAL_TIM_IC_CaptureCallback>
 80036e0:	e005      	b.n	80036ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 f8b6 	bl	8003854 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f000 f8c7 	bl	800387c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	691b      	ldr	r3, [r3, #16]
 80036fa:	f003 0308 	and.w	r3, r3, #8
 80036fe:	2b08      	cmp	r3, #8
 8003700:	d122      	bne.n	8003748 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	f003 0308 	and.w	r3, r3, #8
 800370c:	2b08      	cmp	r3, #8
 800370e:	d11b      	bne.n	8003748 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f06f 0208 	mvn.w	r2, #8
 8003718:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2204      	movs	r2, #4
 800371e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	69db      	ldr	r3, [r3, #28]
 8003726:	f003 0303 	and.w	r3, r3, #3
 800372a:	2b00      	cmp	r3, #0
 800372c:	d003      	beq.n	8003736 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 f89a 	bl	8003868 <HAL_TIM_IC_CaptureCallback>
 8003734:	e005      	b.n	8003742 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f000 f88c 	bl	8003854 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f000 f89d 	bl	800387c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	f003 0310 	and.w	r3, r3, #16
 8003752:	2b10      	cmp	r3, #16
 8003754:	d122      	bne.n	800379c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	f003 0310 	and.w	r3, r3, #16
 8003760:	2b10      	cmp	r3, #16
 8003762:	d11b      	bne.n	800379c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f06f 0210 	mvn.w	r2, #16
 800376c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2208      	movs	r2, #8
 8003772:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	69db      	ldr	r3, [r3, #28]
 800377a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800377e:	2b00      	cmp	r3, #0
 8003780:	d003      	beq.n	800378a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 f870 	bl	8003868 <HAL_TIM_IC_CaptureCallback>
 8003788:	e005      	b.n	8003796 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f000 f862 	bl	8003854 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f000 f873 	bl	800387c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	691b      	ldr	r3, [r3, #16]
 80037a2:	f003 0301 	and.w	r3, r3, #1
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d10e      	bne.n	80037c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	f003 0301 	and.w	r3, r3, #1
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d107      	bne.n	80037c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f06f 0201 	mvn.w	r2, #1
 80037c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f7fd fb1c 	bl	8000e00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	691b      	ldr	r3, [r3, #16]
 80037ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037d2:	2b80      	cmp	r3, #128	; 0x80
 80037d4:	d10e      	bne.n	80037f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037e0:	2b80      	cmp	r3, #128	; 0x80
 80037e2:	d107      	bne.n	80037f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80037ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f000 f9a4 	bl	8003b3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037fe:	2b40      	cmp	r3, #64	; 0x40
 8003800:	d10e      	bne.n	8003820 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800380c:	2b40      	cmp	r3, #64	; 0x40
 800380e:	d107      	bne.n	8003820 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003818:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 f838 	bl	8003890 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	691b      	ldr	r3, [r3, #16]
 8003826:	f003 0320 	and.w	r3, r3, #32
 800382a:	2b20      	cmp	r3, #32
 800382c:	d10e      	bne.n	800384c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	f003 0320 	and.w	r3, r3, #32
 8003838:	2b20      	cmp	r3, #32
 800383a:	d107      	bne.n	800384c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f06f 0220 	mvn.w	r2, #32
 8003844:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f000 f96e 	bl	8003b28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800384c:	bf00      	nop
 800384e:	3708      	adds	r7, #8
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800385c:	bf00      	nop
 800385e:	370c      	adds	r7, #12
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003870:	bf00      	nop
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr

0800387c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003884:	bf00      	nop
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr

08003890 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003898:	bf00      	nop
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b085      	sub	sp, #20
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	4a40      	ldr	r2, [pc, #256]	; (80039b8 <TIM_Base_SetConfig+0x114>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d013      	beq.n	80038e4 <TIM_Base_SetConfig+0x40>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038c2:	d00f      	beq.n	80038e4 <TIM_Base_SetConfig+0x40>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	4a3d      	ldr	r2, [pc, #244]	; (80039bc <TIM_Base_SetConfig+0x118>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d00b      	beq.n	80038e4 <TIM_Base_SetConfig+0x40>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	4a3c      	ldr	r2, [pc, #240]	; (80039c0 <TIM_Base_SetConfig+0x11c>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d007      	beq.n	80038e4 <TIM_Base_SetConfig+0x40>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	4a3b      	ldr	r2, [pc, #236]	; (80039c4 <TIM_Base_SetConfig+0x120>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d003      	beq.n	80038e4 <TIM_Base_SetConfig+0x40>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	4a3a      	ldr	r2, [pc, #232]	; (80039c8 <TIM_Base_SetConfig+0x124>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d108      	bne.n	80038f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	68fa      	ldr	r2, [r7, #12]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4a2f      	ldr	r2, [pc, #188]	; (80039b8 <TIM_Base_SetConfig+0x114>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d02b      	beq.n	8003956 <TIM_Base_SetConfig+0xb2>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003904:	d027      	beq.n	8003956 <TIM_Base_SetConfig+0xb2>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a2c      	ldr	r2, [pc, #176]	; (80039bc <TIM_Base_SetConfig+0x118>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d023      	beq.n	8003956 <TIM_Base_SetConfig+0xb2>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a2b      	ldr	r2, [pc, #172]	; (80039c0 <TIM_Base_SetConfig+0x11c>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d01f      	beq.n	8003956 <TIM_Base_SetConfig+0xb2>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4a2a      	ldr	r2, [pc, #168]	; (80039c4 <TIM_Base_SetConfig+0x120>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d01b      	beq.n	8003956 <TIM_Base_SetConfig+0xb2>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a29      	ldr	r2, [pc, #164]	; (80039c8 <TIM_Base_SetConfig+0x124>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d017      	beq.n	8003956 <TIM_Base_SetConfig+0xb2>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a28      	ldr	r2, [pc, #160]	; (80039cc <TIM_Base_SetConfig+0x128>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d013      	beq.n	8003956 <TIM_Base_SetConfig+0xb2>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a27      	ldr	r2, [pc, #156]	; (80039d0 <TIM_Base_SetConfig+0x12c>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d00f      	beq.n	8003956 <TIM_Base_SetConfig+0xb2>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a26      	ldr	r2, [pc, #152]	; (80039d4 <TIM_Base_SetConfig+0x130>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d00b      	beq.n	8003956 <TIM_Base_SetConfig+0xb2>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a25      	ldr	r2, [pc, #148]	; (80039d8 <TIM_Base_SetConfig+0x134>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d007      	beq.n	8003956 <TIM_Base_SetConfig+0xb2>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a24      	ldr	r2, [pc, #144]	; (80039dc <TIM_Base_SetConfig+0x138>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d003      	beq.n	8003956 <TIM_Base_SetConfig+0xb2>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4a23      	ldr	r2, [pc, #140]	; (80039e0 <TIM_Base_SetConfig+0x13c>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d108      	bne.n	8003968 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800395c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	68fa      	ldr	r2, [r7, #12]
 8003964:	4313      	orrs	r3, r2
 8003966:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	695b      	ldr	r3, [r3, #20]
 8003972:	4313      	orrs	r3, r2
 8003974:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	68fa      	ldr	r2, [r7, #12]
 800397a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	689a      	ldr	r2, [r3, #8]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	4a0a      	ldr	r2, [pc, #40]	; (80039b8 <TIM_Base_SetConfig+0x114>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d003      	beq.n	800399c <TIM_Base_SetConfig+0xf8>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	4a0c      	ldr	r2, [pc, #48]	; (80039c8 <TIM_Base_SetConfig+0x124>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d103      	bne.n	80039a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	691a      	ldr	r2, [r3, #16]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	615a      	str	r2, [r3, #20]
}
 80039aa:	bf00      	nop
 80039ac:	3714      	adds	r7, #20
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr
 80039b6:	bf00      	nop
 80039b8:	40010000 	.word	0x40010000
 80039bc:	40000400 	.word	0x40000400
 80039c0:	40000800 	.word	0x40000800
 80039c4:	40000c00 	.word	0x40000c00
 80039c8:	40010400 	.word	0x40010400
 80039cc:	40014000 	.word	0x40014000
 80039d0:	40014400 	.word	0x40014400
 80039d4:	40014800 	.word	0x40014800
 80039d8:	40001800 	.word	0x40001800
 80039dc:	40001c00 	.word	0x40001c00
 80039e0:	40002000 	.word	0x40002000

080039e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b087      	sub	sp, #28
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	60b9      	str	r1, [r7, #8]
 80039ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	f003 031f 	and.w	r3, r3, #31
 80039f6:	2201      	movs	r2, #1
 80039f8:	fa02 f303 	lsl.w	r3, r2, r3
 80039fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	6a1a      	ldr	r2, [r3, #32]
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	43db      	mvns	r3, r3
 8003a06:	401a      	ands	r2, r3
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6a1a      	ldr	r2, [r3, #32]
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	f003 031f 	and.w	r3, r3, #31
 8003a16:	6879      	ldr	r1, [r7, #4]
 8003a18:	fa01 f303 	lsl.w	r3, r1, r3
 8003a1c:	431a      	orrs	r2, r3
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	621a      	str	r2, [r3, #32]
}
 8003a22:	bf00      	nop
 8003a24:	371c      	adds	r7, #28
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr
	...

08003a30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b085      	sub	sp, #20
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d101      	bne.n	8003a48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a44:	2302      	movs	r3, #2
 8003a46:	e05a      	b.n	8003afe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2202      	movs	r2, #2
 8003a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	68fa      	ldr	r2, [r7, #12]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	68fa      	ldr	r2, [r7, #12]
 8003a80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a21      	ldr	r2, [pc, #132]	; (8003b0c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d022      	beq.n	8003ad2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a94:	d01d      	beq.n	8003ad2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a1d      	ldr	r2, [pc, #116]	; (8003b10 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d018      	beq.n	8003ad2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a1b      	ldr	r2, [pc, #108]	; (8003b14 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d013      	beq.n	8003ad2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a1a      	ldr	r2, [pc, #104]	; (8003b18 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d00e      	beq.n	8003ad2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a18      	ldr	r2, [pc, #96]	; (8003b1c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d009      	beq.n	8003ad2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a17      	ldr	r2, [pc, #92]	; (8003b20 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d004      	beq.n	8003ad2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a15      	ldr	r2, [pc, #84]	; (8003b24 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d10c      	bne.n	8003aec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ad8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	68ba      	ldr	r2, [r7, #8]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	68ba      	ldr	r2, [r7, #8]
 8003aea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003afc:	2300      	movs	r3, #0
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3714      	adds	r7, #20
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr
 8003b0a:	bf00      	nop
 8003b0c:	40010000 	.word	0x40010000
 8003b10:	40000400 	.word	0x40000400
 8003b14:	40000800 	.word	0x40000800
 8003b18:	40000c00 	.word	0x40000c00
 8003b1c:	40010400 	.word	0x40010400
 8003b20:	40014000 	.word	0x40014000
 8003b24:	40001800 	.word	0x40001800

08003b28 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b30:	bf00      	nop
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr

08003b3c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b44:	bf00      	nop
 8003b46:	370c      	adds	r7, #12
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr

08003b50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d101      	bne.n	8003b62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e03f      	b.n	8003be2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d106      	bne.n	8003b7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f7fd fd38 	bl	80015ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2224      	movs	r2, #36	; 0x24
 8003b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	68da      	ldr	r2, [r3, #12]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f000 ffd7 	bl	8004b48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	691a      	ldr	r2, [r3, #16]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ba8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	695a      	ldr	r2, [r3, #20]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003bb8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	68da      	ldr	r2, [r3, #12]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003bc8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2220      	movs	r2, #32
 8003bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2220      	movs	r2, #32
 8003bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3708      	adds	r7, #8
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
	...

08003bec <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b08c      	sub	sp, #48	; 0x30
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	60b9      	str	r1, [r7, #8]
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	2b20      	cmp	r3, #32
 8003c04:	d165      	bne.n	8003cd2 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d002      	beq.n	8003c12 <HAL_UART_Transmit_DMA+0x26>
 8003c0c:	88fb      	ldrh	r3, [r7, #6]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d101      	bne.n	8003c16 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e05e      	b.n	8003cd4 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d101      	bne.n	8003c24 <HAL_UART_Transmit_DMA+0x38>
 8003c20:	2302      	movs	r3, #2
 8003c22:	e057      	b.n	8003cd4 <HAL_UART_Transmit_DMA+0xe8>
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8003c2c:	68ba      	ldr	r2, [r7, #8]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	88fa      	ldrh	r2, [r7, #6]
 8003c36:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	88fa      	ldrh	r2, [r7, #6]
 8003c3c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2200      	movs	r2, #0
 8003c42:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2221      	movs	r2, #33	; 0x21
 8003c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c50:	4a22      	ldr	r2, [pc, #136]	; (8003cdc <HAL_UART_Transmit_DMA+0xf0>)
 8003c52:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c58:	4a21      	ldr	r2, [pc, #132]	; (8003ce0 <HAL_UART_Transmit_DMA+0xf4>)
 8003c5a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c60:	4a20      	ldr	r2, [pc, #128]	; (8003ce4 <HAL_UART_Transmit_DMA+0xf8>)
 8003c62:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c68:	2200      	movs	r2, #0
 8003c6a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8003c6c:	f107 0308 	add.w	r3, r7, #8
 8003c70:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c78:	6819      	ldr	r1, [r3, #0]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	3304      	adds	r3, #4
 8003c80:	461a      	mov	r2, r3
 8003c82:	88fb      	ldrh	r3, [r7, #6]
 8003c84:	f7fe f814 	bl	8001cb0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c90:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	3314      	adds	r3, #20
 8003ca0:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca2:	69bb      	ldr	r3, [r7, #24]
 8003ca4:	e853 3f00 	ldrex	r3, [r3]
 8003ca8:	617b      	str	r3, [r7, #20]
   return(result);
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	3314      	adds	r3, #20
 8003cb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003cba:	627a      	str	r2, [r7, #36]	; 0x24
 8003cbc:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cbe:	6a39      	ldr	r1, [r7, #32]
 8003cc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cc2:	e841 2300 	strex	r3, r2, [r1]
 8003cc6:	61fb      	str	r3, [r7, #28]
   return(result);
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d1e5      	bne.n	8003c9a <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	e000      	b.n	8003cd4 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8003cd2:	2302      	movs	r3, #2
  }
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3730      	adds	r7, #48	; 0x30
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	080043e1 	.word	0x080043e1
 8003ce0:	0800447b 	.word	0x0800447b
 8003ce4:	080045f3 	.word	0x080045f3

08003ce8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b084      	sub	sp, #16
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	60b9      	str	r1, [r7, #8]
 8003cf2:	4613      	mov	r3, r2
 8003cf4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	2b20      	cmp	r3, #32
 8003d00:	d11d      	bne.n	8003d3e <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d002      	beq.n	8003d0e <HAL_UART_Receive_DMA+0x26>
 8003d08:	88fb      	ldrh	r3, [r7, #6]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d101      	bne.n	8003d12 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e016      	b.n	8003d40 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d101      	bne.n	8003d20 <HAL_UART_Receive_DMA+0x38>
 8003d1c:	2302      	movs	r3, #2
 8003d1e:	e00f      	b.n	8003d40 <HAL_UART_Receive_DMA+0x58>
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2201      	movs	r2, #1
 8003d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003d2e:	88fb      	ldrh	r3, [r7, #6]
 8003d30:	461a      	mov	r2, r3
 8003d32:	68b9      	ldr	r1, [r7, #8]
 8003d34:	68f8      	ldr	r0, [r7, #12]
 8003d36:	f000 fca7 	bl	8004688 <UART_Start_Receive_DMA>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	e000      	b.n	8003d40 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003d3e:	2302      	movs	r3, #2
  }
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3710      	adds	r7, #16
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b090      	sub	sp, #64	; 0x40
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003d50:	2300      	movs	r3, #0
 8003d52:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	695b      	ldr	r3, [r3, #20]
 8003d5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d5e:	2b80      	cmp	r3, #128	; 0x80
 8003d60:	bf0c      	ite	eq
 8003d62:	2301      	moveq	r3, #1
 8003d64:	2300      	movne	r3, #0
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	2b21      	cmp	r3, #33	; 0x21
 8003d74:	d128      	bne.n	8003dc8 <HAL_UART_DMAStop+0x80>
 8003d76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d025      	beq.n	8003dc8 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	3314      	adds	r3, #20
 8003d82:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d86:	e853 3f00 	ldrex	r3, [r3]
 8003d8a:	623b      	str	r3, [r7, #32]
   return(result);
 8003d8c:	6a3b      	ldr	r3, [r7, #32]
 8003d8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d92:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	3314      	adds	r3, #20
 8003d9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d9c:	633a      	str	r2, [r7, #48]	; 0x30
 8003d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003da2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003da4:	e841 2300 	strex	r3, r2, [r1]
 8003da8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d1e5      	bne.n	8003d7c <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d004      	beq.n	8003dc2 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f7fd ffcf 	bl	8001d60 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f000 fcfe 	bl	80047c4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	695b      	ldr	r3, [r3, #20]
 8003dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dd2:	2b40      	cmp	r3, #64	; 0x40
 8003dd4:	bf0c      	ite	eq
 8003dd6:	2301      	moveq	r3, #1
 8003dd8:	2300      	movne	r3, #0
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	2b22      	cmp	r3, #34	; 0x22
 8003de8:	d128      	bne.n	8003e3c <HAL_UART_DMAStop+0xf4>
 8003dea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d025      	beq.n	8003e3c <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	3314      	adds	r3, #20
 8003df6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	e853 3f00 	ldrex	r3, [r3]
 8003dfe:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e06:	637b      	str	r3, [r7, #52]	; 0x34
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	3314      	adds	r3, #20
 8003e0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e10:	61fa      	str	r2, [r7, #28]
 8003e12:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e14:	69b9      	ldr	r1, [r7, #24]
 8003e16:	69fa      	ldr	r2, [r7, #28]
 8003e18:	e841 2300 	strex	r3, r2, [r1]
 8003e1c:	617b      	str	r3, [r7, #20]
   return(result);
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d1e5      	bne.n	8003df0 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d004      	beq.n	8003e36 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e30:	4618      	mov	r0, r3
 8003e32:	f7fd ff95 	bl	8001d60 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f000 fcec 	bl	8004814 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3740      	adds	r7, #64	; 0x40
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
	...

08003e48 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b0ba      	sub	sp, #232	; 0xe8
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	695b      	ldr	r3, [r3, #20]
 8003e6a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003e74:	2300      	movs	r3, #0
 8003e76:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003e7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e7e:	f003 030f 	and.w	r3, r3, #15
 8003e82:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003e86:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d10f      	bne.n	8003eae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e92:	f003 0320 	and.w	r3, r3, #32
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d009      	beq.n	8003eae <HAL_UART_IRQHandler+0x66>
 8003e9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e9e:	f003 0320 	and.w	r3, r3, #32
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d003      	beq.n	8003eae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f000 fd93 	bl	80049d2 <UART_Receive_IT>
      return;
 8003eac:	e256      	b.n	800435c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003eae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	f000 80de 	beq.w	8004074 <HAL_UART_IRQHandler+0x22c>
 8003eb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ebc:	f003 0301 	and.w	r3, r3, #1
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d106      	bne.n	8003ed2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003ec4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ec8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	f000 80d1 	beq.w	8004074 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003ed2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ed6:	f003 0301 	and.w	r3, r3, #1
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d00b      	beq.n	8003ef6 <HAL_UART_IRQHandler+0xae>
 8003ede:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d005      	beq.n	8003ef6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eee:	f043 0201 	orr.w	r2, r3, #1
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ef6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003efa:	f003 0304 	and.w	r3, r3, #4
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00b      	beq.n	8003f1a <HAL_UART_IRQHandler+0xd2>
 8003f02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f06:	f003 0301 	and.w	r3, r3, #1
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d005      	beq.n	8003f1a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f12:	f043 0202 	orr.w	r2, r3, #2
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f1e:	f003 0302 	and.w	r3, r3, #2
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d00b      	beq.n	8003f3e <HAL_UART_IRQHandler+0xf6>
 8003f26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f2a:	f003 0301 	and.w	r3, r3, #1
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d005      	beq.n	8003f3e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f36:	f043 0204 	orr.w	r2, r3, #4
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003f3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f42:	f003 0308 	and.w	r3, r3, #8
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d011      	beq.n	8003f6e <HAL_UART_IRQHandler+0x126>
 8003f4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f4e:	f003 0320 	and.w	r3, r3, #32
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d105      	bne.n	8003f62 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003f56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f5a:	f003 0301 	and.w	r3, r3, #1
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d005      	beq.n	8003f6e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f66:	f043 0208 	orr.w	r2, r3, #8
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	f000 81ed 	beq.w	8004352 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f7c:	f003 0320 	and.w	r3, r3, #32
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d008      	beq.n	8003f96 <HAL_UART_IRQHandler+0x14e>
 8003f84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f88:	f003 0320 	and.w	r3, r3, #32
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d002      	beq.n	8003f96 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f000 fd1e 	bl	80049d2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	695b      	ldr	r3, [r3, #20]
 8003f9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fa0:	2b40      	cmp	r3, #64	; 0x40
 8003fa2:	bf0c      	ite	eq
 8003fa4:	2301      	moveq	r3, #1
 8003fa6:	2300      	movne	r3, #0
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb2:	f003 0308 	and.w	r3, r3, #8
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d103      	bne.n	8003fc2 <HAL_UART_IRQHandler+0x17a>
 8003fba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d04f      	beq.n	8004062 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f000 fc26 	bl	8004814 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	695b      	ldr	r3, [r3, #20]
 8003fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fd2:	2b40      	cmp	r3, #64	; 0x40
 8003fd4:	d141      	bne.n	800405a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	3314      	adds	r3, #20
 8003fdc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003fe4:	e853 3f00 	ldrex	r3, [r3]
 8003fe8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003fec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003ff0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ff4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	3314      	adds	r3, #20
 8003ffe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004002:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004006:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800400a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800400e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004012:	e841 2300 	strex	r3, r2, [r1]
 8004016:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800401a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d1d9      	bne.n	8003fd6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004026:	2b00      	cmp	r3, #0
 8004028:	d013      	beq.n	8004052 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800402e:	4a7d      	ldr	r2, [pc, #500]	; (8004224 <HAL_UART_IRQHandler+0x3dc>)
 8004030:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004036:	4618      	mov	r0, r3
 8004038:	f7fd ff02 	bl	8001e40 <HAL_DMA_Abort_IT>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d016      	beq.n	8004070 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004046:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800404c:	4610      	mov	r0, r2
 800404e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004050:	e00e      	b.n	8004070 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f000 f9ae 	bl	80043b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004058:	e00a      	b.n	8004070 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f000 f9aa 	bl	80043b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004060:	e006      	b.n	8004070 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f000 f9a6 	bl	80043b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2200      	movs	r2, #0
 800406c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800406e:	e170      	b.n	8004352 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004070:	bf00      	nop
    return;
 8004072:	e16e      	b.n	8004352 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004078:	2b01      	cmp	r3, #1
 800407a:	f040 814a 	bne.w	8004312 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800407e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004082:	f003 0310 	and.w	r3, r3, #16
 8004086:	2b00      	cmp	r3, #0
 8004088:	f000 8143 	beq.w	8004312 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800408c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004090:	f003 0310 	and.w	r3, r3, #16
 8004094:	2b00      	cmp	r3, #0
 8004096:	f000 813c 	beq.w	8004312 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800409a:	2300      	movs	r3, #0
 800409c:	60bb      	str	r3, [r7, #8]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	60bb      	str	r3, [r7, #8]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	60bb      	str	r3, [r7, #8]
 80040ae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	695b      	ldr	r3, [r3, #20]
 80040b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ba:	2b40      	cmp	r3, #64	; 0x40
 80040bc:	f040 80b4 	bne.w	8004228 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80040cc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	f000 8140 	beq.w	8004356 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80040da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80040de:	429a      	cmp	r2, r3
 80040e0:	f080 8139 	bcs.w	8004356 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80040ea:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f0:	69db      	ldr	r3, [r3, #28]
 80040f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040f6:	f000 8088 	beq.w	800420a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	330c      	adds	r3, #12
 8004100:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004104:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004108:	e853 3f00 	ldrex	r3, [r3]
 800410c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004110:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004114:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004118:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	330c      	adds	r3, #12
 8004122:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004126:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800412a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800412e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004132:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004136:	e841 2300 	strex	r3, r2, [r1]
 800413a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800413e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004142:	2b00      	cmp	r3, #0
 8004144:	d1d9      	bne.n	80040fa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	3314      	adds	r3, #20
 800414c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800414e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004150:	e853 3f00 	ldrex	r3, [r3]
 8004154:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004156:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004158:	f023 0301 	bic.w	r3, r3, #1
 800415c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	3314      	adds	r3, #20
 8004166:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800416a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800416e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004170:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004172:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004176:	e841 2300 	strex	r3, r2, [r1]
 800417a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800417c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800417e:	2b00      	cmp	r3, #0
 8004180:	d1e1      	bne.n	8004146 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	3314      	adds	r3, #20
 8004188:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800418a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800418c:	e853 3f00 	ldrex	r3, [r3]
 8004190:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004192:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004194:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004198:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	3314      	adds	r3, #20
 80041a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80041a6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80041a8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041aa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80041ac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80041ae:	e841 2300 	strex	r3, r2, [r1]
 80041b2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80041b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d1e3      	bne.n	8004182 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2220      	movs	r2, #32
 80041be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	330c      	adds	r3, #12
 80041ce:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041d2:	e853 3f00 	ldrex	r3, [r3]
 80041d6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80041d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041da:	f023 0310 	bic.w	r3, r3, #16
 80041de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	330c      	adds	r3, #12
 80041e8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80041ec:	65ba      	str	r2, [r7, #88]	; 0x58
 80041ee:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80041f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80041f4:	e841 2300 	strex	r3, r2, [r1]
 80041f8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80041fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d1e3      	bne.n	80041c8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004204:	4618      	mov	r0, r3
 8004206:	f7fd fdab 	bl	8001d60 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004212:	b29b      	uxth	r3, r3
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	b29b      	uxth	r3, r3
 8004218:	4619      	mov	r1, r3
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f000 f8d4 	bl	80043c8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004220:	e099      	b.n	8004356 <HAL_UART_IRQHandler+0x50e>
 8004222:	bf00      	nop
 8004224:	080048db 	.word	0x080048db
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004230:	b29b      	uxth	r3, r3
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800423c:	b29b      	uxth	r3, r3
 800423e:	2b00      	cmp	r3, #0
 8004240:	f000 808b 	beq.w	800435a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004244:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004248:	2b00      	cmp	r3, #0
 800424a:	f000 8086 	beq.w	800435a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	330c      	adds	r3, #12
 8004254:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004258:	e853 3f00 	ldrex	r3, [r3]
 800425c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800425e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004260:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004264:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	330c      	adds	r3, #12
 800426e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004272:	647a      	str	r2, [r7, #68]	; 0x44
 8004274:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004276:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004278:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800427a:	e841 2300 	strex	r3, r2, [r1]
 800427e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004280:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004282:	2b00      	cmp	r3, #0
 8004284:	d1e3      	bne.n	800424e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	3314      	adds	r3, #20
 800428c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800428e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004290:	e853 3f00 	ldrex	r3, [r3]
 8004294:	623b      	str	r3, [r7, #32]
   return(result);
 8004296:	6a3b      	ldr	r3, [r7, #32]
 8004298:	f023 0301 	bic.w	r3, r3, #1
 800429c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	3314      	adds	r3, #20
 80042a6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80042aa:	633a      	str	r2, [r7, #48]	; 0x30
 80042ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80042b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042b2:	e841 2300 	strex	r3, r2, [r1]
 80042b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80042b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d1e3      	bne.n	8004286 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2220      	movs	r2, #32
 80042c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	330c      	adds	r3, #12
 80042d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	e853 3f00 	ldrex	r3, [r3]
 80042da:	60fb      	str	r3, [r7, #12]
   return(result);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f023 0310 	bic.w	r3, r3, #16
 80042e2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	330c      	adds	r3, #12
 80042ec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80042f0:	61fa      	str	r2, [r7, #28]
 80042f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f4:	69b9      	ldr	r1, [r7, #24]
 80042f6:	69fa      	ldr	r2, [r7, #28]
 80042f8:	e841 2300 	strex	r3, r2, [r1]
 80042fc:	617b      	str	r3, [r7, #20]
   return(result);
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d1e3      	bne.n	80042cc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004304:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004308:	4619      	mov	r1, r3
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f000 f85c 	bl	80043c8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004310:	e023      	b.n	800435a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004312:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800431a:	2b00      	cmp	r3, #0
 800431c:	d009      	beq.n	8004332 <HAL_UART_IRQHandler+0x4ea>
 800431e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004322:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004326:	2b00      	cmp	r3, #0
 8004328:	d003      	beq.n	8004332 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f000 fae9 	bl	8004902 <UART_Transmit_IT>
    return;
 8004330:	e014      	b.n	800435c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004332:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800433a:	2b00      	cmp	r3, #0
 800433c:	d00e      	beq.n	800435c <HAL_UART_IRQHandler+0x514>
 800433e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004342:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004346:	2b00      	cmp	r3, #0
 8004348:	d008      	beq.n	800435c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 fb29 	bl	80049a2 <UART_EndTransmit_IT>
    return;
 8004350:	e004      	b.n	800435c <HAL_UART_IRQHandler+0x514>
    return;
 8004352:	bf00      	nop
 8004354:	e002      	b.n	800435c <HAL_UART_IRQHandler+0x514>
      return;
 8004356:	bf00      	nop
 8004358:	e000      	b.n	800435c <HAL_UART_IRQHandler+0x514>
      return;
 800435a:	bf00      	nop
  }
}
 800435c:	37e8      	adds	r7, #232	; 0xe8
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop

08004364 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800436c:	bf00      	nop
 800436e:	370c      	adds	r7, #12
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr

08004378 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004378:	b480      	push	{r7}
 800437a:	b083      	sub	sp, #12
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004380:	bf00      	nop
 8004382:	370c      	adds	r7, #12
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr

0800438c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800438c:	b480      	push	{r7}
 800438e:	b083      	sub	sp, #12
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004394:	bf00      	nop
 8004396:	370c      	adds	r7, #12
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr

080043a0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b083      	sub	sp, #12
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80043a8:	bf00      	nop
 80043aa:	370c      	adds	r7, #12
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr

080043b4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80043bc:	bf00      	nop
 80043be:	370c      	adds	r7, #12
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr

080043c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	460b      	mov	r3, r1
 80043d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80043d4:	bf00      	nop
 80043d6:	370c      	adds	r7, #12
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr

080043e0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b090      	sub	sp, #64	; 0x40
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d137      	bne.n	800446c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80043fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043fe:	2200      	movs	r2, #0
 8004400:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004402:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	3314      	adds	r3, #20
 8004408:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800440a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440c:	e853 3f00 	ldrex	r3, [r3]
 8004410:	623b      	str	r3, [r7, #32]
   return(result);
 8004412:	6a3b      	ldr	r3, [r7, #32]
 8004414:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004418:	63bb      	str	r3, [r7, #56]	; 0x38
 800441a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	3314      	adds	r3, #20
 8004420:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004422:	633a      	str	r2, [r7, #48]	; 0x30
 8004424:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004426:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004428:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800442a:	e841 2300 	strex	r3, r2, [r1]
 800442e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004432:	2b00      	cmp	r3, #0
 8004434:	d1e5      	bne.n	8004402 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004436:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	330c      	adds	r3, #12
 800443c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	e853 3f00 	ldrex	r3, [r3]
 8004444:	60fb      	str	r3, [r7, #12]
   return(result);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800444c:	637b      	str	r3, [r7, #52]	; 0x34
 800444e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	330c      	adds	r3, #12
 8004454:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004456:	61fa      	str	r2, [r7, #28]
 8004458:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800445a:	69b9      	ldr	r1, [r7, #24]
 800445c:	69fa      	ldr	r2, [r7, #28]
 800445e:	e841 2300 	strex	r3, r2, [r1]
 8004462:	617b      	str	r3, [r7, #20]
   return(result);
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d1e5      	bne.n	8004436 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800446a:	e002      	b.n	8004472 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800446c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800446e:	f7ff ff79 	bl	8004364 <HAL_UART_TxCpltCallback>
}
 8004472:	bf00      	nop
 8004474:	3740      	adds	r7, #64	; 0x40
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}

0800447a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800447a:	b580      	push	{r7, lr}
 800447c:	b084      	sub	sp, #16
 800447e:	af00      	add	r7, sp, #0
 8004480:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004486:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004488:	68f8      	ldr	r0, [r7, #12]
 800448a:	f7ff ff75 	bl	8004378 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800448e:	bf00      	nop
 8004490:	3710      	adds	r7, #16
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}

08004496 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004496:	b580      	push	{r7, lr}
 8004498:	b09c      	sub	sp, #112	; 0x70
 800449a:	af00      	add	r7, sp, #0
 800449c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a2:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d172      	bne.n	8004598 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80044b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044b4:	2200      	movs	r2, #0
 80044b6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	330c      	adds	r3, #12
 80044be:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044c2:	e853 3f00 	ldrex	r3, [r3]
 80044c6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80044c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80044d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	330c      	adds	r3, #12
 80044d6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80044d8:	65ba      	str	r2, [r7, #88]	; 0x58
 80044da:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044dc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80044de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80044e0:	e841 2300 	strex	r3, r2, [r1]
 80044e4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80044e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d1e5      	bne.n	80044b8 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	3314      	adds	r3, #20
 80044f2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044f6:	e853 3f00 	ldrex	r3, [r3]
 80044fa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80044fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044fe:	f023 0301 	bic.w	r3, r3, #1
 8004502:	667b      	str	r3, [r7, #100]	; 0x64
 8004504:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	3314      	adds	r3, #20
 800450a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800450c:	647a      	str	r2, [r7, #68]	; 0x44
 800450e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004510:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004512:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004514:	e841 2300 	strex	r3, r2, [r1]
 8004518:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800451a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800451c:	2b00      	cmp	r3, #0
 800451e:	d1e5      	bne.n	80044ec <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004520:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	3314      	adds	r3, #20
 8004526:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452a:	e853 3f00 	ldrex	r3, [r3]
 800452e:	623b      	str	r3, [r7, #32]
   return(result);
 8004530:	6a3b      	ldr	r3, [r7, #32]
 8004532:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004536:	663b      	str	r3, [r7, #96]	; 0x60
 8004538:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	3314      	adds	r3, #20
 800453e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004540:	633a      	str	r2, [r7, #48]	; 0x30
 8004542:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004544:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004546:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004548:	e841 2300 	strex	r3, r2, [r1]
 800454c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800454e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004550:	2b00      	cmp	r3, #0
 8004552:	d1e5      	bne.n	8004520 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004554:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004556:	2220      	movs	r2, #32
 8004558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800455c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800455e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004560:	2b01      	cmp	r3, #1
 8004562:	d119      	bne.n	8004598 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004564:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	330c      	adds	r3, #12
 800456a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	e853 3f00 	ldrex	r3, [r3]
 8004572:	60fb      	str	r3, [r7, #12]
   return(result);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f023 0310 	bic.w	r3, r3, #16
 800457a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800457c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	330c      	adds	r3, #12
 8004582:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004584:	61fa      	str	r2, [r7, #28]
 8004586:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004588:	69b9      	ldr	r1, [r7, #24]
 800458a:	69fa      	ldr	r2, [r7, #28]
 800458c:	e841 2300 	strex	r3, r2, [r1]
 8004590:	617b      	str	r3, [r7, #20]
   return(result);
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d1e5      	bne.n	8004564 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004598:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800459a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800459c:	2b01      	cmp	r3, #1
 800459e:	d106      	bne.n	80045ae <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80045a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045a2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80045a4:	4619      	mov	r1, r3
 80045a6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80045a8:	f7ff ff0e 	bl	80043c8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80045ac:	e002      	b.n	80045b4 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80045ae:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80045b0:	f7ff feec 	bl	800438c <HAL_UART_RxCpltCallback>
}
 80045b4:	bf00      	nop
 80045b6:	3770      	adds	r7, #112	; 0x70
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}

080045bc <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c8:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d108      	bne.n	80045e4 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80045d6:	085b      	lsrs	r3, r3, #1
 80045d8:	b29b      	uxth	r3, r3
 80045da:	4619      	mov	r1, r3
 80045dc:	68f8      	ldr	r0, [r7, #12]
 80045de:	f7ff fef3 	bl	80043c8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80045e2:	e002      	b.n	80045ea <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80045e4:	68f8      	ldr	r0, [r7, #12]
 80045e6:	f7ff fedb 	bl	80043a0 <HAL_UART_RxHalfCpltCallback>
}
 80045ea:	bf00      	nop
 80045ec:	3710      	adds	r7, #16
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}

080045f2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80045f2:	b580      	push	{r7, lr}
 80045f4:	b084      	sub	sp, #16
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80045fa:	2300      	movs	r3, #0
 80045fc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004602:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	695b      	ldr	r3, [r3, #20]
 800460a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800460e:	2b80      	cmp	r3, #128	; 0x80
 8004610:	bf0c      	ite	eq
 8004612:	2301      	moveq	r3, #1
 8004614:	2300      	movne	r3, #0
 8004616:	b2db      	uxtb	r3, r3
 8004618:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004620:	b2db      	uxtb	r3, r3
 8004622:	2b21      	cmp	r3, #33	; 0x21
 8004624:	d108      	bne.n	8004638 <UART_DMAError+0x46>
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d005      	beq.n	8004638 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	2200      	movs	r2, #0
 8004630:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004632:	68b8      	ldr	r0, [r7, #8]
 8004634:	f000 f8c6 	bl	80047c4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	695b      	ldr	r3, [r3, #20]
 800463e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004642:	2b40      	cmp	r3, #64	; 0x40
 8004644:	bf0c      	ite	eq
 8004646:	2301      	moveq	r3, #1
 8004648:	2300      	movne	r3, #0
 800464a:	b2db      	uxtb	r3, r3
 800464c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004654:	b2db      	uxtb	r3, r3
 8004656:	2b22      	cmp	r3, #34	; 0x22
 8004658:	d108      	bne.n	800466c <UART_DMAError+0x7a>
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d005      	beq.n	800466c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	2200      	movs	r2, #0
 8004664:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004666:	68b8      	ldr	r0, [r7, #8]
 8004668:	f000 f8d4 	bl	8004814 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004670:	f043 0210 	orr.w	r2, r3, #16
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004678:	68b8      	ldr	r0, [r7, #8]
 800467a:	f7ff fe9b 	bl	80043b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800467e:	bf00      	nop
 8004680:	3710      	adds	r7, #16
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
	...

08004688 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b098      	sub	sp, #96	; 0x60
 800468c:	af00      	add	r7, sp, #0
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	60b9      	str	r1, [r7, #8]
 8004692:	4613      	mov	r3, r2
 8004694:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004696:	68ba      	ldr	r2, [r7, #8]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	88fa      	ldrh	r2, [r7, #6]
 80046a0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2200      	movs	r2, #0
 80046a6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2222      	movs	r2, #34	; 0x22
 80046ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b4:	4a40      	ldr	r2, [pc, #256]	; (80047b8 <UART_Start_Receive_DMA+0x130>)
 80046b6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046bc:	4a3f      	ldr	r2, [pc, #252]	; (80047bc <UART_Start_Receive_DMA+0x134>)
 80046be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c4:	4a3e      	ldr	r2, [pc, #248]	; (80047c0 <UART_Start_Receive_DMA+0x138>)
 80046c6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046cc:	2200      	movs	r2, #0
 80046ce:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80046d0:	f107 0308 	add.w	r3, r7, #8
 80046d4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	3304      	adds	r3, #4
 80046e0:	4619      	mov	r1, r3
 80046e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	88fb      	ldrh	r3, [r7, #6]
 80046e8:	f7fd fae2 	bl	8001cb0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80046ec:	2300      	movs	r3, #0
 80046ee:	613b      	str	r3, [r7, #16]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	613b      	str	r3, [r7, #16]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	613b      	str	r3, [r7, #16]
 8004700:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2200      	movs	r2, #0
 8004706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	691b      	ldr	r3, [r3, #16]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d019      	beq.n	8004746 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	330c      	adds	r3, #12
 8004718:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800471a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800471c:	e853 3f00 	ldrex	r3, [r3]
 8004720:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004722:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004724:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004728:	65bb      	str	r3, [r7, #88]	; 0x58
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	330c      	adds	r3, #12
 8004730:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004732:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004734:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004736:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004738:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800473a:	e841 2300 	strex	r3, r2, [r1]
 800473e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004740:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004742:	2b00      	cmp	r3, #0
 8004744:	d1e5      	bne.n	8004712 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	3314      	adds	r3, #20
 800474c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800474e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004750:	e853 3f00 	ldrex	r3, [r3]
 8004754:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004758:	f043 0301 	orr.w	r3, r3, #1
 800475c:	657b      	str	r3, [r7, #84]	; 0x54
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	3314      	adds	r3, #20
 8004764:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004766:	63ba      	str	r2, [r7, #56]	; 0x38
 8004768:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800476a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800476c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800476e:	e841 2300 	strex	r3, r2, [r1]
 8004772:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004776:	2b00      	cmp	r3, #0
 8004778:	d1e5      	bne.n	8004746 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	3314      	adds	r3, #20
 8004780:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004782:	69bb      	ldr	r3, [r7, #24]
 8004784:	e853 3f00 	ldrex	r3, [r3]
 8004788:	617b      	str	r3, [r7, #20]
   return(result);
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004790:	653b      	str	r3, [r7, #80]	; 0x50
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	3314      	adds	r3, #20
 8004798:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800479a:	627a      	str	r2, [r7, #36]	; 0x24
 800479c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800479e:	6a39      	ldr	r1, [r7, #32]
 80047a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047a2:	e841 2300 	strex	r3, r2, [r1]
 80047a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d1e5      	bne.n	800477a <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80047ae:	2300      	movs	r3, #0
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3760      	adds	r7, #96	; 0x60
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}
 80047b8:	08004497 	.word	0x08004497
 80047bc:	080045bd 	.word	0x080045bd
 80047c0:	080045f3 	.word	0x080045f3

080047c4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b089      	sub	sp, #36	; 0x24
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	330c      	adds	r3, #12
 80047d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	e853 3f00 	ldrex	r3, [r3]
 80047da:	60bb      	str	r3, [r7, #8]
   return(result);
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80047e2:	61fb      	str	r3, [r7, #28]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	330c      	adds	r3, #12
 80047ea:	69fa      	ldr	r2, [r7, #28]
 80047ec:	61ba      	str	r2, [r7, #24]
 80047ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047f0:	6979      	ldr	r1, [r7, #20]
 80047f2:	69ba      	ldr	r2, [r7, #24]
 80047f4:	e841 2300 	strex	r3, r2, [r1]
 80047f8:	613b      	str	r3, [r7, #16]
   return(result);
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d1e5      	bne.n	80047cc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2220      	movs	r2, #32
 8004804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004808:	bf00      	nop
 800480a:	3724      	adds	r7, #36	; 0x24
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr

08004814 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004814:	b480      	push	{r7}
 8004816:	b095      	sub	sp, #84	; 0x54
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	330c      	adds	r3, #12
 8004822:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004826:	e853 3f00 	ldrex	r3, [r3]
 800482a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800482c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800482e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004832:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	330c      	adds	r3, #12
 800483a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800483c:	643a      	str	r2, [r7, #64]	; 0x40
 800483e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004840:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004842:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004844:	e841 2300 	strex	r3, r2, [r1]
 8004848:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800484a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800484c:	2b00      	cmp	r3, #0
 800484e:	d1e5      	bne.n	800481c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	3314      	adds	r3, #20
 8004856:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004858:	6a3b      	ldr	r3, [r7, #32]
 800485a:	e853 3f00 	ldrex	r3, [r3]
 800485e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004860:	69fb      	ldr	r3, [r7, #28]
 8004862:	f023 0301 	bic.w	r3, r3, #1
 8004866:	64bb      	str	r3, [r7, #72]	; 0x48
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	3314      	adds	r3, #20
 800486e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004870:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004872:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004874:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004876:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004878:	e841 2300 	strex	r3, r2, [r1]
 800487c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800487e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004880:	2b00      	cmp	r3, #0
 8004882:	d1e5      	bne.n	8004850 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004888:	2b01      	cmp	r3, #1
 800488a:	d119      	bne.n	80048c0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	330c      	adds	r3, #12
 8004892:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	e853 3f00 	ldrex	r3, [r3]
 800489a:	60bb      	str	r3, [r7, #8]
   return(result);
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	f023 0310 	bic.w	r3, r3, #16
 80048a2:	647b      	str	r3, [r7, #68]	; 0x44
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	330c      	adds	r3, #12
 80048aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80048ac:	61ba      	str	r2, [r7, #24]
 80048ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b0:	6979      	ldr	r1, [r7, #20]
 80048b2:	69ba      	ldr	r2, [r7, #24]
 80048b4:	e841 2300 	strex	r3, r2, [r1]
 80048b8:	613b      	str	r3, [r7, #16]
   return(result);
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d1e5      	bne.n	800488c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2220      	movs	r2, #32
 80048c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80048ce:	bf00      	nop
 80048d0:	3754      	adds	r7, #84	; 0x54
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr

080048da <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80048da:	b580      	push	{r7, lr}
 80048dc:	b084      	sub	sp, #16
 80048de:	af00      	add	r7, sp, #0
 80048e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2200      	movs	r2, #0
 80048ec:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2200      	movs	r2, #0
 80048f2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80048f4:	68f8      	ldr	r0, [r7, #12]
 80048f6:	f7ff fd5d 	bl	80043b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048fa:	bf00      	nop
 80048fc:	3710      	adds	r7, #16
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}

08004902 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004902:	b480      	push	{r7}
 8004904:	b085      	sub	sp, #20
 8004906:	af00      	add	r7, sp, #0
 8004908:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004910:	b2db      	uxtb	r3, r3
 8004912:	2b21      	cmp	r3, #33	; 0x21
 8004914:	d13e      	bne.n	8004994 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800491e:	d114      	bne.n	800494a <UART_Transmit_IT+0x48>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	691b      	ldr	r3, [r3, #16]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d110      	bne.n	800494a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6a1b      	ldr	r3, [r3, #32]
 800492c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	881b      	ldrh	r3, [r3, #0]
 8004932:	461a      	mov	r2, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800493c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6a1b      	ldr	r3, [r3, #32]
 8004942:	1c9a      	adds	r2, r3, #2
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	621a      	str	r2, [r3, #32]
 8004948:	e008      	b.n	800495c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6a1b      	ldr	r3, [r3, #32]
 800494e:	1c59      	adds	r1, r3, #1
 8004950:	687a      	ldr	r2, [r7, #4]
 8004952:	6211      	str	r1, [r2, #32]
 8004954:	781a      	ldrb	r2, [r3, #0]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004960:	b29b      	uxth	r3, r3
 8004962:	3b01      	subs	r3, #1
 8004964:	b29b      	uxth	r3, r3
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	4619      	mov	r1, r3
 800496a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800496c:	2b00      	cmp	r3, #0
 800496e:	d10f      	bne.n	8004990 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	68da      	ldr	r2, [r3, #12]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800497e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	68da      	ldr	r2, [r3, #12]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800498e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004990:	2300      	movs	r3, #0
 8004992:	e000      	b.n	8004996 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004994:	2302      	movs	r3, #2
  }
}
 8004996:	4618      	mov	r0, r3
 8004998:	3714      	adds	r7, #20
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr

080049a2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80049a2:	b580      	push	{r7, lr}
 80049a4:	b082      	sub	sp, #8
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	68da      	ldr	r2, [r3, #12]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049b8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2220      	movs	r2, #32
 80049be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f7ff fcce 	bl	8004364 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80049c8:	2300      	movs	r3, #0
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3708      	adds	r7, #8
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}

080049d2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80049d2:	b580      	push	{r7, lr}
 80049d4:	b08c      	sub	sp, #48	; 0x30
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	2b22      	cmp	r3, #34	; 0x22
 80049e4:	f040 80ab 	bne.w	8004b3e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049f0:	d117      	bne.n	8004a22 <UART_Receive_IT+0x50>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	691b      	ldr	r3, [r3, #16]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d113      	bne.n	8004a22 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80049fa:	2300      	movs	r3, #0
 80049fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a02:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a10:	b29a      	uxth	r2, r3
 8004a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a14:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a1a:	1c9a      	adds	r2, r3, #2
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	629a      	str	r2, [r3, #40]	; 0x28
 8004a20:	e026      	b.n	8004a70 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a26:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a34:	d007      	beq.n	8004a46 <UART_Receive_IT+0x74>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d10a      	bne.n	8004a54 <UART_Receive_IT+0x82>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	691b      	ldr	r3, [r3, #16]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d106      	bne.n	8004a54 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	b2da      	uxtb	r2, r3
 8004a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a50:	701a      	strb	r2, [r3, #0]
 8004a52:	e008      	b.n	8004a66 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a60:	b2da      	uxtb	r2, r3
 8004a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a64:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a6a:	1c5a      	adds	r2, r3, #1
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	3b01      	subs	r3, #1
 8004a78:	b29b      	uxth	r3, r3
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	4619      	mov	r1, r3
 8004a7e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d15a      	bne.n	8004b3a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	68da      	ldr	r2, [r3, #12]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f022 0220 	bic.w	r2, r2, #32
 8004a92:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	68da      	ldr	r2, [r3, #12]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004aa2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	695a      	ldr	r2, [r3, #20]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f022 0201 	bic.w	r2, r2, #1
 8004ab2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2220      	movs	r2, #32
 8004ab8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d135      	bne.n	8004b30 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	330c      	adds	r3, #12
 8004ad0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	e853 3f00 	ldrex	r3, [r3]
 8004ad8:	613b      	str	r3, [r7, #16]
   return(result);
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	f023 0310 	bic.w	r3, r3, #16
 8004ae0:	627b      	str	r3, [r7, #36]	; 0x24
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	330c      	adds	r3, #12
 8004ae8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aea:	623a      	str	r2, [r7, #32]
 8004aec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aee:	69f9      	ldr	r1, [r7, #28]
 8004af0:	6a3a      	ldr	r2, [r7, #32]
 8004af2:	e841 2300 	strex	r3, r2, [r1]
 8004af6:	61bb      	str	r3, [r7, #24]
   return(result);
 8004af8:	69bb      	ldr	r3, [r7, #24]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d1e5      	bne.n	8004aca <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 0310 	and.w	r3, r3, #16
 8004b08:	2b10      	cmp	r3, #16
 8004b0a:	d10a      	bne.n	8004b22 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	60fb      	str	r3, [r7, #12]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	60fb      	str	r3, [r7, #12]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	60fb      	str	r3, [r7, #12]
 8004b20:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004b26:	4619      	mov	r1, r3
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f7ff fc4d 	bl	80043c8 <HAL_UARTEx_RxEventCallback>
 8004b2e:	e002      	b.n	8004b36 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f7ff fc2b 	bl	800438c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004b36:	2300      	movs	r3, #0
 8004b38:	e002      	b.n	8004b40 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	e000      	b.n	8004b40 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004b3e:	2302      	movs	r3, #2
  }
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3730      	adds	r7, #48	; 0x30
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}

08004b48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b4c:	b0c0      	sub	sp, #256	; 0x100
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	691b      	ldr	r3, [r3, #16]
 8004b5c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b64:	68d9      	ldr	r1, [r3, #12]
 8004b66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	ea40 0301 	orr.w	r3, r0, r1
 8004b70:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b76:	689a      	ldr	r2, [r3, #8]
 8004b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b7c:	691b      	ldr	r3, [r3, #16]
 8004b7e:	431a      	orrs	r2, r3
 8004b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b84:	695b      	ldr	r3, [r3, #20]
 8004b86:	431a      	orrs	r2, r3
 8004b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b8c:	69db      	ldr	r3, [r3, #28]
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004ba0:	f021 010c 	bic.w	r1, r1, #12
 8004ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004bae:	430b      	orrs	r3, r1
 8004bb0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004bb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	695b      	ldr	r3, [r3, #20]
 8004bba:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004bbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bc2:	6999      	ldr	r1, [r3, #24]
 8004bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	ea40 0301 	orr.w	r3, r0, r1
 8004bce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	4b8f      	ldr	r3, [pc, #572]	; (8004e14 <UART_SetConfig+0x2cc>)
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d005      	beq.n	8004be8 <UART_SetConfig+0xa0>
 8004bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	4b8d      	ldr	r3, [pc, #564]	; (8004e18 <UART_SetConfig+0x2d0>)
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d104      	bne.n	8004bf2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004be8:	f7fd fea0 	bl	800292c <HAL_RCC_GetPCLK2Freq>
 8004bec:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004bf0:	e003      	b.n	8004bfa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004bf2:	f7fd fe87 	bl	8002904 <HAL_RCC_GetPCLK1Freq>
 8004bf6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004bfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bfe:	69db      	ldr	r3, [r3, #28]
 8004c00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c04:	f040 810c 	bne.w	8004e20 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004c12:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004c16:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004c1a:	4622      	mov	r2, r4
 8004c1c:	462b      	mov	r3, r5
 8004c1e:	1891      	adds	r1, r2, r2
 8004c20:	65b9      	str	r1, [r7, #88]	; 0x58
 8004c22:	415b      	adcs	r3, r3
 8004c24:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c26:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004c2a:	4621      	mov	r1, r4
 8004c2c:	eb12 0801 	adds.w	r8, r2, r1
 8004c30:	4629      	mov	r1, r5
 8004c32:	eb43 0901 	adc.w	r9, r3, r1
 8004c36:	f04f 0200 	mov.w	r2, #0
 8004c3a:	f04f 0300 	mov.w	r3, #0
 8004c3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c4a:	4690      	mov	r8, r2
 8004c4c:	4699      	mov	r9, r3
 8004c4e:	4623      	mov	r3, r4
 8004c50:	eb18 0303 	adds.w	r3, r8, r3
 8004c54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004c58:	462b      	mov	r3, r5
 8004c5a:	eb49 0303 	adc.w	r3, r9, r3
 8004c5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004c62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004c6e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004c72:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004c76:	460b      	mov	r3, r1
 8004c78:	18db      	adds	r3, r3, r3
 8004c7a:	653b      	str	r3, [r7, #80]	; 0x50
 8004c7c:	4613      	mov	r3, r2
 8004c7e:	eb42 0303 	adc.w	r3, r2, r3
 8004c82:	657b      	str	r3, [r7, #84]	; 0x54
 8004c84:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004c88:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004c8c:	f7fb fb78 	bl	8000380 <__aeabi_uldivmod>
 8004c90:	4602      	mov	r2, r0
 8004c92:	460b      	mov	r3, r1
 8004c94:	4b61      	ldr	r3, [pc, #388]	; (8004e1c <UART_SetConfig+0x2d4>)
 8004c96:	fba3 2302 	umull	r2, r3, r3, r2
 8004c9a:	095b      	lsrs	r3, r3, #5
 8004c9c:	011c      	lsls	r4, r3, #4
 8004c9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004ca8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004cac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004cb0:	4642      	mov	r2, r8
 8004cb2:	464b      	mov	r3, r9
 8004cb4:	1891      	adds	r1, r2, r2
 8004cb6:	64b9      	str	r1, [r7, #72]	; 0x48
 8004cb8:	415b      	adcs	r3, r3
 8004cba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cbc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004cc0:	4641      	mov	r1, r8
 8004cc2:	eb12 0a01 	adds.w	sl, r2, r1
 8004cc6:	4649      	mov	r1, r9
 8004cc8:	eb43 0b01 	adc.w	fp, r3, r1
 8004ccc:	f04f 0200 	mov.w	r2, #0
 8004cd0:	f04f 0300 	mov.w	r3, #0
 8004cd4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004cd8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004cdc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ce0:	4692      	mov	sl, r2
 8004ce2:	469b      	mov	fp, r3
 8004ce4:	4643      	mov	r3, r8
 8004ce6:	eb1a 0303 	adds.w	r3, sl, r3
 8004cea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004cee:	464b      	mov	r3, r9
 8004cf0:	eb4b 0303 	adc.w	r3, fp, r3
 8004cf4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004d04:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004d08:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004d0c:	460b      	mov	r3, r1
 8004d0e:	18db      	adds	r3, r3, r3
 8004d10:	643b      	str	r3, [r7, #64]	; 0x40
 8004d12:	4613      	mov	r3, r2
 8004d14:	eb42 0303 	adc.w	r3, r2, r3
 8004d18:	647b      	str	r3, [r7, #68]	; 0x44
 8004d1a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004d1e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004d22:	f7fb fb2d 	bl	8000380 <__aeabi_uldivmod>
 8004d26:	4602      	mov	r2, r0
 8004d28:	460b      	mov	r3, r1
 8004d2a:	4611      	mov	r1, r2
 8004d2c:	4b3b      	ldr	r3, [pc, #236]	; (8004e1c <UART_SetConfig+0x2d4>)
 8004d2e:	fba3 2301 	umull	r2, r3, r3, r1
 8004d32:	095b      	lsrs	r3, r3, #5
 8004d34:	2264      	movs	r2, #100	; 0x64
 8004d36:	fb02 f303 	mul.w	r3, r2, r3
 8004d3a:	1acb      	subs	r3, r1, r3
 8004d3c:	00db      	lsls	r3, r3, #3
 8004d3e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004d42:	4b36      	ldr	r3, [pc, #216]	; (8004e1c <UART_SetConfig+0x2d4>)
 8004d44:	fba3 2302 	umull	r2, r3, r3, r2
 8004d48:	095b      	lsrs	r3, r3, #5
 8004d4a:	005b      	lsls	r3, r3, #1
 8004d4c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004d50:	441c      	add	r4, r3
 8004d52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d56:	2200      	movs	r2, #0
 8004d58:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004d5c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004d60:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004d64:	4642      	mov	r2, r8
 8004d66:	464b      	mov	r3, r9
 8004d68:	1891      	adds	r1, r2, r2
 8004d6a:	63b9      	str	r1, [r7, #56]	; 0x38
 8004d6c:	415b      	adcs	r3, r3
 8004d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d70:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004d74:	4641      	mov	r1, r8
 8004d76:	1851      	adds	r1, r2, r1
 8004d78:	6339      	str	r1, [r7, #48]	; 0x30
 8004d7a:	4649      	mov	r1, r9
 8004d7c:	414b      	adcs	r3, r1
 8004d7e:	637b      	str	r3, [r7, #52]	; 0x34
 8004d80:	f04f 0200 	mov.w	r2, #0
 8004d84:	f04f 0300 	mov.w	r3, #0
 8004d88:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004d8c:	4659      	mov	r1, fp
 8004d8e:	00cb      	lsls	r3, r1, #3
 8004d90:	4651      	mov	r1, sl
 8004d92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d96:	4651      	mov	r1, sl
 8004d98:	00ca      	lsls	r2, r1, #3
 8004d9a:	4610      	mov	r0, r2
 8004d9c:	4619      	mov	r1, r3
 8004d9e:	4603      	mov	r3, r0
 8004da0:	4642      	mov	r2, r8
 8004da2:	189b      	adds	r3, r3, r2
 8004da4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004da8:	464b      	mov	r3, r9
 8004daa:	460a      	mov	r2, r1
 8004dac:	eb42 0303 	adc.w	r3, r2, r3
 8004db0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004dc0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004dc4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004dc8:	460b      	mov	r3, r1
 8004dca:	18db      	adds	r3, r3, r3
 8004dcc:	62bb      	str	r3, [r7, #40]	; 0x28
 8004dce:	4613      	mov	r3, r2
 8004dd0:	eb42 0303 	adc.w	r3, r2, r3
 8004dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004dd6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004dda:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004dde:	f7fb facf 	bl	8000380 <__aeabi_uldivmod>
 8004de2:	4602      	mov	r2, r0
 8004de4:	460b      	mov	r3, r1
 8004de6:	4b0d      	ldr	r3, [pc, #52]	; (8004e1c <UART_SetConfig+0x2d4>)
 8004de8:	fba3 1302 	umull	r1, r3, r3, r2
 8004dec:	095b      	lsrs	r3, r3, #5
 8004dee:	2164      	movs	r1, #100	; 0x64
 8004df0:	fb01 f303 	mul.w	r3, r1, r3
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	00db      	lsls	r3, r3, #3
 8004df8:	3332      	adds	r3, #50	; 0x32
 8004dfa:	4a08      	ldr	r2, [pc, #32]	; (8004e1c <UART_SetConfig+0x2d4>)
 8004dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8004e00:	095b      	lsrs	r3, r3, #5
 8004e02:	f003 0207 	and.w	r2, r3, #7
 8004e06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4422      	add	r2, r4
 8004e0e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004e10:	e105      	b.n	800501e <UART_SetConfig+0x4d6>
 8004e12:	bf00      	nop
 8004e14:	40011000 	.word	0x40011000
 8004e18:	40011400 	.word	0x40011400
 8004e1c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e24:	2200      	movs	r2, #0
 8004e26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004e2a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004e2e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004e32:	4642      	mov	r2, r8
 8004e34:	464b      	mov	r3, r9
 8004e36:	1891      	adds	r1, r2, r2
 8004e38:	6239      	str	r1, [r7, #32]
 8004e3a:	415b      	adcs	r3, r3
 8004e3c:	627b      	str	r3, [r7, #36]	; 0x24
 8004e3e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004e42:	4641      	mov	r1, r8
 8004e44:	1854      	adds	r4, r2, r1
 8004e46:	4649      	mov	r1, r9
 8004e48:	eb43 0501 	adc.w	r5, r3, r1
 8004e4c:	f04f 0200 	mov.w	r2, #0
 8004e50:	f04f 0300 	mov.w	r3, #0
 8004e54:	00eb      	lsls	r3, r5, #3
 8004e56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e5a:	00e2      	lsls	r2, r4, #3
 8004e5c:	4614      	mov	r4, r2
 8004e5e:	461d      	mov	r5, r3
 8004e60:	4643      	mov	r3, r8
 8004e62:	18e3      	adds	r3, r4, r3
 8004e64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004e68:	464b      	mov	r3, r9
 8004e6a:	eb45 0303 	adc.w	r3, r5, r3
 8004e6e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004e72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004e7e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004e82:	f04f 0200 	mov.w	r2, #0
 8004e86:	f04f 0300 	mov.w	r3, #0
 8004e8a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004e8e:	4629      	mov	r1, r5
 8004e90:	008b      	lsls	r3, r1, #2
 8004e92:	4621      	mov	r1, r4
 8004e94:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e98:	4621      	mov	r1, r4
 8004e9a:	008a      	lsls	r2, r1, #2
 8004e9c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004ea0:	f7fb fa6e 	bl	8000380 <__aeabi_uldivmod>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	460b      	mov	r3, r1
 8004ea8:	4b60      	ldr	r3, [pc, #384]	; (800502c <UART_SetConfig+0x4e4>)
 8004eaa:	fba3 2302 	umull	r2, r3, r3, r2
 8004eae:	095b      	lsrs	r3, r3, #5
 8004eb0:	011c      	lsls	r4, r3, #4
 8004eb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004ebc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004ec0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004ec4:	4642      	mov	r2, r8
 8004ec6:	464b      	mov	r3, r9
 8004ec8:	1891      	adds	r1, r2, r2
 8004eca:	61b9      	str	r1, [r7, #24]
 8004ecc:	415b      	adcs	r3, r3
 8004ece:	61fb      	str	r3, [r7, #28]
 8004ed0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ed4:	4641      	mov	r1, r8
 8004ed6:	1851      	adds	r1, r2, r1
 8004ed8:	6139      	str	r1, [r7, #16]
 8004eda:	4649      	mov	r1, r9
 8004edc:	414b      	adcs	r3, r1
 8004ede:	617b      	str	r3, [r7, #20]
 8004ee0:	f04f 0200 	mov.w	r2, #0
 8004ee4:	f04f 0300 	mov.w	r3, #0
 8004ee8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004eec:	4659      	mov	r1, fp
 8004eee:	00cb      	lsls	r3, r1, #3
 8004ef0:	4651      	mov	r1, sl
 8004ef2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ef6:	4651      	mov	r1, sl
 8004ef8:	00ca      	lsls	r2, r1, #3
 8004efa:	4610      	mov	r0, r2
 8004efc:	4619      	mov	r1, r3
 8004efe:	4603      	mov	r3, r0
 8004f00:	4642      	mov	r2, r8
 8004f02:	189b      	adds	r3, r3, r2
 8004f04:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004f08:	464b      	mov	r3, r9
 8004f0a:	460a      	mov	r2, r1
 8004f0c:	eb42 0303 	adc.w	r3, r2, r3
 8004f10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	67bb      	str	r3, [r7, #120]	; 0x78
 8004f1e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004f20:	f04f 0200 	mov.w	r2, #0
 8004f24:	f04f 0300 	mov.w	r3, #0
 8004f28:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004f2c:	4649      	mov	r1, r9
 8004f2e:	008b      	lsls	r3, r1, #2
 8004f30:	4641      	mov	r1, r8
 8004f32:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f36:	4641      	mov	r1, r8
 8004f38:	008a      	lsls	r2, r1, #2
 8004f3a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004f3e:	f7fb fa1f 	bl	8000380 <__aeabi_uldivmod>
 8004f42:	4602      	mov	r2, r0
 8004f44:	460b      	mov	r3, r1
 8004f46:	4b39      	ldr	r3, [pc, #228]	; (800502c <UART_SetConfig+0x4e4>)
 8004f48:	fba3 1302 	umull	r1, r3, r3, r2
 8004f4c:	095b      	lsrs	r3, r3, #5
 8004f4e:	2164      	movs	r1, #100	; 0x64
 8004f50:	fb01 f303 	mul.w	r3, r1, r3
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	011b      	lsls	r3, r3, #4
 8004f58:	3332      	adds	r3, #50	; 0x32
 8004f5a:	4a34      	ldr	r2, [pc, #208]	; (800502c <UART_SetConfig+0x4e4>)
 8004f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f60:	095b      	lsrs	r3, r3, #5
 8004f62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f66:	441c      	add	r4, r3
 8004f68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	673b      	str	r3, [r7, #112]	; 0x70
 8004f70:	677a      	str	r2, [r7, #116]	; 0x74
 8004f72:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004f76:	4642      	mov	r2, r8
 8004f78:	464b      	mov	r3, r9
 8004f7a:	1891      	adds	r1, r2, r2
 8004f7c:	60b9      	str	r1, [r7, #8]
 8004f7e:	415b      	adcs	r3, r3
 8004f80:	60fb      	str	r3, [r7, #12]
 8004f82:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f86:	4641      	mov	r1, r8
 8004f88:	1851      	adds	r1, r2, r1
 8004f8a:	6039      	str	r1, [r7, #0]
 8004f8c:	4649      	mov	r1, r9
 8004f8e:	414b      	adcs	r3, r1
 8004f90:	607b      	str	r3, [r7, #4]
 8004f92:	f04f 0200 	mov.w	r2, #0
 8004f96:	f04f 0300 	mov.w	r3, #0
 8004f9a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004f9e:	4659      	mov	r1, fp
 8004fa0:	00cb      	lsls	r3, r1, #3
 8004fa2:	4651      	mov	r1, sl
 8004fa4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fa8:	4651      	mov	r1, sl
 8004faa:	00ca      	lsls	r2, r1, #3
 8004fac:	4610      	mov	r0, r2
 8004fae:	4619      	mov	r1, r3
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	4642      	mov	r2, r8
 8004fb4:	189b      	adds	r3, r3, r2
 8004fb6:	66bb      	str	r3, [r7, #104]	; 0x68
 8004fb8:	464b      	mov	r3, r9
 8004fba:	460a      	mov	r2, r1
 8004fbc:	eb42 0303 	adc.w	r3, r2, r3
 8004fc0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004fc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	663b      	str	r3, [r7, #96]	; 0x60
 8004fcc:	667a      	str	r2, [r7, #100]	; 0x64
 8004fce:	f04f 0200 	mov.w	r2, #0
 8004fd2:	f04f 0300 	mov.w	r3, #0
 8004fd6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004fda:	4649      	mov	r1, r9
 8004fdc:	008b      	lsls	r3, r1, #2
 8004fde:	4641      	mov	r1, r8
 8004fe0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004fe4:	4641      	mov	r1, r8
 8004fe6:	008a      	lsls	r2, r1, #2
 8004fe8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004fec:	f7fb f9c8 	bl	8000380 <__aeabi_uldivmod>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	460b      	mov	r3, r1
 8004ff4:	4b0d      	ldr	r3, [pc, #52]	; (800502c <UART_SetConfig+0x4e4>)
 8004ff6:	fba3 1302 	umull	r1, r3, r3, r2
 8004ffa:	095b      	lsrs	r3, r3, #5
 8004ffc:	2164      	movs	r1, #100	; 0x64
 8004ffe:	fb01 f303 	mul.w	r3, r1, r3
 8005002:	1ad3      	subs	r3, r2, r3
 8005004:	011b      	lsls	r3, r3, #4
 8005006:	3332      	adds	r3, #50	; 0x32
 8005008:	4a08      	ldr	r2, [pc, #32]	; (800502c <UART_SetConfig+0x4e4>)
 800500a:	fba2 2303 	umull	r2, r3, r2, r3
 800500e:	095b      	lsrs	r3, r3, #5
 8005010:	f003 020f 	and.w	r2, r3, #15
 8005014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4422      	add	r2, r4
 800501c:	609a      	str	r2, [r3, #8]
}
 800501e:	bf00      	nop
 8005020:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005024:	46bd      	mov	sp, r7
 8005026:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800502a:	bf00      	nop
 800502c:	51eb851f 	.word	0x51eb851f

08005030 <__NVIC_SetPriority>:
{
 8005030:	b480      	push	{r7}
 8005032:	b083      	sub	sp, #12
 8005034:	af00      	add	r7, sp, #0
 8005036:	4603      	mov	r3, r0
 8005038:	6039      	str	r1, [r7, #0]
 800503a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800503c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005040:	2b00      	cmp	r3, #0
 8005042:	db0a      	blt.n	800505a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	b2da      	uxtb	r2, r3
 8005048:	490c      	ldr	r1, [pc, #48]	; (800507c <__NVIC_SetPriority+0x4c>)
 800504a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800504e:	0112      	lsls	r2, r2, #4
 8005050:	b2d2      	uxtb	r2, r2
 8005052:	440b      	add	r3, r1
 8005054:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005058:	e00a      	b.n	8005070 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	b2da      	uxtb	r2, r3
 800505e:	4908      	ldr	r1, [pc, #32]	; (8005080 <__NVIC_SetPriority+0x50>)
 8005060:	79fb      	ldrb	r3, [r7, #7]
 8005062:	f003 030f 	and.w	r3, r3, #15
 8005066:	3b04      	subs	r3, #4
 8005068:	0112      	lsls	r2, r2, #4
 800506a:	b2d2      	uxtb	r2, r2
 800506c:	440b      	add	r3, r1
 800506e:	761a      	strb	r2, [r3, #24]
}
 8005070:	bf00      	nop
 8005072:	370c      	adds	r7, #12
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr
 800507c:	e000e100 	.word	0xe000e100
 8005080:	e000ed00 	.word	0xe000ed00

08005084 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005084:	b580      	push	{r7, lr}
 8005086:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005088:	4b05      	ldr	r3, [pc, #20]	; (80050a0 <SysTick_Handler+0x1c>)
 800508a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800508c:	f001 fd24 	bl	8006ad8 <xTaskGetSchedulerState>
 8005090:	4603      	mov	r3, r0
 8005092:	2b01      	cmp	r3, #1
 8005094:	d001      	beq.n	800509a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005096:	f002 fb0f 	bl	80076b8 <xPortSysTickHandler>
  }
}
 800509a:	bf00      	nop
 800509c:	bd80      	pop	{r7, pc}
 800509e:	bf00      	nop
 80050a0:	e000e010 	.word	0xe000e010

080050a4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80050a4:	b580      	push	{r7, lr}
 80050a6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80050a8:	2100      	movs	r1, #0
 80050aa:	f06f 0004 	mvn.w	r0, #4
 80050ae:	f7ff ffbf 	bl	8005030 <__NVIC_SetPriority>
#endif
}
 80050b2:	bf00      	nop
 80050b4:	bd80      	pop	{r7, pc}
	...

080050b8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80050b8:	b480      	push	{r7}
 80050ba:	b083      	sub	sp, #12
 80050bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80050be:	f3ef 8305 	mrs	r3, IPSR
 80050c2:	603b      	str	r3, [r7, #0]
  return(result);
 80050c4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d003      	beq.n	80050d2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80050ca:	f06f 0305 	mvn.w	r3, #5
 80050ce:	607b      	str	r3, [r7, #4]
 80050d0:	e00c      	b.n	80050ec <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80050d2:	4b0a      	ldr	r3, [pc, #40]	; (80050fc <osKernelInitialize+0x44>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d105      	bne.n	80050e6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80050da:	4b08      	ldr	r3, [pc, #32]	; (80050fc <osKernelInitialize+0x44>)
 80050dc:	2201      	movs	r2, #1
 80050de:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80050e0:	2300      	movs	r3, #0
 80050e2:	607b      	str	r3, [r7, #4]
 80050e4:	e002      	b.n	80050ec <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80050e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80050ea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80050ec:	687b      	ldr	r3, [r7, #4]
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	370c      	adds	r7, #12
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr
 80050fa:	bf00      	nop
 80050fc:	200075f8 	.word	0x200075f8

08005100 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005100:	b580      	push	{r7, lr}
 8005102:	b082      	sub	sp, #8
 8005104:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005106:	f3ef 8305 	mrs	r3, IPSR
 800510a:	603b      	str	r3, [r7, #0]
  return(result);
 800510c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800510e:	2b00      	cmp	r3, #0
 8005110:	d003      	beq.n	800511a <osKernelStart+0x1a>
    stat = osErrorISR;
 8005112:	f06f 0305 	mvn.w	r3, #5
 8005116:	607b      	str	r3, [r7, #4]
 8005118:	e010      	b.n	800513c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800511a:	4b0b      	ldr	r3, [pc, #44]	; (8005148 <osKernelStart+0x48>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	2b01      	cmp	r3, #1
 8005120:	d109      	bne.n	8005136 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005122:	f7ff ffbf 	bl	80050a4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005126:	4b08      	ldr	r3, [pc, #32]	; (8005148 <osKernelStart+0x48>)
 8005128:	2202      	movs	r2, #2
 800512a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800512c:	f001 f866 	bl	80061fc <vTaskStartScheduler>
      stat = osOK;
 8005130:	2300      	movs	r3, #0
 8005132:	607b      	str	r3, [r7, #4]
 8005134:	e002      	b.n	800513c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005136:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800513a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800513c:	687b      	ldr	r3, [r7, #4]
}
 800513e:	4618      	mov	r0, r3
 8005140:	3708      	adds	r7, #8
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
 8005146:	bf00      	nop
 8005148:	200075f8 	.word	0x200075f8

0800514c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800514c:	b580      	push	{r7, lr}
 800514e:	b08e      	sub	sp, #56	; 0x38
 8005150:	af04      	add	r7, sp, #16
 8005152:	60f8      	str	r0, [r7, #12]
 8005154:	60b9      	str	r1, [r7, #8]
 8005156:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005158:	2300      	movs	r3, #0
 800515a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800515c:	f3ef 8305 	mrs	r3, IPSR
 8005160:	617b      	str	r3, [r7, #20]
  return(result);
 8005162:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005164:	2b00      	cmp	r3, #0
 8005166:	d17e      	bne.n	8005266 <osThreadNew+0x11a>
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d07b      	beq.n	8005266 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800516e:	2380      	movs	r3, #128	; 0x80
 8005170:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005172:	2318      	movs	r3, #24
 8005174:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005176:	2300      	movs	r3, #0
 8005178:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800517a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800517e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d045      	beq.n	8005212 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d002      	beq.n	8005194 <osThreadNew+0x48>
        name = attr->name;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	699b      	ldr	r3, [r3, #24]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d002      	beq.n	80051a2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	699b      	ldr	r3, [r3, #24]
 80051a0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80051a2:	69fb      	ldr	r3, [r7, #28]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d008      	beq.n	80051ba <osThreadNew+0x6e>
 80051a8:	69fb      	ldr	r3, [r7, #28]
 80051aa:	2b38      	cmp	r3, #56	; 0x38
 80051ac:	d805      	bhi.n	80051ba <osThreadNew+0x6e>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	f003 0301 	and.w	r3, r3, #1
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d001      	beq.n	80051be <osThreadNew+0x72>
        return (NULL);
 80051ba:	2300      	movs	r3, #0
 80051bc:	e054      	b.n	8005268 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	695b      	ldr	r3, [r3, #20]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d003      	beq.n	80051ce <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	695b      	ldr	r3, [r3, #20]
 80051ca:	089b      	lsrs	r3, r3, #2
 80051cc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d00e      	beq.n	80051f4 <osThreadNew+0xa8>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	2b5b      	cmp	r3, #91	; 0x5b
 80051dc:	d90a      	bls.n	80051f4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d006      	beq.n	80051f4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	695b      	ldr	r3, [r3, #20]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d002      	beq.n	80051f4 <osThreadNew+0xa8>
        mem = 1;
 80051ee:	2301      	movs	r3, #1
 80051f0:	61bb      	str	r3, [r7, #24]
 80051f2:	e010      	b.n	8005216 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d10c      	bne.n	8005216 <osThreadNew+0xca>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d108      	bne.n	8005216 <osThreadNew+0xca>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	691b      	ldr	r3, [r3, #16]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d104      	bne.n	8005216 <osThreadNew+0xca>
          mem = 0;
 800520c:	2300      	movs	r3, #0
 800520e:	61bb      	str	r3, [r7, #24]
 8005210:	e001      	b.n	8005216 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005212:	2300      	movs	r3, #0
 8005214:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005216:	69bb      	ldr	r3, [r7, #24]
 8005218:	2b01      	cmp	r3, #1
 800521a:	d110      	bne.n	800523e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005220:	687a      	ldr	r2, [r7, #4]
 8005222:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005224:	9202      	str	r2, [sp, #8]
 8005226:	9301      	str	r3, [sp, #4]
 8005228:	69fb      	ldr	r3, [r7, #28]
 800522a:	9300      	str	r3, [sp, #0]
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	6a3a      	ldr	r2, [r7, #32]
 8005230:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005232:	68f8      	ldr	r0, [r7, #12]
 8005234:	f000 fe0c 	bl	8005e50 <xTaskCreateStatic>
 8005238:	4603      	mov	r3, r0
 800523a:	613b      	str	r3, [r7, #16]
 800523c:	e013      	b.n	8005266 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800523e:	69bb      	ldr	r3, [r7, #24]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d110      	bne.n	8005266 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005244:	6a3b      	ldr	r3, [r7, #32]
 8005246:	b29a      	uxth	r2, r3
 8005248:	f107 0310 	add.w	r3, r7, #16
 800524c:	9301      	str	r3, [sp, #4]
 800524e:	69fb      	ldr	r3, [r7, #28]
 8005250:	9300      	str	r3, [sp, #0]
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005256:	68f8      	ldr	r0, [r7, #12]
 8005258:	f000 fe57 	bl	8005f0a <xTaskCreate>
 800525c:	4603      	mov	r3, r0
 800525e:	2b01      	cmp	r3, #1
 8005260:	d001      	beq.n	8005266 <osThreadNew+0x11a>
            hTask = NULL;
 8005262:	2300      	movs	r3, #0
 8005264:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005266:	693b      	ldr	r3, [r7, #16]
}
 8005268:	4618      	mov	r0, r3
 800526a:	3728      	adds	r7, #40	; 0x28
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}

08005270 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005270:	b580      	push	{r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005278:	f3ef 8305 	mrs	r3, IPSR
 800527c:	60bb      	str	r3, [r7, #8]
  return(result);
 800527e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005280:	2b00      	cmp	r3, #0
 8005282:	d003      	beq.n	800528c <osDelay+0x1c>
    stat = osErrorISR;
 8005284:	f06f 0305 	mvn.w	r3, #5
 8005288:	60fb      	str	r3, [r7, #12]
 800528a:	e007      	b.n	800529c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800528c:	2300      	movs	r3, #0
 800528e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d002      	beq.n	800529c <osDelay+0x2c>
      vTaskDelay(ticks);
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f000 ff7c 	bl	8006194 <vTaskDelay>
    }
  }

  return (stat);
 800529c:	68fb      	ldr	r3, [r7, #12]
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3710      	adds	r7, #16
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}
	...

080052a8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80052a8:	b480      	push	{r7}
 80052aa:	b085      	sub	sp, #20
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	60f8      	str	r0, [r7, #12]
 80052b0:	60b9      	str	r1, [r7, #8]
 80052b2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	4a07      	ldr	r2, [pc, #28]	; (80052d4 <vApplicationGetIdleTaskMemory+0x2c>)
 80052b8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	4a06      	ldr	r2, [pc, #24]	; (80052d8 <vApplicationGetIdleTaskMemory+0x30>)
 80052be:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2280      	movs	r2, #128	; 0x80
 80052c4:	601a      	str	r2, [r3, #0]
}
 80052c6:	bf00      	nop
 80052c8:	3714      	adds	r7, #20
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr
 80052d2:	bf00      	nop
 80052d4:	200075fc 	.word	0x200075fc
 80052d8:	20007658 	.word	0x20007658

080052dc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80052dc:	b480      	push	{r7}
 80052de:	b085      	sub	sp, #20
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	60f8      	str	r0, [r7, #12]
 80052e4:	60b9      	str	r1, [r7, #8]
 80052e6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	4a07      	ldr	r2, [pc, #28]	; (8005308 <vApplicationGetTimerTaskMemory+0x2c>)
 80052ec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	4a06      	ldr	r2, [pc, #24]	; (800530c <vApplicationGetTimerTaskMemory+0x30>)
 80052f2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80052fa:	601a      	str	r2, [r3, #0]
}
 80052fc:	bf00      	nop
 80052fe:	3714      	adds	r7, #20
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr
 8005308:	20007858 	.word	0x20007858
 800530c:	200078b4 	.word	0x200078b4

08005310 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005310:	b480      	push	{r7}
 8005312:	b083      	sub	sp, #12
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f103 0208 	add.w	r2, r3, #8
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005328:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f103 0208 	add.w	r2, r3, #8
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f103 0208 	add.w	r2, r3, #8
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2200      	movs	r2, #0
 8005342:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005344:	bf00      	nop
 8005346:	370c      	adds	r7, #12
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr

08005350 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005350:	b480      	push	{r7}
 8005352:	b083      	sub	sp, #12
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2200      	movs	r2, #0
 800535c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800535e:	bf00      	nop
 8005360:	370c      	adds	r7, #12
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr

0800536a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800536a:	b480      	push	{r7}
 800536c:	b085      	sub	sp, #20
 800536e:	af00      	add	r7, sp, #0
 8005370:	6078      	str	r0, [r7, #4]
 8005372:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	68fa      	ldr	r2, [r7, #12]
 800537e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	689a      	ldr	r2, [r3, #8]
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	683a      	ldr	r2, [r7, #0]
 800538e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	683a      	ldr	r2, [r7, #0]
 8005394:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	687a      	ldr	r2, [r7, #4]
 800539a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	1c5a      	adds	r2, r3, #1
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	601a      	str	r2, [r3, #0]
}
 80053a6:	bf00      	nop
 80053a8:	3714      	adds	r7, #20
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr

080053b2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80053b2:	b480      	push	{r7}
 80053b4:	b085      	sub	sp, #20
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	6078      	str	r0, [r7, #4]
 80053ba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053c8:	d103      	bne.n	80053d2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	691b      	ldr	r3, [r3, #16]
 80053ce:	60fb      	str	r3, [r7, #12]
 80053d0:	e00c      	b.n	80053ec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	3308      	adds	r3, #8
 80053d6:	60fb      	str	r3, [r7, #12]
 80053d8:	e002      	b.n	80053e0 <vListInsert+0x2e>
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	60fb      	str	r3, [r7, #12]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	68ba      	ldr	r2, [r7, #8]
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d2f6      	bcs.n	80053da <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	685a      	ldr	r2, [r3, #4]
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	683a      	ldr	r2, [r7, #0]
 80053fa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	68fa      	ldr	r2, [r7, #12]
 8005400:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	683a      	ldr	r2, [r7, #0]
 8005406:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	1c5a      	adds	r2, r3, #1
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	601a      	str	r2, [r3, #0]
}
 8005418:	bf00      	nop
 800541a:	3714      	adds	r7, #20
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr

08005424 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005424:	b480      	push	{r7}
 8005426:	b085      	sub	sp, #20
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	691b      	ldr	r3, [r3, #16]
 8005430:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	6892      	ldr	r2, [r2, #8]
 800543a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	6852      	ldr	r2, [r2, #4]
 8005444:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	687a      	ldr	r2, [r7, #4]
 800544c:	429a      	cmp	r2, r3
 800544e:	d103      	bne.n	8005458 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	689a      	ldr	r2, [r3, #8]
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	1e5a      	subs	r2, r3, #1
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
}
 800546c:	4618      	mov	r0, r3
 800546e:	3714      	adds	r7, #20
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr

08005478 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b084      	sub	sp, #16
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d10a      	bne.n	80054a2 <xQueueGenericReset+0x2a>
	__asm volatile
 800548c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005490:	f383 8811 	msr	BASEPRI, r3
 8005494:	f3bf 8f6f 	isb	sy
 8005498:	f3bf 8f4f 	dsb	sy
 800549c:	60bb      	str	r3, [r7, #8]
}
 800549e:	bf00      	nop
 80054a0:	e7fe      	b.n	80054a0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80054a2:	f002 f877 	bl	8007594 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054ae:	68f9      	ldr	r1, [r7, #12]
 80054b0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80054b2:	fb01 f303 	mul.w	r3, r1, r3
 80054b6:	441a      	add	r2, r3
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2200      	movs	r2, #0
 80054c0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054d2:	3b01      	subs	r3, #1
 80054d4:	68f9      	ldr	r1, [r7, #12]
 80054d6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80054d8:	fb01 f303 	mul.w	r3, r1, r3
 80054dc:	441a      	add	r2, r3
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	22ff      	movs	r2, #255	; 0xff
 80054e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	22ff      	movs	r2, #255	; 0xff
 80054ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d114      	bne.n	8005522 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	691b      	ldr	r3, [r3, #16]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d01a      	beq.n	8005536 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	3310      	adds	r3, #16
 8005504:	4618      	mov	r0, r3
 8005506:	f001 f903 	bl	8006710 <xTaskRemoveFromEventList>
 800550a:	4603      	mov	r3, r0
 800550c:	2b00      	cmp	r3, #0
 800550e:	d012      	beq.n	8005536 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005510:	4b0c      	ldr	r3, [pc, #48]	; (8005544 <xQueueGenericReset+0xcc>)
 8005512:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005516:	601a      	str	r2, [r3, #0]
 8005518:	f3bf 8f4f 	dsb	sy
 800551c:	f3bf 8f6f 	isb	sy
 8005520:	e009      	b.n	8005536 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	3310      	adds	r3, #16
 8005526:	4618      	mov	r0, r3
 8005528:	f7ff fef2 	bl	8005310 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	3324      	adds	r3, #36	; 0x24
 8005530:	4618      	mov	r0, r3
 8005532:	f7ff feed 	bl	8005310 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005536:	f002 f85d 	bl	80075f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800553a:	2301      	movs	r3, #1
}
 800553c:	4618      	mov	r0, r3
 800553e:	3710      	adds	r7, #16
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}
 8005544:	e000ed04 	.word	0xe000ed04

08005548 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005548:	b580      	push	{r7, lr}
 800554a:	b08e      	sub	sp, #56	; 0x38
 800554c:	af02      	add	r7, sp, #8
 800554e:	60f8      	str	r0, [r7, #12]
 8005550:	60b9      	str	r1, [r7, #8]
 8005552:	607a      	str	r2, [r7, #4]
 8005554:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d10a      	bne.n	8005572 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800555c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005560:	f383 8811 	msr	BASEPRI, r3
 8005564:	f3bf 8f6f 	isb	sy
 8005568:	f3bf 8f4f 	dsb	sy
 800556c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800556e:	bf00      	nop
 8005570:	e7fe      	b.n	8005570 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d10a      	bne.n	800558e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800557c:	f383 8811 	msr	BASEPRI, r3
 8005580:	f3bf 8f6f 	isb	sy
 8005584:	f3bf 8f4f 	dsb	sy
 8005588:	627b      	str	r3, [r7, #36]	; 0x24
}
 800558a:	bf00      	nop
 800558c:	e7fe      	b.n	800558c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d002      	beq.n	800559a <xQueueGenericCreateStatic+0x52>
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d001      	beq.n	800559e <xQueueGenericCreateStatic+0x56>
 800559a:	2301      	movs	r3, #1
 800559c:	e000      	b.n	80055a0 <xQueueGenericCreateStatic+0x58>
 800559e:	2300      	movs	r3, #0
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d10a      	bne.n	80055ba <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80055a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a8:	f383 8811 	msr	BASEPRI, r3
 80055ac:	f3bf 8f6f 	isb	sy
 80055b0:	f3bf 8f4f 	dsb	sy
 80055b4:	623b      	str	r3, [r7, #32]
}
 80055b6:	bf00      	nop
 80055b8:	e7fe      	b.n	80055b8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d102      	bne.n	80055c6 <xQueueGenericCreateStatic+0x7e>
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d101      	bne.n	80055ca <xQueueGenericCreateStatic+0x82>
 80055c6:	2301      	movs	r3, #1
 80055c8:	e000      	b.n	80055cc <xQueueGenericCreateStatic+0x84>
 80055ca:	2300      	movs	r3, #0
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d10a      	bne.n	80055e6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80055d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d4:	f383 8811 	msr	BASEPRI, r3
 80055d8:	f3bf 8f6f 	isb	sy
 80055dc:	f3bf 8f4f 	dsb	sy
 80055e0:	61fb      	str	r3, [r7, #28]
}
 80055e2:	bf00      	nop
 80055e4:	e7fe      	b.n	80055e4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80055e6:	2350      	movs	r3, #80	; 0x50
 80055e8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	2b50      	cmp	r3, #80	; 0x50
 80055ee:	d00a      	beq.n	8005606 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80055f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f4:	f383 8811 	msr	BASEPRI, r3
 80055f8:	f3bf 8f6f 	isb	sy
 80055fc:	f3bf 8f4f 	dsb	sy
 8005600:	61bb      	str	r3, [r7, #24]
}
 8005602:	bf00      	nop
 8005604:	e7fe      	b.n	8005604 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005606:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800560c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800560e:	2b00      	cmp	r3, #0
 8005610:	d00d      	beq.n	800562e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005614:	2201      	movs	r2, #1
 8005616:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800561a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800561e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005620:	9300      	str	r3, [sp, #0]
 8005622:	4613      	mov	r3, r2
 8005624:	687a      	ldr	r2, [r7, #4]
 8005626:	68b9      	ldr	r1, [r7, #8]
 8005628:	68f8      	ldr	r0, [r7, #12]
 800562a:	f000 f805 	bl	8005638 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800562e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005630:	4618      	mov	r0, r3
 8005632:	3730      	adds	r7, #48	; 0x30
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}

08005638 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b084      	sub	sp, #16
 800563c:	af00      	add	r7, sp, #0
 800563e:	60f8      	str	r0, [r7, #12]
 8005640:	60b9      	str	r1, [r7, #8]
 8005642:	607a      	str	r2, [r7, #4]
 8005644:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d103      	bne.n	8005654 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800564c:	69bb      	ldr	r3, [r7, #24]
 800564e:	69ba      	ldr	r2, [r7, #24]
 8005650:	601a      	str	r2, [r3, #0]
 8005652:	e002      	b.n	800565a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005654:	69bb      	ldr	r3, [r7, #24]
 8005656:	687a      	ldr	r2, [r7, #4]
 8005658:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800565a:	69bb      	ldr	r3, [r7, #24]
 800565c:	68fa      	ldr	r2, [r7, #12]
 800565e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005660:	69bb      	ldr	r3, [r7, #24]
 8005662:	68ba      	ldr	r2, [r7, #8]
 8005664:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005666:	2101      	movs	r1, #1
 8005668:	69b8      	ldr	r0, [r7, #24]
 800566a:	f7ff ff05 	bl	8005478 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800566e:	69bb      	ldr	r3, [r7, #24]
 8005670:	78fa      	ldrb	r2, [r7, #3]
 8005672:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005676:	bf00      	nop
 8005678:	3710      	adds	r7, #16
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
	...

08005680 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b08e      	sub	sp, #56	; 0x38
 8005684:	af00      	add	r7, sp, #0
 8005686:	60f8      	str	r0, [r7, #12]
 8005688:	60b9      	str	r1, [r7, #8]
 800568a:	607a      	str	r2, [r7, #4]
 800568c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800568e:	2300      	movs	r3, #0
 8005690:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005698:	2b00      	cmp	r3, #0
 800569a:	d10a      	bne.n	80056b2 <xQueueGenericSend+0x32>
	__asm volatile
 800569c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a0:	f383 8811 	msr	BASEPRI, r3
 80056a4:	f3bf 8f6f 	isb	sy
 80056a8:	f3bf 8f4f 	dsb	sy
 80056ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80056ae:	bf00      	nop
 80056b0:	e7fe      	b.n	80056b0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d103      	bne.n	80056c0 <xQueueGenericSend+0x40>
 80056b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d101      	bne.n	80056c4 <xQueueGenericSend+0x44>
 80056c0:	2301      	movs	r3, #1
 80056c2:	e000      	b.n	80056c6 <xQueueGenericSend+0x46>
 80056c4:	2300      	movs	r3, #0
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d10a      	bne.n	80056e0 <xQueueGenericSend+0x60>
	__asm volatile
 80056ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ce:	f383 8811 	msr	BASEPRI, r3
 80056d2:	f3bf 8f6f 	isb	sy
 80056d6:	f3bf 8f4f 	dsb	sy
 80056da:	627b      	str	r3, [r7, #36]	; 0x24
}
 80056dc:	bf00      	nop
 80056de:	e7fe      	b.n	80056de <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	2b02      	cmp	r3, #2
 80056e4:	d103      	bne.n	80056ee <xQueueGenericSend+0x6e>
 80056e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d101      	bne.n	80056f2 <xQueueGenericSend+0x72>
 80056ee:	2301      	movs	r3, #1
 80056f0:	e000      	b.n	80056f4 <xQueueGenericSend+0x74>
 80056f2:	2300      	movs	r3, #0
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d10a      	bne.n	800570e <xQueueGenericSend+0x8e>
	__asm volatile
 80056f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056fc:	f383 8811 	msr	BASEPRI, r3
 8005700:	f3bf 8f6f 	isb	sy
 8005704:	f3bf 8f4f 	dsb	sy
 8005708:	623b      	str	r3, [r7, #32]
}
 800570a:	bf00      	nop
 800570c:	e7fe      	b.n	800570c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800570e:	f001 f9e3 	bl	8006ad8 <xTaskGetSchedulerState>
 8005712:	4603      	mov	r3, r0
 8005714:	2b00      	cmp	r3, #0
 8005716:	d102      	bne.n	800571e <xQueueGenericSend+0x9e>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d101      	bne.n	8005722 <xQueueGenericSend+0xa2>
 800571e:	2301      	movs	r3, #1
 8005720:	e000      	b.n	8005724 <xQueueGenericSend+0xa4>
 8005722:	2300      	movs	r3, #0
 8005724:	2b00      	cmp	r3, #0
 8005726:	d10a      	bne.n	800573e <xQueueGenericSend+0xbe>
	__asm volatile
 8005728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800572c:	f383 8811 	msr	BASEPRI, r3
 8005730:	f3bf 8f6f 	isb	sy
 8005734:	f3bf 8f4f 	dsb	sy
 8005738:	61fb      	str	r3, [r7, #28]
}
 800573a:	bf00      	nop
 800573c:	e7fe      	b.n	800573c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800573e:	f001 ff29 	bl	8007594 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005744:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800574a:	429a      	cmp	r2, r3
 800574c:	d302      	bcc.n	8005754 <xQueueGenericSend+0xd4>
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	2b02      	cmp	r3, #2
 8005752:	d129      	bne.n	80057a8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005754:	683a      	ldr	r2, [r7, #0]
 8005756:	68b9      	ldr	r1, [r7, #8]
 8005758:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800575a:	f000 fa0b 	bl	8005b74 <prvCopyDataToQueue>
 800575e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005764:	2b00      	cmp	r3, #0
 8005766:	d010      	beq.n	800578a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800576a:	3324      	adds	r3, #36	; 0x24
 800576c:	4618      	mov	r0, r3
 800576e:	f000 ffcf 	bl	8006710 <xTaskRemoveFromEventList>
 8005772:	4603      	mov	r3, r0
 8005774:	2b00      	cmp	r3, #0
 8005776:	d013      	beq.n	80057a0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005778:	4b3f      	ldr	r3, [pc, #252]	; (8005878 <xQueueGenericSend+0x1f8>)
 800577a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800577e:	601a      	str	r2, [r3, #0]
 8005780:	f3bf 8f4f 	dsb	sy
 8005784:	f3bf 8f6f 	isb	sy
 8005788:	e00a      	b.n	80057a0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800578a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800578c:	2b00      	cmp	r3, #0
 800578e:	d007      	beq.n	80057a0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005790:	4b39      	ldr	r3, [pc, #228]	; (8005878 <xQueueGenericSend+0x1f8>)
 8005792:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005796:	601a      	str	r2, [r3, #0]
 8005798:	f3bf 8f4f 	dsb	sy
 800579c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80057a0:	f001 ff28 	bl	80075f4 <vPortExitCritical>
				return pdPASS;
 80057a4:	2301      	movs	r3, #1
 80057a6:	e063      	b.n	8005870 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d103      	bne.n	80057b6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80057ae:	f001 ff21 	bl	80075f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80057b2:	2300      	movs	r3, #0
 80057b4:	e05c      	b.n	8005870 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80057b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d106      	bne.n	80057ca <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80057bc:	f107 0314 	add.w	r3, r7, #20
 80057c0:	4618      	mov	r0, r3
 80057c2:	f001 f82f 	bl	8006824 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80057c6:	2301      	movs	r3, #1
 80057c8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80057ca:	f001 ff13 	bl	80075f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80057ce:	f000 fd7b 	bl	80062c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80057d2:	f001 fedf 	bl	8007594 <vPortEnterCritical>
 80057d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80057dc:	b25b      	sxtb	r3, r3
 80057de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057e2:	d103      	bne.n	80057ec <xQueueGenericSend+0x16c>
 80057e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e6:	2200      	movs	r2, #0
 80057e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80057f2:	b25b      	sxtb	r3, r3
 80057f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057f8:	d103      	bne.n	8005802 <xQueueGenericSend+0x182>
 80057fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057fc:	2200      	movs	r2, #0
 80057fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005802:	f001 fef7 	bl	80075f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005806:	1d3a      	adds	r2, r7, #4
 8005808:	f107 0314 	add.w	r3, r7, #20
 800580c:	4611      	mov	r1, r2
 800580e:	4618      	mov	r0, r3
 8005810:	f001 f81e 	bl	8006850 <xTaskCheckForTimeOut>
 8005814:	4603      	mov	r3, r0
 8005816:	2b00      	cmp	r3, #0
 8005818:	d124      	bne.n	8005864 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800581a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800581c:	f000 faa2 	bl	8005d64 <prvIsQueueFull>
 8005820:	4603      	mov	r3, r0
 8005822:	2b00      	cmp	r3, #0
 8005824:	d018      	beq.n	8005858 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005828:	3310      	adds	r3, #16
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	4611      	mov	r1, r2
 800582e:	4618      	mov	r0, r3
 8005830:	f000 ff1e 	bl	8006670 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005834:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005836:	f000 fa2d 	bl	8005c94 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800583a:	f000 fd53 	bl	80062e4 <xTaskResumeAll>
 800583e:	4603      	mov	r3, r0
 8005840:	2b00      	cmp	r3, #0
 8005842:	f47f af7c 	bne.w	800573e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005846:	4b0c      	ldr	r3, [pc, #48]	; (8005878 <xQueueGenericSend+0x1f8>)
 8005848:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800584c:	601a      	str	r2, [r3, #0]
 800584e:	f3bf 8f4f 	dsb	sy
 8005852:	f3bf 8f6f 	isb	sy
 8005856:	e772      	b.n	800573e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005858:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800585a:	f000 fa1b 	bl	8005c94 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800585e:	f000 fd41 	bl	80062e4 <xTaskResumeAll>
 8005862:	e76c      	b.n	800573e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005864:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005866:	f000 fa15 	bl	8005c94 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800586a:	f000 fd3b 	bl	80062e4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800586e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005870:	4618      	mov	r0, r3
 8005872:	3738      	adds	r7, #56	; 0x38
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}
 8005878:	e000ed04 	.word	0xe000ed04

0800587c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b090      	sub	sp, #64	; 0x40
 8005880:	af00      	add	r7, sp, #0
 8005882:	60f8      	str	r0, [r7, #12]
 8005884:	60b9      	str	r1, [r7, #8]
 8005886:	607a      	str	r2, [r7, #4]
 8005888:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800588e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005890:	2b00      	cmp	r3, #0
 8005892:	d10a      	bne.n	80058aa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005898:	f383 8811 	msr	BASEPRI, r3
 800589c:	f3bf 8f6f 	isb	sy
 80058a0:	f3bf 8f4f 	dsb	sy
 80058a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80058a6:	bf00      	nop
 80058a8:	e7fe      	b.n	80058a8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d103      	bne.n	80058b8 <xQueueGenericSendFromISR+0x3c>
 80058b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d101      	bne.n	80058bc <xQueueGenericSendFromISR+0x40>
 80058b8:	2301      	movs	r3, #1
 80058ba:	e000      	b.n	80058be <xQueueGenericSendFromISR+0x42>
 80058bc:	2300      	movs	r3, #0
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d10a      	bne.n	80058d8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80058c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c6:	f383 8811 	msr	BASEPRI, r3
 80058ca:	f3bf 8f6f 	isb	sy
 80058ce:	f3bf 8f4f 	dsb	sy
 80058d2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80058d4:	bf00      	nop
 80058d6:	e7fe      	b.n	80058d6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	2b02      	cmp	r3, #2
 80058dc:	d103      	bne.n	80058e6 <xQueueGenericSendFromISR+0x6a>
 80058de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058e2:	2b01      	cmp	r3, #1
 80058e4:	d101      	bne.n	80058ea <xQueueGenericSendFromISR+0x6e>
 80058e6:	2301      	movs	r3, #1
 80058e8:	e000      	b.n	80058ec <xQueueGenericSendFromISR+0x70>
 80058ea:	2300      	movs	r3, #0
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d10a      	bne.n	8005906 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80058f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f4:	f383 8811 	msr	BASEPRI, r3
 80058f8:	f3bf 8f6f 	isb	sy
 80058fc:	f3bf 8f4f 	dsb	sy
 8005900:	623b      	str	r3, [r7, #32]
}
 8005902:	bf00      	nop
 8005904:	e7fe      	b.n	8005904 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005906:	f001 ff27 	bl	8007758 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800590a:	f3ef 8211 	mrs	r2, BASEPRI
 800590e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005912:	f383 8811 	msr	BASEPRI, r3
 8005916:	f3bf 8f6f 	isb	sy
 800591a:	f3bf 8f4f 	dsb	sy
 800591e:	61fa      	str	r2, [r7, #28]
 8005920:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005922:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005924:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005928:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800592a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800592c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800592e:	429a      	cmp	r2, r3
 8005930:	d302      	bcc.n	8005938 <xQueueGenericSendFromISR+0xbc>
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	2b02      	cmp	r3, #2
 8005936:	d12f      	bne.n	8005998 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800593a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800593e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005946:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005948:	683a      	ldr	r2, [r7, #0]
 800594a:	68b9      	ldr	r1, [r7, #8]
 800594c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800594e:	f000 f911 	bl	8005b74 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005952:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005956:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800595a:	d112      	bne.n	8005982 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800595c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800595e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005960:	2b00      	cmp	r3, #0
 8005962:	d016      	beq.n	8005992 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005966:	3324      	adds	r3, #36	; 0x24
 8005968:	4618      	mov	r0, r3
 800596a:	f000 fed1 	bl	8006710 <xTaskRemoveFromEventList>
 800596e:	4603      	mov	r3, r0
 8005970:	2b00      	cmp	r3, #0
 8005972:	d00e      	beq.n	8005992 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d00b      	beq.n	8005992 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2201      	movs	r2, #1
 800597e:	601a      	str	r2, [r3, #0]
 8005980:	e007      	b.n	8005992 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005982:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005986:	3301      	adds	r3, #1
 8005988:	b2db      	uxtb	r3, r3
 800598a:	b25a      	sxtb	r2, r3
 800598c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800598e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005992:	2301      	movs	r3, #1
 8005994:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005996:	e001      	b.n	800599c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005998:	2300      	movs	r3, #0
 800599a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800599c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800599e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80059a6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80059a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3740      	adds	r7, #64	; 0x40
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}
	...

080059b4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b08c      	sub	sp, #48	; 0x30
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	60f8      	str	r0, [r7, #12]
 80059bc:	60b9      	str	r1, [r7, #8]
 80059be:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80059c0:	2300      	movs	r3, #0
 80059c2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80059c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d10a      	bne.n	80059e4 <xQueueReceive+0x30>
	__asm volatile
 80059ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d2:	f383 8811 	msr	BASEPRI, r3
 80059d6:	f3bf 8f6f 	isb	sy
 80059da:	f3bf 8f4f 	dsb	sy
 80059de:	623b      	str	r3, [r7, #32]
}
 80059e0:	bf00      	nop
 80059e2:	e7fe      	b.n	80059e2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d103      	bne.n	80059f2 <xQueueReceive+0x3e>
 80059ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d101      	bne.n	80059f6 <xQueueReceive+0x42>
 80059f2:	2301      	movs	r3, #1
 80059f4:	e000      	b.n	80059f8 <xQueueReceive+0x44>
 80059f6:	2300      	movs	r3, #0
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d10a      	bne.n	8005a12 <xQueueReceive+0x5e>
	__asm volatile
 80059fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a00:	f383 8811 	msr	BASEPRI, r3
 8005a04:	f3bf 8f6f 	isb	sy
 8005a08:	f3bf 8f4f 	dsb	sy
 8005a0c:	61fb      	str	r3, [r7, #28]
}
 8005a0e:	bf00      	nop
 8005a10:	e7fe      	b.n	8005a10 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a12:	f001 f861 	bl	8006ad8 <xTaskGetSchedulerState>
 8005a16:	4603      	mov	r3, r0
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d102      	bne.n	8005a22 <xQueueReceive+0x6e>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d101      	bne.n	8005a26 <xQueueReceive+0x72>
 8005a22:	2301      	movs	r3, #1
 8005a24:	e000      	b.n	8005a28 <xQueueReceive+0x74>
 8005a26:	2300      	movs	r3, #0
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d10a      	bne.n	8005a42 <xQueueReceive+0x8e>
	__asm volatile
 8005a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a30:	f383 8811 	msr	BASEPRI, r3
 8005a34:	f3bf 8f6f 	isb	sy
 8005a38:	f3bf 8f4f 	dsb	sy
 8005a3c:	61bb      	str	r3, [r7, #24]
}
 8005a3e:	bf00      	nop
 8005a40:	e7fe      	b.n	8005a40 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005a42:	f001 fda7 	bl	8007594 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a4a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d01f      	beq.n	8005a92 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005a52:	68b9      	ldr	r1, [r7, #8]
 8005a54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a56:	f000 f8f7 	bl	8005c48 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a5c:	1e5a      	subs	r2, r3, #1
 8005a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a60:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a64:	691b      	ldr	r3, [r3, #16]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d00f      	beq.n	8005a8a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a6c:	3310      	adds	r3, #16
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f000 fe4e 	bl	8006710 <xTaskRemoveFromEventList>
 8005a74:	4603      	mov	r3, r0
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d007      	beq.n	8005a8a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005a7a:	4b3d      	ldr	r3, [pc, #244]	; (8005b70 <xQueueReceive+0x1bc>)
 8005a7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a80:	601a      	str	r2, [r3, #0]
 8005a82:	f3bf 8f4f 	dsb	sy
 8005a86:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005a8a:	f001 fdb3 	bl	80075f4 <vPortExitCritical>
				return pdPASS;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e069      	b.n	8005b66 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d103      	bne.n	8005aa0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005a98:	f001 fdac 	bl	80075f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	e062      	b.n	8005b66 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d106      	bne.n	8005ab4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005aa6:	f107 0310 	add.w	r3, r7, #16
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f000 feba 	bl	8006824 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005ab4:	f001 fd9e 	bl	80075f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005ab8:	f000 fc06 	bl	80062c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005abc:	f001 fd6a 	bl	8007594 <vPortEnterCritical>
 8005ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ac6:	b25b      	sxtb	r3, r3
 8005ac8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005acc:	d103      	bne.n	8005ad6 <xQueueReceive+0x122>
 8005ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ad8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005adc:	b25b      	sxtb	r3, r3
 8005ade:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ae2:	d103      	bne.n	8005aec <xQueueReceive+0x138>
 8005ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005aec:	f001 fd82 	bl	80075f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005af0:	1d3a      	adds	r2, r7, #4
 8005af2:	f107 0310 	add.w	r3, r7, #16
 8005af6:	4611      	mov	r1, r2
 8005af8:	4618      	mov	r0, r3
 8005afa:	f000 fea9 	bl	8006850 <xTaskCheckForTimeOut>
 8005afe:	4603      	mov	r3, r0
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d123      	bne.n	8005b4c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b06:	f000 f917 	bl	8005d38 <prvIsQueueEmpty>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d017      	beq.n	8005b40 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b12:	3324      	adds	r3, #36	; 0x24
 8005b14:	687a      	ldr	r2, [r7, #4]
 8005b16:	4611      	mov	r1, r2
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f000 fda9 	bl	8006670 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005b1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b20:	f000 f8b8 	bl	8005c94 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005b24:	f000 fbde 	bl	80062e4 <xTaskResumeAll>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d189      	bne.n	8005a42 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005b2e:	4b10      	ldr	r3, [pc, #64]	; (8005b70 <xQueueReceive+0x1bc>)
 8005b30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b34:	601a      	str	r2, [r3, #0]
 8005b36:	f3bf 8f4f 	dsb	sy
 8005b3a:	f3bf 8f6f 	isb	sy
 8005b3e:	e780      	b.n	8005a42 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005b40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b42:	f000 f8a7 	bl	8005c94 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005b46:	f000 fbcd 	bl	80062e4 <xTaskResumeAll>
 8005b4a:	e77a      	b.n	8005a42 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005b4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b4e:	f000 f8a1 	bl	8005c94 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005b52:	f000 fbc7 	bl	80062e4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b58:	f000 f8ee 	bl	8005d38 <prvIsQueueEmpty>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	f43f af6f 	beq.w	8005a42 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005b64:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3730      	adds	r7, #48	; 0x30
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}
 8005b6e:	bf00      	nop
 8005b70:	e000ed04 	.word	0xe000ed04

08005b74 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b086      	sub	sp, #24
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	60f8      	str	r0, [r7, #12]
 8005b7c:	60b9      	str	r1, [r7, #8]
 8005b7e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005b80:	2300      	movs	r3, #0
 8005b82:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b88:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d10d      	bne.n	8005bae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d14d      	bne.n	8005c36 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f000 ffb8 	bl	8006b14 <xTaskPriorityDisinherit>
 8005ba4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	609a      	str	r2, [r3, #8]
 8005bac:	e043      	b.n	8005c36 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d119      	bne.n	8005be8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	6858      	ldr	r0, [r3, #4]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bbc:	461a      	mov	r2, r3
 8005bbe:	68b9      	ldr	r1, [r7, #8]
 8005bc0:	f00a fdc2 	bl	8010748 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	685a      	ldr	r2, [r3, #4]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bcc:	441a      	add	r2, r3
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	685a      	ldr	r2, [r3, #4]
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d32b      	bcc.n	8005c36 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681a      	ldr	r2, [r3, #0]
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	605a      	str	r2, [r3, #4]
 8005be6:	e026      	b.n	8005c36 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	68d8      	ldr	r0, [r3, #12]
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	68b9      	ldr	r1, [r7, #8]
 8005bf4:	f00a fda8 	bl	8010748 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	68da      	ldr	r2, [r3, #12]
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c00:	425b      	negs	r3, r3
 8005c02:	441a      	add	r2, r3
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	68da      	ldr	r2, [r3, #12]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d207      	bcs.n	8005c24 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	689a      	ldr	r2, [r3, #8]
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c1c:	425b      	negs	r3, r3
 8005c1e:	441a      	add	r2, r3
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2b02      	cmp	r3, #2
 8005c28:	d105      	bne.n	8005c36 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d002      	beq.n	8005c36 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	3b01      	subs	r3, #1
 8005c34:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	1c5a      	adds	r2, r3, #1
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005c3e:	697b      	ldr	r3, [r7, #20]
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3718      	adds	r7, #24
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}

08005c48 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b082      	sub	sp, #8
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d018      	beq.n	8005c8c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	68da      	ldr	r2, [r3, #12]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c62:	441a      	add	r2, r3
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	68da      	ldr	r2, [r3, #12]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d303      	bcc.n	8005c7c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	68d9      	ldr	r1, [r3, #12]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c84:	461a      	mov	r2, r3
 8005c86:	6838      	ldr	r0, [r7, #0]
 8005c88:	f00a fd5e 	bl	8010748 <memcpy>
	}
}
 8005c8c:	bf00      	nop
 8005c8e:	3708      	adds	r7, #8
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}

08005c94 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b084      	sub	sp, #16
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005c9c:	f001 fc7a 	bl	8007594 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ca6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005ca8:	e011      	b.n	8005cce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d012      	beq.n	8005cd8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	3324      	adds	r3, #36	; 0x24
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f000 fd2a 	bl	8006710 <xTaskRemoveFromEventList>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d001      	beq.n	8005cc6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005cc2:	f000 fe27 	bl	8006914 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005cc6:	7bfb      	ldrb	r3, [r7, #15]
 8005cc8:	3b01      	subs	r3, #1
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005cce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	dce9      	bgt.n	8005caa <prvUnlockQueue+0x16>
 8005cd6:	e000      	b.n	8005cda <prvUnlockQueue+0x46>
					break;
 8005cd8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	22ff      	movs	r2, #255	; 0xff
 8005cde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005ce2:	f001 fc87 	bl	80075f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005ce6:	f001 fc55 	bl	8007594 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005cf0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005cf2:	e011      	b.n	8005d18 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	691b      	ldr	r3, [r3, #16]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d012      	beq.n	8005d22 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	3310      	adds	r3, #16
 8005d00:	4618      	mov	r0, r3
 8005d02:	f000 fd05 	bl	8006710 <xTaskRemoveFromEventList>
 8005d06:	4603      	mov	r3, r0
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d001      	beq.n	8005d10 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005d0c:	f000 fe02 	bl	8006914 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005d10:	7bbb      	ldrb	r3, [r7, #14]
 8005d12:	3b01      	subs	r3, #1
 8005d14:	b2db      	uxtb	r3, r3
 8005d16:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d18:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	dce9      	bgt.n	8005cf4 <prvUnlockQueue+0x60>
 8005d20:	e000      	b.n	8005d24 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005d22:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	22ff      	movs	r2, #255	; 0xff
 8005d28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005d2c:	f001 fc62 	bl	80075f4 <vPortExitCritical>
}
 8005d30:	bf00      	nop
 8005d32:	3710      	adds	r7, #16
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}

08005d38 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b084      	sub	sp, #16
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005d40:	f001 fc28 	bl	8007594 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d102      	bne.n	8005d52 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	60fb      	str	r3, [r7, #12]
 8005d50:	e001      	b.n	8005d56 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005d52:	2300      	movs	r3, #0
 8005d54:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005d56:	f001 fc4d 	bl	80075f4 <vPortExitCritical>

	return xReturn;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3710      	adds	r7, #16
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}

08005d64 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b084      	sub	sp, #16
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005d6c:	f001 fc12 	bl	8007594 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d102      	bne.n	8005d82 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	60fb      	str	r3, [r7, #12]
 8005d80:	e001      	b.n	8005d86 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005d82:	2300      	movs	r3, #0
 8005d84:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005d86:	f001 fc35 	bl	80075f4 <vPortExitCritical>

	return xReturn;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3710      	adds	r7, #16
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}

08005d94 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005d94:	b480      	push	{r7}
 8005d96:	b085      	sub	sp, #20
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005d9e:	2300      	movs	r3, #0
 8005da0:	60fb      	str	r3, [r7, #12]
 8005da2:	e014      	b.n	8005dce <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005da4:	4a0f      	ldr	r2, [pc, #60]	; (8005de4 <vQueueAddToRegistry+0x50>)
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d10b      	bne.n	8005dc8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005db0:	490c      	ldr	r1, [pc, #48]	; (8005de4 <vQueueAddToRegistry+0x50>)
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	683a      	ldr	r2, [r7, #0]
 8005db6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005dba:	4a0a      	ldr	r2, [pc, #40]	; (8005de4 <vQueueAddToRegistry+0x50>)
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	00db      	lsls	r3, r3, #3
 8005dc0:	4413      	add	r3, r2
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005dc6:	e006      	b.n	8005dd6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	3301      	adds	r3, #1
 8005dcc:	60fb      	str	r3, [r7, #12]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2b07      	cmp	r3, #7
 8005dd2:	d9e7      	bls.n	8005da4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005dd4:	bf00      	nop
 8005dd6:	bf00      	nop
 8005dd8:	3714      	adds	r7, #20
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de0:	4770      	bx	lr
 8005de2:	bf00      	nop
 8005de4:	20007cb4 	.word	0x20007cb4

08005de8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b086      	sub	sp, #24
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	60f8      	str	r0, [r7, #12]
 8005df0:	60b9      	str	r1, [r7, #8]
 8005df2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005df8:	f001 fbcc 	bl	8007594 <vPortEnterCritical>
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e02:	b25b      	sxtb	r3, r3
 8005e04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e08:	d103      	bne.n	8005e12 <vQueueWaitForMessageRestricted+0x2a>
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e18:	b25b      	sxtb	r3, r3
 8005e1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e1e:	d103      	bne.n	8005e28 <vQueueWaitForMessageRestricted+0x40>
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	2200      	movs	r2, #0
 8005e24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e28:	f001 fbe4 	bl	80075f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d106      	bne.n	8005e42 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	3324      	adds	r3, #36	; 0x24
 8005e38:	687a      	ldr	r2, [r7, #4]
 8005e3a:	68b9      	ldr	r1, [r7, #8]
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f000 fc3b 	bl	80066b8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005e42:	6978      	ldr	r0, [r7, #20]
 8005e44:	f7ff ff26 	bl	8005c94 <prvUnlockQueue>
	}
 8005e48:	bf00      	nop
 8005e4a:	3718      	adds	r7, #24
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}

08005e50 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b08e      	sub	sp, #56	; 0x38
 8005e54:	af04      	add	r7, sp, #16
 8005e56:	60f8      	str	r0, [r7, #12]
 8005e58:	60b9      	str	r1, [r7, #8]
 8005e5a:	607a      	str	r2, [r7, #4]
 8005e5c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d10a      	bne.n	8005e7a <xTaskCreateStatic+0x2a>
	__asm volatile
 8005e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e68:	f383 8811 	msr	BASEPRI, r3
 8005e6c:	f3bf 8f6f 	isb	sy
 8005e70:	f3bf 8f4f 	dsb	sy
 8005e74:	623b      	str	r3, [r7, #32]
}
 8005e76:	bf00      	nop
 8005e78:	e7fe      	b.n	8005e78 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d10a      	bne.n	8005e96 <xTaskCreateStatic+0x46>
	__asm volatile
 8005e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e84:	f383 8811 	msr	BASEPRI, r3
 8005e88:	f3bf 8f6f 	isb	sy
 8005e8c:	f3bf 8f4f 	dsb	sy
 8005e90:	61fb      	str	r3, [r7, #28]
}
 8005e92:	bf00      	nop
 8005e94:	e7fe      	b.n	8005e94 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005e96:	235c      	movs	r3, #92	; 0x5c
 8005e98:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	2b5c      	cmp	r3, #92	; 0x5c
 8005e9e:	d00a      	beq.n	8005eb6 <xTaskCreateStatic+0x66>
	__asm volatile
 8005ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea4:	f383 8811 	msr	BASEPRI, r3
 8005ea8:	f3bf 8f6f 	isb	sy
 8005eac:	f3bf 8f4f 	dsb	sy
 8005eb0:	61bb      	str	r3, [r7, #24]
}
 8005eb2:	bf00      	nop
 8005eb4:	e7fe      	b.n	8005eb4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005eb6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d01e      	beq.n	8005efc <xTaskCreateStatic+0xac>
 8005ebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d01b      	beq.n	8005efc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ecc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed0:	2202      	movs	r2, #2
 8005ed2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	9303      	str	r3, [sp, #12]
 8005eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005edc:	9302      	str	r3, [sp, #8]
 8005ede:	f107 0314 	add.w	r3, r7, #20
 8005ee2:	9301      	str	r3, [sp, #4]
 8005ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee6:	9300      	str	r3, [sp, #0]
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	687a      	ldr	r2, [r7, #4]
 8005eec:	68b9      	ldr	r1, [r7, #8]
 8005eee:	68f8      	ldr	r0, [r7, #12]
 8005ef0:	f000 f850 	bl	8005f94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005ef4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005ef6:	f000 f8dd 	bl	80060b4 <prvAddNewTaskToReadyList>
 8005efa:	e001      	b.n	8005f00 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005efc:	2300      	movs	r3, #0
 8005efe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005f00:	697b      	ldr	r3, [r7, #20]
	}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3728      	adds	r7, #40	; 0x28
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}

08005f0a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005f0a:	b580      	push	{r7, lr}
 8005f0c:	b08c      	sub	sp, #48	; 0x30
 8005f0e:	af04      	add	r7, sp, #16
 8005f10:	60f8      	str	r0, [r7, #12]
 8005f12:	60b9      	str	r1, [r7, #8]
 8005f14:	603b      	str	r3, [r7, #0]
 8005f16:	4613      	mov	r3, r2
 8005f18:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005f1a:	88fb      	ldrh	r3, [r7, #6]
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f001 fc5a 	bl	80077d8 <pvPortMalloc>
 8005f24:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d00e      	beq.n	8005f4a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005f2c:	205c      	movs	r0, #92	; 0x5c
 8005f2e:	f001 fc53 	bl	80077d8 <pvPortMalloc>
 8005f32:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005f34:	69fb      	ldr	r3, [r7, #28]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d003      	beq.n	8005f42 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005f3a:	69fb      	ldr	r3, [r7, #28]
 8005f3c:	697a      	ldr	r2, [r7, #20]
 8005f3e:	631a      	str	r2, [r3, #48]	; 0x30
 8005f40:	e005      	b.n	8005f4e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005f42:	6978      	ldr	r0, [r7, #20]
 8005f44:	f001 fd14 	bl	8007970 <vPortFree>
 8005f48:	e001      	b.n	8005f4e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005f4e:	69fb      	ldr	r3, [r7, #28]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d017      	beq.n	8005f84 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005f54:	69fb      	ldr	r3, [r7, #28]
 8005f56:	2200      	movs	r2, #0
 8005f58:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005f5c:	88fa      	ldrh	r2, [r7, #6]
 8005f5e:	2300      	movs	r3, #0
 8005f60:	9303      	str	r3, [sp, #12]
 8005f62:	69fb      	ldr	r3, [r7, #28]
 8005f64:	9302      	str	r3, [sp, #8]
 8005f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f68:	9301      	str	r3, [sp, #4]
 8005f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f6c:	9300      	str	r3, [sp, #0]
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	68b9      	ldr	r1, [r7, #8]
 8005f72:	68f8      	ldr	r0, [r7, #12]
 8005f74:	f000 f80e 	bl	8005f94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f78:	69f8      	ldr	r0, [r7, #28]
 8005f7a:	f000 f89b 	bl	80060b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	61bb      	str	r3, [r7, #24]
 8005f82:	e002      	b.n	8005f8a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005f84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f88:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005f8a:	69bb      	ldr	r3, [r7, #24]
	}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3720      	adds	r7, #32
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}

08005f94 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b088      	sub	sp, #32
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	60f8      	str	r0, [r7, #12]
 8005f9c:	60b9      	str	r1, [r7, #8]
 8005f9e:	607a      	str	r2, [r7, #4]
 8005fa0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	009b      	lsls	r3, r3, #2
 8005faa:	461a      	mov	r2, r3
 8005fac:	21a5      	movs	r1, #165	; 0xa5
 8005fae:	f00a fbd9 	bl	8010764 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005fbc:	3b01      	subs	r3, #1
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	4413      	add	r3, r2
 8005fc2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005fc4:	69bb      	ldr	r3, [r7, #24]
 8005fc6:	f023 0307 	bic.w	r3, r3, #7
 8005fca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005fcc:	69bb      	ldr	r3, [r7, #24]
 8005fce:	f003 0307 	and.w	r3, r3, #7
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d00a      	beq.n	8005fec <prvInitialiseNewTask+0x58>
	__asm volatile
 8005fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fda:	f383 8811 	msr	BASEPRI, r3
 8005fde:	f3bf 8f6f 	isb	sy
 8005fe2:	f3bf 8f4f 	dsb	sy
 8005fe6:	617b      	str	r3, [r7, #20]
}
 8005fe8:	bf00      	nop
 8005fea:	e7fe      	b.n	8005fea <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d01f      	beq.n	8006032 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	61fb      	str	r3, [r7, #28]
 8005ff6:	e012      	b.n	800601e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005ff8:	68ba      	ldr	r2, [r7, #8]
 8005ffa:	69fb      	ldr	r3, [r7, #28]
 8005ffc:	4413      	add	r3, r2
 8005ffe:	7819      	ldrb	r1, [r3, #0]
 8006000:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006002:	69fb      	ldr	r3, [r7, #28]
 8006004:	4413      	add	r3, r2
 8006006:	3334      	adds	r3, #52	; 0x34
 8006008:	460a      	mov	r2, r1
 800600a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800600c:	68ba      	ldr	r2, [r7, #8]
 800600e:	69fb      	ldr	r3, [r7, #28]
 8006010:	4413      	add	r3, r2
 8006012:	781b      	ldrb	r3, [r3, #0]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d006      	beq.n	8006026 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006018:	69fb      	ldr	r3, [r7, #28]
 800601a:	3301      	adds	r3, #1
 800601c:	61fb      	str	r3, [r7, #28]
 800601e:	69fb      	ldr	r3, [r7, #28]
 8006020:	2b0f      	cmp	r3, #15
 8006022:	d9e9      	bls.n	8005ff8 <prvInitialiseNewTask+0x64>
 8006024:	e000      	b.n	8006028 <prvInitialiseNewTask+0x94>
			{
				break;
 8006026:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800602a:	2200      	movs	r2, #0
 800602c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006030:	e003      	b.n	800603a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006034:	2200      	movs	r2, #0
 8006036:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800603a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800603c:	2b37      	cmp	r3, #55	; 0x37
 800603e:	d901      	bls.n	8006044 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006040:	2337      	movs	r3, #55	; 0x37
 8006042:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006046:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006048:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800604a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800604c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800604e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006052:	2200      	movs	r2, #0
 8006054:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006058:	3304      	adds	r3, #4
 800605a:	4618      	mov	r0, r3
 800605c:	f7ff f978 	bl	8005350 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006062:	3318      	adds	r3, #24
 8006064:	4618      	mov	r0, r3
 8006066:	f7ff f973 	bl	8005350 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800606a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800606c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800606e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006072:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006078:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800607a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800607c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800607e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006082:	2200      	movs	r2, #0
 8006084:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006088:	2200      	movs	r2, #0
 800608a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800608e:	683a      	ldr	r2, [r7, #0]
 8006090:	68f9      	ldr	r1, [r7, #12]
 8006092:	69b8      	ldr	r0, [r7, #24]
 8006094:	f001 f94e 	bl	8007334 <pxPortInitialiseStack>
 8006098:	4602      	mov	r2, r0
 800609a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800609c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800609e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d002      	beq.n	80060aa <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80060a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80060aa:	bf00      	nop
 80060ac:	3720      	adds	r7, #32
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}
	...

080060b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b082      	sub	sp, #8
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80060bc:	f001 fa6a 	bl	8007594 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80060c0:	4b2d      	ldr	r3, [pc, #180]	; (8006178 <prvAddNewTaskToReadyList+0xc4>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	3301      	adds	r3, #1
 80060c6:	4a2c      	ldr	r2, [pc, #176]	; (8006178 <prvAddNewTaskToReadyList+0xc4>)
 80060c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80060ca:	4b2c      	ldr	r3, [pc, #176]	; (800617c <prvAddNewTaskToReadyList+0xc8>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d109      	bne.n	80060e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80060d2:	4a2a      	ldr	r2, [pc, #168]	; (800617c <prvAddNewTaskToReadyList+0xc8>)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80060d8:	4b27      	ldr	r3, [pc, #156]	; (8006178 <prvAddNewTaskToReadyList+0xc4>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	2b01      	cmp	r3, #1
 80060de:	d110      	bne.n	8006102 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80060e0:	f000 fc3c 	bl	800695c <prvInitialiseTaskLists>
 80060e4:	e00d      	b.n	8006102 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80060e6:	4b26      	ldr	r3, [pc, #152]	; (8006180 <prvAddNewTaskToReadyList+0xcc>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d109      	bne.n	8006102 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80060ee:	4b23      	ldr	r3, [pc, #140]	; (800617c <prvAddNewTaskToReadyList+0xc8>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d802      	bhi.n	8006102 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80060fc:	4a1f      	ldr	r2, [pc, #124]	; (800617c <prvAddNewTaskToReadyList+0xc8>)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006102:	4b20      	ldr	r3, [pc, #128]	; (8006184 <prvAddNewTaskToReadyList+0xd0>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	3301      	adds	r3, #1
 8006108:	4a1e      	ldr	r2, [pc, #120]	; (8006184 <prvAddNewTaskToReadyList+0xd0>)
 800610a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800610c:	4b1d      	ldr	r3, [pc, #116]	; (8006184 <prvAddNewTaskToReadyList+0xd0>)
 800610e:	681a      	ldr	r2, [r3, #0]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006118:	4b1b      	ldr	r3, [pc, #108]	; (8006188 <prvAddNewTaskToReadyList+0xd4>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	429a      	cmp	r2, r3
 800611e:	d903      	bls.n	8006128 <prvAddNewTaskToReadyList+0x74>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006124:	4a18      	ldr	r2, [pc, #96]	; (8006188 <prvAddNewTaskToReadyList+0xd4>)
 8006126:	6013      	str	r3, [r2, #0]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800612c:	4613      	mov	r3, r2
 800612e:	009b      	lsls	r3, r3, #2
 8006130:	4413      	add	r3, r2
 8006132:	009b      	lsls	r3, r3, #2
 8006134:	4a15      	ldr	r2, [pc, #84]	; (800618c <prvAddNewTaskToReadyList+0xd8>)
 8006136:	441a      	add	r2, r3
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	3304      	adds	r3, #4
 800613c:	4619      	mov	r1, r3
 800613e:	4610      	mov	r0, r2
 8006140:	f7ff f913 	bl	800536a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006144:	f001 fa56 	bl	80075f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006148:	4b0d      	ldr	r3, [pc, #52]	; (8006180 <prvAddNewTaskToReadyList+0xcc>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d00e      	beq.n	800616e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006150:	4b0a      	ldr	r3, [pc, #40]	; (800617c <prvAddNewTaskToReadyList+0xc8>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800615a:	429a      	cmp	r2, r3
 800615c:	d207      	bcs.n	800616e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800615e:	4b0c      	ldr	r3, [pc, #48]	; (8006190 <prvAddNewTaskToReadyList+0xdc>)
 8006160:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006164:	601a      	str	r2, [r3, #0]
 8006166:	f3bf 8f4f 	dsb	sy
 800616a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800616e:	bf00      	nop
 8006170:	3708      	adds	r7, #8
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}
 8006176:	bf00      	nop
 8006178:	200081c8 	.word	0x200081c8
 800617c:	20007cf4 	.word	0x20007cf4
 8006180:	200081d4 	.word	0x200081d4
 8006184:	200081e4 	.word	0x200081e4
 8006188:	200081d0 	.word	0x200081d0
 800618c:	20007cf8 	.word	0x20007cf8
 8006190:	e000ed04 	.word	0xe000ed04

08006194 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006194:	b580      	push	{r7, lr}
 8006196:	b084      	sub	sp, #16
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800619c:	2300      	movs	r3, #0
 800619e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d017      	beq.n	80061d6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80061a6:	4b13      	ldr	r3, [pc, #76]	; (80061f4 <vTaskDelay+0x60>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d00a      	beq.n	80061c4 <vTaskDelay+0x30>
	__asm volatile
 80061ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b2:	f383 8811 	msr	BASEPRI, r3
 80061b6:	f3bf 8f6f 	isb	sy
 80061ba:	f3bf 8f4f 	dsb	sy
 80061be:	60bb      	str	r3, [r7, #8]
}
 80061c0:	bf00      	nop
 80061c2:	e7fe      	b.n	80061c2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80061c4:	f000 f880 	bl	80062c8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80061c8:	2100      	movs	r1, #0
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f000 fd10 	bl	8006bf0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80061d0:	f000 f888 	bl	80062e4 <xTaskResumeAll>
 80061d4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d107      	bne.n	80061ec <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80061dc:	4b06      	ldr	r3, [pc, #24]	; (80061f8 <vTaskDelay+0x64>)
 80061de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061e2:	601a      	str	r2, [r3, #0]
 80061e4:	f3bf 8f4f 	dsb	sy
 80061e8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80061ec:	bf00      	nop
 80061ee:	3710      	adds	r7, #16
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}
 80061f4:	200081f0 	.word	0x200081f0
 80061f8:	e000ed04 	.word	0xe000ed04

080061fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b08a      	sub	sp, #40	; 0x28
 8006200:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006202:	2300      	movs	r3, #0
 8006204:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006206:	2300      	movs	r3, #0
 8006208:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800620a:	463a      	mov	r2, r7
 800620c:	1d39      	adds	r1, r7, #4
 800620e:	f107 0308 	add.w	r3, r7, #8
 8006212:	4618      	mov	r0, r3
 8006214:	f7ff f848 	bl	80052a8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006218:	6839      	ldr	r1, [r7, #0]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	68ba      	ldr	r2, [r7, #8]
 800621e:	9202      	str	r2, [sp, #8]
 8006220:	9301      	str	r3, [sp, #4]
 8006222:	2300      	movs	r3, #0
 8006224:	9300      	str	r3, [sp, #0]
 8006226:	2300      	movs	r3, #0
 8006228:	460a      	mov	r2, r1
 800622a:	4921      	ldr	r1, [pc, #132]	; (80062b0 <vTaskStartScheduler+0xb4>)
 800622c:	4821      	ldr	r0, [pc, #132]	; (80062b4 <vTaskStartScheduler+0xb8>)
 800622e:	f7ff fe0f 	bl	8005e50 <xTaskCreateStatic>
 8006232:	4603      	mov	r3, r0
 8006234:	4a20      	ldr	r2, [pc, #128]	; (80062b8 <vTaskStartScheduler+0xbc>)
 8006236:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006238:	4b1f      	ldr	r3, [pc, #124]	; (80062b8 <vTaskStartScheduler+0xbc>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d002      	beq.n	8006246 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006240:	2301      	movs	r3, #1
 8006242:	617b      	str	r3, [r7, #20]
 8006244:	e001      	b.n	800624a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006246:	2300      	movs	r3, #0
 8006248:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	2b01      	cmp	r3, #1
 800624e:	d102      	bne.n	8006256 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006250:	f000 fd22 	bl	8006c98 <xTimerCreateTimerTask>
 8006254:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	2b01      	cmp	r3, #1
 800625a:	d116      	bne.n	800628a <vTaskStartScheduler+0x8e>
	__asm volatile
 800625c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006260:	f383 8811 	msr	BASEPRI, r3
 8006264:	f3bf 8f6f 	isb	sy
 8006268:	f3bf 8f4f 	dsb	sy
 800626c:	613b      	str	r3, [r7, #16]
}
 800626e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006270:	4b12      	ldr	r3, [pc, #72]	; (80062bc <vTaskStartScheduler+0xc0>)
 8006272:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006276:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006278:	4b11      	ldr	r3, [pc, #68]	; (80062c0 <vTaskStartScheduler+0xc4>)
 800627a:	2201      	movs	r2, #1
 800627c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800627e:	4b11      	ldr	r3, [pc, #68]	; (80062c4 <vTaskStartScheduler+0xc8>)
 8006280:	2200      	movs	r2, #0
 8006282:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006284:	f001 f8e4 	bl	8007450 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006288:	e00e      	b.n	80062a8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006290:	d10a      	bne.n	80062a8 <vTaskStartScheduler+0xac>
	__asm volatile
 8006292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006296:	f383 8811 	msr	BASEPRI, r3
 800629a:	f3bf 8f6f 	isb	sy
 800629e:	f3bf 8f4f 	dsb	sy
 80062a2:	60fb      	str	r3, [r7, #12]
}
 80062a4:	bf00      	nop
 80062a6:	e7fe      	b.n	80062a6 <vTaskStartScheduler+0xaa>
}
 80062a8:	bf00      	nop
 80062aa:	3718      	adds	r7, #24
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}
 80062b0:	08011eec 	.word	0x08011eec
 80062b4:	0800692d 	.word	0x0800692d
 80062b8:	200081ec 	.word	0x200081ec
 80062bc:	200081e8 	.word	0x200081e8
 80062c0:	200081d4 	.word	0x200081d4
 80062c4:	200081cc 	.word	0x200081cc

080062c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80062c8:	b480      	push	{r7}
 80062ca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80062cc:	4b04      	ldr	r3, [pc, #16]	; (80062e0 <vTaskSuspendAll+0x18>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	3301      	adds	r3, #1
 80062d2:	4a03      	ldr	r2, [pc, #12]	; (80062e0 <vTaskSuspendAll+0x18>)
 80062d4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80062d6:	bf00      	nop
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr
 80062e0:	200081f0 	.word	0x200081f0

080062e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b084      	sub	sp, #16
 80062e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80062ea:	2300      	movs	r3, #0
 80062ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80062ee:	2300      	movs	r3, #0
 80062f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80062f2:	4b42      	ldr	r3, [pc, #264]	; (80063fc <xTaskResumeAll+0x118>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d10a      	bne.n	8006310 <xTaskResumeAll+0x2c>
	__asm volatile
 80062fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062fe:	f383 8811 	msr	BASEPRI, r3
 8006302:	f3bf 8f6f 	isb	sy
 8006306:	f3bf 8f4f 	dsb	sy
 800630a:	603b      	str	r3, [r7, #0]
}
 800630c:	bf00      	nop
 800630e:	e7fe      	b.n	800630e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006310:	f001 f940 	bl	8007594 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006314:	4b39      	ldr	r3, [pc, #228]	; (80063fc <xTaskResumeAll+0x118>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	3b01      	subs	r3, #1
 800631a:	4a38      	ldr	r2, [pc, #224]	; (80063fc <xTaskResumeAll+0x118>)
 800631c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800631e:	4b37      	ldr	r3, [pc, #220]	; (80063fc <xTaskResumeAll+0x118>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d162      	bne.n	80063ec <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006326:	4b36      	ldr	r3, [pc, #216]	; (8006400 <xTaskResumeAll+0x11c>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d05e      	beq.n	80063ec <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800632e:	e02f      	b.n	8006390 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006330:	4b34      	ldr	r3, [pc, #208]	; (8006404 <xTaskResumeAll+0x120>)
 8006332:	68db      	ldr	r3, [r3, #12]
 8006334:	68db      	ldr	r3, [r3, #12]
 8006336:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	3318      	adds	r3, #24
 800633c:	4618      	mov	r0, r3
 800633e:	f7ff f871 	bl	8005424 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	3304      	adds	r3, #4
 8006346:	4618      	mov	r0, r3
 8006348:	f7ff f86c 	bl	8005424 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006350:	4b2d      	ldr	r3, [pc, #180]	; (8006408 <xTaskResumeAll+0x124>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	429a      	cmp	r2, r3
 8006356:	d903      	bls.n	8006360 <xTaskResumeAll+0x7c>
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800635c:	4a2a      	ldr	r2, [pc, #168]	; (8006408 <xTaskResumeAll+0x124>)
 800635e:	6013      	str	r3, [r2, #0]
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006364:	4613      	mov	r3, r2
 8006366:	009b      	lsls	r3, r3, #2
 8006368:	4413      	add	r3, r2
 800636a:	009b      	lsls	r3, r3, #2
 800636c:	4a27      	ldr	r2, [pc, #156]	; (800640c <xTaskResumeAll+0x128>)
 800636e:	441a      	add	r2, r3
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	3304      	adds	r3, #4
 8006374:	4619      	mov	r1, r3
 8006376:	4610      	mov	r0, r2
 8006378:	f7fe fff7 	bl	800536a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006380:	4b23      	ldr	r3, [pc, #140]	; (8006410 <xTaskResumeAll+0x12c>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006386:	429a      	cmp	r2, r3
 8006388:	d302      	bcc.n	8006390 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800638a:	4b22      	ldr	r3, [pc, #136]	; (8006414 <xTaskResumeAll+0x130>)
 800638c:	2201      	movs	r2, #1
 800638e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006390:	4b1c      	ldr	r3, [pc, #112]	; (8006404 <xTaskResumeAll+0x120>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d1cb      	bne.n	8006330 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d001      	beq.n	80063a2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800639e:	f000 fb7b 	bl	8006a98 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80063a2:	4b1d      	ldr	r3, [pc, #116]	; (8006418 <xTaskResumeAll+0x134>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d010      	beq.n	80063d0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80063ae:	f000 f847 	bl	8006440 <xTaskIncrementTick>
 80063b2:	4603      	mov	r3, r0
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d002      	beq.n	80063be <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80063b8:	4b16      	ldr	r3, [pc, #88]	; (8006414 <xTaskResumeAll+0x130>)
 80063ba:	2201      	movs	r2, #1
 80063bc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	3b01      	subs	r3, #1
 80063c2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d1f1      	bne.n	80063ae <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80063ca:	4b13      	ldr	r3, [pc, #76]	; (8006418 <xTaskResumeAll+0x134>)
 80063cc:	2200      	movs	r2, #0
 80063ce:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80063d0:	4b10      	ldr	r3, [pc, #64]	; (8006414 <xTaskResumeAll+0x130>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d009      	beq.n	80063ec <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80063d8:	2301      	movs	r3, #1
 80063da:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80063dc:	4b0f      	ldr	r3, [pc, #60]	; (800641c <xTaskResumeAll+0x138>)
 80063de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063e2:	601a      	str	r2, [r3, #0]
 80063e4:	f3bf 8f4f 	dsb	sy
 80063e8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80063ec:	f001 f902 	bl	80075f4 <vPortExitCritical>

	return xAlreadyYielded;
 80063f0:	68bb      	ldr	r3, [r7, #8]
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3710      	adds	r7, #16
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
 80063fa:	bf00      	nop
 80063fc:	200081f0 	.word	0x200081f0
 8006400:	200081c8 	.word	0x200081c8
 8006404:	20008188 	.word	0x20008188
 8006408:	200081d0 	.word	0x200081d0
 800640c:	20007cf8 	.word	0x20007cf8
 8006410:	20007cf4 	.word	0x20007cf4
 8006414:	200081dc 	.word	0x200081dc
 8006418:	200081d8 	.word	0x200081d8
 800641c:	e000ed04 	.word	0xe000ed04

08006420 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006420:	b480      	push	{r7}
 8006422:	b083      	sub	sp, #12
 8006424:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006426:	4b05      	ldr	r3, [pc, #20]	; (800643c <xTaskGetTickCount+0x1c>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800642c:	687b      	ldr	r3, [r7, #4]
}
 800642e:	4618      	mov	r0, r3
 8006430:	370c      	adds	r7, #12
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr
 800643a:	bf00      	nop
 800643c:	200081cc 	.word	0x200081cc

08006440 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b086      	sub	sp, #24
 8006444:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006446:	2300      	movs	r3, #0
 8006448:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800644a:	4b4f      	ldr	r3, [pc, #316]	; (8006588 <xTaskIncrementTick+0x148>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	2b00      	cmp	r3, #0
 8006450:	f040 808f 	bne.w	8006572 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006454:	4b4d      	ldr	r3, [pc, #308]	; (800658c <xTaskIncrementTick+0x14c>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	3301      	adds	r3, #1
 800645a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800645c:	4a4b      	ldr	r2, [pc, #300]	; (800658c <xTaskIncrementTick+0x14c>)
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d120      	bne.n	80064aa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006468:	4b49      	ldr	r3, [pc, #292]	; (8006590 <xTaskIncrementTick+0x150>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d00a      	beq.n	8006488 <xTaskIncrementTick+0x48>
	__asm volatile
 8006472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006476:	f383 8811 	msr	BASEPRI, r3
 800647a:	f3bf 8f6f 	isb	sy
 800647e:	f3bf 8f4f 	dsb	sy
 8006482:	603b      	str	r3, [r7, #0]
}
 8006484:	bf00      	nop
 8006486:	e7fe      	b.n	8006486 <xTaskIncrementTick+0x46>
 8006488:	4b41      	ldr	r3, [pc, #260]	; (8006590 <xTaskIncrementTick+0x150>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	60fb      	str	r3, [r7, #12]
 800648e:	4b41      	ldr	r3, [pc, #260]	; (8006594 <xTaskIncrementTick+0x154>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a3f      	ldr	r2, [pc, #252]	; (8006590 <xTaskIncrementTick+0x150>)
 8006494:	6013      	str	r3, [r2, #0]
 8006496:	4a3f      	ldr	r2, [pc, #252]	; (8006594 <xTaskIncrementTick+0x154>)
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	6013      	str	r3, [r2, #0]
 800649c:	4b3e      	ldr	r3, [pc, #248]	; (8006598 <xTaskIncrementTick+0x158>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	3301      	adds	r3, #1
 80064a2:	4a3d      	ldr	r2, [pc, #244]	; (8006598 <xTaskIncrementTick+0x158>)
 80064a4:	6013      	str	r3, [r2, #0]
 80064a6:	f000 faf7 	bl	8006a98 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80064aa:	4b3c      	ldr	r3, [pc, #240]	; (800659c <xTaskIncrementTick+0x15c>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	693a      	ldr	r2, [r7, #16]
 80064b0:	429a      	cmp	r2, r3
 80064b2:	d349      	bcc.n	8006548 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80064b4:	4b36      	ldr	r3, [pc, #216]	; (8006590 <xTaskIncrementTick+0x150>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d104      	bne.n	80064c8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064be:	4b37      	ldr	r3, [pc, #220]	; (800659c <xTaskIncrementTick+0x15c>)
 80064c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80064c4:	601a      	str	r2, [r3, #0]
					break;
 80064c6:	e03f      	b.n	8006548 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064c8:	4b31      	ldr	r3, [pc, #196]	; (8006590 <xTaskIncrementTick+0x150>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	68db      	ldr	r3, [r3, #12]
 80064ce:	68db      	ldr	r3, [r3, #12]
 80064d0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80064d8:	693a      	ldr	r2, [r7, #16]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	429a      	cmp	r2, r3
 80064de:	d203      	bcs.n	80064e8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80064e0:	4a2e      	ldr	r2, [pc, #184]	; (800659c <xTaskIncrementTick+0x15c>)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80064e6:	e02f      	b.n	8006548 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	3304      	adds	r3, #4
 80064ec:	4618      	mov	r0, r3
 80064ee:	f7fe ff99 	bl	8005424 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d004      	beq.n	8006504 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	3318      	adds	r3, #24
 80064fe:	4618      	mov	r0, r3
 8006500:	f7fe ff90 	bl	8005424 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006508:	4b25      	ldr	r3, [pc, #148]	; (80065a0 <xTaskIncrementTick+0x160>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	429a      	cmp	r2, r3
 800650e:	d903      	bls.n	8006518 <xTaskIncrementTick+0xd8>
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006514:	4a22      	ldr	r2, [pc, #136]	; (80065a0 <xTaskIncrementTick+0x160>)
 8006516:	6013      	str	r3, [r2, #0]
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800651c:	4613      	mov	r3, r2
 800651e:	009b      	lsls	r3, r3, #2
 8006520:	4413      	add	r3, r2
 8006522:	009b      	lsls	r3, r3, #2
 8006524:	4a1f      	ldr	r2, [pc, #124]	; (80065a4 <xTaskIncrementTick+0x164>)
 8006526:	441a      	add	r2, r3
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	3304      	adds	r3, #4
 800652c:	4619      	mov	r1, r3
 800652e:	4610      	mov	r0, r2
 8006530:	f7fe ff1b 	bl	800536a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006538:	4b1b      	ldr	r3, [pc, #108]	; (80065a8 <xTaskIncrementTick+0x168>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800653e:	429a      	cmp	r2, r3
 8006540:	d3b8      	bcc.n	80064b4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006542:	2301      	movs	r3, #1
 8006544:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006546:	e7b5      	b.n	80064b4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006548:	4b17      	ldr	r3, [pc, #92]	; (80065a8 <xTaskIncrementTick+0x168>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800654e:	4915      	ldr	r1, [pc, #84]	; (80065a4 <xTaskIncrementTick+0x164>)
 8006550:	4613      	mov	r3, r2
 8006552:	009b      	lsls	r3, r3, #2
 8006554:	4413      	add	r3, r2
 8006556:	009b      	lsls	r3, r3, #2
 8006558:	440b      	add	r3, r1
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	2b01      	cmp	r3, #1
 800655e:	d901      	bls.n	8006564 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006560:	2301      	movs	r3, #1
 8006562:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006564:	4b11      	ldr	r3, [pc, #68]	; (80065ac <xTaskIncrementTick+0x16c>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d007      	beq.n	800657c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800656c:	2301      	movs	r3, #1
 800656e:	617b      	str	r3, [r7, #20]
 8006570:	e004      	b.n	800657c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006572:	4b0f      	ldr	r3, [pc, #60]	; (80065b0 <xTaskIncrementTick+0x170>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	3301      	adds	r3, #1
 8006578:	4a0d      	ldr	r2, [pc, #52]	; (80065b0 <xTaskIncrementTick+0x170>)
 800657a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800657c:	697b      	ldr	r3, [r7, #20]
}
 800657e:	4618      	mov	r0, r3
 8006580:	3718      	adds	r7, #24
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}
 8006586:	bf00      	nop
 8006588:	200081f0 	.word	0x200081f0
 800658c:	200081cc 	.word	0x200081cc
 8006590:	20008180 	.word	0x20008180
 8006594:	20008184 	.word	0x20008184
 8006598:	200081e0 	.word	0x200081e0
 800659c:	200081e8 	.word	0x200081e8
 80065a0:	200081d0 	.word	0x200081d0
 80065a4:	20007cf8 	.word	0x20007cf8
 80065a8:	20007cf4 	.word	0x20007cf4
 80065ac:	200081dc 	.word	0x200081dc
 80065b0:	200081d8 	.word	0x200081d8

080065b4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80065b4:	b480      	push	{r7}
 80065b6:	b085      	sub	sp, #20
 80065b8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80065ba:	4b28      	ldr	r3, [pc, #160]	; (800665c <vTaskSwitchContext+0xa8>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d003      	beq.n	80065ca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80065c2:	4b27      	ldr	r3, [pc, #156]	; (8006660 <vTaskSwitchContext+0xac>)
 80065c4:	2201      	movs	r2, #1
 80065c6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80065c8:	e041      	b.n	800664e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80065ca:	4b25      	ldr	r3, [pc, #148]	; (8006660 <vTaskSwitchContext+0xac>)
 80065cc:	2200      	movs	r2, #0
 80065ce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065d0:	4b24      	ldr	r3, [pc, #144]	; (8006664 <vTaskSwitchContext+0xb0>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	60fb      	str	r3, [r7, #12]
 80065d6:	e010      	b.n	80065fa <vTaskSwitchContext+0x46>
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d10a      	bne.n	80065f4 <vTaskSwitchContext+0x40>
	__asm volatile
 80065de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065e2:	f383 8811 	msr	BASEPRI, r3
 80065e6:	f3bf 8f6f 	isb	sy
 80065ea:	f3bf 8f4f 	dsb	sy
 80065ee:	607b      	str	r3, [r7, #4]
}
 80065f0:	bf00      	nop
 80065f2:	e7fe      	b.n	80065f2 <vTaskSwitchContext+0x3e>
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	3b01      	subs	r3, #1
 80065f8:	60fb      	str	r3, [r7, #12]
 80065fa:	491b      	ldr	r1, [pc, #108]	; (8006668 <vTaskSwitchContext+0xb4>)
 80065fc:	68fa      	ldr	r2, [r7, #12]
 80065fe:	4613      	mov	r3, r2
 8006600:	009b      	lsls	r3, r3, #2
 8006602:	4413      	add	r3, r2
 8006604:	009b      	lsls	r3, r3, #2
 8006606:	440b      	add	r3, r1
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d0e4      	beq.n	80065d8 <vTaskSwitchContext+0x24>
 800660e:	68fa      	ldr	r2, [r7, #12]
 8006610:	4613      	mov	r3, r2
 8006612:	009b      	lsls	r3, r3, #2
 8006614:	4413      	add	r3, r2
 8006616:	009b      	lsls	r3, r3, #2
 8006618:	4a13      	ldr	r2, [pc, #76]	; (8006668 <vTaskSwitchContext+0xb4>)
 800661a:	4413      	add	r3, r2
 800661c:	60bb      	str	r3, [r7, #8]
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	685b      	ldr	r3, [r3, #4]
 8006622:	685a      	ldr	r2, [r3, #4]
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	605a      	str	r2, [r3, #4]
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	685a      	ldr	r2, [r3, #4]
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	3308      	adds	r3, #8
 8006630:	429a      	cmp	r2, r3
 8006632:	d104      	bne.n	800663e <vTaskSwitchContext+0x8a>
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	685a      	ldr	r2, [r3, #4]
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	605a      	str	r2, [r3, #4]
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	68db      	ldr	r3, [r3, #12]
 8006644:	4a09      	ldr	r2, [pc, #36]	; (800666c <vTaskSwitchContext+0xb8>)
 8006646:	6013      	str	r3, [r2, #0]
 8006648:	4a06      	ldr	r2, [pc, #24]	; (8006664 <vTaskSwitchContext+0xb0>)
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	6013      	str	r3, [r2, #0]
}
 800664e:	bf00      	nop
 8006650:	3714      	adds	r7, #20
 8006652:	46bd      	mov	sp, r7
 8006654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006658:	4770      	bx	lr
 800665a:	bf00      	nop
 800665c:	200081f0 	.word	0x200081f0
 8006660:	200081dc 	.word	0x200081dc
 8006664:	200081d0 	.word	0x200081d0
 8006668:	20007cf8 	.word	0x20007cf8
 800666c:	20007cf4 	.word	0x20007cf4

08006670 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b084      	sub	sp, #16
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d10a      	bne.n	8006696 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006684:	f383 8811 	msr	BASEPRI, r3
 8006688:	f3bf 8f6f 	isb	sy
 800668c:	f3bf 8f4f 	dsb	sy
 8006690:	60fb      	str	r3, [r7, #12]
}
 8006692:	bf00      	nop
 8006694:	e7fe      	b.n	8006694 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006696:	4b07      	ldr	r3, [pc, #28]	; (80066b4 <vTaskPlaceOnEventList+0x44>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	3318      	adds	r3, #24
 800669c:	4619      	mov	r1, r3
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f7fe fe87 	bl	80053b2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80066a4:	2101      	movs	r1, #1
 80066a6:	6838      	ldr	r0, [r7, #0]
 80066a8:	f000 faa2 	bl	8006bf0 <prvAddCurrentTaskToDelayedList>
}
 80066ac:	bf00      	nop
 80066ae:	3710      	adds	r7, #16
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}
 80066b4:	20007cf4 	.word	0x20007cf4

080066b8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b086      	sub	sp, #24
 80066bc:	af00      	add	r7, sp, #0
 80066be:	60f8      	str	r0, [r7, #12]
 80066c0:	60b9      	str	r1, [r7, #8]
 80066c2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d10a      	bne.n	80066e0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80066ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ce:	f383 8811 	msr	BASEPRI, r3
 80066d2:	f3bf 8f6f 	isb	sy
 80066d6:	f3bf 8f4f 	dsb	sy
 80066da:	617b      	str	r3, [r7, #20]
}
 80066dc:	bf00      	nop
 80066de:	e7fe      	b.n	80066de <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80066e0:	4b0a      	ldr	r3, [pc, #40]	; (800670c <vTaskPlaceOnEventListRestricted+0x54>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	3318      	adds	r3, #24
 80066e6:	4619      	mov	r1, r3
 80066e8:	68f8      	ldr	r0, [r7, #12]
 80066ea:	f7fe fe3e 	bl	800536a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d002      	beq.n	80066fa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80066f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80066f8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80066fa:	6879      	ldr	r1, [r7, #4]
 80066fc:	68b8      	ldr	r0, [r7, #8]
 80066fe:	f000 fa77 	bl	8006bf0 <prvAddCurrentTaskToDelayedList>
	}
 8006702:	bf00      	nop
 8006704:	3718      	adds	r7, #24
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}
 800670a:	bf00      	nop
 800670c:	20007cf4 	.word	0x20007cf4

08006710 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b086      	sub	sp, #24
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	68db      	ldr	r3, [r3, #12]
 800671c:	68db      	ldr	r3, [r3, #12]
 800671e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d10a      	bne.n	800673c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800672a:	f383 8811 	msr	BASEPRI, r3
 800672e:	f3bf 8f6f 	isb	sy
 8006732:	f3bf 8f4f 	dsb	sy
 8006736:	60fb      	str	r3, [r7, #12]
}
 8006738:	bf00      	nop
 800673a:	e7fe      	b.n	800673a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	3318      	adds	r3, #24
 8006740:	4618      	mov	r0, r3
 8006742:	f7fe fe6f 	bl	8005424 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006746:	4b1e      	ldr	r3, [pc, #120]	; (80067c0 <xTaskRemoveFromEventList+0xb0>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d11d      	bne.n	800678a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	3304      	adds	r3, #4
 8006752:	4618      	mov	r0, r3
 8006754:	f7fe fe66 	bl	8005424 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800675c:	4b19      	ldr	r3, [pc, #100]	; (80067c4 <xTaskRemoveFromEventList+0xb4>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	429a      	cmp	r2, r3
 8006762:	d903      	bls.n	800676c <xTaskRemoveFromEventList+0x5c>
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006768:	4a16      	ldr	r2, [pc, #88]	; (80067c4 <xTaskRemoveFromEventList+0xb4>)
 800676a:	6013      	str	r3, [r2, #0]
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006770:	4613      	mov	r3, r2
 8006772:	009b      	lsls	r3, r3, #2
 8006774:	4413      	add	r3, r2
 8006776:	009b      	lsls	r3, r3, #2
 8006778:	4a13      	ldr	r2, [pc, #76]	; (80067c8 <xTaskRemoveFromEventList+0xb8>)
 800677a:	441a      	add	r2, r3
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	3304      	adds	r3, #4
 8006780:	4619      	mov	r1, r3
 8006782:	4610      	mov	r0, r2
 8006784:	f7fe fdf1 	bl	800536a <vListInsertEnd>
 8006788:	e005      	b.n	8006796 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	3318      	adds	r3, #24
 800678e:	4619      	mov	r1, r3
 8006790:	480e      	ldr	r0, [pc, #56]	; (80067cc <xTaskRemoveFromEventList+0xbc>)
 8006792:	f7fe fdea 	bl	800536a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800679a:	4b0d      	ldr	r3, [pc, #52]	; (80067d0 <xTaskRemoveFromEventList+0xc0>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d905      	bls.n	80067b0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80067a4:	2301      	movs	r3, #1
 80067a6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80067a8:	4b0a      	ldr	r3, [pc, #40]	; (80067d4 <xTaskRemoveFromEventList+0xc4>)
 80067aa:	2201      	movs	r2, #1
 80067ac:	601a      	str	r2, [r3, #0]
 80067ae:	e001      	b.n	80067b4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80067b0:	2300      	movs	r3, #0
 80067b2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80067b4:	697b      	ldr	r3, [r7, #20]
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3718      	adds	r7, #24
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}
 80067be:	bf00      	nop
 80067c0:	200081f0 	.word	0x200081f0
 80067c4:	200081d0 	.word	0x200081d0
 80067c8:	20007cf8 	.word	0x20007cf8
 80067cc:	20008188 	.word	0x20008188
 80067d0:	20007cf4 	.word	0x20007cf4
 80067d4:	200081dc 	.word	0x200081dc

080067d8 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b084      	sub	sp, #16
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d10a      	bne.n	80067fc <vTaskSetTimeOutState+0x24>
	__asm volatile
 80067e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ea:	f383 8811 	msr	BASEPRI, r3
 80067ee:	f3bf 8f6f 	isb	sy
 80067f2:	f3bf 8f4f 	dsb	sy
 80067f6:	60fb      	str	r3, [r7, #12]
}
 80067f8:	bf00      	nop
 80067fa:	e7fe      	b.n	80067fa <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 80067fc:	f000 feca 	bl	8007594 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006800:	4b06      	ldr	r3, [pc, #24]	; (800681c <vTaskSetTimeOutState+0x44>)
 8006802:	681a      	ldr	r2, [r3, #0]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8006808:	4b05      	ldr	r3, [pc, #20]	; (8006820 <vTaskSetTimeOutState+0x48>)
 800680a:	681a      	ldr	r2, [r3, #0]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8006810:	f000 fef0 	bl	80075f4 <vPortExitCritical>
}
 8006814:	bf00      	nop
 8006816:	3710      	adds	r7, #16
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}
 800681c:	200081e0 	.word	0x200081e0
 8006820:	200081cc 	.word	0x200081cc

08006824 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006824:	b480      	push	{r7}
 8006826:	b083      	sub	sp, #12
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800682c:	4b06      	ldr	r3, [pc, #24]	; (8006848 <vTaskInternalSetTimeOutState+0x24>)
 800682e:	681a      	ldr	r2, [r3, #0]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006834:	4b05      	ldr	r3, [pc, #20]	; (800684c <vTaskInternalSetTimeOutState+0x28>)
 8006836:	681a      	ldr	r2, [r3, #0]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	605a      	str	r2, [r3, #4]
}
 800683c:	bf00      	nop
 800683e:	370c      	adds	r7, #12
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr
 8006848:	200081e0 	.word	0x200081e0
 800684c:	200081cc 	.word	0x200081cc

08006850 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b088      	sub	sp, #32
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
 8006858:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d10a      	bne.n	8006876 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006864:	f383 8811 	msr	BASEPRI, r3
 8006868:	f3bf 8f6f 	isb	sy
 800686c:	f3bf 8f4f 	dsb	sy
 8006870:	613b      	str	r3, [r7, #16]
}
 8006872:	bf00      	nop
 8006874:	e7fe      	b.n	8006874 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d10a      	bne.n	8006892 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800687c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006880:	f383 8811 	msr	BASEPRI, r3
 8006884:	f3bf 8f6f 	isb	sy
 8006888:	f3bf 8f4f 	dsb	sy
 800688c:	60fb      	str	r3, [r7, #12]
}
 800688e:	bf00      	nop
 8006890:	e7fe      	b.n	8006890 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006892:	f000 fe7f 	bl	8007594 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006896:	4b1d      	ldr	r3, [pc, #116]	; (800690c <xTaskCheckForTimeOut+0xbc>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	69ba      	ldr	r2, [r7, #24]
 80068a2:	1ad3      	subs	r3, r2, r3
 80068a4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068ae:	d102      	bne.n	80068b6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80068b0:	2300      	movs	r3, #0
 80068b2:	61fb      	str	r3, [r7, #28]
 80068b4:	e023      	b.n	80068fe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681a      	ldr	r2, [r3, #0]
 80068ba:	4b15      	ldr	r3, [pc, #84]	; (8006910 <xTaskCheckForTimeOut+0xc0>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	429a      	cmp	r2, r3
 80068c0:	d007      	beq.n	80068d2 <xTaskCheckForTimeOut+0x82>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	69ba      	ldr	r2, [r7, #24]
 80068c8:	429a      	cmp	r2, r3
 80068ca:	d302      	bcc.n	80068d2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80068cc:	2301      	movs	r3, #1
 80068ce:	61fb      	str	r3, [r7, #28]
 80068d0:	e015      	b.n	80068fe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	697a      	ldr	r2, [r7, #20]
 80068d8:	429a      	cmp	r2, r3
 80068da:	d20b      	bcs.n	80068f4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	681a      	ldr	r2, [r3, #0]
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	1ad2      	subs	r2, r2, r3
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f7ff ff9b 	bl	8006824 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80068ee:	2300      	movs	r3, #0
 80068f0:	61fb      	str	r3, [r7, #28]
 80068f2:	e004      	b.n	80068fe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	2200      	movs	r2, #0
 80068f8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80068fa:	2301      	movs	r3, #1
 80068fc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80068fe:	f000 fe79 	bl	80075f4 <vPortExitCritical>

	return xReturn;
 8006902:	69fb      	ldr	r3, [r7, #28]
}
 8006904:	4618      	mov	r0, r3
 8006906:	3720      	adds	r7, #32
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}
 800690c:	200081cc 	.word	0x200081cc
 8006910:	200081e0 	.word	0x200081e0

08006914 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006914:	b480      	push	{r7}
 8006916:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006918:	4b03      	ldr	r3, [pc, #12]	; (8006928 <vTaskMissedYield+0x14>)
 800691a:	2201      	movs	r2, #1
 800691c:	601a      	str	r2, [r3, #0]
}
 800691e:	bf00      	nop
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr
 8006928:	200081dc 	.word	0x200081dc

0800692c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b082      	sub	sp, #8
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006934:	f000 f852 	bl	80069dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006938:	4b06      	ldr	r3, [pc, #24]	; (8006954 <prvIdleTask+0x28>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	2b01      	cmp	r3, #1
 800693e:	d9f9      	bls.n	8006934 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006940:	4b05      	ldr	r3, [pc, #20]	; (8006958 <prvIdleTask+0x2c>)
 8006942:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006946:	601a      	str	r2, [r3, #0]
 8006948:	f3bf 8f4f 	dsb	sy
 800694c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006950:	e7f0      	b.n	8006934 <prvIdleTask+0x8>
 8006952:	bf00      	nop
 8006954:	20007cf8 	.word	0x20007cf8
 8006958:	e000ed04 	.word	0xe000ed04

0800695c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b082      	sub	sp, #8
 8006960:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006962:	2300      	movs	r3, #0
 8006964:	607b      	str	r3, [r7, #4]
 8006966:	e00c      	b.n	8006982 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006968:	687a      	ldr	r2, [r7, #4]
 800696a:	4613      	mov	r3, r2
 800696c:	009b      	lsls	r3, r3, #2
 800696e:	4413      	add	r3, r2
 8006970:	009b      	lsls	r3, r3, #2
 8006972:	4a12      	ldr	r2, [pc, #72]	; (80069bc <prvInitialiseTaskLists+0x60>)
 8006974:	4413      	add	r3, r2
 8006976:	4618      	mov	r0, r3
 8006978:	f7fe fcca 	bl	8005310 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	3301      	adds	r3, #1
 8006980:	607b      	str	r3, [r7, #4]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2b37      	cmp	r3, #55	; 0x37
 8006986:	d9ef      	bls.n	8006968 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006988:	480d      	ldr	r0, [pc, #52]	; (80069c0 <prvInitialiseTaskLists+0x64>)
 800698a:	f7fe fcc1 	bl	8005310 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800698e:	480d      	ldr	r0, [pc, #52]	; (80069c4 <prvInitialiseTaskLists+0x68>)
 8006990:	f7fe fcbe 	bl	8005310 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006994:	480c      	ldr	r0, [pc, #48]	; (80069c8 <prvInitialiseTaskLists+0x6c>)
 8006996:	f7fe fcbb 	bl	8005310 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800699a:	480c      	ldr	r0, [pc, #48]	; (80069cc <prvInitialiseTaskLists+0x70>)
 800699c:	f7fe fcb8 	bl	8005310 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80069a0:	480b      	ldr	r0, [pc, #44]	; (80069d0 <prvInitialiseTaskLists+0x74>)
 80069a2:	f7fe fcb5 	bl	8005310 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80069a6:	4b0b      	ldr	r3, [pc, #44]	; (80069d4 <prvInitialiseTaskLists+0x78>)
 80069a8:	4a05      	ldr	r2, [pc, #20]	; (80069c0 <prvInitialiseTaskLists+0x64>)
 80069aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80069ac:	4b0a      	ldr	r3, [pc, #40]	; (80069d8 <prvInitialiseTaskLists+0x7c>)
 80069ae:	4a05      	ldr	r2, [pc, #20]	; (80069c4 <prvInitialiseTaskLists+0x68>)
 80069b0:	601a      	str	r2, [r3, #0]
}
 80069b2:	bf00      	nop
 80069b4:	3708      	adds	r7, #8
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}
 80069ba:	bf00      	nop
 80069bc:	20007cf8 	.word	0x20007cf8
 80069c0:	20008158 	.word	0x20008158
 80069c4:	2000816c 	.word	0x2000816c
 80069c8:	20008188 	.word	0x20008188
 80069cc:	2000819c 	.word	0x2000819c
 80069d0:	200081b4 	.word	0x200081b4
 80069d4:	20008180 	.word	0x20008180
 80069d8:	20008184 	.word	0x20008184

080069dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b082      	sub	sp, #8
 80069e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80069e2:	e019      	b.n	8006a18 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80069e4:	f000 fdd6 	bl	8007594 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069e8:	4b10      	ldr	r3, [pc, #64]	; (8006a2c <prvCheckTasksWaitingTermination+0x50>)
 80069ea:	68db      	ldr	r3, [r3, #12]
 80069ec:	68db      	ldr	r3, [r3, #12]
 80069ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	3304      	adds	r3, #4
 80069f4:	4618      	mov	r0, r3
 80069f6:	f7fe fd15 	bl	8005424 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80069fa:	4b0d      	ldr	r3, [pc, #52]	; (8006a30 <prvCheckTasksWaitingTermination+0x54>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	3b01      	subs	r3, #1
 8006a00:	4a0b      	ldr	r2, [pc, #44]	; (8006a30 <prvCheckTasksWaitingTermination+0x54>)
 8006a02:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006a04:	4b0b      	ldr	r3, [pc, #44]	; (8006a34 <prvCheckTasksWaitingTermination+0x58>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	3b01      	subs	r3, #1
 8006a0a:	4a0a      	ldr	r2, [pc, #40]	; (8006a34 <prvCheckTasksWaitingTermination+0x58>)
 8006a0c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006a0e:	f000 fdf1 	bl	80075f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f000 f810 	bl	8006a38 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006a18:	4b06      	ldr	r3, [pc, #24]	; (8006a34 <prvCheckTasksWaitingTermination+0x58>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d1e1      	bne.n	80069e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006a20:	bf00      	nop
 8006a22:	bf00      	nop
 8006a24:	3708      	adds	r7, #8
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}
 8006a2a:	bf00      	nop
 8006a2c:	2000819c 	.word	0x2000819c
 8006a30:	200081c8 	.word	0x200081c8
 8006a34:	200081b0 	.word	0x200081b0

08006a38 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b084      	sub	sp, #16
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d108      	bne.n	8006a5c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a4e:	4618      	mov	r0, r3
 8006a50:	f000 ff8e 	bl	8007970 <vPortFree>
				vPortFree( pxTCB );
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f000 ff8b 	bl	8007970 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006a5a:	e018      	b.n	8006a8e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006a62:	2b01      	cmp	r3, #1
 8006a64:	d103      	bne.n	8006a6e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f000 ff82 	bl	8007970 <vPortFree>
	}
 8006a6c:	e00f      	b.n	8006a8e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006a74:	2b02      	cmp	r3, #2
 8006a76:	d00a      	beq.n	8006a8e <prvDeleteTCB+0x56>
	__asm volatile
 8006a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a7c:	f383 8811 	msr	BASEPRI, r3
 8006a80:	f3bf 8f6f 	isb	sy
 8006a84:	f3bf 8f4f 	dsb	sy
 8006a88:	60fb      	str	r3, [r7, #12]
}
 8006a8a:	bf00      	nop
 8006a8c:	e7fe      	b.n	8006a8c <prvDeleteTCB+0x54>
	}
 8006a8e:	bf00      	nop
 8006a90:	3710      	adds	r7, #16
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}
	...

08006a98 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b083      	sub	sp, #12
 8006a9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a9e:	4b0c      	ldr	r3, [pc, #48]	; (8006ad0 <prvResetNextTaskUnblockTime+0x38>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d104      	bne.n	8006ab2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006aa8:	4b0a      	ldr	r3, [pc, #40]	; (8006ad4 <prvResetNextTaskUnblockTime+0x3c>)
 8006aaa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006aae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006ab0:	e008      	b.n	8006ac4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ab2:	4b07      	ldr	r3, [pc, #28]	; (8006ad0 <prvResetNextTaskUnblockTime+0x38>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	68db      	ldr	r3, [r3, #12]
 8006ab8:	68db      	ldr	r3, [r3, #12]
 8006aba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	4a04      	ldr	r2, [pc, #16]	; (8006ad4 <prvResetNextTaskUnblockTime+0x3c>)
 8006ac2:	6013      	str	r3, [r2, #0]
}
 8006ac4:	bf00      	nop
 8006ac6:	370c      	adds	r7, #12
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr
 8006ad0:	20008180 	.word	0x20008180
 8006ad4:	200081e8 	.word	0x200081e8

08006ad8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006ad8:	b480      	push	{r7}
 8006ada:	b083      	sub	sp, #12
 8006adc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006ade:	4b0b      	ldr	r3, [pc, #44]	; (8006b0c <xTaskGetSchedulerState+0x34>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d102      	bne.n	8006aec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	607b      	str	r3, [r7, #4]
 8006aea:	e008      	b.n	8006afe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006aec:	4b08      	ldr	r3, [pc, #32]	; (8006b10 <xTaskGetSchedulerState+0x38>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d102      	bne.n	8006afa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006af4:	2302      	movs	r3, #2
 8006af6:	607b      	str	r3, [r7, #4]
 8006af8:	e001      	b.n	8006afe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006afa:	2300      	movs	r3, #0
 8006afc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006afe:	687b      	ldr	r3, [r7, #4]
	}
 8006b00:	4618      	mov	r0, r3
 8006b02:	370c      	adds	r7, #12
 8006b04:	46bd      	mov	sp, r7
 8006b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0a:	4770      	bx	lr
 8006b0c:	200081d4 	.word	0x200081d4
 8006b10:	200081f0 	.word	0x200081f0

08006b14 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b086      	sub	sp, #24
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006b20:	2300      	movs	r3, #0
 8006b22:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d056      	beq.n	8006bd8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006b2a:	4b2e      	ldr	r3, [pc, #184]	; (8006be4 <xTaskPriorityDisinherit+0xd0>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	693a      	ldr	r2, [r7, #16]
 8006b30:	429a      	cmp	r2, r3
 8006b32:	d00a      	beq.n	8006b4a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b38:	f383 8811 	msr	BASEPRI, r3
 8006b3c:	f3bf 8f6f 	isb	sy
 8006b40:	f3bf 8f4f 	dsb	sy
 8006b44:	60fb      	str	r3, [r7, #12]
}
 8006b46:	bf00      	nop
 8006b48:	e7fe      	b.n	8006b48 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d10a      	bne.n	8006b68 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b56:	f383 8811 	msr	BASEPRI, r3
 8006b5a:	f3bf 8f6f 	isb	sy
 8006b5e:	f3bf 8f4f 	dsb	sy
 8006b62:	60bb      	str	r3, [r7, #8]
}
 8006b64:	bf00      	nop
 8006b66:	e7fe      	b.n	8006b66 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b6c:	1e5a      	subs	r2, r3, #1
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d02c      	beq.n	8006bd8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d128      	bne.n	8006bd8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	3304      	adds	r3, #4
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f7fe fc4a 	bl	8005424 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006b90:	693b      	ldr	r3, [r7, #16]
 8006b92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b9c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ba8:	4b0f      	ldr	r3, [pc, #60]	; (8006be8 <xTaskPriorityDisinherit+0xd4>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	429a      	cmp	r2, r3
 8006bae:	d903      	bls.n	8006bb8 <xTaskPriorityDisinherit+0xa4>
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bb4:	4a0c      	ldr	r2, [pc, #48]	; (8006be8 <xTaskPriorityDisinherit+0xd4>)
 8006bb6:	6013      	str	r3, [r2, #0]
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bbc:	4613      	mov	r3, r2
 8006bbe:	009b      	lsls	r3, r3, #2
 8006bc0:	4413      	add	r3, r2
 8006bc2:	009b      	lsls	r3, r3, #2
 8006bc4:	4a09      	ldr	r2, [pc, #36]	; (8006bec <xTaskPriorityDisinherit+0xd8>)
 8006bc6:	441a      	add	r2, r3
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	3304      	adds	r3, #4
 8006bcc:	4619      	mov	r1, r3
 8006bce:	4610      	mov	r0, r2
 8006bd0:	f7fe fbcb 	bl	800536a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006bd8:	697b      	ldr	r3, [r7, #20]
	}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3718      	adds	r7, #24
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}
 8006be2:	bf00      	nop
 8006be4:	20007cf4 	.word	0x20007cf4
 8006be8:	200081d0 	.word	0x200081d0
 8006bec:	20007cf8 	.word	0x20007cf8

08006bf0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b084      	sub	sp, #16
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
 8006bf8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006bfa:	4b21      	ldr	r3, [pc, #132]	; (8006c80 <prvAddCurrentTaskToDelayedList+0x90>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c00:	4b20      	ldr	r3, [pc, #128]	; (8006c84 <prvAddCurrentTaskToDelayedList+0x94>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	3304      	adds	r3, #4
 8006c06:	4618      	mov	r0, r3
 8006c08:	f7fe fc0c 	bl	8005424 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c12:	d10a      	bne.n	8006c2a <prvAddCurrentTaskToDelayedList+0x3a>
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d007      	beq.n	8006c2a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c1a:	4b1a      	ldr	r3, [pc, #104]	; (8006c84 <prvAddCurrentTaskToDelayedList+0x94>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	3304      	adds	r3, #4
 8006c20:	4619      	mov	r1, r3
 8006c22:	4819      	ldr	r0, [pc, #100]	; (8006c88 <prvAddCurrentTaskToDelayedList+0x98>)
 8006c24:	f7fe fba1 	bl	800536a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006c28:	e026      	b.n	8006c78 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006c2a:	68fa      	ldr	r2, [r7, #12]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	4413      	add	r3, r2
 8006c30:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006c32:	4b14      	ldr	r3, [pc, #80]	; (8006c84 <prvAddCurrentTaskToDelayedList+0x94>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	68ba      	ldr	r2, [r7, #8]
 8006c38:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006c3a:	68ba      	ldr	r2, [r7, #8]
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	429a      	cmp	r2, r3
 8006c40:	d209      	bcs.n	8006c56 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c42:	4b12      	ldr	r3, [pc, #72]	; (8006c8c <prvAddCurrentTaskToDelayedList+0x9c>)
 8006c44:	681a      	ldr	r2, [r3, #0]
 8006c46:	4b0f      	ldr	r3, [pc, #60]	; (8006c84 <prvAddCurrentTaskToDelayedList+0x94>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	3304      	adds	r3, #4
 8006c4c:	4619      	mov	r1, r3
 8006c4e:	4610      	mov	r0, r2
 8006c50:	f7fe fbaf 	bl	80053b2 <vListInsert>
}
 8006c54:	e010      	b.n	8006c78 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c56:	4b0e      	ldr	r3, [pc, #56]	; (8006c90 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006c58:	681a      	ldr	r2, [r3, #0]
 8006c5a:	4b0a      	ldr	r3, [pc, #40]	; (8006c84 <prvAddCurrentTaskToDelayedList+0x94>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	3304      	adds	r3, #4
 8006c60:	4619      	mov	r1, r3
 8006c62:	4610      	mov	r0, r2
 8006c64:	f7fe fba5 	bl	80053b2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006c68:	4b0a      	ldr	r3, [pc, #40]	; (8006c94 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	68ba      	ldr	r2, [r7, #8]
 8006c6e:	429a      	cmp	r2, r3
 8006c70:	d202      	bcs.n	8006c78 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006c72:	4a08      	ldr	r2, [pc, #32]	; (8006c94 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	6013      	str	r3, [r2, #0]
}
 8006c78:	bf00      	nop
 8006c7a:	3710      	adds	r7, #16
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}
 8006c80:	200081cc 	.word	0x200081cc
 8006c84:	20007cf4 	.word	0x20007cf4
 8006c88:	200081b4 	.word	0x200081b4
 8006c8c:	20008184 	.word	0x20008184
 8006c90:	20008180 	.word	0x20008180
 8006c94:	200081e8 	.word	0x200081e8

08006c98 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b08a      	sub	sp, #40	; 0x28
 8006c9c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006ca2:	f000 fb07 	bl	80072b4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006ca6:	4b1c      	ldr	r3, [pc, #112]	; (8006d18 <xTimerCreateTimerTask+0x80>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d021      	beq.n	8006cf2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006cb6:	1d3a      	adds	r2, r7, #4
 8006cb8:	f107 0108 	add.w	r1, r7, #8
 8006cbc:	f107 030c 	add.w	r3, r7, #12
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f7fe fb0b 	bl	80052dc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006cc6:	6879      	ldr	r1, [r7, #4]
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	68fa      	ldr	r2, [r7, #12]
 8006ccc:	9202      	str	r2, [sp, #8]
 8006cce:	9301      	str	r3, [sp, #4]
 8006cd0:	2302      	movs	r3, #2
 8006cd2:	9300      	str	r3, [sp, #0]
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	460a      	mov	r2, r1
 8006cd8:	4910      	ldr	r1, [pc, #64]	; (8006d1c <xTimerCreateTimerTask+0x84>)
 8006cda:	4811      	ldr	r0, [pc, #68]	; (8006d20 <xTimerCreateTimerTask+0x88>)
 8006cdc:	f7ff f8b8 	bl	8005e50 <xTaskCreateStatic>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	4a10      	ldr	r2, [pc, #64]	; (8006d24 <xTimerCreateTimerTask+0x8c>)
 8006ce4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006ce6:	4b0f      	ldr	r3, [pc, #60]	; (8006d24 <xTimerCreateTimerTask+0x8c>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d001      	beq.n	8006cf2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d10a      	bne.n	8006d0e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cfc:	f383 8811 	msr	BASEPRI, r3
 8006d00:	f3bf 8f6f 	isb	sy
 8006d04:	f3bf 8f4f 	dsb	sy
 8006d08:	613b      	str	r3, [r7, #16]
}
 8006d0a:	bf00      	nop
 8006d0c:	e7fe      	b.n	8006d0c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006d0e:	697b      	ldr	r3, [r7, #20]
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3718      	adds	r7, #24
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}
 8006d18:	20008224 	.word	0x20008224
 8006d1c:	08011ef4 	.word	0x08011ef4
 8006d20:	08006e5d 	.word	0x08006e5d
 8006d24:	20008228 	.word	0x20008228

08006d28 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b08a      	sub	sp, #40	; 0x28
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	60f8      	str	r0, [r7, #12]
 8006d30:	60b9      	str	r1, [r7, #8]
 8006d32:	607a      	str	r2, [r7, #4]
 8006d34:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006d36:	2300      	movs	r3, #0
 8006d38:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d10a      	bne.n	8006d56 <xTimerGenericCommand+0x2e>
	__asm volatile
 8006d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d44:	f383 8811 	msr	BASEPRI, r3
 8006d48:	f3bf 8f6f 	isb	sy
 8006d4c:	f3bf 8f4f 	dsb	sy
 8006d50:	623b      	str	r3, [r7, #32]
}
 8006d52:	bf00      	nop
 8006d54:	e7fe      	b.n	8006d54 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006d56:	4b1a      	ldr	r3, [pc, #104]	; (8006dc0 <xTimerGenericCommand+0x98>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d02a      	beq.n	8006db4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	2b05      	cmp	r3, #5
 8006d6e:	dc18      	bgt.n	8006da2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006d70:	f7ff feb2 	bl	8006ad8 <xTaskGetSchedulerState>
 8006d74:	4603      	mov	r3, r0
 8006d76:	2b02      	cmp	r3, #2
 8006d78:	d109      	bne.n	8006d8e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006d7a:	4b11      	ldr	r3, [pc, #68]	; (8006dc0 <xTimerGenericCommand+0x98>)
 8006d7c:	6818      	ldr	r0, [r3, #0]
 8006d7e:	f107 0110 	add.w	r1, r7, #16
 8006d82:	2300      	movs	r3, #0
 8006d84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d86:	f7fe fc7b 	bl	8005680 <xQueueGenericSend>
 8006d8a:	6278      	str	r0, [r7, #36]	; 0x24
 8006d8c:	e012      	b.n	8006db4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006d8e:	4b0c      	ldr	r3, [pc, #48]	; (8006dc0 <xTimerGenericCommand+0x98>)
 8006d90:	6818      	ldr	r0, [r3, #0]
 8006d92:	f107 0110 	add.w	r1, r7, #16
 8006d96:	2300      	movs	r3, #0
 8006d98:	2200      	movs	r2, #0
 8006d9a:	f7fe fc71 	bl	8005680 <xQueueGenericSend>
 8006d9e:	6278      	str	r0, [r7, #36]	; 0x24
 8006da0:	e008      	b.n	8006db4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006da2:	4b07      	ldr	r3, [pc, #28]	; (8006dc0 <xTimerGenericCommand+0x98>)
 8006da4:	6818      	ldr	r0, [r3, #0]
 8006da6:	f107 0110 	add.w	r1, r7, #16
 8006daa:	2300      	movs	r3, #0
 8006dac:	683a      	ldr	r2, [r7, #0]
 8006dae:	f7fe fd65 	bl	800587c <xQueueGenericSendFromISR>
 8006db2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3728      	adds	r7, #40	; 0x28
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}
 8006dbe:	bf00      	nop
 8006dc0:	20008224 	.word	0x20008224

08006dc4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b088      	sub	sp, #32
 8006dc8:	af02      	add	r7, sp, #8
 8006dca:	6078      	str	r0, [r7, #4]
 8006dcc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006dce:	4b22      	ldr	r3, [pc, #136]	; (8006e58 <prvProcessExpiredTimer+0x94>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	68db      	ldr	r3, [r3, #12]
 8006dd4:	68db      	ldr	r3, [r3, #12]
 8006dd6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	3304      	adds	r3, #4
 8006ddc:	4618      	mov	r0, r3
 8006dde:	f7fe fb21 	bl	8005424 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006de8:	f003 0304 	and.w	r3, r3, #4
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d022      	beq.n	8006e36 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	699a      	ldr	r2, [r3, #24]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	18d1      	adds	r1, r2, r3
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	683a      	ldr	r2, [r7, #0]
 8006dfc:	6978      	ldr	r0, [r7, #20]
 8006dfe:	f000 f8d1 	bl	8006fa4 <prvInsertTimerInActiveList>
 8006e02:	4603      	mov	r3, r0
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d01f      	beq.n	8006e48 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006e08:	2300      	movs	r3, #0
 8006e0a:	9300      	str	r3, [sp, #0]
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	687a      	ldr	r2, [r7, #4]
 8006e10:	2100      	movs	r1, #0
 8006e12:	6978      	ldr	r0, [r7, #20]
 8006e14:	f7ff ff88 	bl	8006d28 <xTimerGenericCommand>
 8006e18:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d113      	bne.n	8006e48 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e24:	f383 8811 	msr	BASEPRI, r3
 8006e28:	f3bf 8f6f 	isb	sy
 8006e2c:	f3bf 8f4f 	dsb	sy
 8006e30:	60fb      	str	r3, [r7, #12]
}
 8006e32:	bf00      	nop
 8006e34:	e7fe      	b.n	8006e34 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e3c:	f023 0301 	bic.w	r3, r3, #1
 8006e40:	b2da      	uxtb	r2, r3
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006e48:	697b      	ldr	r3, [r7, #20]
 8006e4a:	6a1b      	ldr	r3, [r3, #32]
 8006e4c:	6978      	ldr	r0, [r7, #20]
 8006e4e:	4798      	blx	r3
}
 8006e50:	bf00      	nop
 8006e52:	3718      	adds	r7, #24
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}
 8006e58:	2000821c 	.word	0x2000821c

08006e5c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b084      	sub	sp, #16
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006e64:	f107 0308 	add.w	r3, r7, #8
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f000 f857 	bl	8006f1c <prvGetNextExpireTime>
 8006e6e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	4619      	mov	r1, r3
 8006e74:	68f8      	ldr	r0, [r7, #12]
 8006e76:	f000 f803 	bl	8006e80 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006e7a:	f000 f8d5 	bl	8007028 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006e7e:	e7f1      	b.n	8006e64 <prvTimerTask+0x8>

08006e80 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b084      	sub	sp, #16
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
 8006e88:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006e8a:	f7ff fa1d 	bl	80062c8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006e8e:	f107 0308 	add.w	r3, r7, #8
 8006e92:	4618      	mov	r0, r3
 8006e94:	f000 f866 	bl	8006f64 <prvSampleTimeNow>
 8006e98:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d130      	bne.n	8006f02 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d10a      	bne.n	8006ebc <prvProcessTimerOrBlockTask+0x3c>
 8006ea6:	687a      	ldr	r2, [r7, #4]
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	429a      	cmp	r2, r3
 8006eac:	d806      	bhi.n	8006ebc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006eae:	f7ff fa19 	bl	80062e4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006eb2:	68f9      	ldr	r1, [r7, #12]
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f7ff ff85 	bl	8006dc4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006eba:	e024      	b.n	8006f06 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d008      	beq.n	8006ed4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006ec2:	4b13      	ldr	r3, [pc, #76]	; (8006f10 <prvProcessTimerOrBlockTask+0x90>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d101      	bne.n	8006ed0 <prvProcessTimerOrBlockTask+0x50>
 8006ecc:	2301      	movs	r3, #1
 8006ece:	e000      	b.n	8006ed2 <prvProcessTimerOrBlockTask+0x52>
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006ed4:	4b0f      	ldr	r3, [pc, #60]	; (8006f14 <prvProcessTimerOrBlockTask+0x94>)
 8006ed6:	6818      	ldr	r0, [r3, #0]
 8006ed8:	687a      	ldr	r2, [r7, #4]
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	1ad3      	subs	r3, r2, r3
 8006ede:	683a      	ldr	r2, [r7, #0]
 8006ee0:	4619      	mov	r1, r3
 8006ee2:	f7fe ff81 	bl	8005de8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006ee6:	f7ff f9fd 	bl	80062e4 <xTaskResumeAll>
 8006eea:	4603      	mov	r3, r0
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d10a      	bne.n	8006f06 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006ef0:	4b09      	ldr	r3, [pc, #36]	; (8006f18 <prvProcessTimerOrBlockTask+0x98>)
 8006ef2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ef6:	601a      	str	r2, [r3, #0]
 8006ef8:	f3bf 8f4f 	dsb	sy
 8006efc:	f3bf 8f6f 	isb	sy
}
 8006f00:	e001      	b.n	8006f06 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006f02:	f7ff f9ef 	bl	80062e4 <xTaskResumeAll>
}
 8006f06:	bf00      	nop
 8006f08:	3710      	adds	r7, #16
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}
 8006f0e:	bf00      	nop
 8006f10:	20008220 	.word	0x20008220
 8006f14:	20008224 	.word	0x20008224
 8006f18:	e000ed04 	.word	0xe000ed04

08006f1c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b085      	sub	sp, #20
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006f24:	4b0e      	ldr	r3, [pc, #56]	; (8006f60 <prvGetNextExpireTime+0x44>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d101      	bne.n	8006f32 <prvGetNextExpireTime+0x16>
 8006f2e:	2201      	movs	r2, #1
 8006f30:	e000      	b.n	8006f34 <prvGetNextExpireTime+0x18>
 8006f32:	2200      	movs	r2, #0
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d105      	bne.n	8006f4c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006f40:	4b07      	ldr	r3, [pc, #28]	; (8006f60 <prvGetNextExpireTime+0x44>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	68db      	ldr	r3, [r3, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	60fb      	str	r3, [r7, #12]
 8006f4a:	e001      	b.n	8006f50 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006f50:	68fb      	ldr	r3, [r7, #12]
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	3714      	adds	r7, #20
 8006f56:	46bd      	mov	sp, r7
 8006f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5c:	4770      	bx	lr
 8006f5e:	bf00      	nop
 8006f60:	2000821c 	.word	0x2000821c

08006f64 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b084      	sub	sp, #16
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006f6c:	f7ff fa58 	bl	8006420 <xTaskGetTickCount>
 8006f70:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006f72:	4b0b      	ldr	r3, [pc, #44]	; (8006fa0 <prvSampleTimeNow+0x3c>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	68fa      	ldr	r2, [r7, #12]
 8006f78:	429a      	cmp	r2, r3
 8006f7a:	d205      	bcs.n	8006f88 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006f7c:	f000 f936 	bl	80071ec <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2201      	movs	r2, #1
 8006f84:	601a      	str	r2, [r3, #0]
 8006f86:	e002      	b.n	8006f8e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006f8e:	4a04      	ldr	r2, [pc, #16]	; (8006fa0 <prvSampleTimeNow+0x3c>)
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006f94:	68fb      	ldr	r3, [r7, #12]
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3710      	adds	r7, #16
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}
 8006f9e:	bf00      	nop
 8006fa0:	2000822c 	.word	0x2000822c

08006fa4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b086      	sub	sp, #24
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	60f8      	str	r0, [r7, #12]
 8006fac:	60b9      	str	r1, [r7, #8]
 8006fae:	607a      	str	r2, [r7, #4]
 8006fb0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	68ba      	ldr	r2, [r7, #8]
 8006fba:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	68fa      	ldr	r2, [r7, #12]
 8006fc0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006fc2:	68ba      	ldr	r2, [r7, #8]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	429a      	cmp	r2, r3
 8006fc8:	d812      	bhi.n	8006ff0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fca:	687a      	ldr	r2, [r7, #4]
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	1ad2      	subs	r2, r2, r3
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	699b      	ldr	r3, [r3, #24]
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d302      	bcc.n	8006fde <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006fd8:	2301      	movs	r3, #1
 8006fda:	617b      	str	r3, [r7, #20]
 8006fdc:	e01b      	b.n	8007016 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006fde:	4b10      	ldr	r3, [pc, #64]	; (8007020 <prvInsertTimerInActiveList+0x7c>)
 8006fe0:	681a      	ldr	r2, [r3, #0]
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	3304      	adds	r3, #4
 8006fe6:	4619      	mov	r1, r3
 8006fe8:	4610      	mov	r0, r2
 8006fea:	f7fe f9e2 	bl	80053b2 <vListInsert>
 8006fee:	e012      	b.n	8007016 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006ff0:	687a      	ldr	r2, [r7, #4]
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d206      	bcs.n	8007006 <prvInsertTimerInActiveList+0x62>
 8006ff8:	68ba      	ldr	r2, [r7, #8]
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	d302      	bcc.n	8007006 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007000:	2301      	movs	r3, #1
 8007002:	617b      	str	r3, [r7, #20]
 8007004:	e007      	b.n	8007016 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007006:	4b07      	ldr	r3, [pc, #28]	; (8007024 <prvInsertTimerInActiveList+0x80>)
 8007008:	681a      	ldr	r2, [r3, #0]
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	3304      	adds	r3, #4
 800700e:	4619      	mov	r1, r3
 8007010:	4610      	mov	r0, r2
 8007012:	f7fe f9ce 	bl	80053b2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007016:	697b      	ldr	r3, [r7, #20]
}
 8007018:	4618      	mov	r0, r3
 800701a:	3718      	adds	r7, #24
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}
 8007020:	20008220 	.word	0x20008220
 8007024:	2000821c 	.word	0x2000821c

08007028 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b08e      	sub	sp, #56	; 0x38
 800702c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800702e:	e0ca      	b.n	80071c6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2b00      	cmp	r3, #0
 8007034:	da18      	bge.n	8007068 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007036:	1d3b      	adds	r3, r7, #4
 8007038:	3304      	adds	r3, #4
 800703a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800703c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800703e:	2b00      	cmp	r3, #0
 8007040:	d10a      	bne.n	8007058 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007046:	f383 8811 	msr	BASEPRI, r3
 800704a:	f3bf 8f6f 	isb	sy
 800704e:	f3bf 8f4f 	dsb	sy
 8007052:	61fb      	str	r3, [r7, #28]
}
 8007054:	bf00      	nop
 8007056:	e7fe      	b.n	8007056 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800705e:	6850      	ldr	r0, [r2, #4]
 8007060:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007062:	6892      	ldr	r2, [r2, #8]
 8007064:	4611      	mov	r1, r2
 8007066:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2b00      	cmp	r3, #0
 800706c:	f2c0 80aa 	blt.w	80071c4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007076:	695b      	ldr	r3, [r3, #20]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d004      	beq.n	8007086 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800707c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800707e:	3304      	adds	r3, #4
 8007080:	4618      	mov	r0, r3
 8007082:	f7fe f9cf 	bl	8005424 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007086:	463b      	mov	r3, r7
 8007088:	4618      	mov	r0, r3
 800708a:	f7ff ff6b 	bl	8006f64 <prvSampleTimeNow>
 800708e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2b09      	cmp	r3, #9
 8007094:	f200 8097 	bhi.w	80071c6 <prvProcessReceivedCommands+0x19e>
 8007098:	a201      	add	r2, pc, #4	; (adr r2, 80070a0 <prvProcessReceivedCommands+0x78>)
 800709a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800709e:	bf00      	nop
 80070a0:	080070c9 	.word	0x080070c9
 80070a4:	080070c9 	.word	0x080070c9
 80070a8:	080070c9 	.word	0x080070c9
 80070ac:	0800713d 	.word	0x0800713d
 80070b0:	08007151 	.word	0x08007151
 80070b4:	0800719b 	.word	0x0800719b
 80070b8:	080070c9 	.word	0x080070c9
 80070bc:	080070c9 	.word	0x080070c9
 80070c0:	0800713d 	.word	0x0800713d
 80070c4:	08007151 	.word	0x08007151
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80070c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80070ce:	f043 0301 	orr.w	r3, r3, #1
 80070d2:	b2da      	uxtb	r2, r3
 80070d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80070da:	68ba      	ldr	r2, [r7, #8]
 80070dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070de:	699b      	ldr	r3, [r3, #24]
 80070e0:	18d1      	adds	r1, r2, r3
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070e8:	f7ff ff5c 	bl	8006fa4 <prvInsertTimerInActiveList>
 80070ec:	4603      	mov	r3, r0
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d069      	beq.n	80071c6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80070f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070f4:	6a1b      	ldr	r3, [r3, #32]
 80070f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070f8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80070fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007100:	f003 0304 	and.w	r3, r3, #4
 8007104:	2b00      	cmp	r3, #0
 8007106:	d05e      	beq.n	80071c6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007108:	68ba      	ldr	r2, [r7, #8]
 800710a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800710c:	699b      	ldr	r3, [r3, #24]
 800710e:	441a      	add	r2, r3
 8007110:	2300      	movs	r3, #0
 8007112:	9300      	str	r3, [sp, #0]
 8007114:	2300      	movs	r3, #0
 8007116:	2100      	movs	r1, #0
 8007118:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800711a:	f7ff fe05 	bl	8006d28 <xTimerGenericCommand>
 800711e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007120:	6a3b      	ldr	r3, [r7, #32]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d14f      	bne.n	80071c6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800712a:	f383 8811 	msr	BASEPRI, r3
 800712e:	f3bf 8f6f 	isb	sy
 8007132:	f3bf 8f4f 	dsb	sy
 8007136:	61bb      	str	r3, [r7, #24]
}
 8007138:	bf00      	nop
 800713a:	e7fe      	b.n	800713a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800713c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800713e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007142:	f023 0301 	bic.w	r3, r3, #1
 8007146:	b2da      	uxtb	r2, r3
 8007148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800714a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800714e:	e03a      	b.n	80071c6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007152:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007156:	f043 0301 	orr.w	r3, r3, #1
 800715a:	b2da      	uxtb	r2, r3
 800715c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800715e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007162:	68ba      	ldr	r2, [r7, #8]
 8007164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007166:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800716a:	699b      	ldr	r3, [r3, #24]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d10a      	bne.n	8007186 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007174:	f383 8811 	msr	BASEPRI, r3
 8007178:	f3bf 8f6f 	isb	sy
 800717c:	f3bf 8f4f 	dsb	sy
 8007180:	617b      	str	r3, [r7, #20]
}
 8007182:	bf00      	nop
 8007184:	e7fe      	b.n	8007184 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007188:	699a      	ldr	r2, [r3, #24]
 800718a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800718c:	18d1      	adds	r1, r2, r3
 800718e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007190:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007192:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007194:	f7ff ff06 	bl	8006fa4 <prvInsertTimerInActiveList>
					break;
 8007198:	e015      	b.n	80071c6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800719a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800719c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80071a0:	f003 0302 	and.w	r3, r3, #2
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d103      	bne.n	80071b0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80071a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071aa:	f000 fbe1 	bl	8007970 <vPortFree>
 80071ae:	e00a      	b.n	80071c6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80071b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80071b6:	f023 0301 	bic.w	r3, r3, #1
 80071ba:	b2da      	uxtb	r2, r3
 80071bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80071c2:	e000      	b.n	80071c6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80071c4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80071c6:	4b08      	ldr	r3, [pc, #32]	; (80071e8 <prvProcessReceivedCommands+0x1c0>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	1d39      	adds	r1, r7, #4
 80071cc:	2200      	movs	r2, #0
 80071ce:	4618      	mov	r0, r3
 80071d0:	f7fe fbf0 	bl	80059b4 <xQueueReceive>
 80071d4:	4603      	mov	r3, r0
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	f47f af2a 	bne.w	8007030 <prvProcessReceivedCommands+0x8>
	}
}
 80071dc:	bf00      	nop
 80071de:	bf00      	nop
 80071e0:	3730      	adds	r7, #48	; 0x30
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}
 80071e6:	bf00      	nop
 80071e8:	20008224 	.word	0x20008224

080071ec <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b088      	sub	sp, #32
 80071f0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80071f2:	e048      	b.n	8007286 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80071f4:	4b2d      	ldr	r3, [pc, #180]	; (80072ac <prvSwitchTimerLists+0xc0>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	68db      	ldr	r3, [r3, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071fe:	4b2b      	ldr	r3, [pc, #172]	; (80072ac <prvSwitchTimerLists+0xc0>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	68db      	ldr	r3, [r3, #12]
 8007204:	68db      	ldr	r3, [r3, #12]
 8007206:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	3304      	adds	r3, #4
 800720c:	4618      	mov	r0, r3
 800720e:	f7fe f909 	bl	8005424 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	6a1b      	ldr	r3, [r3, #32]
 8007216:	68f8      	ldr	r0, [r7, #12]
 8007218:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007220:	f003 0304 	and.w	r3, r3, #4
 8007224:	2b00      	cmp	r3, #0
 8007226:	d02e      	beq.n	8007286 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	699b      	ldr	r3, [r3, #24]
 800722c:	693a      	ldr	r2, [r7, #16]
 800722e:	4413      	add	r3, r2
 8007230:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007232:	68ba      	ldr	r2, [r7, #8]
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	429a      	cmp	r2, r3
 8007238:	d90e      	bls.n	8007258 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	68ba      	ldr	r2, [r7, #8]
 800723e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	68fa      	ldr	r2, [r7, #12]
 8007244:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007246:	4b19      	ldr	r3, [pc, #100]	; (80072ac <prvSwitchTimerLists+0xc0>)
 8007248:	681a      	ldr	r2, [r3, #0]
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	3304      	adds	r3, #4
 800724e:	4619      	mov	r1, r3
 8007250:	4610      	mov	r0, r2
 8007252:	f7fe f8ae 	bl	80053b2 <vListInsert>
 8007256:	e016      	b.n	8007286 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007258:	2300      	movs	r3, #0
 800725a:	9300      	str	r3, [sp, #0]
 800725c:	2300      	movs	r3, #0
 800725e:	693a      	ldr	r2, [r7, #16]
 8007260:	2100      	movs	r1, #0
 8007262:	68f8      	ldr	r0, [r7, #12]
 8007264:	f7ff fd60 	bl	8006d28 <xTimerGenericCommand>
 8007268:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d10a      	bne.n	8007286 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007274:	f383 8811 	msr	BASEPRI, r3
 8007278:	f3bf 8f6f 	isb	sy
 800727c:	f3bf 8f4f 	dsb	sy
 8007280:	603b      	str	r3, [r7, #0]
}
 8007282:	bf00      	nop
 8007284:	e7fe      	b.n	8007284 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007286:	4b09      	ldr	r3, [pc, #36]	; (80072ac <prvSwitchTimerLists+0xc0>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d1b1      	bne.n	80071f4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007290:	4b06      	ldr	r3, [pc, #24]	; (80072ac <prvSwitchTimerLists+0xc0>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007296:	4b06      	ldr	r3, [pc, #24]	; (80072b0 <prvSwitchTimerLists+0xc4>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a04      	ldr	r2, [pc, #16]	; (80072ac <prvSwitchTimerLists+0xc0>)
 800729c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800729e:	4a04      	ldr	r2, [pc, #16]	; (80072b0 <prvSwitchTimerLists+0xc4>)
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	6013      	str	r3, [r2, #0]
}
 80072a4:	bf00      	nop
 80072a6:	3718      	adds	r7, #24
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}
 80072ac:	2000821c 	.word	0x2000821c
 80072b0:	20008220 	.word	0x20008220

080072b4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b082      	sub	sp, #8
 80072b8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80072ba:	f000 f96b 	bl	8007594 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80072be:	4b15      	ldr	r3, [pc, #84]	; (8007314 <prvCheckForValidListAndQueue+0x60>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d120      	bne.n	8007308 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80072c6:	4814      	ldr	r0, [pc, #80]	; (8007318 <prvCheckForValidListAndQueue+0x64>)
 80072c8:	f7fe f822 	bl	8005310 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80072cc:	4813      	ldr	r0, [pc, #76]	; (800731c <prvCheckForValidListAndQueue+0x68>)
 80072ce:	f7fe f81f 	bl	8005310 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80072d2:	4b13      	ldr	r3, [pc, #76]	; (8007320 <prvCheckForValidListAndQueue+0x6c>)
 80072d4:	4a10      	ldr	r2, [pc, #64]	; (8007318 <prvCheckForValidListAndQueue+0x64>)
 80072d6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80072d8:	4b12      	ldr	r3, [pc, #72]	; (8007324 <prvCheckForValidListAndQueue+0x70>)
 80072da:	4a10      	ldr	r2, [pc, #64]	; (800731c <prvCheckForValidListAndQueue+0x68>)
 80072dc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80072de:	2300      	movs	r3, #0
 80072e0:	9300      	str	r3, [sp, #0]
 80072e2:	4b11      	ldr	r3, [pc, #68]	; (8007328 <prvCheckForValidListAndQueue+0x74>)
 80072e4:	4a11      	ldr	r2, [pc, #68]	; (800732c <prvCheckForValidListAndQueue+0x78>)
 80072e6:	2110      	movs	r1, #16
 80072e8:	200a      	movs	r0, #10
 80072ea:	f7fe f92d 	bl	8005548 <xQueueGenericCreateStatic>
 80072ee:	4603      	mov	r3, r0
 80072f0:	4a08      	ldr	r2, [pc, #32]	; (8007314 <prvCheckForValidListAndQueue+0x60>)
 80072f2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80072f4:	4b07      	ldr	r3, [pc, #28]	; (8007314 <prvCheckForValidListAndQueue+0x60>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d005      	beq.n	8007308 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80072fc:	4b05      	ldr	r3, [pc, #20]	; (8007314 <prvCheckForValidListAndQueue+0x60>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	490b      	ldr	r1, [pc, #44]	; (8007330 <prvCheckForValidListAndQueue+0x7c>)
 8007302:	4618      	mov	r0, r3
 8007304:	f7fe fd46 	bl	8005d94 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007308:	f000 f974 	bl	80075f4 <vPortExitCritical>
}
 800730c:	bf00      	nop
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}
 8007312:	bf00      	nop
 8007314:	20008224 	.word	0x20008224
 8007318:	200081f4 	.word	0x200081f4
 800731c:	20008208 	.word	0x20008208
 8007320:	2000821c 	.word	0x2000821c
 8007324:	20008220 	.word	0x20008220
 8007328:	200082d0 	.word	0x200082d0
 800732c:	20008230 	.word	0x20008230
 8007330:	08011efc 	.word	0x08011efc

08007334 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007334:	b480      	push	{r7}
 8007336:	b085      	sub	sp, #20
 8007338:	af00      	add	r7, sp, #0
 800733a:	60f8      	str	r0, [r7, #12]
 800733c:	60b9      	str	r1, [r7, #8]
 800733e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	3b04      	subs	r3, #4
 8007344:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800734c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	3b04      	subs	r3, #4
 8007352:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	f023 0201 	bic.w	r2, r3, #1
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	3b04      	subs	r3, #4
 8007362:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007364:	4a0c      	ldr	r2, [pc, #48]	; (8007398 <pxPortInitialiseStack+0x64>)
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	3b14      	subs	r3, #20
 800736e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007370:	687a      	ldr	r2, [r7, #4]
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	3b04      	subs	r3, #4
 800737a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	f06f 0202 	mvn.w	r2, #2
 8007382:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	3b20      	subs	r3, #32
 8007388:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800738a:	68fb      	ldr	r3, [r7, #12]
}
 800738c:	4618      	mov	r0, r3
 800738e:	3714      	adds	r7, #20
 8007390:	46bd      	mov	sp, r7
 8007392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007396:	4770      	bx	lr
 8007398:	0800739d 	.word	0x0800739d

0800739c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800739c:	b480      	push	{r7}
 800739e:	b085      	sub	sp, #20
 80073a0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80073a2:	2300      	movs	r3, #0
 80073a4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80073a6:	4b12      	ldr	r3, [pc, #72]	; (80073f0 <prvTaskExitError+0x54>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80073ae:	d00a      	beq.n	80073c6 <prvTaskExitError+0x2a>
	__asm volatile
 80073b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b4:	f383 8811 	msr	BASEPRI, r3
 80073b8:	f3bf 8f6f 	isb	sy
 80073bc:	f3bf 8f4f 	dsb	sy
 80073c0:	60fb      	str	r3, [r7, #12]
}
 80073c2:	bf00      	nop
 80073c4:	e7fe      	b.n	80073c4 <prvTaskExitError+0x28>
	__asm volatile
 80073c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ca:	f383 8811 	msr	BASEPRI, r3
 80073ce:	f3bf 8f6f 	isb	sy
 80073d2:	f3bf 8f4f 	dsb	sy
 80073d6:	60bb      	str	r3, [r7, #8]
}
 80073d8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80073da:	bf00      	nop
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d0fc      	beq.n	80073dc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80073e2:	bf00      	nop
 80073e4:	bf00      	nop
 80073e6:	3714      	adds	r7, #20
 80073e8:	46bd      	mov	sp, r7
 80073ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ee:	4770      	bx	lr
 80073f0:	20000010 	.word	0x20000010
	...

08007400 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007400:	4b07      	ldr	r3, [pc, #28]	; (8007420 <pxCurrentTCBConst2>)
 8007402:	6819      	ldr	r1, [r3, #0]
 8007404:	6808      	ldr	r0, [r1, #0]
 8007406:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800740a:	f380 8809 	msr	PSP, r0
 800740e:	f3bf 8f6f 	isb	sy
 8007412:	f04f 0000 	mov.w	r0, #0
 8007416:	f380 8811 	msr	BASEPRI, r0
 800741a:	4770      	bx	lr
 800741c:	f3af 8000 	nop.w

08007420 <pxCurrentTCBConst2>:
 8007420:	20007cf4 	.word	0x20007cf4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007424:	bf00      	nop
 8007426:	bf00      	nop

08007428 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007428:	4808      	ldr	r0, [pc, #32]	; (800744c <prvPortStartFirstTask+0x24>)
 800742a:	6800      	ldr	r0, [r0, #0]
 800742c:	6800      	ldr	r0, [r0, #0]
 800742e:	f380 8808 	msr	MSP, r0
 8007432:	f04f 0000 	mov.w	r0, #0
 8007436:	f380 8814 	msr	CONTROL, r0
 800743a:	b662      	cpsie	i
 800743c:	b661      	cpsie	f
 800743e:	f3bf 8f4f 	dsb	sy
 8007442:	f3bf 8f6f 	isb	sy
 8007446:	df00      	svc	0
 8007448:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800744a:	bf00      	nop
 800744c:	e000ed08 	.word	0xe000ed08

08007450 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b086      	sub	sp, #24
 8007454:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007456:	4b46      	ldr	r3, [pc, #280]	; (8007570 <xPortStartScheduler+0x120>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4a46      	ldr	r2, [pc, #280]	; (8007574 <xPortStartScheduler+0x124>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d10a      	bne.n	8007476 <xPortStartScheduler+0x26>
	__asm volatile
 8007460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007464:	f383 8811 	msr	BASEPRI, r3
 8007468:	f3bf 8f6f 	isb	sy
 800746c:	f3bf 8f4f 	dsb	sy
 8007470:	613b      	str	r3, [r7, #16]
}
 8007472:	bf00      	nop
 8007474:	e7fe      	b.n	8007474 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007476:	4b3e      	ldr	r3, [pc, #248]	; (8007570 <xPortStartScheduler+0x120>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a3f      	ldr	r2, [pc, #252]	; (8007578 <xPortStartScheduler+0x128>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d10a      	bne.n	8007496 <xPortStartScheduler+0x46>
	__asm volatile
 8007480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007484:	f383 8811 	msr	BASEPRI, r3
 8007488:	f3bf 8f6f 	isb	sy
 800748c:	f3bf 8f4f 	dsb	sy
 8007490:	60fb      	str	r3, [r7, #12]
}
 8007492:	bf00      	nop
 8007494:	e7fe      	b.n	8007494 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007496:	4b39      	ldr	r3, [pc, #228]	; (800757c <xPortStartScheduler+0x12c>)
 8007498:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	781b      	ldrb	r3, [r3, #0]
 800749e:	b2db      	uxtb	r3, r3
 80074a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	22ff      	movs	r2, #255	; 0xff
 80074a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	781b      	ldrb	r3, [r3, #0]
 80074ac:	b2db      	uxtb	r3, r3
 80074ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80074b0:	78fb      	ldrb	r3, [r7, #3]
 80074b2:	b2db      	uxtb	r3, r3
 80074b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80074b8:	b2da      	uxtb	r2, r3
 80074ba:	4b31      	ldr	r3, [pc, #196]	; (8007580 <xPortStartScheduler+0x130>)
 80074bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80074be:	4b31      	ldr	r3, [pc, #196]	; (8007584 <xPortStartScheduler+0x134>)
 80074c0:	2207      	movs	r2, #7
 80074c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80074c4:	e009      	b.n	80074da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80074c6:	4b2f      	ldr	r3, [pc, #188]	; (8007584 <xPortStartScheduler+0x134>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	3b01      	subs	r3, #1
 80074cc:	4a2d      	ldr	r2, [pc, #180]	; (8007584 <xPortStartScheduler+0x134>)
 80074ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80074d0:	78fb      	ldrb	r3, [r7, #3]
 80074d2:	b2db      	uxtb	r3, r3
 80074d4:	005b      	lsls	r3, r3, #1
 80074d6:	b2db      	uxtb	r3, r3
 80074d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80074da:	78fb      	ldrb	r3, [r7, #3]
 80074dc:	b2db      	uxtb	r3, r3
 80074de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074e2:	2b80      	cmp	r3, #128	; 0x80
 80074e4:	d0ef      	beq.n	80074c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80074e6:	4b27      	ldr	r3, [pc, #156]	; (8007584 <xPortStartScheduler+0x134>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f1c3 0307 	rsb	r3, r3, #7
 80074ee:	2b04      	cmp	r3, #4
 80074f0:	d00a      	beq.n	8007508 <xPortStartScheduler+0xb8>
	__asm volatile
 80074f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074f6:	f383 8811 	msr	BASEPRI, r3
 80074fa:	f3bf 8f6f 	isb	sy
 80074fe:	f3bf 8f4f 	dsb	sy
 8007502:	60bb      	str	r3, [r7, #8]
}
 8007504:	bf00      	nop
 8007506:	e7fe      	b.n	8007506 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007508:	4b1e      	ldr	r3, [pc, #120]	; (8007584 <xPortStartScheduler+0x134>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	021b      	lsls	r3, r3, #8
 800750e:	4a1d      	ldr	r2, [pc, #116]	; (8007584 <xPortStartScheduler+0x134>)
 8007510:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007512:	4b1c      	ldr	r3, [pc, #112]	; (8007584 <xPortStartScheduler+0x134>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800751a:	4a1a      	ldr	r2, [pc, #104]	; (8007584 <xPortStartScheduler+0x134>)
 800751c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	b2da      	uxtb	r2, r3
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007526:	4b18      	ldr	r3, [pc, #96]	; (8007588 <xPortStartScheduler+0x138>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4a17      	ldr	r2, [pc, #92]	; (8007588 <xPortStartScheduler+0x138>)
 800752c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007530:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007532:	4b15      	ldr	r3, [pc, #84]	; (8007588 <xPortStartScheduler+0x138>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4a14      	ldr	r2, [pc, #80]	; (8007588 <xPortStartScheduler+0x138>)
 8007538:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800753c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800753e:	f000 f8dd 	bl	80076fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007542:	4b12      	ldr	r3, [pc, #72]	; (800758c <xPortStartScheduler+0x13c>)
 8007544:	2200      	movs	r2, #0
 8007546:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007548:	f000 f8fc 	bl	8007744 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800754c:	4b10      	ldr	r3, [pc, #64]	; (8007590 <xPortStartScheduler+0x140>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a0f      	ldr	r2, [pc, #60]	; (8007590 <xPortStartScheduler+0x140>)
 8007552:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007556:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007558:	f7ff ff66 	bl	8007428 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800755c:	f7ff f82a 	bl	80065b4 <vTaskSwitchContext>
	prvTaskExitError();
 8007560:	f7ff ff1c 	bl	800739c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007564:	2300      	movs	r3, #0
}
 8007566:	4618      	mov	r0, r3
 8007568:	3718      	adds	r7, #24
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}
 800756e:	bf00      	nop
 8007570:	e000ed00 	.word	0xe000ed00
 8007574:	410fc271 	.word	0x410fc271
 8007578:	410fc270 	.word	0x410fc270
 800757c:	e000e400 	.word	0xe000e400
 8007580:	20008320 	.word	0x20008320
 8007584:	20008324 	.word	0x20008324
 8007588:	e000ed20 	.word	0xe000ed20
 800758c:	20000010 	.word	0x20000010
 8007590:	e000ef34 	.word	0xe000ef34

08007594 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007594:	b480      	push	{r7}
 8007596:	b083      	sub	sp, #12
 8007598:	af00      	add	r7, sp, #0
	__asm volatile
 800759a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800759e:	f383 8811 	msr	BASEPRI, r3
 80075a2:	f3bf 8f6f 	isb	sy
 80075a6:	f3bf 8f4f 	dsb	sy
 80075aa:	607b      	str	r3, [r7, #4]
}
 80075ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80075ae:	4b0f      	ldr	r3, [pc, #60]	; (80075ec <vPortEnterCritical+0x58>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	3301      	adds	r3, #1
 80075b4:	4a0d      	ldr	r2, [pc, #52]	; (80075ec <vPortEnterCritical+0x58>)
 80075b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80075b8:	4b0c      	ldr	r3, [pc, #48]	; (80075ec <vPortEnterCritical+0x58>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	2b01      	cmp	r3, #1
 80075be:	d10f      	bne.n	80075e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80075c0:	4b0b      	ldr	r3, [pc, #44]	; (80075f0 <vPortEnterCritical+0x5c>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	b2db      	uxtb	r3, r3
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d00a      	beq.n	80075e0 <vPortEnterCritical+0x4c>
	__asm volatile
 80075ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ce:	f383 8811 	msr	BASEPRI, r3
 80075d2:	f3bf 8f6f 	isb	sy
 80075d6:	f3bf 8f4f 	dsb	sy
 80075da:	603b      	str	r3, [r7, #0]
}
 80075dc:	bf00      	nop
 80075de:	e7fe      	b.n	80075de <vPortEnterCritical+0x4a>
	}
}
 80075e0:	bf00      	nop
 80075e2:	370c      	adds	r7, #12
 80075e4:	46bd      	mov	sp, r7
 80075e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ea:	4770      	bx	lr
 80075ec:	20000010 	.word	0x20000010
 80075f0:	e000ed04 	.word	0xe000ed04

080075f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80075f4:	b480      	push	{r7}
 80075f6:	b083      	sub	sp, #12
 80075f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80075fa:	4b12      	ldr	r3, [pc, #72]	; (8007644 <vPortExitCritical+0x50>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d10a      	bne.n	8007618 <vPortExitCritical+0x24>
	__asm volatile
 8007602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007606:	f383 8811 	msr	BASEPRI, r3
 800760a:	f3bf 8f6f 	isb	sy
 800760e:	f3bf 8f4f 	dsb	sy
 8007612:	607b      	str	r3, [r7, #4]
}
 8007614:	bf00      	nop
 8007616:	e7fe      	b.n	8007616 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007618:	4b0a      	ldr	r3, [pc, #40]	; (8007644 <vPortExitCritical+0x50>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	3b01      	subs	r3, #1
 800761e:	4a09      	ldr	r2, [pc, #36]	; (8007644 <vPortExitCritical+0x50>)
 8007620:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007622:	4b08      	ldr	r3, [pc, #32]	; (8007644 <vPortExitCritical+0x50>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d105      	bne.n	8007636 <vPortExitCritical+0x42>
 800762a:	2300      	movs	r3, #0
 800762c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	f383 8811 	msr	BASEPRI, r3
}
 8007634:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007636:	bf00      	nop
 8007638:	370c      	adds	r7, #12
 800763a:	46bd      	mov	sp, r7
 800763c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007640:	4770      	bx	lr
 8007642:	bf00      	nop
 8007644:	20000010 	.word	0x20000010
	...

08007650 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007650:	f3ef 8009 	mrs	r0, PSP
 8007654:	f3bf 8f6f 	isb	sy
 8007658:	4b15      	ldr	r3, [pc, #84]	; (80076b0 <pxCurrentTCBConst>)
 800765a:	681a      	ldr	r2, [r3, #0]
 800765c:	f01e 0f10 	tst.w	lr, #16
 8007660:	bf08      	it	eq
 8007662:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007666:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800766a:	6010      	str	r0, [r2, #0]
 800766c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007670:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007674:	f380 8811 	msr	BASEPRI, r0
 8007678:	f3bf 8f4f 	dsb	sy
 800767c:	f3bf 8f6f 	isb	sy
 8007680:	f7fe ff98 	bl	80065b4 <vTaskSwitchContext>
 8007684:	f04f 0000 	mov.w	r0, #0
 8007688:	f380 8811 	msr	BASEPRI, r0
 800768c:	bc09      	pop	{r0, r3}
 800768e:	6819      	ldr	r1, [r3, #0]
 8007690:	6808      	ldr	r0, [r1, #0]
 8007692:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007696:	f01e 0f10 	tst.w	lr, #16
 800769a:	bf08      	it	eq
 800769c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80076a0:	f380 8809 	msr	PSP, r0
 80076a4:	f3bf 8f6f 	isb	sy
 80076a8:	4770      	bx	lr
 80076aa:	bf00      	nop
 80076ac:	f3af 8000 	nop.w

080076b0 <pxCurrentTCBConst>:
 80076b0:	20007cf4 	.word	0x20007cf4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80076b4:	bf00      	nop
 80076b6:	bf00      	nop

080076b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b082      	sub	sp, #8
 80076bc:	af00      	add	r7, sp, #0
	__asm volatile
 80076be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076c2:	f383 8811 	msr	BASEPRI, r3
 80076c6:	f3bf 8f6f 	isb	sy
 80076ca:	f3bf 8f4f 	dsb	sy
 80076ce:	607b      	str	r3, [r7, #4]
}
 80076d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80076d2:	f7fe feb5 	bl	8006440 <xTaskIncrementTick>
 80076d6:	4603      	mov	r3, r0
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d003      	beq.n	80076e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80076dc:	4b06      	ldr	r3, [pc, #24]	; (80076f8 <xPortSysTickHandler+0x40>)
 80076de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076e2:	601a      	str	r2, [r3, #0]
 80076e4:	2300      	movs	r3, #0
 80076e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	f383 8811 	msr	BASEPRI, r3
}
 80076ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80076f0:	bf00      	nop
 80076f2:	3708      	adds	r7, #8
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}
 80076f8:	e000ed04 	.word	0xe000ed04

080076fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80076fc:	b480      	push	{r7}
 80076fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007700:	4b0b      	ldr	r3, [pc, #44]	; (8007730 <vPortSetupTimerInterrupt+0x34>)
 8007702:	2200      	movs	r2, #0
 8007704:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007706:	4b0b      	ldr	r3, [pc, #44]	; (8007734 <vPortSetupTimerInterrupt+0x38>)
 8007708:	2200      	movs	r2, #0
 800770a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800770c:	4b0a      	ldr	r3, [pc, #40]	; (8007738 <vPortSetupTimerInterrupt+0x3c>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4a0a      	ldr	r2, [pc, #40]	; (800773c <vPortSetupTimerInterrupt+0x40>)
 8007712:	fba2 2303 	umull	r2, r3, r2, r3
 8007716:	099b      	lsrs	r3, r3, #6
 8007718:	4a09      	ldr	r2, [pc, #36]	; (8007740 <vPortSetupTimerInterrupt+0x44>)
 800771a:	3b01      	subs	r3, #1
 800771c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800771e:	4b04      	ldr	r3, [pc, #16]	; (8007730 <vPortSetupTimerInterrupt+0x34>)
 8007720:	2207      	movs	r2, #7
 8007722:	601a      	str	r2, [r3, #0]
}
 8007724:	bf00      	nop
 8007726:	46bd      	mov	sp, r7
 8007728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772c:	4770      	bx	lr
 800772e:	bf00      	nop
 8007730:	e000e010 	.word	0xe000e010
 8007734:	e000e018 	.word	0xe000e018
 8007738:	20000004 	.word	0x20000004
 800773c:	10624dd3 	.word	0x10624dd3
 8007740:	e000e014 	.word	0xe000e014

08007744 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007744:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007754 <vPortEnableVFP+0x10>
 8007748:	6801      	ldr	r1, [r0, #0]
 800774a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800774e:	6001      	str	r1, [r0, #0]
 8007750:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007752:	bf00      	nop
 8007754:	e000ed88 	.word	0xe000ed88

08007758 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007758:	b480      	push	{r7}
 800775a:	b085      	sub	sp, #20
 800775c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800775e:	f3ef 8305 	mrs	r3, IPSR
 8007762:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	2b0f      	cmp	r3, #15
 8007768:	d914      	bls.n	8007794 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800776a:	4a17      	ldr	r2, [pc, #92]	; (80077c8 <vPortValidateInterruptPriority+0x70>)
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	4413      	add	r3, r2
 8007770:	781b      	ldrb	r3, [r3, #0]
 8007772:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007774:	4b15      	ldr	r3, [pc, #84]	; (80077cc <vPortValidateInterruptPriority+0x74>)
 8007776:	781b      	ldrb	r3, [r3, #0]
 8007778:	7afa      	ldrb	r2, [r7, #11]
 800777a:	429a      	cmp	r2, r3
 800777c:	d20a      	bcs.n	8007794 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800777e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007782:	f383 8811 	msr	BASEPRI, r3
 8007786:	f3bf 8f6f 	isb	sy
 800778a:	f3bf 8f4f 	dsb	sy
 800778e:	607b      	str	r3, [r7, #4]
}
 8007790:	bf00      	nop
 8007792:	e7fe      	b.n	8007792 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007794:	4b0e      	ldr	r3, [pc, #56]	; (80077d0 <vPortValidateInterruptPriority+0x78>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800779c:	4b0d      	ldr	r3, [pc, #52]	; (80077d4 <vPortValidateInterruptPriority+0x7c>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	429a      	cmp	r2, r3
 80077a2:	d90a      	bls.n	80077ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80077a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077a8:	f383 8811 	msr	BASEPRI, r3
 80077ac:	f3bf 8f6f 	isb	sy
 80077b0:	f3bf 8f4f 	dsb	sy
 80077b4:	603b      	str	r3, [r7, #0]
}
 80077b6:	bf00      	nop
 80077b8:	e7fe      	b.n	80077b8 <vPortValidateInterruptPriority+0x60>
	}
 80077ba:	bf00      	nop
 80077bc:	3714      	adds	r7, #20
 80077be:	46bd      	mov	sp, r7
 80077c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c4:	4770      	bx	lr
 80077c6:	bf00      	nop
 80077c8:	e000e3f0 	.word	0xe000e3f0
 80077cc:	20008320 	.word	0x20008320
 80077d0:	e000ed0c 	.word	0xe000ed0c
 80077d4:	20008324 	.word	0x20008324

080077d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b08a      	sub	sp, #40	; 0x28
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80077e0:	2300      	movs	r3, #0
 80077e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80077e4:	f7fe fd70 	bl	80062c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80077e8:	4b5b      	ldr	r3, [pc, #364]	; (8007958 <pvPortMalloc+0x180>)
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d101      	bne.n	80077f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80077f0:	f000 f920 	bl	8007a34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80077f4:	4b59      	ldr	r3, [pc, #356]	; (800795c <pvPortMalloc+0x184>)
 80077f6:	681a      	ldr	r2, [r3, #0]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	4013      	ands	r3, r2
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	f040 8093 	bne.w	8007928 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d01d      	beq.n	8007844 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007808:	2208      	movs	r2, #8
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	4413      	add	r3, r2
 800780e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f003 0307 	and.w	r3, r3, #7
 8007816:	2b00      	cmp	r3, #0
 8007818:	d014      	beq.n	8007844 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f023 0307 	bic.w	r3, r3, #7
 8007820:	3308      	adds	r3, #8
 8007822:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f003 0307 	and.w	r3, r3, #7
 800782a:	2b00      	cmp	r3, #0
 800782c:	d00a      	beq.n	8007844 <pvPortMalloc+0x6c>
	__asm volatile
 800782e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007832:	f383 8811 	msr	BASEPRI, r3
 8007836:	f3bf 8f6f 	isb	sy
 800783a:	f3bf 8f4f 	dsb	sy
 800783e:	617b      	str	r3, [r7, #20]
}
 8007840:	bf00      	nop
 8007842:	e7fe      	b.n	8007842 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d06e      	beq.n	8007928 <pvPortMalloc+0x150>
 800784a:	4b45      	ldr	r3, [pc, #276]	; (8007960 <pvPortMalloc+0x188>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	687a      	ldr	r2, [r7, #4]
 8007850:	429a      	cmp	r2, r3
 8007852:	d869      	bhi.n	8007928 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007854:	4b43      	ldr	r3, [pc, #268]	; (8007964 <pvPortMalloc+0x18c>)
 8007856:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007858:	4b42      	ldr	r3, [pc, #264]	; (8007964 <pvPortMalloc+0x18c>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800785e:	e004      	b.n	800786a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007862:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800786a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800786c:	685b      	ldr	r3, [r3, #4]
 800786e:	687a      	ldr	r2, [r7, #4]
 8007870:	429a      	cmp	r2, r3
 8007872:	d903      	bls.n	800787c <pvPortMalloc+0xa4>
 8007874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d1f1      	bne.n	8007860 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800787c:	4b36      	ldr	r3, [pc, #216]	; (8007958 <pvPortMalloc+0x180>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007882:	429a      	cmp	r2, r3
 8007884:	d050      	beq.n	8007928 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007886:	6a3b      	ldr	r3, [r7, #32]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	2208      	movs	r2, #8
 800788c:	4413      	add	r3, r2
 800788e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007892:	681a      	ldr	r2, [r3, #0]
 8007894:	6a3b      	ldr	r3, [r7, #32]
 8007896:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800789a:	685a      	ldr	r2, [r3, #4]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	1ad2      	subs	r2, r2, r3
 80078a0:	2308      	movs	r3, #8
 80078a2:	005b      	lsls	r3, r3, #1
 80078a4:	429a      	cmp	r2, r3
 80078a6:	d91f      	bls.n	80078e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80078a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	4413      	add	r3, r2
 80078ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80078b0:	69bb      	ldr	r3, [r7, #24]
 80078b2:	f003 0307 	and.w	r3, r3, #7
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d00a      	beq.n	80078d0 <pvPortMalloc+0xf8>
	__asm volatile
 80078ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078be:	f383 8811 	msr	BASEPRI, r3
 80078c2:	f3bf 8f6f 	isb	sy
 80078c6:	f3bf 8f4f 	dsb	sy
 80078ca:	613b      	str	r3, [r7, #16]
}
 80078cc:	bf00      	nop
 80078ce:	e7fe      	b.n	80078ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80078d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d2:	685a      	ldr	r2, [r3, #4]
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	1ad2      	subs	r2, r2, r3
 80078d8:	69bb      	ldr	r3, [r7, #24]
 80078da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80078dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078de:	687a      	ldr	r2, [r7, #4]
 80078e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80078e2:	69b8      	ldr	r0, [r7, #24]
 80078e4:	f000 f908 	bl	8007af8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80078e8:	4b1d      	ldr	r3, [pc, #116]	; (8007960 <pvPortMalloc+0x188>)
 80078ea:	681a      	ldr	r2, [r3, #0]
 80078ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ee:	685b      	ldr	r3, [r3, #4]
 80078f0:	1ad3      	subs	r3, r2, r3
 80078f2:	4a1b      	ldr	r2, [pc, #108]	; (8007960 <pvPortMalloc+0x188>)
 80078f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80078f6:	4b1a      	ldr	r3, [pc, #104]	; (8007960 <pvPortMalloc+0x188>)
 80078f8:	681a      	ldr	r2, [r3, #0]
 80078fa:	4b1b      	ldr	r3, [pc, #108]	; (8007968 <pvPortMalloc+0x190>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	429a      	cmp	r2, r3
 8007900:	d203      	bcs.n	800790a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007902:	4b17      	ldr	r3, [pc, #92]	; (8007960 <pvPortMalloc+0x188>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	4a18      	ldr	r2, [pc, #96]	; (8007968 <pvPortMalloc+0x190>)
 8007908:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800790a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800790c:	685a      	ldr	r2, [r3, #4]
 800790e:	4b13      	ldr	r3, [pc, #76]	; (800795c <pvPortMalloc+0x184>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	431a      	orrs	r2, r3
 8007914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007916:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800791a:	2200      	movs	r2, #0
 800791c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800791e:	4b13      	ldr	r3, [pc, #76]	; (800796c <pvPortMalloc+0x194>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	3301      	adds	r3, #1
 8007924:	4a11      	ldr	r2, [pc, #68]	; (800796c <pvPortMalloc+0x194>)
 8007926:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007928:	f7fe fcdc 	bl	80062e4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800792c:	69fb      	ldr	r3, [r7, #28]
 800792e:	f003 0307 	and.w	r3, r3, #7
 8007932:	2b00      	cmp	r3, #0
 8007934:	d00a      	beq.n	800794c <pvPortMalloc+0x174>
	__asm volatile
 8007936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800793a:	f383 8811 	msr	BASEPRI, r3
 800793e:	f3bf 8f6f 	isb	sy
 8007942:	f3bf 8f4f 	dsb	sy
 8007946:	60fb      	str	r3, [r7, #12]
}
 8007948:	bf00      	nop
 800794a:	e7fe      	b.n	800794a <pvPortMalloc+0x172>
	return pvReturn;
 800794c:	69fb      	ldr	r3, [r7, #28]
}
 800794e:	4618      	mov	r0, r3
 8007950:	3728      	adds	r7, #40	; 0x28
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}
 8007956:	bf00      	nop
 8007958:	2000bf30 	.word	0x2000bf30
 800795c:	2000bf44 	.word	0x2000bf44
 8007960:	2000bf34 	.word	0x2000bf34
 8007964:	2000bf28 	.word	0x2000bf28
 8007968:	2000bf38 	.word	0x2000bf38
 800796c:	2000bf3c 	.word	0x2000bf3c

08007970 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b086      	sub	sp, #24
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d04d      	beq.n	8007a1e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007982:	2308      	movs	r3, #8
 8007984:	425b      	negs	r3, r3
 8007986:	697a      	ldr	r2, [r7, #20]
 8007988:	4413      	add	r3, r2
 800798a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800798c:	697b      	ldr	r3, [r7, #20]
 800798e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	685a      	ldr	r2, [r3, #4]
 8007994:	4b24      	ldr	r3, [pc, #144]	; (8007a28 <vPortFree+0xb8>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4013      	ands	r3, r2
 800799a:	2b00      	cmp	r3, #0
 800799c:	d10a      	bne.n	80079b4 <vPortFree+0x44>
	__asm volatile
 800799e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a2:	f383 8811 	msr	BASEPRI, r3
 80079a6:	f3bf 8f6f 	isb	sy
 80079aa:	f3bf 8f4f 	dsb	sy
 80079ae:	60fb      	str	r3, [r7, #12]
}
 80079b0:	bf00      	nop
 80079b2:	e7fe      	b.n	80079b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80079b4:	693b      	ldr	r3, [r7, #16]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d00a      	beq.n	80079d2 <vPortFree+0x62>
	__asm volatile
 80079bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079c0:	f383 8811 	msr	BASEPRI, r3
 80079c4:	f3bf 8f6f 	isb	sy
 80079c8:	f3bf 8f4f 	dsb	sy
 80079cc:	60bb      	str	r3, [r7, #8]
}
 80079ce:	bf00      	nop
 80079d0:	e7fe      	b.n	80079d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80079d2:	693b      	ldr	r3, [r7, #16]
 80079d4:	685a      	ldr	r2, [r3, #4]
 80079d6:	4b14      	ldr	r3, [pc, #80]	; (8007a28 <vPortFree+0xb8>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4013      	ands	r3, r2
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d01e      	beq.n	8007a1e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d11a      	bne.n	8007a1e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80079e8:	693b      	ldr	r3, [r7, #16]
 80079ea:	685a      	ldr	r2, [r3, #4]
 80079ec:	4b0e      	ldr	r3, [pc, #56]	; (8007a28 <vPortFree+0xb8>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	43db      	mvns	r3, r3
 80079f2:	401a      	ands	r2, r3
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80079f8:	f7fe fc66 	bl	80062c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80079fc:	693b      	ldr	r3, [r7, #16]
 80079fe:	685a      	ldr	r2, [r3, #4]
 8007a00:	4b0a      	ldr	r3, [pc, #40]	; (8007a2c <vPortFree+0xbc>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	4413      	add	r3, r2
 8007a06:	4a09      	ldr	r2, [pc, #36]	; (8007a2c <vPortFree+0xbc>)
 8007a08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007a0a:	6938      	ldr	r0, [r7, #16]
 8007a0c:	f000 f874 	bl	8007af8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007a10:	4b07      	ldr	r3, [pc, #28]	; (8007a30 <vPortFree+0xc0>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	3301      	adds	r3, #1
 8007a16:	4a06      	ldr	r2, [pc, #24]	; (8007a30 <vPortFree+0xc0>)
 8007a18:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007a1a:	f7fe fc63 	bl	80062e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007a1e:	bf00      	nop
 8007a20:	3718      	adds	r7, #24
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}
 8007a26:	bf00      	nop
 8007a28:	2000bf44 	.word	0x2000bf44
 8007a2c:	2000bf34 	.word	0x2000bf34
 8007a30:	2000bf40 	.word	0x2000bf40

08007a34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007a34:	b480      	push	{r7}
 8007a36:	b085      	sub	sp, #20
 8007a38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007a3a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007a3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007a40:	4b27      	ldr	r3, [pc, #156]	; (8007ae0 <prvHeapInit+0xac>)
 8007a42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	f003 0307 	and.w	r3, r3, #7
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d00c      	beq.n	8007a68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	3307      	adds	r3, #7
 8007a52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	f023 0307 	bic.w	r3, r3, #7
 8007a5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007a5c:	68ba      	ldr	r2, [r7, #8]
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	1ad3      	subs	r3, r2, r3
 8007a62:	4a1f      	ldr	r2, [pc, #124]	; (8007ae0 <prvHeapInit+0xac>)
 8007a64:	4413      	add	r3, r2
 8007a66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007a6c:	4a1d      	ldr	r2, [pc, #116]	; (8007ae4 <prvHeapInit+0xb0>)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007a72:	4b1c      	ldr	r3, [pc, #112]	; (8007ae4 <prvHeapInit+0xb0>)
 8007a74:	2200      	movs	r2, #0
 8007a76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	68ba      	ldr	r2, [r7, #8]
 8007a7c:	4413      	add	r3, r2
 8007a7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007a80:	2208      	movs	r2, #8
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	1a9b      	subs	r3, r3, r2
 8007a86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	f023 0307 	bic.w	r3, r3, #7
 8007a8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	4a15      	ldr	r2, [pc, #84]	; (8007ae8 <prvHeapInit+0xb4>)
 8007a94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007a96:	4b14      	ldr	r3, [pc, #80]	; (8007ae8 <prvHeapInit+0xb4>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007a9e:	4b12      	ldr	r3, [pc, #72]	; (8007ae8 <prvHeapInit+0xb4>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	68fa      	ldr	r2, [r7, #12]
 8007aae:	1ad2      	subs	r2, r2, r3
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007ab4:	4b0c      	ldr	r3, [pc, #48]	; (8007ae8 <prvHeapInit+0xb4>)
 8007ab6:	681a      	ldr	r2, [r3, #0]
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	685b      	ldr	r3, [r3, #4]
 8007ac0:	4a0a      	ldr	r2, [pc, #40]	; (8007aec <prvHeapInit+0xb8>)
 8007ac2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	685b      	ldr	r3, [r3, #4]
 8007ac8:	4a09      	ldr	r2, [pc, #36]	; (8007af0 <prvHeapInit+0xbc>)
 8007aca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007acc:	4b09      	ldr	r3, [pc, #36]	; (8007af4 <prvHeapInit+0xc0>)
 8007ace:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007ad2:	601a      	str	r2, [r3, #0]
}
 8007ad4:	bf00      	nop
 8007ad6:	3714      	adds	r7, #20
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ade:	4770      	bx	lr
 8007ae0:	20008328 	.word	0x20008328
 8007ae4:	2000bf28 	.word	0x2000bf28
 8007ae8:	2000bf30 	.word	0x2000bf30
 8007aec:	2000bf38 	.word	0x2000bf38
 8007af0:	2000bf34 	.word	0x2000bf34
 8007af4:	2000bf44 	.word	0x2000bf44

08007af8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007af8:	b480      	push	{r7}
 8007afa:	b085      	sub	sp, #20
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007b00:	4b28      	ldr	r3, [pc, #160]	; (8007ba4 <prvInsertBlockIntoFreeList+0xac>)
 8007b02:	60fb      	str	r3, [r7, #12]
 8007b04:	e002      	b.n	8007b0c <prvInsertBlockIntoFreeList+0x14>
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	60fb      	str	r3, [r7, #12]
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	687a      	ldr	r2, [r7, #4]
 8007b12:	429a      	cmp	r2, r3
 8007b14:	d8f7      	bhi.n	8007b06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	685b      	ldr	r3, [r3, #4]
 8007b1e:	68ba      	ldr	r2, [r7, #8]
 8007b20:	4413      	add	r3, r2
 8007b22:	687a      	ldr	r2, [r7, #4]
 8007b24:	429a      	cmp	r2, r3
 8007b26:	d108      	bne.n	8007b3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	685a      	ldr	r2, [r3, #4]
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	441a      	add	r2, r3
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	685b      	ldr	r3, [r3, #4]
 8007b42:	68ba      	ldr	r2, [r7, #8]
 8007b44:	441a      	add	r2, r3
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	429a      	cmp	r2, r3
 8007b4c:	d118      	bne.n	8007b80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681a      	ldr	r2, [r3, #0]
 8007b52:	4b15      	ldr	r3, [pc, #84]	; (8007ba8 <prvInsertBlockIntoFreeList+0xb0>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	429a      	cmp	r2, r3
 8007b58:	d00d      	beq.n	8007b76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	685a      	ldr	r2, [r3, #4]
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	685b      	ldr	r3, [r3, #4]
 8007b64:	441a      	add	r2, r3
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	681a      	ldr	r2, [r3, #0]
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	601a      	str	r2, [r3, #0]
 8007b74:	e008      	b.n	8007b88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007b76:	4b0c      	ldr	r3, [pc, #48]	; (8007ba8 <prvInsertBlockIntoFreeList+0xb0>)
 8007b78:	681a      	ldr	r2, [r3, #0]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	601a      	str	r2, [r3, #0]
 8007b7e:	e003      	b.n	8007b88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681a      	ldr	r2, [r3, #0]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007b88:	68fa      	ldr	r2, [r7, #12]
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	429a      	cmp	r2, r3
 8007b8e:	d002      	beq.n	8007b96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	687a      	ldr	r2, [r7, #4]
 8007b94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b96:	bf00      	nop
 8007b98:	3714      	adds	r7, #20
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba0:	4770      	bx	lr
 8007ba2:	bf00      	nop
 8007ba4:	2000bf28 	.word	0x2000bf28
 8007ba8:	2000bf30 	.word	0x2000bf30

08007bac <rcl_get_zero_initialized_publisher>:
 8007bac:	4b01      	ldr	r3, [pc, #4]	; (8007bb4 <rcl_get_zero_initialized_publisher+0x8>)
 8007bae:	6818      	ldr	r0, [r3, #0]
 8007bb0:	4770      	bx	lr
 8007bb2:	bf00      	nop
 8007bb4:	08011f54 	.word	0x08011f54

08007bb8 <rcl_publisher_init>:
 8007bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bbc:	b091      	sub	sp, #68	; 0x44
 8007bbe:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8007bc0:	b3d7      	cbz	r7, 8007c38 <rcl_publisher_init+0x80>
 8007bc2:	f107 0950 	add.w	r9, r7, #80	; 0x50
 8007bc6:	4604      	mov	r4, r0
 8007bc8:	4648      	mov	r0, r9
 8007bca:	4688      	mov	r8, r1
 8007bcc:	4616      	mov	r6, r2
 8007bce:	461d      	mov	r5, r3
 8007bd0:	f000 fa30 	bl	8008034 <rcutils_allocator_is_valid>
 8007bd4:	b380      	cbz	r0, 8007c38 <rcl_publisher_init+0x80>
 8007bd6:	b37c      	cbz	r4, 8007c38 <rcl_publisher_init+0x80>
 8007bd8:	f8d4 a000 	ldr.w	sl, [r4]
 8007bdc:	f1ba 0f00 	cmp.w	sl, #0
 8007be0:	d004      	beq.n	8007bec <rcl_publisher_init+0x34>
 8007be2:	2564      	movs	r5, #100	; 0x64
 8007be4:	4628      	mov	r0, r5
 8007be6:	b011      	add	sp, #68	; 0x44
 8007be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bec:	4640      	mov	r0, r8
 8007bee:	f005 fb15 	bl	800d21c <rcl_node_is_valid>
 8007bf2:	b330      	cbz	r0, 8007c42 <rcl_publisher_init+0x8a>
 8007bf4:	b306      	cbz	r6, 8007c38 <rcl_publisher_init+0x80>
 8007bf6:	b1fd      	cbz	r5, 8007c38 <rcl_publisher_init+0x80>
 8007bf8:	46ce      	mov	lr, r9
 8007bfa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8007bfe:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
 8007c02:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8007c06:	f8de 3000 	ldr.w	r3, [lr]
 8007c0a:	f8cc 3000 	str.w	r3, [ip]
 8007c0e:	f000 fa4d 	bl	80080ac <rcutils_get_zero_initialized_string_map>
 8007c12:	ab10      	add	r3, sp, #64	; 0x40
 8007c14:	4684      	mov	ip, r0
 8007c16:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8007c1a:	f8cd c020 	str.w	ip, [sp, #32]
 8007c1e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8007c22:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 8007c26:	4651      	mov	r1, sl
 8007c28:	a808      	add	r0, sp, #32
 8007c2a:	f000 fab9 	bl	80081a0 <rcutils_string_map_init>
 8007c2e:	b150      	cbz	r0, 8007c46 <rcl_publisher_init+0x8e>
 8007c30:	280a      	cmp	r0, #10
 8007c32:	d013      	beq.n	8007c5c <rcl_publisher_init+0xa4>
 8007c34:	2501      	movs	r5, #1
 8007c36:	e7d5      	b.n	8007be4 <rcl_publisher_init+0x2c>
 8007c38:	250b      	movs	r5, #11
 8007c3a:	4628      	mov	r0, r5
 8007c3c:	b011      	add	sp, #68	; 0x44
 8007c3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c42:	25c8      	movs	r5, #200	; 0xc8
 8007c44:	e7ce      	b.n	8007be4 <rcl_publisher_init+0x2c>
 8007c46:	a808      	add	r0, sp, #32
 8007c48:	f004 ff1e 	bl	800ca88 <rcl_get_default_topic_name_substitutions>
 8007c4c:	4682      	mov	sl, r0
 8007c4e:	b138      	cbz	r0, 8007c60 <rcl_publisher_init+0xa8>
 8007c50:	a808      	add	r0, sp, #32
 8007c52:	f000 fae5 	bl	8008220 <rcutils_string_map_fini>
 8007c56:	f1ba 0f0a 	cmp.w	sl, #10
 8007c5a:	d1eb      	bne.n	8007c34 <rcl_publisher_init+0x7c>
 8007c5c:	250a      	movs	r5, #10
 8007c5e:	e7c1      	b.n	8007be4 <rcl_publisher_init+0x2c>
 8007c60:	4640      	mov	r0, r8
 8007c62:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8007c66:	f005 fae3 	bl	800d230 <rcl_node_get_name>
 8007c6a:	4682      	mov	sl, r0
 8007c6c:	4640      	mov	r0, r8
 8007c6e:	f005 fae7 	bl	800d240 <rcl_node_get_namespace>
 8007c72:	4686      	mov	lr, r0
 8007c74:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 8007c78:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
 8007c7c:	46ec      	mov	ip, sp
 8007c7e:	f8cd b014 	str.w	fp, [sp, #20]
 8007c82:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8007c86:	f8d9 3000 	ldr.w	r3, [r9]
 8007c8a:	f8cc 3000 	str.w	r3, [ip]
 8007c8e:	4628      	mov	r0, r5
 8007c90:	4651      	mov	r1, sl
 8007c92:	4672      	mov	r2, lr
 8007c94:	ab08      	add	r3, sp, #32
 8007c96:	f004 fd91 	bl	800c7bc <rcl_expand_topic_name>
 8007c9a:	4605      	mov	r5, r0
 8007c9c:	a808      	add	r0, sp, #32
 8007c9e:	f000 fabf 	bl	8008220 <rcutils_string_map_fini>
 8007ca2:	b920      	cbnz	r0, 8007cae <rcl_publisher_init+0xf6>
 8007ca4:	b15d      	cbz	r5, 8007cbe <rcl_publisher_init+0x106>
 8007ca6:	2d67      	cmp	r5, #103	; 0x67
 8007ca8:	d002      	beq.n	8007cb0 <rcl_publisher_init+0xf8>
 8007caa:	2d69      	cmp	r5, #105	; 0x69
 8007cac:	d05f      	beq.n	8007d6e <rcl_publisher_init+0x1b6>
 8007cae:	2501      	movs	r5, #1
 8007cb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007cb2:	2800      	cmp	r0, #0
 8007cb4:	d096      	beq.n	8007be4 <rcl_publisher_init+0x2c>
 8007cb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007cb8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007cba:	4798      	blx	r3
 8007cbc:	e792      	b.n	8007be4 <rcl_publisher_init+0x2c>
 8007cbe:	4640      	mov	r0, r8
 8007cc0:	f005 fac6 	bl	800d250 <rcl_node_get_options>
 8007cc4:	2800      	cmp	r0, #0
 8007cc6:	d0f2      	beq.n	8007cae <rcl_publisher_init+0xf6>
 8007cc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007cca:	f7f8 faab 	bl	8000224 <strlen>
 8007cce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007cd0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007cd2:	3001      	adds	r0, #1
 8007cd4:	4798      	blx	r3
 8007cd6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007cd8:	9107      	str	r1, [sp, #28]
 8007cda:	4681      	mov	r9, r0
 8007cdc:	4608      	mov	r0, r1
 8007cde:	f7f8 faa1 	bl	8000224 <strlen>
 8007ce2:	9907      	ldr	r1, [sp, #28]
 8007ce4:	1c42      	adds	r2, r0, #1
 8007ce6:	4648      	mov	r0, r9
 8007ce8:	f008 fd2e 	bl	8010748 <memcpy>
 8007cec:	462a      	mov	r2, r5
 8007cee:	4648      	mov	r0, r9
 8007cf0:	a90a      	add	r1, sp, #40	; 0x28
 8007cf2:	f000 fb0d 	bl	8008310 <rmw_validate_full_topic_name>
 8007cf6:	2800      	cmp	r0, #0
 8007cf8:	d137      	bne.n	8007d6a <rcl_publisher_init+0x1b2>
 8007cfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d138      	bne.n	8007d72 <rcl_publisher_init+0x1ba>
 8007d00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d02:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007d04:	20c0      	movs	r0, #192	; 0xc0
 8007d06:	4798      	blx	r3
 8007d08:	6020      	str	r0, [r4, #0]
 8007d0a:	b3a0      	cbz	r0, 8007d76 <rcl_publisher_init+0x1be>
 8007d0c:	4640      	mov	r0, r8
 8007d0e:	f005 faa7 	bl	800d260 <rcl_node_get_rmw_handle>
 8007d12:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8007d16:	9300      	str	r3, [sp, #0]
 8007d18:	4631      	mov	r1, r6
 8007d1a:	463b      	mov	r3, r7
 8007d1c:	464a      	mov	r2, r9
 8007d1e:	6825      	ldr	r5, [r4, #0]
 8007d20:	f000 fbf6 	bl	8008510 <rmw_create_publisher>
 8007d24:	6821      	ldr	r1, [r4, #0]
 8007d26:	f8c5 00bc 	str.w	r0, [r5, #188]	; 0xbc
 8007d2a:	f8d1 00bc 	ldr.w	r0, [r1, #188]	; 0xbc
 8007d2e:	b388      	cbz	r0, 8007d94 <rcl_publisher_init+0x1dc>
 8007d30:	3168      	adds	r1, #104	; 0x68
 8007d32:	f000 fcc7 	bl	80086c4 <rmw_publisher_get_actual_qos>
 8007d36:	6823      	ldr	r3, [r4, #0]
 8007d38:	4605      	mov	r5, r0
 8007d3a:	b9f0      	cbnz	r0, 8007d7a <rcl_publisher_init+0x1c2>
 8007d3c:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 8007d40:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
 8007d44:	4618      	mov	r0, r3
 8007d46:	2268      	movs	r2, #104	; 0x68
 8007d48:	4639      	mov	r1, r7
 8007d4a:	f008 fcfd 	bl	8010748 <memcpy>
 8007d4e:	f8d8 2000 	ldr.w	r2, [r8]
 8007d52:	f8c0 20b8 	str.w	r2, [r0, #184]	; 0xb8
 8007d56:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007d58:	b110      	cbz	r0, 8007d60 <rcl_publisher_init+0x1a8>
 8007d5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d5c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007d5e:	4798      	blx	r3
 8007d60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d62:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007d64:	4648      	mov	r0, r9
 8007d66:	4798      	blx	r3
 8007d68:	e73c      	b.n	8007be4 <rcl_publisher_init+0x2c>
 8007d6a:	2501      	movs	r5, #1
 8007d6c:	e7f3      	b.n	8007d56 <rcl_publisher_init+0x19e>
 8007d6e:	2567      	movs	r5, #103	; 0x67
 8007d70:	e79e      	b.n	8007cb0 <rcl_publisher_init+0xf8>
 8007d72:	2567      	movs	r5, #103	; 0x67
 8007d74:	e7ef      	b.n	8007d56 <rcl_publisher_init+0x19e>
 8007d76:	250a      	movs	r5, #10
 8007d78:	e7ed      	b.n	8007d56 <rcl_publisher_init+0x19e>
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d0f5      	beq.n	8007d6a <rcl_publisher_init+0x1b2>
 8007d7e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007d82:	b13b      	cbz	r3, 8007d94 <rcl_publisher_init+0x1dc>
 8007d84:	4640      	mov	r0, r8
 8007d86:	f005 fa6b 	bl	800d260 <rcl_node_get_rmw_handle>
 8007d8a:	6823      	ldr	r3, [r4, #0]
 8007d8c:	f8d3 10bc 	ldr.w	r1, [r3, #188]	; 0xbc
 8007d90:	f000 fca6 	bl	80086e0 <rmw_destroy_publisher>
 8007d94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d96:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007d98:	6820      	ldr	r0, [r4, #0]
 8007d9a:	4798      	blx	r3
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	6023      	str	r3, [r4, #0]
 8007da0:	2501      	movs	r5, #1
 8007da2:	e7d8      	b.n	8007d56 <rcl_publisher_init+0x19e>

08007da4 <rcl_publisher_get_default_options>:
 8007da4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007da6:	4f0e      	ldr	r7, [pc, #56]	; (8007de0 <rcl_publisher_get_default_options+0x3c>)
 8007da8:	490e      	ldr	r1, [pc, #56]	; (8007de4 <rcl_publisher_get_default_options+0x40>)
 8007daa:	b087      	sub	sp, #28
 8007dac:	4606      	mov	r6, r0
 8007dae:	2250      	movs	r2, #80	; 0x50
 8007db0:	4638      	mov	r0, r7
 8007db2:	f008 fcc9 	bl	8010748 <memcpy>
 8007db6:	466c      	mov	r4, sp
 8007db8:	4668      	mov	r0, sp
 8007dba:	f000 f92d 	bl	8008018 <rcutils_get_default_allocator>
 8007dbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007dc0:	f107 0550 	add.w	r5, r7, #80	; 0x50
 8007dc4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007dc6:	6823      	ldr	r3, [r4, #0]
 8007dc8:	602b      	str	r3, [r5, #0]
 8007dca:	f000 fa9f 	bl	800830c <rmw_get_default_publisher_options>
 8007dce:	4639      	mov	r1, r7
 8007dd0:	6678      	str	r0, [r7, #100]	; 0x64
 8007dd2:	2268      	movs	r2, #104	; 0x68
 8007dd4:	4630      	mov	r0, r6
 8007dd6:	f008 fcb7 	bl	8010748 <memcpy>
 8007dda:	4630      	mov	r0, r6
 8007ddc:	b007      	add	sp, #28
 8007dde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007de0:	2000bf48 	.word	0x2000bf48
 8007de4:	08011f58 	.word	0x08011f58

08007de8 <rcl_publish>:
 8007de8:	b1f8      	cbz	r0, 8007e2a <rcl_publish+0x42>
 8007dea:	6803      	ldr	r3, [r0, #0]
 8007dec:	b570      	push	{r4, r5, r6, lr}
 8007dee:	4604      	mov	r4, r0
 8007df0:	b1b3      	cbz	r3, 8007e20 <rcl_publish+0x38>
 8007df2:	4616      	mov	r6, r2
 8007df4:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8007df8:	b192      	cbz	r2, 8007e20 <rcl_publish+0x38>
 8007dfa:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 8007dfe:	460d      	mov	r5, r1
 8007e00:	f004 fc72 	bl	800c6e8 <rcl_context_is_valid>
 8007e04:	b160      	cbz	r0, 8007e20 <rcl_publish+0x38>
 8007e06:	6823      	ldr	r3, [r4, #0]
 8007e08:	f8d3 00bc 	ldr.w	r0, [r3, #188]	; 0xbc
 8007e0c:	b140      	cbz	r0, 8007e20 <rcl_publish+0x38>
 8007e0e:	b155      	cbz	r5, 8007e26 <rcl_publish+0x3e>
 8007e10:	4632      	mov	r2, r6
 8007e12:	4629      	mov	r1, r5
 8007e14:	f000 fb1c 	bl	8008450 <rmw_publish>
 8007e18:	3800      	subs	r0, #0
 8007e1a:	bf18      	it	ne
 8007e1c:	2001      	movne	r0, #1
 8007e1e:	bd70      	pop	{r4, r5, r6, pc}
 8007e20:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007e24:	bd70      	pop	{r4, r5, r6, pc}
 8007e26:	200b      	movs	r0, #11
 8007e28:	bd70      	pop	{r4, r5, r6, pc}
 8007e2a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007e2e:	4770      	bx	lr

08007e30 <rclc_support_init>:
 8007e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e34:	b086      	sub	sp, #24
 8007e36:	2800      	cmp	r0, #0
 8007e38:	d042      	beq.n	8007ec0 <rclc_support_init+0x90>
 8007e3a:	461c      	mov	r4, r3
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d03f      	beq.n	8007ec0 <rclc_support_init+0x90>
 8007e40:	460f      	mov	r7, r1
 8007e42:	4690      	mov	r8, r2
 8007e44:	4606      	mov	r6, r0
 8007e46:	f004 ff2f 	bl	800cca8 <rcl_get_zero_initialized_init_options>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 8007e50:	e88d 0003 	stmia.w	sp, {r0, r1}
 8007e54:	9305      	str	r3, [sp, #20]
 8007e56:	a805      	add	r0, sp, #20
 8007e58:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8007e5c:	f004 ff26 	bl	800ccac <rcl_init_options_init>
 8007e60:	4605      	mov	r5, r0
 8007e62:	bb38      	cbnz	r0, 8007eb4 <rclc_support_init+0x84>
 8007e64:	f004 ff20 	bl	800cca8 <rcl_get_zero_initialized_init_options>
 8007e68:	4631      	mov	r1, r6
 8007e6a:	6030      	str	r0, [r6, #0]
 8007e6c:	a805      	add	r0, sp, #20
 8007e6e:	f004 ff93 	bl	800cd98 <rcl_init_options_copy>
 8007e72:	4605      	mov	r5, r0
 8007e74:	b9c0      	cbnz	r0, 8007ea8 <rclc_support_init+0x78>
 8007e76:	ad02      	add	r5, sp, #8
 8007e78:	4628      	mov	r0, r5
 8007e7a:	f004 fc2b 	bl	800c6d4 <rcl_get_zero_initialized_context>
 8007e7e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007e82:	1d33      	adds	r3, r6, #4
 8007e84:	e883 0003 	stmia.w	r3, {r0, r1}
 8007e88:	4632      	mov	r2, r6
 8007e8a:	4641      	mov	r1, r8
 8007e8c:	4638      	mov	r0, r7
 8007e8e:	f004 fe01 	bl	800ca94 <rcl_init>
 8007e92:	4605      	mov	r5, r0
 8007e94:	b940      	cbnz	r0, 8007ea8 <rclc_support_init+0x78>
 8007e96:	60f4      	str	r4, [r6, #12]
 8007e98:	4622      	mov	r2, r4
 8007e9a:	f106 0110 	add.w	r1, r6, #16
 8007e9e:	2003      	movs	r0, #3
 8007ea0:	f005 fb2a 	bl	800d4f8 <rcl_clock_init>
 8007ea4:	4605      	mov	r5, r0
 8007ea6:	b108      	cbz	r0, 8007eac <rclc_support_init+0x7c>
 8007ea8:	f000 f8e8 	bl	800807c <rcutils_reset_error>
 8007eac:	a805      	add	r0, sp, #20
 8007eae:	f004 ff4f 	bl	800cd50 <rcl_init_options_fini>
 8007eb2:	b108      	cbz	r0, 8007eb8 <rclc_support_init+0x88>
 8007eb4:	f000 f8e2 	bl	800807c <rcutils_reset_error>
 8007eb8:	4628      	mov	r0, r5
 8007eba:	b006      	add	sp, #24
 8007ebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ec0:	250b      	movs	r5, #11
 8007ec2:	4628      	mov	r0, r5
 8007ec4:	b006      	add	sp, #24
 8007ec6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007eca:	bf00      	nop

08007ecc <rclc_node_init_default>:
 8007ecc:	b3b8      	cbz	r0, 8007f3e <rclc_node_init_default+0x72>
 8007ece:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007ed2:	460d      	mov	r5, r1
 8007ed4:	b08f      	sub	sp, #60	; 0x3c
 8007ed6:	b329      	cbz	r1, 8007f24 <rclc_node_init_default+0x58>
 8007ed8:	4616      	mov	r6, r2
 8007eda:	b31a      	cbz	r2, 8007f24 <rclc_node_init_default+0x58>
 8007edc:	461f      	mov	r7, r3
 8007ede:	b30b      	cbz	r3, 8007f24 <rclc_node_init_default+0x58>
 8007ee0:	f10d 0810 	add.w	r8, sp, #16
 8007ee4:	4604      	mov	r4, r0
 8007ee6:	4640      	mov	r0, r8
 8007ee8:	f005 f81e 	bl	800cf28 <rcl_get_zero_initialized_node>
 8007eec:	e898 0003 	ldmia.w	r8, {r0, r1}
 8007ef0:	f10d 091c 	add.w	r9, sp, #28
 8007ef4:	e884 0003 	stmia.w	r4, {r0, r1}
 8007ef8:	4648      	mov	r0, r9
 8007efa:	f005 f9b7 	bl	800d26c <rcl_node_get_default_options>
 8007efe:	4640      	mov	r0, r8
 8007f00:	f005 f812 	bl	800cf28 <rcl_get_zero_initialized_node>
 8007f04:	e898 0003 	ldmia.w	r8, {r0, r1}
 8007f08:	1d3b      	adds	r3, r7, #4
 8007f0a:	f8cd 9000 	str.w	r9, [sp]
 8007f0e:	4632      	mov	r2, r6
 8007f10:	e884 0003 	stmia.w	r4, {r0, r1}
 8007f14:	4629      	mov	r1, r5
 8007f16:	4620      	mov	r0, r4
 8007f18:	f005 f810 	bl	800cf3c <rcl_node_init>
 8007f1c:	b930      	cbnz	r0, 8007f2c <rclc_node_init_default+0x60>
 8007f1e:	b00f      	add	sp, #60	; 0x3c
 8007f20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007f24:	200b      	movs	r0, #11
 8007f26:	b00f      	add	sp, #60	; 0x3c
 8007f28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007f2c:	9003      	str	r0, [sp, #12]
 8007f2e:	f000 f8a5 	bl	800807c <rcutils_reset_error>
 8007f32:	f000 f8a3 	bl	800807c <rcutils_reset_error>
 8007f36:	9803      	ldr	r0, [sp, #12]
 8007f38:	b00f      	add	sp, #60	; 0x3c
 8007f3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007f3e:	200b      	movs	r0, #11
 8007f40:	4770      	bx	lr
 8007f42:	bf00      	nop

08007f44 <rclc_publisher_init_default>:
 8007f44:	b368      	cbz	r0, 8007fa2 <rclc_publisher_init_default+0x5e>
 8007f46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f4a:	460d      	mov	r5, r1
 8007f4c:	b09e      	sub	sp, #120	; 0x78
 8007f4e:	b321      	cbz	r1, 8007f9a <rclc_publisher_init_default+0x56>
 8007f50:	4616      	mov	r6, r2
 8007f52:	b312      	cbz	r2, 8007f9a <rclc_publisher_init_default+0x56>
 8007f54:	461f      	mov	r7, r3
 8007f56:	b303      	cbz	r3, 8007f9a <rclc_publisher_init_default+0x56>
 8007f58:	4604      	mov	r4, r0
 8007f5a:	f7ff fe27 	bl	8007bac <rcl_get_zero_initialized_publisher>
 8007f5e:	f10d 0810 	add.w	r8, sp, #16
 8007f62:	6020      	str	r0, [r4, #0]
 8007f64:	4640      	mov	r0, r8
 8007f66:	f7ff ff1d 	bl	8007da4 <rcl_publisher_get_default_options>
 8007f6a:	490f      	ldr	r1, [pc, #60]	; (8007fa8 <rclc_publisher_init_default+0x64>)
 8007f6c:	2250      	movs	r2, #80	; 0x50
 8007f6e:	4640      	mov	r0, r8
 8007f70:	f008 fbea 	bl	8010748 <memcpy>
 8007f74:	f8cd 8000 	str.w	r8, [sp]
 8007f78:	463b      	mov	r3, r7
 8007f7a:	4632      	mov	r2, r6
 8007f7c:	4629      	mov	r1, r5
 8007f7e:	4620      	mov	r0, r4
 8007f80:	f7ff fe1a 	bl	8007bb8 <rcl_publisher_init>
 8007f84:	b910      	cbnz	r0, 8007f8c <rclc_publisher_init_default+0x48>
 8007f86:	b01e      	add	sp, #120	; 0x78
 8007f88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f8c:	9003      	str	r0, [sp, #12]
 8007f8e:	f000 f875 	bl	800807c <rcutils_reset_error>
 8007f92:	9803      	ldr	r0, [sp, #12]
 8007f94:	b01e      	add	sp, #120	; 0x78
 8007f96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f9a:	200b      	movs	r0, #11
 8007f9c:	b01e      	add	sp, #120	; 0x78
 8007f9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fa2:	200b      	movs	r0, #11
 8007fa4:	4770      	bx	lr
 8007fa6:	bf00      	nop
 8007fa8:	08011fa8 	.word	0x08011fa8

08007fac <__default_zero_allocate>:
 8007fac:	f008 bb42 	b.w	8010634 <calloc>

08007fb0 <__default_reallocate>:
 8007fb0:	f008 bd5a 	b.w	8010a68 <realloc>

08007fb4 <__default_deallocate>:
 8007fb4:	f008 bbc0 	b.w	8010738 <free>

08007fb8 <__default_allocate>:
 8007fb8:	f008 bbb6 	b.w	8010728 <malloc>

08007fbc <rcutils_get_zero_initialized_allocator>:
 8007fbc:	b470      	push	{r4, r5, r6}
 8007fbe:	4d05      	ldr	r5, [pc, #20]	; (8007fd4 <rcutils_get_zero_initialized_allocator+0x18>)
 8007fc0:	4606      	mov	r6, r0
 8007fc2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007fc4:	4634      	mov	r4, r6
 8007fc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007fc8:	682b      	ldr	r3, [r5, #0]
 8007fca:	6023      	str	r3, [r4, #0]
 8007fcc:	4630      	mov	r0, r6
 8007fce:	bc70      	pop	{r4, r5, r6}
 8007fd0:	4770      	bx	lr
 8007fd2:	bf00      	nop
 8007fd4:	08011ff8 	.word	0x08011ff8

08007fd8 <rcutils_set_default_allocator>:
 8007fd8:	b1a0      	cbz	r0, 8008004 <rcutils_set_default_allocator+0x2c>
 8007fda:	6801      	ldr	r1, [r0, #0]
 8007fdc:	b199      	cbz	r1, 8008006 <rcutils_set_default_allocator+0x2e>
 8007fde:	b430      	push	{r4, r5}
 8007fe0:	6844      	ldr	r4, [r0, #4]
 8007fe2:	b194      	cbz	r4, 800800a <rcutils_set_default_allocator+0x32>
 8007fe4:	68c5      	ldr	r5, [r0, #12]
 8007fe6:	b15d      	cbz	r5, 8008000 <rcutils_set_default_allocator+0x28>
 8007fe8:	6883      	ldr	r3, [r0, #8]
 8007fea:	b18b      	cbz	r3, 8008010 <rcutils_set_default_allocator+0x38>
 8007fec:	4a09      	ldr	r2, [pc, #36]	; (8008014 <rcutils_set_default_allocator+0x3c>)
 8007fee:	e9c2 1400 	strd	r1, r4, [r2]
 8007ff2:	e9c2 3502 	strd	r3, r5, [r2, #8]
 8007ff6:	2000      	movs	r0, #0
 8007ff8:	6110      	str	r0, [r2, #16]
 8007ffa:	2001      	movs	r0, #1
 8007ffc:	bc30      	pop	{r4, r5}
 8007ffe:	4770      	bx	lr
 8008000:	4628      	mov	r0, r5
 8008002:	e7fb      	b.n	8007ffc <rcutils_set_default_allocator+0x24>
 8008004:	4770      	bx	lr
 8008006:	4608      	mov	r0, r1
 8008008:	4770      	bx	lr
 800800a:	4620      	mov	r0, r4
 800800c:	bc30      	pop	{r4, r5}
 800800e:	4770      	bx	lr
 8008010:	4618      	mov	r0, r3
 8008012:	e7f3      	b.n	8007ffc <rcutils_set_default_allocator+0x24>
 8008014:	20000014 	.word	0x20000014

08008018 <rcutils_get_default_allocator>:
 8008018:	b470      	push	{r4, r5, r6}
 800801a:	4d05      	ldr	r5, [pc, #20]	; (8008030 <rcutils_get_default_allocator+0x18>)
 800801c:	4606      	mov	r6, r0
 800801e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008020:	4634      	mov	r4, r6
 8008022:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008024:	682b      	ldr	r3, [r5, #0]
 8008026:	6023      	str	r3, [r4, #0]
 8008028:	4630      	mov	r0, r6
 800802a:	bc70      	pop	{r4, r5, r6}
 800802c:	4770      	bx	lr
 800802e:	bf00      	nop
 8008030:	20000014 	.word	0x20000014

08008034 <rcutils_allocator_is_valid>:
 8008034:	b158      	cbz	r0, 800804e <rcutils_allocator_is_valid+0x1a>
 8008036:	6803      	ldr	r3, [r0, #0]
 8008038:	b143      	cbz	r3, 800804c <rcutils_allocator_is_valid+0x18>
 800803a:	6843      	ldr	r3, [r0, #4]
 800803c:	b133      	cbz	r3, 800804c <rcutils_allocator_is_valid+0x18>
 800803e:	68c3      	ldr	r3, [r0, #12]
 8008040:	b123      	cbz	r3, 800804c <rcutils_allocator_is_valid+0x18>
 8008042:	6880      	ldr	r0, [r0, #8]
 8008044:	3800      	subs	r0, #0
 8008046:	bf18      	it	ne
 8008048:	2001      	movne	r0, #1
 800804a:	4770      	bx	lr
 800804c:	4618      	mov	r0, r3
 800804e:	4770      	bx	lr

08008050 <rcutils_get_error_string>:
 8008050:	4b06      	ldr	r3, [pc, #24]	; (800806c <rcutils_get_error_string+0x1c>)
 8008052:	781b      	ldrb	r3, [r3, #0]
 8008054:	b13b      	cbz	r3, 8008066 <rcutils_get_error_string+0x16>
 8008056:	4b06      	ldr	r3, [pc, #24]	; (8008070 <rcutils_get_error_string+0x20>)
 8008058:	781a      	ldrb	r2, [r3, #0]
 800805a:	b90a      	cbnz	r2, 8008060 <rcutils_get_error_string+0x10>
 800805c:	2201      	movs	r2, #1
 800805e:	701a      	strb	r2, [r3, #0]
 8008060:	4b04      	ldr	r3, [pc, #16]	; (8008074 <rcutils_get_error_string+0x24>)
 8008062:	7818      	ldrb	r0, [r3, #0]
 8008064:	4770      	bx	lr
 8008066:	4b04      	ldr	r3, [pc, #16]	; (8008078 <rcutils_get_error_string+0x28>)
 8008068:	7818      	ldrb	r0, [r3, #0]
 800806a:	4770      	bx	lr
 800806c:	2000bfb0 	.word	0x2000bfb0
 8008070:	2000bfb1 	.word	0x2000bfb1
 8008074:	2000c0d8 	.word	0x2000c0d8
 8008078:	0801200c 	.word	0x0801200c

0800807c <rcutils_reset_error>:
 800807c:	b4d0      	push	{r4, r6, r7}
 800807e:	4a07      	ldr	r2, [pc, #28]	; (800809c <rcutils_reset_error+0x20>)
 8008080:	4807      	ldr	r0, [pc, #28]	; (80080a0 <rcutils_reset_error+0x24>)
 8008082:	4c08      	ldr	r4, [pc, #32]	; (80080a4 <rcutils_reset_error+0x28>)
 8008084:	4908      	ldr	r1, [pc, #32]	; (80080a8 <rcutils_reset_error+0x2c>)
 8008086:	2300      	movs	r3, #0
 8008088:	2600      	movs	r6, #0
 800808a:	2700      	movs	r7, #0
 800808c:	8013      	strh	r3, [r2, #0]
 800808e:	7003      	strb	r3, [r0, #0]
 8008090:	e9c2 6702 	strd	r6, r7, [r2, #8]
 8008094:	7023      	strb	r3, [r4, #0]
 8008096:	700b      	strb	r3, [r1, #0]
 8008098:	bcd0      	pop	{r4, r6, r7}
 800809a:	4770      	bx	lr
 800809c:	2000c0e0 	.word	0x2000c0e0
 80080a0:	2000c0d8 	.word	0x2000c0d8
 80080a4:	2000bfb1 	.word	0x2000bfb1
 80080a8:	2000bfb0 	.word	0x2000bfb0

080080ac <rcutils_get_zero_initialized_string_map>:
 80080ac:	4b01      	ldr	r3, [pc, #4]	; (80080b4 <rcutils_get_zero_initialized_string_map+0x8>)
 80080ae:	2000      	movs	r0, #0
 80080b0:	6018      	str	r0, [r3, #0]
 80080b2:	4770      	bx	lr
 80080b4:	2000bfb4 	.word	0x2000bfb4

080080b8 <rcutils_string_map_reserve>:
 80080b8:	2800      	cmp	r0, #0
 80080ba:	d061      	beq.n	8008180 <rcutils_string_map_reserve+0xc8>
 80080bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80080c0:	6805      	ldr	r5, [r0, #0]
 80080c2:	b083      	sub	sp, #12
 80080c4:	460c      	mov	r4, r1
 80080c6:	4606      	mov	r6, r0
 80080c8:	b12d      	cbz	r5, 80080d6 <rcutils_string_map_reserve+0x1e>
 80080ca:	68eb      	ldr	r3, [r5, #12]
 80080cc:	42a3      	cmp	r3, r4
 80080ce:	d906      	bls.n	80080de <rcutils_string_map_reserve+0x26>
 80080d0:	461c      	mov	r4, r3
 80080d2:	2d00      	cmp	r5, #0
 80080d4:	d1f9      	bne.n	80080ca <rcutils_string_map_reserve+0x12>
 80080d6:	201f      	movs	r0, #31
 80080d8:	b003      	add	sp, #12
 80080da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80080de:	68ab      	ldr	r3, [r5, #8]
 80080e0:	42a3      	cmp	r3, r4
 80080e2:	d049      	beq.n	8008178 <rcutils_string_map_reserve+0xc0>
 80080e4:	6a2f      	ldr	r7, [r5, #32]
 80080e6:	2c00      	cmp	r4, #0
 80080e8:	d035      	beq.n	8008156 <rcutils_string_map_reserve+0x9e>
 80080ea:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 80080ee:	d245      	bcs.n	800817c <rcutils_string_map_reserve+0xc4>
 80080f0:	ea4f 0884 	mov.w	r8, r4, lsl #2
 80080f4:	f8d5 9018 	ldr.w	r9, [r5, #24]
 80080f8:	6828      	ldr	r0, [r5, #0]
 80080fa:	4641      	mov	r1, r8
 80080fc:	463a      	mov	r2, r7
 80080fe:	47c8      	blx	r9
 8008100:	2800      	cmp	r0, #0
 8008102:	d03b      	beq.n	800817c <rcutils_string_map_reserve+0xc4>
 8008104:	6833      	ldr	r3, [r6, #0]
 8008106:	463a      	mov	r2, r7
 8008108:	6018      	str	r0, [r3, #0]
 800810a:	4641      	mov	r1, r8
 800810c:	6858      	ldr	r0, [r3, #4]
 800810e:	47c8      	blx	r9
 8008110:	2800      	cmp	r0, #0
 8008112:	d033      	beq.n	800817c <rcutils_string_map_reserve+0xc4>
 8008114:	6835      	ldr	r5, [r6, #0]
 8008116:	68ab      	ldr	r3, [r5, #8]
 8008118:	6068      	str	r0, [r5, #4]
 800811a:	42a3      	cmp	r3, r4
 800811c:	d227      	bcs.n	800816e <rcutils_string_map_reserve+0xb6>
 800811e:	682a      	ldr	r2, [r5, #0]
 8008120:	eb00 0108 	add.w	r1, r0, r8
 8008124:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 8008128:	428f      	cmp	r7, r1
 800812a:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 800812e:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 8008132:	d203      	bcs.n	800813c <rcutils_string_map_reserve+0x84>
 8008134:	eb02 0108 	add.w	r1, r2, r8
 8008138:	428e      	cmp	r6, r1
 800813a:	d323      	bcc.n	8008184 <rcutils_string_map_reserve+0xcc>
 800813c:	1ae3      	subs	r3, r4, r3
 800813e:	009a      	lsls	r2, r3, #2
 8008140:	4638      	mov	r0, r7
 8008142:	2100      	movs	r1, #0
 8008144:	9201      	str	r2, [sp, #4]
 8008146:	f008 fb0d 	bl	8010764 <memset>
 800814a:	9a01      	ldr	r2, [sp, #4]
 800814c:	4630      	mov	r0, r6
 800814e:	2100      	movs	r1, #0
 8008150:	f008 fb08 	bl	8010764 <memset>
 8008154:	e00b      	b.n	800816e <rcutils_string_map_reserve+0xb6>
 8008156:	f8d5 8014 	ldr.w	r8, [r5, #20]
 800815a:	6828      	ldr	r0, [r5, #0]
 800815c:	4639      	mov	r1, r7
 800815e:	47c0      	blx	r8
 8008160:	6833      	ldr	r3, [r6, #0]
 8008162:	4639      	mov	r1, r7
 8008164:	6858      	ldr	r0, [r3, #4]
 8008166:	601c      	str	r4, [r3, #0]
 8008168:	47c0      	blx	r8
 800816a:	6835      	ldr	r5, [r6, #0]
 800816c:	606c      	str	r4, [r5, #4]
 800816e:	2000      	movs	r0, #0
 8008170:	60ac      	str	r4, [r5, #8]
 8008172:	b003      	add	sp, #12
 8008174:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008178:	2000      	movs	r0, #0
 800817a:	e7ad      	b.n	80080d8 <rcutils_string_map_reserve+0x20>
 800817c:	200a      	movs	r0, #10
 800817e:	e7ab      	b.n	80080d8 <rcutils_string_map_reserve+0x20>
 8008180:	200b      	movs	r0, #11
 8008182:	4770      	bx	lr
 8008184:	1f13      	subs	r3, r2, #4
 8008186:	f1ac 0c04 	sub.w	ip, ip, #4
 800818a:	4498      	add	r8, r3
 800818c:	4460      	add	r0, ip
 800818e:	4462      	add	r2, ip
 8008190:	2300      	movs	r3, #0
 8008192:	f842 3f04 	str.w	r3, [r2, #4]!
 8008196:	4542      	cmp	r2, r8
 8008198:	f840 3f04 	str.w	r3, [r0, #4]!
 800819c:	d1f9      	bne.n	8008192 <rcutils_string_map_reserve+0xda>
 800819e:	e7e6      	b.n	800816e <rcutils_string_map_reserve+0xb6>

080081a0 <rcutils_string_map_init>:
 80081a0:	b082      	sub	sp, #8
 80081a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081a4:	460e      	mov	r6, r1
 80081a6:	a906      	add	r1, sp, #24
 80081a8:	e881 000c 	stmia.w	r1, {r2, r3}
 80081ac:	b380      	cbz	r0, 8008210 <rcutils_string_map_init+0x70>
 80081ae:	6807      	ldr	r7, [r0, #0]
 80081b0:	4604      	mov	r4, r0
 80081b2:	b12f      	cbz	r7, 80081c0 <rcutils_string_map_init+0x20>
 80081b4:	251e      	movs	r5, #30
 80081b6:	4628      	mov	r0, r5
 80081b8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80081bc:	b002      	add	sp, #8
 80081be:	4770      	bx	lr
 80081c0:	a806      	add	r0, sp, #24
 80081c2:	f7ff ff37 	bl	8008034 <rcutils_allocator_is_valid>
 80081c6:	b318      	cbz	r0, 8008210 <rcutils_string_map_init+0x70>
 80081c8:	9b06      	ldr	r3, [sp, #24]
 80081ca:	990a      	ldr	r1, [sp, #40]	; 0x28
 80081cc:	2024      	movs	r0, #36	; 0x24
 80081ce:	4798      	blx	r3
 80081d0:	4605      	mov	r5, r0
 80081d2:	6020      	str	r0, [r4, #0]
 80081d4:	b310      	cbz	r0, 800821c <rcutils_string_map_init+0x7c>
 80081d6:	f10d 0e18 	add.w	lr, sp, #24
 80081da:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80081de:	f105 0c10 	add.w	ip, r5, #16
 80081e2:	e9c5 7700 	strd	r7, r7, [r5]
 80081e6:	e9c5 7702 	strd	r7, r7, [r5, #8]
 80081ea:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80081ee:	f8de 3000 	ldr.w	r3, [lr]
 80081f2:	f8cc 3000 	str.w	r3, [ip]
 80081f6:	4631      	mov	r1, r6
 80081f8:	4620      	mov	r0, r4
 80081fa:	f7ff ff5d 	bl	80080b8 <rcutils_string_map_reserve>
 80081fe:	4605      	mov	r5, r0
 8008200:	2800      	cmp	r0, #0
 8008202:	d0d8      	beq.n	80081b6 <rcutils_string_map_init+0x16>
 8008204:	9b07      	ldr	r3, [sp, #28]
 8008206:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008208:	6820      	ldr	r0, [r4, #0]
 800820a:	4798      	blx	r3
 800820c:	6027      	str	r7, [r4, #0]
 800820e:	e7d2      	b.n	80081b6 <rcutils_string_map_init+0x16>
 8008210:	250b      	movs	r5, #11
 8008212:	4628      	mov	r0, r5
 8008214:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008218:	b002      	add	sp, #8
 800821a:	4770      	bx	lr
 800821c:	250a      	movs	r5, #10
 800821e:	e7ca      	b.n	80081b6 <rcutils_string_map_init+0x16>

08008220 <rcutils_string_map_fini>:
 8008220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008224:	b082      	sub	sp, #8
 8008226:	2800      	cmp	r0, #0
 8008228:	d039      	beq.n	800829e <rcutils_string_map_fini+0x7e>
 800822a:	6804      	ldr	r4, [r0, #0]
 800822c:	4606      	mov	r6, r0
 800822e:	2c00      	cmp	r4, #0
 8008230:	d031      	beq.n	8008296 <rcutils_string_map_fini+0x76>
 8008232:	68a3      	ldr	r3, [r4, #8]
 8008234:	b323      	cbz	r3, 8008280 <rcutils_string_map_fini+0x60>
 8008236:	2500      	movs	r5, #0
 8008238:	6822      	ldr	r2, [r4, #0]
 800823a:	46a8      	mov	r8, r5
 800823c:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8008240:	b1d8      	cbz	r0, 800827a <rcutils_string_map_fini+0x5a>
 8008242:	6a21      	ldr	r1, [r4, #32]
 8008244:	6967      	ldr	r7, [r4, #20]
 8008246:	9101      	str	r1, [sp, #4]
 8008248:	47b8      	blx	r7
 800824a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800824e:	f842 8025 	str.w	r8, [r2, r5, lsl #2]
 8008252:	9901      	ldr	r1, [sp, #4]
 8008254:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008258:	47b8      	blx	r7
 800825a:	68e3      	ldr	r3, [r4, #12]
 800825c:	6862      	ldr	r2, [r4, #4]
 800825e:	3b01      	subs	r3, #1
 8008260:	f842 8025 	str.w	r8, [r2, r5, lsl #2]
 8008264:	60e3      	str	r3, [r4, #12]
 8008266:	6834      	ldr	r4, [r6, #0]
 8008268:	68a3      	ldr	r3, [r4, #8]
 800826a:	3501      	adds	r5, #1
 800826c:	429d      	cmp	r5, r3
 800826e:	d207      	bcs.n	8008280 <rcutils_string_map_fini+0x60>
 8008270:	6822      	ldr	r2, [r4, #0]
 8008272:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8008276:	2800      	cmp	r0, #0
 8008278:	d1e3      	bne.n	8008242 <rcutils_string_map_fini+0x22>
 800827a:	3501      	adds	r5, #1
 800827c:	429d      	cmp	r5, r3
 800827e:	d3dd      	bcc.n	800823c <rcutils_string_map_fini+0x1c>
 8008280:	2100      	movs	r1, #0
 8008282:	4630      	mov	r0, r6
 8008284:	f7ff ff18 	bl	80080b8 <rcutils_string_map_reserve>
 8008288:	4604      	mov	r4, r0
 800828a:	b920      	cbnz	r0, 8008296 <rcutils_string_map_fini+0x76>
 800828c:	6830      	ldr	r0, [r6, #0]
 800828e:	6943      	ldr	r3, [r0, #20]
 8008290:	6a01      	ldr	r1, [r0, #32]
 8008292:	4798      	blx	r3
 8008294:	6034      	str	r4, [r6, #0]
 8008296:	4620      	mov	r0, r4
 8008298:	b002      	add	sp, #8
 800829a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800829e:	240b      	movs	r4, #11
 80082a0:	4620      	mov	r0, r4
 80082a2:	b002      	add	sp, #8
 80082a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080082a8 <rcutils_string_map_getn>:
 80082a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082ac:	b082      	sub	sp, #8
 80082ae:	b308      	cbz	r0, 80082f4 <rcutils_string_map_getn+0x4c>
 80082b0:	6804      	ldr	r4, [r0, #0]
 80082b2:	b304      	cbz	r4, 80082f6 <rcutils_string_map_getn+0x4e>
 80082b4:	460d      	mov	r5, r1
 80082b6:	b1e9      	cbz	r1, 80082f4 <rcutils_string_map_getn+0x4c>
 80082b8:	f8d4 9008 	ldr.w	r9, [r4, #8]
 80082bc:	6827      	ldr	r7, [r4, #0]
 80082be:	f1b9 0f00 	cmp.w	r9, #0
 80082c2:	d017      	beq.n	80082f4 <rcutils_string_map_getn+0x4c>
 80082c4:	4690      	mov	r8, r2
 80082c6:	3f04      	subs	r7, #4
 80082c8:	2600      	movs	r6, #0
 80082ca:	f857 1f04 	ldr.w	r1, [r7, #4]!
 80082ce:	9101      	str	r1, [sp, #4]
 80082d0:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 80082d4:	4608      	mov	r0, r1
 80082d6:	3601      	adds	r6, #1
 80082d8:	b151      	cbz	r1, 80082f0 <rcutils_string_map_getn+0x48>
 80082da:	f7f7 ffa3 	bl	8000224 <strlen>
 80082de:	4540      	cmp	r0, r8
 80082e0:	4602      	mov	r2, r0
 80082e2:	9901      	ldr	r1, [sp, #4]
 80082e4:	bf38      	it	cc
 80082e6:	4642      	movcc	r2, r8
 80082e8:	4628      	mov	r0, r5
 80082ea:	f008 fc1e 	bl	8010b2a <strncmp>
 80082ee:	b130      	cbz	r0, 80082fe <rcutils_string_map_getn+0x56>
 80082f0:	45b1      	cmp	r9, r6
 80082f2:	d1ea      	bne.n	80082ca <rcutils_string_map_getn+0x22>
 80082f4:	2400      	movs	r4, #0
 80082f6:	4620      	mov	r0, r4
 80082f8:	b002      	add	sp, #8
 80082fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082fe:	6863      	ldr	r3, [r4, #4]
 8008300:	f853 400a 	ldr.w	r4, [r3, sl]
 8008304:	4620      	mov	r0, r4
 8008306:	b002      	add	sp, #8
 8008308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800830c <rmw_get_default_publisher_options>:
 800830c:	2000      	movs	r0, #0
 800830e:	4770      	bx	lr

08008310 <rmw_validate_full_topic_name>:
 8008310:	2800      	cmp	r0, #0
 8008312:	d062      	beq.n	80083da <rmw_validate_full_topic_name+0xca>
 8008314:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008318:	460d      	mov	r5, r1
 800831a:	2900      	cmp	r1, #0
 800831c:	d05f      	beq.n	80083de <rmw_validate_full_topic_name+0xce>
 800831e:	4616      	mov	r6, r2
 8008320:	4604      	mov	r4, r0
 8008322:	f7f7 ff7f 	bl	8000224 <strlen>
 8008326:	b148      	cbz	r0, 800833c <rmw_validate_full_topic_name+0x2c>
 8008328:	7823      	ldrb	r3, [r4, #0]
 800832a:	2b2f      	cmp	r3, #47	; 0x2f
 800832c:	d00d      	beq.n	800834a <rmw_validate_full_topic_name+0x3a>
 800832e:	2302      	movs	r3, #2
 8008330:	602b      	str	r3, [r5, #0]
 8008332:	b13e      	cbz	r6, 8008344 <rmw_validate_full_topic_name+0x34>
 8008334:	2000      	movs	r0, #0
 8008336:	6030      	str	r0, [r6, #0]
 8008338:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800833c:	2301      	movs	r3, #1
 800833e:	602b      	str	r3, [r5, #0]
 8008340:	2e00      	cmp	r6, #0
 8008342:	d1f7      	bne.n	8008334 <rmw_validate_full_topic_name+0x24>
 8008344:	2000      	movs	r0, #0
 8008346:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800834a:	1e47      	subs	r7, r0, #1
 800834c:	5de3      	ldrb	r3, [r4, r7]
 800834e:	2b2f      	cmp	r3, #47	; 0x2f
 8008350:	d047      	beq.n	80083e2 <rmw_validate_full_topic_name+0xd2>
 8008352:	1e63      	subs	r3, r4, #1
 8008354:	eb03 0900 	add.w	r9, r3, r0
 8008358:	f1c4 0e01 	rsb	lr, r4, #1
 800835c:	eb0e 0803 	add.w	r8, lr, r3
 8008360:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8008364:	f021 0220 	bic.w	r2, r1, #32
 8008368:	3a41      	subs	r2, #65	; 0x41
 800836a:	2a19      	cmp	r2, #25
 800836c:	f1a1 0c2f 	sub.w	ip, r1, #47	; 0x2f
 8008370:	d90c      	bls.n	800838c <rmw_validate_full_topic_name+0x7c>
 8008372:	295f      	cmp	r1, #95	; 0x5f
 8008374:	d00a      	beq.n	800838c <rmw_validate_full_topic_name+0x7c>
 8008376:	f1bc 0f0a 	cmp.w	ip, #10
 800837a:	d907      	bls.n	800838c <rmw_validate_full_topic_name+0x7c>
 800837c:	2304      	movs	r3, #4
 800837e:	602b      	str	r3, [r5, #0]
 8008380:	2e00      	cmp	r6, #0
 8008382:	d0df      	beq.n	8008344 <rmw_validate_full_topic_name+0x34>
 8008384:	f8c6 8000 	str.w	r8, [r6]
 8008388:	2000      	movs	r0, #0
 800838a:	e7d5      	b.n	8008338 <rmw_validate_full_topic_name+0x28>
 800838c:	454b      	cmp	r3, r9
 800838e:	d1e5      	bne.n	800835c <rmw_validate_full_topic_name+0x4c>
 8008390:	f8df e084 	ldr.w	lr, [pc, #132]	; 8008418 <rmw_validate_full_topic_name+0x108>
 8008394:	2300      	movs	r3, #0
 8008396:	f107 0801 	add.w	r8, r7, #1
 800839a:	e005      	b.n	80083a8 <rmw_validate_full_topic_name+0x98>
 800839c:	4611      	mov	r1, r2
 800839e:	4288      	cmp	r0, r1
 80083a0:	4613      	mov	r3, r2
 80083a2:	f104 0401 	add.w	r4, r4, #1
 80083a6:	d925      	bls.n	80083f4 <rmw_validate_full_topic_name+0xe4>
 80083a8:	429f      	cmp	r7, r3
 80083aa:	f103 0201 	add.w	r2, r3, #1
 80083ae:	d01e      	beq.n	80083ee <rmw_validate_full_topic_name+0xde>
 80083b0:	7821      	ldrb	r1, [r4, #0]
 80083b2:	292f      	cmp	r1, #47	; 0x2f
 80083b4:	d1f2      	bne.n	800839c <rmw_validate_full_topic_name+0x8c>
 80083b6:	f894 c001 	ldrb.w	ip, [r4, #1]
 80083ba:	1c5a      	adds	r2, r3, #1
 80083bc:	f1bc 0f2f 	cmp.w	ip, #47	; 0x2f
 80083c0:	4611      	mov	r1, r2
 80083c2:	d024      	beq.n	800840e <rmw_validate_full_topic_name+0xfe>
 80083c4:	f81c 300e 	ldrb.w	r3, [ip, lr]
 80083c8:	075b      	lsls	r3, r3, #29
 80083ca:	d5e8      	bpl.n	800839e <rmw_validate_full_topic_name+0x8e>
 80083cc:	2306      	movs	r3, #6
 80083ce:	602b      	str	r3, [r5, #0]
 80083d0:	2e00      	cmp	r6, #0
 80083d2:	d0b7      	beq.n	8008344 <rmw_validate_full_topic_name+0x34>
 80083d4:	6032      	str	r2, [r6, #0]
 80083d6:	2000      	movs	r0, #0
 80083d8:	e7ae      	b.n	8008338 <rmw_validate_full_topic_name+0x28>
 80083da:	200b      	movs	r0, #11
 80083dc:	4770      	bx	lr
 80083de:	200b      	movs	r0, #11
 80083e0:	e7aa      	b.n	8008338 <rmw_validate_full_topic_name+0x28>
 80083e2:	2303      	movs	r3, #3
 80083e4:	602b      	str	r3, [r5, #0]
 80083e6:	2e00      	cmp	r6, #0
 80083e8:	d0ac      	beq.n	8008344 <rmw_validate_full_topic_name+0x34>
 80083ea:	6037      	str	r7, [r6, #0]
 80083ec:	e7aa      	b.n	8008344 <rmw_validate_full_topic_name+0x34>
 80083ee:	4641      	mov	r1, r8
 80083f0:	1c7a      	adds	r2, r7, #1
 80083f2:	e7d4      	b.n	800839e <rmw_validate_full_topic_name+0x8e>
 80083f4:	28f7      	cmp	r0, #247	; 0xf7
 80083f6:	d802      	bhi.n	80083fe <rmw_validate_full_topic_name+0xee>
 80083f8:	2000      	movs	r0, #0
 80083fa:	6028      	str	r0, [r5, #0]
 80083fc:	e79c      	b.n	8008338 <rmw_validate_full_topic_name+0x28>
 80083fe:	2307      	movs	r3, #7
 8008400:	602b      	str	r3, [r5, #0]
 8008402:	2e00      	cmp	r6, #0
 8008404:	d09e      	beq.n	8008344 <rmw_validate_full_topic_name+0x34>
 8008406:	23f6      	movs	r3, #246	; 0xf6
 8008408:	6033      	str	r3, [r6, #0]
 800840a:	2000      	movs	r0, #0
 800840c:	e794      	b.n	8008338 <rmw_validate_full_topic_name+0x28>
 800840e:	2305      	movs	r3, #5
 8008410:	602b      	str	r3, [r5, #0]
 8008412:	2e00      	cmp	r6, #0
 8008414:	d1de      	bne.n	80083d4 <rmw_validate_full_topic_name+0xc4>
 8008416:	e795      	b.n	8008344 <rmw_validate_full_topic_name+0x34>
 8008418:	08012735 	.word	0x08012735

0800841c <rmw_uros_set_custom_transport>:
 800841c:	b470      	push	{r4, r5, r6}
 800841e:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 8008422:	b162      	cbz	r2, 800843e <rmw_uros_set_custom_transport+0x22>
 8008424:	b15b      	cbz	r3, 800843e <rmw_uros_set_custom_transport+0x22>
 8008426:	b155      	cbz	r5, 800843e <rmw_uros_set_custom_transport+0x22>
 8008428:	b14e      	cbz	r6, 800843e <rmw_uros_set_custom_transport+0x22>
 800842a:	4c06      	ldr	r4, [pc, #24]	; (8008444 <rmw_uros_set_custom_transport+0x28>)
 800842c:	7020      	strb	r0, [r4, #0]
 800842e:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8008432:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8008436:	6166      	str	r6, [r4, #20]
 8008438:	2000      	movs	r0, #0
 800843a:	bc70      	pop	{r4, r5, r6}
 800843c:	4770      	bx	lr
 800843e:	200b      	movs	r0, #11
 8008440:	bc70      	pop	{r4, r5, r6}
 8008442:	4770      	bx	lr
 8008444:	2000c0f0 	.word	0x2000c0f0

08008448 <flush_session>:
 8008448:	6fc9      	ldr	r1, [r1, #124]	; 0x7c
 800844a:	f002 bacb 	b.w	800a9e4 <uxr_run_session_until_confirm_delivery>
 800844e:	bf00      	nop

08008450 <rmw_publish>:
 8008450:	2800      	cmp	r0, #0
 8008452:	d053      	beq.n	80084fc <rmw_publish+0xac>
 8008454:	b570      	push	{r4, r5, r6, lr}
 8008456:	460d      	mov	r5, r1
 8008458:	b08e      	sub	sp, #56	; 0x38
 800845a:	2900      	cmp	r1, #0
 800845c:	d04b      	beq.n	80084f6 <rmw_publish+0xa6>
 800845e:	4604      	mov	r4, r0
 8008460:	6800      	ldr	r0, [r0, #0]
 8008462:	f000 fc05 	bl	8008c70 <is_uxrce_rmw_identifier_valid>
 8008466:	2800      	cmp	r0, #0
 8008468:	d045      	beq.n	80084f6 <rmw_publish+0xa6>
 800846a:	6866      	ldr	r6, [r4, #4]
 800846c:	2e00      	cmp	r6, #0
 800846e:	d042      	beq.n	80084f6 <rmw_publish+0xa6>
 8008470:	69b4      	ldr	r4, [r6, #24]
 8008472:	4628      	mov	r0, r5
 8008474:	6923      	ldr	r3, [r4, #16]
 8008476:	4798      	blx	r3
 8008478:	69f3      	ldr	r3, [r6, #28]
 800847a:	9005      	str	r0, [sp, #20]
 800847c:	b113      	cbz	r3, 8008484 <rmw_publish+0x34>
 800847e:	a805      	add	r0, sp, #20
 8008480:	4798      	blx	r3
 8008482:	9805      	ldr	r0, [sp, #20]
 8008484:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8008488:	691b      	ldr	r3, [r3, #16]
 800848a:	9000      	str	r0, [sp, #0]
 800848c:	6972      	ldr	r2, [r6, #20]
 800848e:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 8008490:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8008494:	ab06      	add	r3, sp, #24
 8008496:	f003 f8ad 	bl	800b5f4 <uxr_prepare_output_stream>
 800849a:	b1d8      	cbz	r0, 80084d4 <rmw_publish+0x84>
 800849c:	68a3      	ldr	r3, [r4, #8]
 800849e:	4628      	mov	r0, r5
 80084a0:	a906      	add	r1, sp, #24
 80084a2:	4798      	blx	r3
 80084a4:	6a33      	ldr	r3, [r6, #32]
 80084a6:	4604      	mov	r4, r0
 80084a8:	b10b      	cbz	r3, 80084ae <rmw_publish+0x5e>
 80084aa:	a806      	add	r0, sp, #24
 80084ac:	4798      	blx	r3
 80084ae:	f896 307a 	ldrb.w	r3, [r6, #122]	; 0x7a
 80084b2:	2b01      	cmp	r3, #1
 80084b4:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 80084b8:	d022      	beq.n	8008500 <rmw_publish+0xb0>
 80084ba:	6918      	ldr	r0, [r3, #16]
 80084bc:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
 80084be:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80084c2:	f002 fa8f 	bl	800a9e4 <uxr_run_session_until_confirm_delivery>
 80084c6:	4020      	ands	r0, r4
 80084c8:	b2c4      	uxtb	r4, r0
 80084ca:	f084 0001 	eor.w	r0, r4, #1
 80084ce:	b2c0      	uxtb	r0, r0
 80084d0:	b00e      	add	sp, #56	; 0x38
 80084d2:	bd70      	pop	{r4, r5, r6, pc}
 80084d4:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 80084d8:	4a0c      	ldr	r2, [pc, #48]	; (800850c <rmw_publish+0xbc>)
 80084da:	6918      	ldr	r0, [r3, #16]
 80084dc:	9b05      	ldr	r3, [sp, #20]
 80084de:	9300      	str	r3, [sp, #0]
 80084e0:	e9cd 2601 	strd	r2, r6, [sp, #4]
 80084e4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80084e8:	6972      	ldr	r2, [r6, #20]
 80084ea:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 80084ec:	ab06      	add	r3, sp, #24
 80084ee:	f003 f8b1 	bl	800b654 <uxr_prepare_output_stream_fragmented>
 80084f2:	2800      	cmp	r0, #0
 80084f4:	d1d2      	bne.n	800849c <rmw_publish+0x4c>
 80084f6:	2001      	movs	r0, #1
 80084f8:	b00e      	add	sp, #56	; 0x38
 80084fa:	bd70      	pop	{r4, r5, r6, pc}
 80084fc:	2001      	movs	r0, #1
 80084fe:	4770      	bx	lr
 8008500:	6918      	ldr	r0, [r3, #16]
 8008502:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8008506:	f001 feeb 	bl	800a2e0 <uxr_flash_output_streams>
 800850a:	e7de      	b.n	80084ca <rmw_publish+0x7a>
 800850c:	08008449 	.word	0x08008449

08008510 <rmw_create_publisher>:
 8008510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008514:	b087      	sub	sp, #28
 8008516:	2800      	cmp	r0, #0
 8008518:	f000 80c9 	beq.w	80086ae <rmw_create_publisher+0x19e>
 800851c:	460e      	mov	r6, r1
 800851e:	2900      	cmp	r1, #0
 8008520:	f000 80c5 	beq.w	80086ae <rmw_create_publisher+0x19e>
 8008524:	4604      	mov	r4, r0
 8008526:	6800      	ldr	r0, [r0, #0]
 8008528:	4615      	mov	r5, r2
 800852a:	4698      	mov	r8, r3
 800852c:	f000 fba0 	bl	8008c70 <is_uxrce_rmw_identifier_valid>
 8008530:	2800      	cmp	r0, #0
 8008532:	f000 80bc 	beq.w	80086ae <rmw_create_publisher+0x19e>
 8008536:	2d00      	cmp	r5, #0
 8008538:	f000 80b9 	beq.w	80086ae <rmw_create_publisher+0x19e>
 800853c:	782b      	ldrb	r3, [r5, #0]
 800853e:	2b00      	cmp	r3, #0
 8008540:	f000 80b5 	beq.w	80086ae <rmw_create_publisher+0x19e>
 8008544:	f1b8 0f00 	cmp.w	r8, #0
 8008548:	f000 80b1 	beq.w	80086ae <rmw_create_publisher+0x19e>
 800854c:	485a      	ldr	r0, [pc, #360]	; (80086b8 <rmw_create_publisher+0x1a8>)
 800854e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8008552:	f005 fc81 	bl	800de58 <get_memory>
 8008556:	2800      	cmp	r0, #0
 8008558:	f000 80a9 	beq.w	80086ae <rmw_create_publisher+0x19e>
 800855c:	68c4      	ldr	r4, [r0, #12]
 800855e:	f8c4 4088 	str.w	r4, [r4, #136]	; 0x88
 8008562:	f005 fc9d 	bl	800dea0 <rmw_get_implementation_identifier>
 8008566:	f104 0a98 	add.w	sl, r4, #152	; 0x98
 800856a:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 800856e:	f8c4 a08c 	str.w	sl, [r4, #140]	; 0x8c
 8008572:	4628      	mov	r0, r5
 8008574:	f7f7 fe56 	bl	8000224 <strlen>
 8008578:	3001      	adds	r0, #1
 800857a:	283c      	cmp	r0, #60	; 0x3c
 800857c:	f104 0784 	add.w	r7, r4, #132	; 0x84
 8008580:	f200 808e 	bhi.w	80086a0 <rmw_create_publisher+0x190>
 8008584:	4a4d      	ldr	r2, [pc, #308]	; (80086bc <rmw_create_publisher+0x1ac>)
 8008586:	462b      	mov	r3, r5
 8008588:	213c      	movs	r1, #60	; 0x3c
 800858a:	4650      	mov	r0, sl
 800858c:	f008 fa84 	bl	8010a98 <sniprintf>
 8008590:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008594:	e9c4 391f 	strd	r3, r9, [r4, #124]	; 0x7c
 8008598:	4641      	mov	r1, r8
 800859a:	2250      	movs	r2, #80	; 0x50
 800859c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80085a0:	f008 f8d2 	bl	8010748 <memcpy>
 80085a4:	f898 3008 	ldrb.w	r3, [r8, #8]
 80085a8:	4945      	ldr	r1, [pc, #276]	; (80086c0 <rmw_create_publisher+0x1b0>)
 80085aa:	2b02      	cmp	r3, #2
 80085ac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80085b0:	bf0c      	ite	eq
 80085b2:	f8d3 337c 	ldreq.w	r3, [r3, #892]	; 0x37c
 80085b6:	f8d3 3378 	ldrne.w	r3, [r3, #888]	; 0x378
 80085ba:	67a3      	str	r3, [r4, #120]	; 0x78
 80085bc:	2300      	movs	r3, #0
 80085be:	e9c4 3307 	strd	r3, r3, [r4, #28]
 80085c2:	4630      	mov	r0, r6
 80085c4:	f000 fb62 	bl	8008c8c <get_message_typesupport_handle>
 80085c8:	2800      	cmp	r0, #0
 80085ca:	d069      	beq.n	80086a0 <rmw_create_publisher+0x190>
 80085cc:	6842      	ldr	r2, [r0, #4]
 80085ce:	61a2      	str	r2, [r4, #24]
 80085d0:	2a00      	cmp	r2, #0
 80085d2:	d065      	beq.n	80086a0 <rmw_create_publisher+0x190>
 80085d4:	4629      	mov	r1, r5
 80085d6:	4643      	mov	r3, r8
 80085d8:	4648      	mov	r0, r9
 80085da:	f005 feab 	bl	800e334 <create_topic>
 80085de:	6260      	str	r0, [r4, #36]	; 0x24
 80085e0:	2800      	cmp	r0, #0
 80085e2:	d061      	beq.n	80086a8 <rmw_create_publisher+0x198>
 80085e4:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80085e8:	f241 5398 	movw	r3, #5528	; 0x1598
 80085ec:	2103      	movs	r1, #3
 80085ee:	5ad0      	ldrh	r0, [r2, r3]
 80085f0:	1c45      	adds	r5, r0, #1
 80085f2:	52d5      	strh	r5, [r2, r3]
 80085f4:	f001 fd28 	bl	800a048 <uxr_object_id>
 80085f8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80085fc:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8008600:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 8008604:	6912      	ldr	r2, [r2, #16]
 8008606:	6120      	str	r0, [r4, #16]
 8008608:	f04f 0a06 	mov.w	sl, #6
 800860c:	f8cd a000 	str.w	sl, [sp]
 8008610:	6819      	ldr	r1, [r3, #0]
 8008612:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8008616:	f502 7028 	add.w	r0, r2, #672	; 0x2a0
 800861a:	6922      	ldr	r2, [r4, #16]
 800861c:	f001 fc6e 	bl	8009efc <uxr_buffer_create_publisher_bin>
 8008620:	4602      	mov	r2, r0
 8008622:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8008626:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800862a:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800862e:	f000 fa9f 	bl	8008b70 <run_xrce_session>
 8008632:	b3a8      	cbz	r0, 80086a0 <rmw_create_publisher+0x190>
 8008634:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8008638:	f241 539a 	movw	r3, #5530	; 0x159a
 800863c:	2105      	movs	r1, #5
 800863e:	5ad0      	ldrh	r0, [r2, r3]
 8008640:	1c45      	adds	r5, r0, #1
 8008642:	52d5      	strh	r5, [r2, r3]
 8008644:	f001 fd00 	bl	800a048 <uxr_object_id>
 8008648:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800864c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008650:	6915      	ldr	r5, [r2, #16]
 8008652:	6160      	str	r0, [r4, #20]
 8008654:	ae04      	add	r6, sp, #16
 8008656:	4641      	mov	r1, r8
 8008658:	4630      	mov	r0, r6
 800865a:	f8d3 8384 	ldr.w	r8, [r3, #900]	; 0x384
 800865e:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 8008662:	f000 faa1 	bl	8008ba8 <convert_qos_profile>
 8008666:	e896 0003 	ldmia.w	r6, {r0, r1}
 800866a:	f8cd a00c 	str.w	sl, [sp, #12]
 800866e:	9001      	str	r0, [sp, #4]
 8008670:	f8ad 1008 	strh.w	r1, [sp, #8]
 8008674:	f8db 3010 	ldr.w	r3, [fp, #16]
 8008678:	9300      	str	r3, [sp, #0]
 800867a:	f505 7528 	add.w	r5, r5, #672	; 0x2a0
 800867e:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8008682:	f8d8 1000 	ldr.w	r1, [r8]
 8008686:	4628      	mov	r0, r5
 8008688:	f001 fc66 	bl	8009f58 <uxr_buffer_create_datawriter_bin>
 800868c:	4602      	mov	r2, r0
 800868e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8008692:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8008696:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800869a:	f000 fa69 	bl	8008b70 <run_xrce_session>
 800869e:	b938      	cbnz	r0, 80086b0 <rmw_create_publisher+0x1a0>
 80086a0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80086a2:	b108      	cbz	r0, 80086a8 <rmw_create_publisher+0x198>
 80086a4:	f000 fa0c 	bl	8008ac0 <rmw_uxrce_fini_topic_memory>
 80086a8:	4638      	mov	r0, r7
 80086aa:	f000 f9b1 	bl	8008a10 <rmw_uxrce_fini_publisher_memory>
 80086ae:	2700      	movs	r7, #0
 80086b0:	4638      	mov	r0, r7
 80086b2:	b007      	add	sp, #28
 80086b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086b8:	2000c120 	.word	0x2000c120
 80086bc:	08012044 	.word	0x08012044
 80086c0:	08012010 	.word	0x08012010

080086c4 <rmw_publisher_get_actual_qos>:
 80086c4:	b150      	cbz	r0, 80086dc <rmw_publisher_get_actual_qos+0x18>
 80086c6:	b149      	cbz	r1, 80086dc <rmw_publisher_get_actual_qos+0x18>
 80086c8:	b508      	push	{r3, lr}
 80086ca:	6843      	ldr	r3, [r0, #4]
 80086cc:	2250      	movs	r2, #80	; 0x50
 80086ce:	4608      	mov	r0, r1
 80086d0:	f103 0128 	add.w	r1, r3, #40	; 0x28
 80086d4:	f008 f838 	bl	8010748 <memcpy>
 80086d8:	2000      	movs	r0, #0
 80086da:	bd08      	pop	{r3, pc}
 80086dc:	200b      	movs	r0, #11
 80086de:	4770      	bx	lr

080086e0 <rmw_destroy_publisher>:
 80086e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086e2:	b128      	cbz	r0, 80086f0 <rmw_destroy_publisher+0x10>
 80086e4:	4604      	mov	r4, r0
 80086e6:	6800      	ldr	r0, [r0, #0]
 80086e8:	460d      	mov	r5, r1
 80086ea:	f000 fac1 	bl	8008c70 <is_uxrce_rmw_identifier_valid>
 80086ee:	b910      	cbnz	r0, 80086f6 <rmw_destroy_publisher+0x16>
 80086f0:	2401      	movs	r4, #1
 80086f2:	4620      	mov	r0, r4
 80086f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086f6:	6863      	ldr	r3, [r4, #4]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d0f9      	beq.n	80086f0 <rmw_destroy_publisher+0x10>
 80086fc:	2d00      	cmp	r5, #0
 80086fe:	d0f7      	beq.n	80086f0 <rmw_destroy_publisher+0x10>
 8008700:	6828      	ldr	r0, [r5, #0]
 8008702:	f000 fab5 	bl	8008c70 <is_uxrce_rmw_identifier_valid>
 8008706:	2800      	cmp	r0, #0
 8008708:	d0f2      	beq.n	80086f0 <rmw_destroy_publisher+0x10>
 800870a:	686c      	ldr	r4, [r5, #4]
 800870c:	2c00      	cmp	r4, #0
 800870e:	d0ef      	beq.n	80086f0 <rmw_destroy_publisher+0x10>
 8008710:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008712:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
 8008716:	f005 fe5d 	bl	800e3d4 <destroy_topic>
 800871a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800871e:	6962      	ldr	r2, [r4, #20]
 8008720:	6918      	ldr	r0, [r3, #16]
 8008722:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8008726:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800872a:	6819      	ldr	r1, [r3, #0]
 800872c:	f001 fb34 	bl	8009d98 <uxr_buffer_delete_entity>
 8008730:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8008734:	6922      	ldr	r2, [r4, #16]
 8008736:	4603      	mov	r3, r0
 8008738:	6908      	ldr	r0, [r1, #16]
 800873a:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800873e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8008742:	6809      	ldr	r1, [r1, #0]
 8008744:	461c      	mov	r4, r3
 8008746:	f001 fb27 	bl	8009d98 <uxr_buffer_delete_entity>
 800874a:	4606      	mov	r6, r0
 800874c:	6938      	ldr	r0, [r7, #16]
 800874e:	4622      	mov	r2, r4
 8008750:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8008754:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8008758:	f000 fa0a 	bl	8008b70 <run_xrce_session>
 800875c:	4604      	mov	r4, r0
 800875e:	6938      	ldr	r0, [r7, #16]
 8008760:	4632      	mov	r2, r6
 8008762:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8008766:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800876a:	f000 fa01 	bl	8008b70 <run_xrce_session>
 800876e:	b12c      	cbz	r4, 800877c <rmw_destroy_publisher+0x9c>
 8008770:	b120      	cbz	r0, 800877c <rmw_destroy_publisher+0x9c>
 8008772:	2400      	movs	r4, #0
 8008774:	4628      	mov	r0, r5
 8008776:	f000 f94b 	bl	8008a10 <rmw_uxrce_fini_publisher_memory>
 800877a:	e7ba      	b.n	80086f2 <rmw_destroy_publisher+0x12>
 800877c:	2402      	movs	r4, #2
 800877e:	e7f9      	b.n	8008774 <rmw_destroy_publisher+0x94>

08008780 <rmw_uxrce_init_service_memory>:
 8008780:	b1b2      	cbz	r2, 80087b0 <rmw_uxrce_init_service_memory+0x30>
 8008782:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008784:	7a07      	ldrb	r7, [r0, #8]
 8008786:	4605      	mov	r5, r0
 8008788:	b98f      	cbnz	r7, 80087ae <rmw_uxrce_init_service_memory+0x2e>
 800878a:	e9c0 7700 	strd	r7, r7, [r0]
 800878e:	460c      	mov	r4, r1
 8008790:	23c8      	movs	r3, #200	; 0xc8
 8008792:	2101      	movs	r1, #1
 8008794:	fb03 4602 	mla	r6, r3, r2, r4
 8008798:	60c3      	str	r3, [r0, #12]
 800879a:	7201      	strb	r1, [r0, #8]
 800879c:	4621      	mov	r1, r4
 800879e:	4628      	mov	r0, r5
 80087a0:	f005 fb6a 	bl	800de78 <put_memory>
 80087a4:	60e4      	str	r4, [r4, #12]
 80087a6:	f804 7bc8 	strb.w	r7, [r4], #200
 80087aa:	42a6      	cmp	r6, r4
 80087ac:	d1f6      	bne.n	800879c <rmw_uxrce_init_service_memory+0x1c>
 80087ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087b0:	4770      	bx	lr
 80087b2:	bf00      	nop

080087b4 <rmw_uxrce_init_client_memory>:
 80087b4:	b1b2      	cbz	r2, 80087e4 <rmw_uxrce_init_client_memory+0x30>
 80087b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087b8:	7a07      	ldrb	r7, [r0, #8]
 80087ba:	4605      	mov	r5, r0
 80087bc:	b98f      	cbnz	r7, 80087e2 <rmw_uxrce_init_client_memory+0x2e>
 80087be:	e9c0 7700 	strd	r7, r7, [r0]
 80087c2:	460c      	mov	r4, r1
 80087c4:	23c8      	movs	r3, #200	; 0xc8
 80087c6:	2101      	movs	r1, #1
 80087c8:	fb03 4602 	mla	r6, r3, r2, r4
 80087cc:	60c3      	str	r3, [r0, #12]
 80087ce:	7201      	strb	r1, [r0, #8]
 80087d0:	4621      	mov	r1, r4
 80087d2:	4628      	mov	r0, r5
 80087d4:	f005 fb50 	bl	800de78 <put_memory>
 80087d8:	60e4      	str	r4, [r4, #12]
 80087da:	f804 7bc8 	strb.w	r7, [r4], #200
 80087de:	42a6      	cmp	r6, r4
 80087e0:	d1f6      	bne.n	80087d0 <rmw_uxrce_init_client_memory+0x1c>
 80087e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087e4:	4770      	bx	lr
 80087e6:	bf00      	nop

080087e8 <rmw_uxrce_init_publisher_memory>:
 80087e8:	b1b2      	cbz	r2, 8008818 <rmw_uxrce_init_publisher_memory+0x30>
 80087ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087ec:	7a07      	ldrb	r7, [r0, #8]
 80087ee:	4605      	mov	r5, r0
 80087f0:	b98f      	cbnz	r7, 8008816 <rmw_uxrce_init_publisher_memory+0x2e>
 80087f2:	e9c0 7700 	strd	r7, r7, [r0]
 80087f6:	460c      	mov	r4, r1
 80087f8:	23d8      	movs	r3, #216	; 0xd8
 80087fa:	2101      	movs	r1, #1
 80087fc:	fb03 4602 	mla	r6, r3, r2, r4
 8008800:	60c3      	str	r3, [r0, #12]
 8008802:	7201      	strb	r1, [r0, #8]
 8008804:	4621      	mov	r1, r4
 8008806:	4628      	mov	r0, r5
 8008808:	f005 fb36 	bl	800de78 <put_memory>
 800880c:	60e4      	str	r4, [r4, #12]
 800880e:	f804 7bd8 	strb.w	r7, [r4], #216
 8008812:	42a6      	cmp	r6, r4
 8008814:	d1f6      	bne.n	8008804 <rmw_uxrce_init_publisher_memory+0x1c>
 8008816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008818:	4770      	bx	lr
 800881a:	bf00      	nop

0800881c <rmw_uxrce_init_subscription_memory>:
 800881c:	b1b2      	cbz	r2, 800884c <rmw_uxrce_init_subscription_memory+0x30>
 800881e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008820:	7a07      	ldrb	r7, [r0, #8]
 8008822:	4605      	mov	r5, r0
 8008824:	b98f      	cbnz	r7, 800884a <rmw_uxrce_init_subscription_memory+0x2e>
 8008826:	e9c0 7700 	strd	r7, r7, [r0]
 800882a:	460c      	mov	r4, r1
 800882c:	23d0      	movs	r3, #208	; 0xd0
 800882e:	2101      	movs	r1, #1
 8008830:	fb03 4602 	mla	r6, r3, r2, r4
 8008834:	60c3      	str	r3, [r0, #12]
 8008836:	7201      	strb	r1, [r0, #8]
 8008838:	4621      	mov	r1, r4
 800883a:	4628      	mov	r0, r5
 800883c:	f005 fb1c 	bl	800de78 <put_memory>
 8008840:	60e4      	str	r4, [r4, #12]
 8008842:	f804 7bd0 	strb.w	r7, [r4], #208
 8008846:	42a6      	cmp	r6, r4
 8008848:	d1f6      	bne.n	8008838 <rmw_uxrce_init_subscription_memory+0x1c>
 800884a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800884c:	4770      	bx	lr
 800884e:	bf00      	nop

08008850 <rmw_uxrce_init_node_memory>:
 8008850:	b1b2      	cbz	r2, 8008880 <rmw_uxrce_init_node_memory+0x30>
 8008852:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008854:	7a07      	ldrb	r7, [r0, #8]
 8008856:	4605      	mov	r5, r0
 8008858:	b98f      	cbnz	r7, 800887e <rmw_uxrce_init_node_memory+0x2e>
 800885a:	e9c0 7700 	strd	r7, r7, [r0]
 800885e:	460c      	mov	r4, r1
 8008860:	23a4      	movs	r3, #164	; 0xa4
 8008862:	2101      	movs	r1, #1
 8008864:	fb03 4602 	mla	r6, r3, r2, r4
 8008868:	60c3      	str	r3, [r0, #12]
 800886a:	7201      	strb	r1, [r0, #8]
 800886c:	4621      	mov	r1, r4
 800886e:	4628      	mov	r0, r5
 8008870:	f005 fb02 	bl	800de78 <put_memory>
 8008874:	60e4      	str	r4, [r4, #12]
 8008876:	f804 7ba4 	strb.w	r7, [r4], #164
 800887a:	42a6      	cmp	r6, r4
 800887c:	d1f6      	bne.n	800886c <rmw_uxrce_init_node_memory+0x1c>
 800887e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008880:	4770      	bx	lr
 8008882:	bf00      	nop

08008884 <rmw_uxrce_init_session_memory>:
 8008884:	b1d2      	cbz	r2, 80088bc <rmw_uxrce_init_session_memory+0x38>
 8008886:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800888a:	7a07      	ldrb	r7, [r0, #8]
 800888c:	4605      	mov	r5, r0
 800888e:	b99f      	cbnz	r7, 80088b8 <rmw_uxrce_init_session_memory+0x34>
 8008890:	e9c0 7700 	strd	r7, r7, [r0]
 8008894:	f241 53a8 	movw	r3, #5544	; 0x15a8
 8008898:	460c      	mov	r4, r1
 800889a:	2101      	movs	r1, #1
 800889c:	fb03 4602 	mla	r6, r3, r2, r4
 80088a0:	60c3      	str	r3, [r0, #12]
 80088a2:	4698      	mov	r8, r3
 80088a4:	7201      	strb	r1, [r0, #8]
 80088a6:	4621      	mov	r1, r4
 80088a8:	4628      	mov	r0, r5
 80088aa:	f005 fae5 	bl	800de78 <put_memory>
 80088ae:	60e4      	str	r4, [r4, #12]
 80088b0:	7027      	strb	r7, [r4, #0]
 80088b2:	4444      	add	r4, r8
 80088b4:	42a6      	cmp	r6, r4
 80088b6:	d1f6      	bne.n	80088a6 <rmw_uxrce_init_session_memory+0x22>
 80088b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088bc:	4770      	bx	lr
 80088be:	bf00      	nop

080088c0 <rmw_uxrce_init_topic_memory>:
 80088c0:	b1c2      	cbz	r2, 80088f4 <rmw_uxrce_init_topic_memory+0x34>
 80088c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088c4:	7a07      	ldrb	r7, [r0, #8]
 80088c6:	4606      	mov	r6, r0
 80088c8:	b99f      	cbnz	r7, 80088f2 <rmw_uxrce_init_topic_memory+0x32>
 80088ca:	e9c0 7700 	strd	r7, r7, [r0]
 80088ce:	460c      	mov	r4, r1
 80088d0:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80088d4:	2101      	movs	r1, #1
 80088d6:	231c      	movs	r3, #28
 80088d8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80088dc:	7201      	strb	r1, [r0, #8]
 80088de:	60c3      	str	r3, [r0, #12]
 80088e0:	4621      	mov	r1, r4
 80088e2:	4630      	mov	r0, r6
 80088e4:	f005 fac8 	bl	800de78 <put_memory>
 80088e8:	60e4      	str	r4, [r4, #12]
 80088ea:	f804 7b1c 	strb.w	r7, [r4], #28
 80088ee:	42a5      	cmp	r5, r4
 80088f0:	d1f6      	bne.n	80088e0 <rmw_uxrce_init_topic_memory+0x20>
 80088f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088f4:	4770      	bx	lr
 80088f6:	bf00      	nop

080088f8 <rmw_uxrce_init_static_input_buffer_memory>:
 80088f8:	b1d2      	cbz	r2, 8008930 <rmw_uxrce_init_static_input_buffer_memory+0x38>
 80088fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088fc:	7a07      	ldrb	r7, [r0, #8]
 80088fe:	4606      	mov	r6, r0
 8008900:	b9af      	cbnz	r7, 800892e <rmw_uxrce_init_static_input_buffer_memory+0x36>
 8008902:	e9c0 7700 	strd	r7, r7, [r0]
 8008906:	460c      	mov	r4, r1
 8008908:	eb02 1242 	add.w	r2, r2, r2, lsl #5
 800890c:	2101      	movs	r1, #1
 800890e:	f44f 6304 	mov.w	r3, #2112	; 0x840
 8008912:	eb04 1582 	add.w	r5, r4, r2, lsl #6
 8008916:	7201      	strb	r1, [r0, #8]
 8008918:	60c3      	str	r3, [r0, #12]
 800891a:	4621      	mov	r1, r4
 800891c:	4630      	mov	r0, r6
 800891e:	f005 faab 	bl	800de78 <put_memory>
 8008922:	60e4      	str	r4, [r4, #12]
 8008924:	7027      	strb	r7, [r4, #0]
 8008926:	f504 6404 	add.w	r4, r4, #2112	; 0x840
 800892a:	42a5      	cmp	r5, r4
 800892c:	d1f5      	bne.n	800891a <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800892e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008930:	4770      	bx	lr
 8008932:	bf00      	nop

08008934 <rmw_uxrce_init_init_options_impl_memory>:
 8008934:	b1b2      	cbz	r2, 8008964 <rmw_uxrce_init_init_options_impl_memory+0x30>
 8008936:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008938:	7a07      	ldrb	r7, [r0, #8]
 800893a:	4605      	mov	r5, r0
 800893c:	b98f      	cbnz	r7, 8008962 <rmw_uxrce_init_init_options_impl_memory+0x2e>
 800893e:	e9c0 7700 	strd	r7, r7, [r0]
 8008942:	460c      	mov	r4, r1
 8008944:	232c      	movs	r3, #44	; 0x2c
 8008946:	2101      	movs	r1, #1
 8008948:	fb03 4602 	mla	r6, r3, r2, r4
 800894c:	60c3      	str	r3, [r0, #12]
 800894e:	7201      	strb	r1, [r0, #8]
 8008950:	4621      	mov	r1, r4
 8008952:	4628      	mov	r0, r5
 8008954:	f005 fa90 	bl	800de78 <put_memory>
 8008958:	60e4      	str	r4, [r4, #12]
 800895a:	f804 7b2c 	strb.w	r7, [r4], #44
 800895e:	42a6      	cmp	r6, r4
 8008960:	d1f6      	bne.n	8008950 <rmw_uxrce_init_init_options_impl_memory+0x1c>
 8008962:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008964:	4770      	bx	lr
 8008966:	bf00      	nop

08008968 <rmw_uxrce_init_wait_set_memory>:
 8008968:	b1c2      	cbz	r2, 800899c <rmw_uxrce_init_wait_set_memory+0x34>
 800896a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800896c:	7a07      	ldrb	r7, [r0, #8]
 800896e:	4606      	mov	r6, r0
 8008970:	b99f      	cbnz	r7, 800899a <rmw_uxrce_init_wait_set_memory+0x32>
 8008972:	e9c0 7700 	strd	r7, r7, [r0]
 8008976:	460c      	mov	r4, r1
 8008978:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800897c:	2101      	movs	r1, #1
 800897e:	231c      	movs	r3, #28
 8008980:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008984:	7201      	strb	r1, [r0, #8]
 8008986:	60c3      	str	r3, [r0, #12]
 8008988:	4621      	mov	r1, r4
 800898a:	4630      	mov	r0, r6
 800898c:	f005 fa74 	bl	800de78 <put_memory>
 8008990:	60e4      	str	r4, [r4, #12]
 8008992:	f804 7b1c 	strb.w	r7, [r4], #28
 8008996:	42a5      	cmp	r5, r4
 8008998:	d1f6      	bne.n	8008988 <rmw_uxrce_init_wait_set_memory+0x20>
 800899a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800899c:	4770      	bx	lr
 800899e:	bf00      	nop

080089a0 <rmw_uxrce_init_guard_condition_memory>:
 80089a0:	b1b2      	cbz	r2, 80089d0 <rmw_uxrce_init_guard_condition_memory+0x30>
 80089a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089a4:	7a07      	ldrb	r7, [r0, #8]
 80089a6:	4605      	mov	r5, r0
 80089a8:	b98f      	cbnz	r7, 80089ce <rmw_uxrce_init_guard_condition_memory+0x2e>
 80089aa:	e9c0 7700 	strd	r7, r7, [r0]
 80089ae:	460c      	mov	r4, r1
 80089b0:	2320      	movs	r3, #32
 80089b2:	2101      	movs	r1, #1
 80089b4:	eb04 1642 	add.w	r6, r4, r2, lsl #5
 80089b8:	7201      	strb	r1, [r0, #8]
 80089ba:	60c3      	str	r3, [r0, #12]
 80089bc:	4621      	mov	r1, r4
 80089be:	4628      	mov	r0, r5
 80089c0:	f005 fa5a 	bl	800de78 <put_memory>
 80089c4:	60e4      	str	r4, [r4, #12]
 80089c6:	f804 7b20 	strb.w	r7, [r4], #32
 80089ca:	42a6      	cmp	r6, r4
 80089cc:	d1f6      	bne.n	80089bc <rmw_uxrce_init_guard_condition_memory+0x1c>
 80089ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089d0:	4770      	bx	lr
 80089d2:	bf00      	nop

080089d4 <rmw_uxrce_fini_session_memory>:
 80089d4:	4601      	mov	r1, r0
 80089d6:	4801      	ldr	r0, [pc, #4]	; (80089dc <rmw_uxrce_fini_session_memory+0x8>)
 80089d8:	f005 ba4e 	b.w	800de78 <put_memory>
 80089dc:	2000f2b8 	.word	0x2000f2b8

080089e0 <rmw_uxrce_fini_node_memory>:
 80089e0:	b538      	push	{r3, r4, r5, lr}
 80089e2:	4604      	mov	r4, r0
 80089e4:	6800      	ldr	r0, [r0, #0]
 80089e6:	b128      	cbz	r0, 80089f4 <rmw_uxrce_fini_node_memory+0x14>
 80089e8:	4b07      	ldr	r3, [pc, #28]	; (8008a08 <rmw_uxrce_fini_node_memory+0x28>)
 80089ea:	6819      	ldr	r1, [r3, #0]
 80089ec:	f7f7 fc10 	bl	8000210 <strcmp>
 80089f0:	b940      	cbnz	r0, 8008a04 <rmw_uxrce_fini_node_memory+0x24>
 80089f2:	6020      	str	r0, [r4, #0]
 80089f4:	6861      	ldr	r1, [r4, #4]
 80089f6:	b129      	cbz	r1, 8008a04 <rmw_uxrce_fini_node_memory+0x24>
 80089f8:	2500      	movs	r5, #0
 80089fa:	4804      	ldr	r0, [pc, #16]	; (8008a0c <rmw_uxrce_fini_node_memory+0x2c>)
 80089fc:	610d      	str	r5, [r1, #16]
 80089fe:	f005 fa3b 	bl	800de78 <put_memory>
 8008a02:	6065      	str	r5, [r4, #4]
 8008a04:	bd38      	pop	{r3, r4, r5, pc}
 8008a06:	bf00      	nop
 8008a08:	08012518 	.word	0x08012518
 8008a0c:	2000f0e4 	.word	0x2000f0e4

08008a10 <rmw_uxrce_fini_publisher_memory>:
 8008a10:	b510      	push	{r4, lr}
 8008a12:	4604      	mov	r4, r0
 8008a14:	6800      	ldr	r0, [r0, #0]
 8008a16:	b128      	cbz	r0, 8008a24 <rmw_uxrce_fini_publisher_memory+0x14>
 8008a18:	4b06      	ldr	r3, [pc, #24]	; (8008a34 <rmw_uxrce_fini_publisher_memory+0x24>)
 8008a1a:	6819      	ldr	r1, [r3, #0]
 8008a1c:	f7f7 fbf8 	bl	8000210 <strcmp>
 8008a20:	b938      	cbnz	r0, 8008a32 <rmw_uxrce_fini_publisher_memory+0x22>
 8008a22:	6020      	str	r0, [r4, #0]
 8008a24:	6861      	ldr	r1, [r4, #4]
 8008a26:	b121      	cbz	r1, 8008a32 <rmw_uxrce_fini_publisher_memory+0x22>
 8008a28:	4803      	ldr	r0, [pc, #12]	; (8008a38 <rmw_uxrce_fini_publisher_memory+0x28>)
 8008a2a:	f005 fa25 	bl	800de78 <put_memory>
 8008a2e:	2300      	movs	r3, #0
 8008a30:	6063      	str	r3, [r4, #4]
 8008a32:	bd10      	pop	{r4, pc}
 8008a34:	08012518 	.word	0x08012518
 8008a38:	2000c120 	.word	0x2000c120

08008a3c <rmw_uxrce_fini_subscription_memory>:
 8008a3c:	b510      	push	{r4, lr}
 8008a3e:	4604      	mov	r4, r0
 8008a40:	6800      	ldr	r0, [r0, #0]
 8008a42:	b128      	cbz	r0, 8008a50 <rmw_uxrce_fini_subscription_memory+0x14>
 8008a44:	4b06      	ldr	r3, [pc, #24]	; (8008a60 <rmw_uxrce_fini_subscription_memory+0x24>)
 8008a46:	6819      	ldr	r1, [r3, #0]
 8008a48:	f7f7 fbe2 	bl	8000210 <strcmp>
 8008a4c:	b938      	cbnz	r0, 8008a5e <rmw_uxrce_fini_subscription_memory+0x22>
 8008a4e:	6020      	str	r0, [r4, #0]
 8008a50:	6861      	ldr	r1, [r4, #4]
 8008a52:	b121      	cbz	r1, 8008a5e <rmw_uxrce_fini_subscription_memory+0x22>
 8008a54:	4803      	ldr	r0, [pc, #12]	; (8008a64 <rmw_uxrce_fini_subscription_memory+0x28>)
 8008a56:	f005 fa0f 	bl	800de78 <put_memory>
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	6063      	str	r3, [r4, #4]
 8008a5e:	bd10      	pop	{r4, pc}
 8008a60:	08012518 	.word	0x08012518
 8008a64:	2000f37c 	.word	0x2000f37c

08008a68 <rmw_uxrce_fini_service_memory>:
 8008a68:	b510      	push	{r4, lr}
 8008a6a:	4604      	mov	r4, r0
 8008a6c:	6800      	ldr	r0, [r0, #0]
 8008a6e:	b128      	cbz	r0, 8008a7c <rmw_uxrce_fini_service_memory+0x14>
 8008a70:	4b06      	ldr	r3, [pc, #24]	; (8008a8c <rmw_uxrce_fini_service_memory+0x24>)
 8008a72:	6819      	ldr	r1, [r3, #0]
 8008a74:	f7f7 fbcc 	bl	8000210 <strcmp>
 8008a78:	b938      	cbnz	r0, 8008a8a <rmw_uxrce_fini_service_memory+0x22>
 8008a7a:	6020      	str	r0, [r4, #0]
 8008a7c:	6861      	ldr	r1, [r4, #4]
 8008a7e:	b121      	cbz	r1, 8008a8a <rmw_uxrce_fini_service_memory+0x22>
 8008a80:	4803      	ldr	r0, [pc, #12]	; (8008a90 <rmw_uxrce_fini_service_memory+0x28>)
 8008a82:	f005 f9f9 	bl	800de78 <put_memory>
 8008a86:	2300      	movs	r3, #0
 8008a88:	6063      	str	r3, [r4, #4]
 8008a8a:	bd10      	pop	{r4, pc}
 8008a8c:	08012518 	.word	0x08012518
 8008a90:	2000f36c 	.word	0x2000f36c

08008a94 <rmw_uxrce_fini_client_memory>:
 8008a94:	b510      	push	{r4, lr}
 8008a96:	4604      	mov	r4, r0
 8008a98:	6800      	ldr	r0, [r0, #0]
 8008a9a:	b128      	cbz	r0, 8008aa8 <rmw_uxrce_fini_client_memory+0x14>
 8008a9c:	4b06      	ldr	r3, [pc, #24]	; (8008ab8 <rmw_uxrce_fini_client_memory+0x24>)
 8008a9e:	6819      	ldr	r1, [r3, #0]
 8008aa0:	f7f7 fbb6 	bl	8000210 <strcmp>
 8008aa4:	b938      	cbnz	r0, 8008ab6 <rmw_uxrce_fini_client_memory+0x22>
 8008aa6:	6020      	str	r0, [r4, #0]
 8008aa8:	6861      	ldr	r1, [r4, #4]
 8008aaa:	b121      	cbz	r1, 8008ab6 <rmw_uxrce_fini_client_memory+0x22>
 8008aac:	4803      	ldr	r0, [pc, #12]	; (8008abc <rmw_uxrce_fini_client_memory+0x28>)
 8008aae:	f005 f9e3 	bl	800de78 <put_memory>
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	6063      	str	r3, [r4, #4]
 8008ab6:	bd10      	pop	{r4, pc}
 8008ab8:	08012518 	.word	0x08012518
 8008abc:	2000c9a0 	.word	0x2000c9a0

08008ac0 <rmw_uxrce_fini_topic_memory>:
 8008ac0:	b510      	push	{r4, lr}
 8008ac2:	4601      	mov	r1, r0
 8008ac4:	4604      	mov	r4, r0
 8008ac6:	4803      	ldr	r0, [pc, #12]	; (8008ad4 <rmw_uxrce_fini_topic_memory+0x14>)
 8008ac8:	f005 f9d6 	bl	800de78 <put_memory>
 8008acc:	2300      	movs	r3, #0
 8008ace:	61a3      	str	r3, [r4, #24]
 8008ad0:	bd10      	pop	{r4, pc}
 8008ad2:	bf00      	nop
 8008ad4:	2000f2a8 	.word	0x2000f2a8

08008ad8 <rmw_uxrce_get_static_input_buffer_for_entity>:
 8008ad8:	b082      	sub	sp, #8
 8008ada:	b4f0      	push	{r4, r5, r6, r7}
 8008adc:	4923      	ldr	r1, [pc, #140]	; (8008b6c <rmw_uxrce_get_static_input_buffer_for_entity+0x94>)
 8008ade:	ac04      	add	r4, sp, #16
 8008ae0:	e884 000c 	stmia.w	r4, {r2, r3}
 8008ae4:	680d      	ldr	r5, [r1, #0]
 8008ae6:	9c05      	ldr	r4, [sp, #20]
 8008ae8:	2d00      	cmp	r5, #0
 8008aea:	d03d      	beq.n	8008b68 <rmw_uxrce_get_static_input_buffer_for_entity+0x90>
 8008aec:	462b      	mov	r3, r5
 8008aee:	2100      	movs	r1, #0
 8008af0:	68da      	ldr	r2, [r3, #12]
 8008af2:	689b      	ldr	r3, [r3, #8]
 8008af4:	f8d2 2814 	ldr.w	r2, [r2, #2068]	; 0x814
 8008af8:	4290      	cmp	r0, r2
 8008afa:	bf08      	it	eq
 8008afc:	3101      	addeq	r1, #1
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d1f6      	bne.n	8008af0 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 8008b02:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8008b06:	2b02      	cmp	r3, #2
 8008b08:	d026      	beq.n	8008b58 <rmw_uxrce_get_static_input_buffer_for_entity+0x80>
 8008b0a:	d906      	bls.n	8008b1a <rmw_uxrce_get_static_input_buffer_for_entity+0x42>
 8008b0c:	2b03      	cmp	r3, #3
 8008b0e:	d004      	beq.n	8008b1a <rmw_uxrce_get_static_input_buffer_for_entity+0x42>
 8008b10:	2100      	movs	r1, #0
 8008b12:	bcf0      	pop	{r4, r5, r6, r7}
 8008b14:	4608      	mov	r0, r1
 8008b16:	b002      	add	sp, #8
 8008b18:	4770      	bx	lr
 8008b1a:	b304      	cbz	r4, 8008b5e <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8008b1c:	428c      	cmp	r4, r1
 8008b1e:	d81e      	bhi.n	8008b5e <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8008b20:	2d00      	cmp	r5, #0
 8008b22:	d0f5      	beq.n	8008b10 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 8008b24:	2100      	movs	r1, #0
 8008b26:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8008b2a:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 8008b2e:	e002      	b.n	8008b36 <rmw_uxrce_get_static_input_buffer_for_entity+0x5e>
 8008b30:	68ad      	ldr	r5, [r5, #8]
 8008b32:	2d00      	cmp	r5, #0
 8008b34:	d0ed      	beq.n	8008b12 <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 8008b36:	68eb      	ldr	r3, [r5, #12]
 8008b38:	f8d3 2814 	ldr.w	r2, [r3, #2068]	; 0x814
 8008b3c:	4290      	cmp	r0, r2
 8008b3e:	d1f7      	bne.n	8008b30 <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 8008b40:	f603 0318 	addw	r3, r3, #2072	; 0x818
 8008b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b48:	42b2      	cmp	r2, r6
 8008b4a:	eb73 0407 	sbcs.w	r4, r3, r7
 8008b4e:	daef      	bge.n	8008b30 <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 8008b50:	4616      	mov	r6, r2
 8008b52:	461f      	mov	r7, r3
 8008b54:	4629      	mov	r1, r5
 8008b56:	e7eb      	b.n	8008b30 <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 8008b58:	b10c      	cbz	r4, 8008b5e <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8008b5a:	428c      	cmp	r4, r1
 8008b5c:	d9d8      	bls.n	8008b10 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 8008b5e:	bcf0      	pop	{r4, r5, r6, r7}
 8008b60:	4802      	ldr	r0, [pc, #8]	; (8008b6c <rmw_uxrce_get_static_input_buffer_for_entity+0x94>)
 8008b62:	b002      	add	sp, #8
 8008b64:	f005 b978 	b.w	800de58 <get_memory>
 8008b68:	4629      	mov	r1, r5
 8008b6a:	e7ca      	b.n	8008b02 <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 8008b6c:	2000c110 	.word	0x2000c110

08008b70 <run_xrce_session>:
 8008b70:	b510      	push	{r4, lr}
 8008b72:	788c      	ldrb	r4, [r1, #2]
 8008b74:	b086      	sub	sp, #24
 8008b76:	2c01      	cmp	r4, #1
 8008b78:	f8ad 200e 	strh.w	r2, [sp, #14]
 8008b7c:	d00c      	beq.n	8008b98 <run_xrce_session+0x28>
 8008b7e:	4619      	mov	r1, r3
 8008b80:	2301      	movs	r3, #1
 8008b82:	9300      	str	r3, [sp, #0]
 8008b84:	f10d 020e 	add.w	r2, sp, #14
 8008b88:	f10d 0317 	add.w	r3, sp, #23
 8008b8c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8008b90:	f001 ff4e 	bl	800aa30 <uxr_run_session_until_all_status>
 8008b94:	b006      	add	sp, #24
 8008b96:	bd10      	pop	{r4, pc}
 8008b98:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8008b9c:	f001 fba0 	bl	800a2e0 <uxr_flash_output_streams>
 8008ba0:	4620      	mov	r0, r4
 8008ba2:	b006      	add	sp, #24
 8008ba4:	bd10      	pop	{r4, pc}
 8008ba6:	bf00      	nop

08008ba8 <convert_qos_profile>:
 8008ba8:	b430      	push	{r4, r5}
 8008baa:	7a0d      	ldrb	r5, [r1, #8]
 8008bac:	780c      	ldrb	r4, [r1, #0]
 8008bae:	7a4a      	ldrb	r2, [r1, #9]
 8008bb0:	8889      	ldrh	r1, [r1, #4]
 8008bb2:	8081      	strh	r1, [r0, #4]
 8008bb4:	f1a5 0502 	sub.w	r5, r5, #2
 8008bb8:	f1a4 0402 	sub.w	r4, r4, #2
 8008bbc:	2a02      	cmp	r2, #2
 8008bbe:	fab5 f585 	clz	r5, r5
 8008bc2:	fab4 f484 	clz	r4, r4
 8008bc6:	ea4f 1555 	mov.w	r5, r5, lsr #5
 8008bca:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8008bce:	bf18      	it	ne
 8008bd0:	2200      	movne	r2, #0
 8008bd2:	7045      	strb	r5, [r0, #1]
 8008bd4:	7084      	strb	r4, [r0, #2]
 8008bd6:	7002      	strb	r2, [r0, #0]
 8008bd8:	bc30      	pop	{r4, r5}
 8008bda:	4770      	bx	lr

08008bdc <generate_type_name>:
 8008bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008bde:	2300      	movs	r3, #0
 8008be0:	700b      	strb	r3, [r1, #0]
 8008be2:	6803      	ldr	r3, [r0, #0]
 8008be4:	b087      	sub	sp, #28
 8008be6:	4614      	mov	r4, r2
 8008be8:	b1d3      	cbz	r3, 8008c20 <generate_type_name+0x44>
 8008bea:	4d0f      	ldr	r5, [pc, #60]	; (8008c28 <generate_type_name+0x4c>)
 8008bec:	462f      	mov	r7, r5
 8008bee:	4a0f      	ldr	r2, [pc, #60]	; (8008c2c <generate_type_name+0x50>)
 8008bf0:	4e0f      	ldr	r6, [pc, #60]	; (8008c30 <generate_type_name+0x54>)
 8008bf2:	6840      	ldr	r0, [r0, #4]
 8008bf4:	9004      	str	r0, [sp, #16]
 8008bf6:	e9cd 6201 	strd	r6, r2, [sp, #4]
 8008bfa:	4608      	mov	r0, r1
 8008bfc:	9205      	str	r2, [sp, #20]
 8008bfe:	9503      	str	r5, [sp, #12]
 8008c00:	4a0c      	ldr	r2, [pc, #48]	; (8008c34 <generate_type_name+0x58>)
 8008c02:	9700      	str	r7, [sp, #0]
 8008c04:	4621      	mov	r1, r4
 8008c06:	f007 ff47 	bl	8010a98 <sniprintf>
 8008c0a:	2800      	cmp	r0, #0
 8008c0c:	db05      	blt.n	8008c1a <generate_type_name+0x3e>
 8008c0e:	4284      	cmp	r4, r0
 8008c10:	bfd4      	ite	le
 8008c12:	2000      	movle	r0, #0
 8008c14:	2001      	movgt	r0, #1
 8008c16:	b007      	add	sp, #28
 8008c18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c1a:	2000      	movs	r0, #0
 8008c1c:	b007      	add	sp, #28
 8008c1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c20:	4b05      	ldr	r3, [pc, #20]	; (8008c38 <generate_type_name+0x5c>)
 8008c22:	4d01      	ldr	r5, [pc, #4]	; (8008c28 <generate_type_name+0x4c>)
 8008c24:	461f      	mov	r7, r3
 8008c26:	e7e2      	b.n	8008bee <generate_type_name+0x12>
 8008c28:	08012034 	.word	0x08012034
 8008c2c:	08012048 	.word	0x08012048
 8008c30:	0801204c 	.word	0x0801204c
 8008c34:	08012038 	.word	0x08012038
 8008c38:	080122f0 	.word	0x080122f0

08008c3c <generate_topic_name>:
 8008c3c:	b510      	push	{r4, lr}
 8008c3e:	b082      	sub	sp, #8
 8008c40:	4b09      	ldr	r3, [pc, #36]	; (8008c68 <generate_topic_name+0x2c>)
 8008c42:	9000      	str	r0, [sp, #0]
 8008c44:	4614      	mov	r4, r2
 8008c46:	4608      	mov	r0, r1
 8008c48:	4611      	mov	r1, r2
 8008c4a:	4a08      	ldr	r2, [pc, #32]	; (8008c6c <generate_topic_name+0x30>)
 8008c4c:	f007 ff24 	bl	8010a98 <sniprintf>
 8008c50:	2800      	cmp	r0, #0
 8008c52:	db05      	blt.n	8008c60 <generate_topic_name+0x24>
 8008c54:	4284      	cmp	r4, r0
 8008c56:	bfd4      	ite	le
 8008c58:	2000      	movle	r0, #0
 8008c5a:	2001      	movgt	r0, #1
 8008c5c:	b002      	add	sp, #8
 8008c5e:	bd10      	pop	{r4, pc}
 8008c60:	2000      	movs	r0, #0
 8008c62:	b002      	add	sp, #8
 8008c64:	bd10      	pop	{r4, pc}
 8008c66:	bf00      	nop
 8008c68:	08012058 	.word	0x08012058
 8008c6c:	08012050 	.word	0x08012050

08008c70 <is_uxrce_rmw_identifier_valid>:
 8008c70:	b510      	push	{r4, lr}
 8008c72:	4604      	mov	r4, r0
 8008c74:	b140      	cbz	r0, 8008c88 <is_uxrce_rmw_identifier_valid+0x18>
 8008c76:	f005 f913 	bl	800dea0 <rmw_get_implementation_identifier>
 8008c7a:	4601      	mov	r1, r0
 8008c7c:	4620      	mov	r0, r4
 8008c7e:	f7f7 fac7 	bl	8000210 <strcmp>
 8008c82:	fab0 f080 	clz	r0, r0
 8008c86:	0940      	lsrs	r0, r0, #5
 8008c88:	bd10      	pop	{r4, pc}
 8008c8a:	bf00      	nop

08008c8c <get_message_typesupport_handle>:
 8008c8c:	6883      	ldr	r3, [r0, #8]
 8008c8e:	4718      	bx	r3

08008c90 <get_message_typesupport_handle_function>:
 8008c90:	b510      	push	{r4, lr}
 8008c92:	4604      	mov	r4, r0
 8008c94:	6800      	ldr	r0, [r0, #0]
 8008c96:	f7f7 fabb 	bl	8000210 <strcmp>
 8008c9a:	2800      	cmp	r0, #0
 8008c9c:	bf0c      	ite	eq
 8008c9e:	4620      	moveq	r0, r4
 8008ca0:	2000      	movne	r0, #0
 8008ca2:	bd10      	pop	{r4, pc}

08008ca4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8008ca4:	f000 b82a 	b.w	8008cfc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32>

08008ca8 <_Int32__max_serialized_size>:
 8008ca8:	b508      	push	{r3, lr}
 8008caa:	2104      	movs	r1, #4
 8008cac:	2000      	movs	r0, #0
 8008cae:	f001 f807 	bl	8009cc0 <ucdr_alignment>
 8008cb2:	3004      	adds	r0, #4
 8008cb4:	bd08      	pop	{r3, pc}
 8008cb6:	bf00      	nop

08008cb8 <_Int32__cdr_deserialize>:
 8008cb8:	b109      	cbz	r1, 8008cbe <_Int32__cdr_deserialize+0x6>
 8008cba:	f000 bf1b 	b.w	8009af4 <ucdr_deserialize_int32_t>
 8008cbe:	4608      	mov	r0, r1
 8008cc0:	4770      	bx	lr
 8008cc2:	bf00      	nop

08008cc4 <get_serialized_size_std_msgs__msg__Int32>:
 8008cc4:	b130      	cbz	r0, 8008cd4 <get_serialized_size_std_msgs__msg__Int32+0x10>
 8008cc6:	b508      	push	{r3, lr}
 8008cc8:	4608      	mov	r0, r1
 8008cca:	2104      	movs	r1, #4
 8008ccc:	f000 fff8 	bl	8009cc0 <ucdr_alignment>
 8008cd0:	3004      	adds	r0, #4
 8008cd2:	bd08      	pop	{r3, pc}
 8008cd4:	4770      	bx	lr
 8008cd6:	bf00      	nop

08008cd8 <_Int32__cdr_serialize>:
 8008cd8:	460a      	mov	r2, r1
 8008cda:	b118      	cbz	r0, 8008ce4 <_Int32__cdr_serialize+0xc>
 8008cdc:	6801      	ldr	r1, [r0, #0]
 8008cde:	4610      	mov	r0, r2
 8008ce0:	f000 be70 	b.w	80099c4 <ucdr_serialize_int32_t>
 8008ce4:	4770      	bx	lr
 8008ce6:	bf00      	nop

08008ce8 <_Int32__get_serialized_size>:
 8008ce8:	b130      	cbz	r0, 8008cf8 <_Int32__get_serialized_size+0x10>
 8008cea:	b508      	push	{r3, lr}
 8008cec:	2104      	movs	r1, #4
 8008cee:	2000      	movs	r0, #0
 8008cf0:	f000 ffe6 	bl	8009cc0 <ucdr_alignment>
 8008cf4:	3004      	adds	r0, #4
 8008cf6:	bd08      	pop	{r3, pc}
 8008cf8:	4770      	bx	lr
 8008cfa:	bf00      	nop

08008cfc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8008cfc:	4800      	ldr	r0, [pc, #0]	; (8008d00 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32+0x4>)
 8008cfe:	4770      	bx	lr
 8008d00:	20000028 	.word	0x20000028

08008d04 <ucdr_serialize_bool>:
 8008d04:	b538      	push	{r3, r4, r5, lr}
 8008d06:	460d      	mov	r5, r1
 8008d08:	2101      	movs	r1, #1
 8008d0a:	4604      	mov	r4, r0
 8008d0c:	f000 ff8e 	bl	8009c2c <ucdr_check_final_buffer_behavior>
 8008d10:	b148      	cbz	r0, 8008d26 <ucdr_serialize_bool+0x22>
 8008d12:	68a3      	ldr	r3, [r4, #8]
 8008d14:	701d      	strb	r5, [r3, #0]
 8008d16:	68a2      	ldr	r2, [r4, #8]
 8008d18:	6923      	ldr	r3, [r4, #16]
 8008d1a:	3201      	adds	r2, #1
 8008d1c:	3301      	adds	r3, #1
 8008d1e:	2101      	movs	r1, #1
 8008d20:	60a2      	str	r2, [r4, #8]
 8008d22:	6123      	str	r3, [r4, #16]
 8008d24:	7561      	strb	r1, [r4, #21]
 8008d26:	7da0      	ldrb	r0, [r4, #22]
 8008d28:	f080 0001 	eor.w	r0, r0, #1
 8008d2c:	bd38      	pop	{r3, r4, r5, pc}
 8008d2e:	bf00      	nop

08008d30 <ucdr_deserialize_bool>:
 8008d30:	b538      	push	{r3, r4, r5, lr}
 8008d32:	460d      	mov	r5, r1
 8008d34:	2101      	movs	r1, #1
 8008d36:	4604      	mov	r4, r0
 8008d38:	f000 ff78 	bl	8009c2c <ucdr_check_final_buffer_behavior>
 8008d3c:	b168      	cbz	r0, 8008d5a <ucdr_deserialize_bool+0x2a>
 8008d3e:	68a2      	ldr	r2, [r4, #8]
 8008d40:	6923      	ldr	r3, [r4, #16]
 8008d42:	f812 1b01 	ldrb.w	r1, [r2], #1
 8008d46:	3900      	subs	r1, #0
 8008d48:	f103 0301 	add.w	r3, r3, #1
 8008d4c:	bf18      	it	ne
 8008d4e:	2101      	movne	r1, #1
 8008d50:	2001      	movs	r0, #1
 8008d52:	7029      	strb	r1, [r5, #0]
 8008d54:	60a2      	str	r2, [r4, #8]
 8008d56:	6123      	str	r3, [r4, #16]
 8008d58:	7560      	strb	r0, [r4, #21]
 8008d5a:	7da0      	ldrb	r0, [r4, #22]
 8008d5c:	f080 0001 	eor.w	r0, r0, #1
 8008d60:	bd38      	pop	{r3, r4, r5, pc}
 8008d62:	bf00      	nop

08008d64 <ucdr_serialize_uint8_t>:
 8008d64:	b538      	push	{r3, r4, r5, lr}
 8008d66:	460d      	mov	r5, r1
 8008d68:	2101      	movs	r1, #1
 8008d6a:	4604      	mov	r4, r0
 8008d6c:	f000 ff5e 	bl	8009c2c <ucdr_check_final_buffer_behavior>
 8008d70:	b148      	cbz	r0, 8008d86 <ucdr_serialize_uint8_t+0x22>
 8008d72:	68a3      	ldr	r3, [r4, #8]
 8008d74:	701d      	strb	r5, [r3, #0]
 8008d76:	68a2      	ldr	r2, [r4, #8]
 8008d78:	6923      	ldr	r3, [r4, #16]
 8008d7a:	3201      	adds	r2, #1
 8008d7c:	3301      	adds	r3, #1
 8008d7e:	2101      	movs	r1, #1
 8008d80:	60a2      	str	r2, [r4, #8]
 8008d82:	6123      	str	r3, [r4, #16]
 8008d84:	7561      	strb	r1, [r4, #21]
 8008d86:	7da0      	ldrb	r0, [r4, #22]
 8008d88:	f080 0001 	eor.w	r0, r0, #1
 8008d8c:	bd38      	pop	{r3, r4, r5, pc}
 8008d8e:	bf00      	nop

08008d90 <ucdr_deserialize_uint8_t>:
 8008d90:	b538      	push	{r3, r4, r5, lr}
 8008d92:	460d      	mov	r5, r1
 8008d94:	2101      	movs	r1, #1
 8008d96:	4604      	mov	r4, r0
 8008d98:	f000 ff48 	bl	8009c2c <ucdr_check_final_buffer_behavior>
 8008d9c:	b150      	cbz	r0, 8008db4 <ucdr_deserialize_uint8_t+0x24>
 8008d9e:	68a3      	ldr	r3, [r4, #8]
 8008da0:	781b      	ldrb	r3, [r3, #0]
 8008da2:	702b      	strb	r3, [r5, #0]
 8008da4:	68a2      	ldr	r2, [r4, #8]
 8008da6:	6923      	ldr	r3, [r4, #16]
 8008da8:	3201      	adds	r2, #1
 8008daa:	3301      	adds	r3, #1
 8008dac:	2101      	movs	r1, #1
 8008dae:	60a2      	str	r2, [r4, #8]
 8008db0:	6123      	str	r3, [r4, #16]
 8008db2:	7561      	strb	r1, [r4, #21]
 8008db4:	7da0      	ldrb	r0, [r4, #22]
 8008db6:	f080 0001 	eor.w	r0, r0, #1
 8008dba:	bd38      	pop	{r3, r4, r5, pc}

08008dbc <ucdr_serialize_uint16_t>:
 8008dbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008dc0:	b082      	sub	sp, #8
 8008dc2:	460b      	mov	r3, r1
 8008dc4:	2102      	movs	r1, #2
 8008dc6:	4604      	mov	r4, r0
 8008dc8:	f8ad 3006 	strh.w	r3, [sp, #6]
 8008dcc:	f000 ff80 	bl	8009cd0 <ucdr_buffer_alignment>
 8008dd0:	4601      	mov	r1, r0
 8008dd2:	4620      	mov	r0, r4
 8008dd4:	7d67      	ldrb	r7, [r4, #21]
 8008dd6:	f000 ffbf 	bl	8009d58 <ucdr_advance_buffer>
 8008dda:	4620      	mov	r0, r4
 8008ddc:	2102      	movs	r1, #2
 8008dde:	f000 ff19 	bl	8009c14 <ucdr_check_buffer_available_for>
 8008de2:	bb78      	cbnz	r0, 8008e44 <ucdr_serialize_uint16_t+0x88>
 8008de4:	e9d4 5601 	ldrd	r5, r6, [r4, #4]
 8008de8:	42b5      	cmp	r5, r6
 8008dea:	d926      	bls.n	8008e3a <ucdr_serialize_uint16_t+0x7e>
 8008dec:	6922      	ldr	r2, [r4, #16]
 8008dee:	60a5      	str	r5, [r4, #8]
 8008df0:	1bad      	subs	r5, r5, r6
 8008df2:	442a      	add	r2, r5
 8008df4:	f1c5 0802 	rsb	r8, r5, #2
 8008df8:	6122      	str	r2, [r4, #16]
 8008dfa:	4641      	mov	r1, r8
 8008dfc:	4620      	mov	r0, r4
 8008dfe:	f000 ff15 	bl	8009c2c <ucdr_check_final_buffer_behavior>
 8008e02:	2800      	cmp	r0, #0
 8008e04:	d03b      	beq.n	8008e7e <ucdr_serialize_uint16_t+0xc2>
 8008e06:	7d23      	ldrb	r3, [r4, #20]
 8008e08:	2b01      	cmp	r3, #1
 8008e0a:	d04a      	beq.n	8008ea2 <ucdr_serialize_uint16_t+0xe6>
 8008e0c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008e10:	7033      	strb	r3, [r6, #0]
 8008e12:	2d00      	cmp	r5, #0
 8008e14:	d040      	beq.n	8008e98 <ucdr_serialize_uint16_t+0xdc>
 8008e16:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008e1a:	7073      	strb	r3, [r6, #1]
 8008e1c:	6923      	ldr	r3, [r4, #16]
 8008e1e:	68a2      	ldr	r2, [r4, #8]
 8008e20:	7da0      	ldrb	r0, [r4, #22]
 8008e22:	3302      	adds	r3, #2
 8008e24:	1b5b      	subs	r3, r3, r5
 8008e26:	4442      	add	r2, r8
 8008e28:	2102      	movs	r1, #2
 8008e2a:	f080 0001 	eor.w	r0, r0, #1
 8008e2e:	6123      	str	r3, [r4, #16]
 8008e30:	60a2      	str	r2, [r4, #8]
 8008e32:	7561      	strb	r1, [r4, #21]
 8008e34:	b002      	add	sp, #8
 8008e36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e3a:	2102      	movs	r1, #2
 8008e3c:	4620      	mov	r0, r4
 8008e3e:	f000 fef5 	bl	8009c2c <ucdr_check_final_buffer_behavior>
 8008e42:	b190      	cbz	r0, 8008e6a <ucdr_serialize_uint16_t+0xae>
 8008e44:	7d23      	ldrb	r3, [r4, #20]
 8008e46:	2b01      	cmp	r3, #1
 8008e48:	68a3      	ldr	r3, [r4, #8]
 8008e4a:	d014      	beq.n	8008e76 <ucdr_serialize_uint16_t+0xba>
 8008e4c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8008e50:	701a      	strb	r2, [r3, #0]
 8008e52:	68a3      	ldr	r3, [r4, #8]
 8008e54:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008e58:	705a      	strb	r2, [r3, #1]
 8008e5a:	68a2      	ldr	r2, [r4, #8]
 8008e5c:	6923      	ldr	r3, [r4, #16]
 8008e5e:	3202      	adds	r2, #2
 8008e60:	3302      	adds	r3, #2
 8008e62:	2102      	movs	r1, #2
 8008e64:	60a2      	str	r2, [r4, #8]
 8008e66:	6123      	str	r3, [r4, #16]
 8008e68:	7561      	strb	r1, [r4, #21]
 8008e6a:	7da0      	ldrb	r0, [r4, #22]
 8008e6c:	f080 0001 	eor.w	r0, r0, #1
 8008e70:	b002      	add	sp, #8
 8008e72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e76:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8008e7a:	801a      	strh	r2, [r3, #0]
 8008e7c:	e7ed      	b.n	8008e5a <ucdr_serialize_uint16_t+0x9e>
 8008e7e:	68a2      	ldr	r2, [r4, #8]
 8008e80:	6923      	ldr	r3, [r4, #16]
 8008e82:	7da0      	ldrb	r0, [r4, #22]
 8008e84:	7567      	strb	r7, [r4, #21]
 8008e86:	1b52      	subs	r2, r2, r5
 8008e88:	1b5b      	subs	r3, r3, r5
 8008e8a:	f080 0001 	eor.w	r0, r0, #1
 8008e8e:	60a2      	str	r2, [r4, #8]
 8008e90:	6123      	str	r3, [r4, #16]
 8008e92:	b002      	add	sp, #8
 8008e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e98:	68a3      	ldr	r3, [r4, #8]
 8008e9a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008e9e:	701a      	strb	r2, [r3, #0]
 8008ea0:	e7bc      	b.n	8008e1c <ucdr_serialize_uint16_t+0x60>
 8008ea2:	4630      	mov	r0, r6
 8008ea4:	f10d 0606 	add.w	r6, sp, #6
 8008ea8:	4631      	mov	r1, r6
 8008eaa:	462a      	mov	r2, r5
 8008eac:	f007 fc4c 	bl	8010748 <memcpy>
 8008eb0:	68a0      	ldr	r0, [r4, #8]
 8008eb2:	4642      	mov	r2, r8
 8008eb4:	1971      	adds	r1, r6, r5
 8008eb6:	f007 fc47 	bl	8010748 <memcpy>
 8008eba:	e7af      	b.n	8008e1c <ucdr_serialize_uint16_t+0x60>

08008ebc <ucdr_serialize_endian_uint16_t>:
 8008ebc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008ec0:	b083      	sub	sp, #12
 8008ec2:	460d      	mov	r5, r1
 8008ec4:	2102      	movs	r1, #2
 8008ec6:	4604      	mov	r4, r0
 8008ec8:	f8ad 2006 	strh.w	r2, [sp, #6]
 8008ecc:	f000 ff00 	bl	8009cd0 <ucdr_buffer_alignment>
 8008ed0:	4601      	mov	r1, r0
 8008ed2:	4620      	mov	r0, r4
 8008ed4:	f894 8015 	ldrb.w	r8, [r4, #21]
 8008ed8:	f000 ff3e 	bl	8009d58 <ucdr_advance_buffer>
 8008edc:	4620      	mov	r0, r4
 8008ede:	2102      	movs	r1, #2
 8008ee0:	f000 fe98 	bl	8009c14 <ucdr_check_buffer_available_for>
 8008ee4:	bb70      	cbnz	r0, 8008f44 <ucdr_serialize_endian_uint16_t+0x88>
 8008ee6:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8008eea:	42be      	cmp	r6, r7
 8008eec:	d925      	bls.n	8008f3a <ucdr_serialize_endian_uint16_t+0x7e>
 8008eee:	6922      	ldr	r2, [r4, #16]
 8008ef0:	60a6      	str	r6, [r4, #8]
 8008ef2:	1bf6      	subs	r6, r6, r7
 8008ef4:	4432      	add	r2, r6
 8008ef6:	f1c6 0902 	rsb	r9, r6, #2
 8008efa:	6122      	str	r2, [r4, #16]
 8008efc:	4649      	mov	r1, r9
 8008efe:	4620      	mov	r0, r4
 8008f00:	f000 fe94 	bl	8009c2c <ucdr_check_final_buffer_behavior>
 8008f04:	2800      	cmp	r0, #0
 8008f06:	d039      	beq.n	8008f7c <ucdr_serialize_endian_uint16_t+0xc0>
 8008f08:	2d01      	cmp	r5, #1
 8008f0a:	d04a      	beq.n	8008fa2 <ucdr_serialize_endian_uint16_t+0xe6>
 8008f0c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008f10:	703b      	strb	r3, [r7, #0]
 8008f12:	2e00      	cmp	r6, #0
 8008f14:	d040      	beq.n	8008f98 <ucdr_serialize_endian_uint16_t+0xdc>
 8008f16:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008f1a:	707b      	strb	r3, [r7, #1]
 8008f1c:	6923      	ldr	r3, [r4, #16]
 8008f1e:	68a2      	ldr	r2, [r4, #8]
 8008f20:	7da0      	ldrb	r0, [r4, #22]
 8008f22:	3302      	adds	r3, #2
 8008f24:	1b9b      	subs	r3, r3, r6
 8008f26:	444a      	add	r2, r9
 8008f28:	2102      	movs	r1, #2
 8008f2a:	f080 0001 	eor.w	r0, r0, #1
 8008f2e:	6123      	str	r3, [r4, #16]
 8008f30:	60a2      	str	r2, [r4, #8]
 8008f32:	7561      	strb	r1, [r4, #21]
 8008f34:	b003      	add	sp, #12
 8008f36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008f3a:	2102      	movs	r1, #2
 8008f3c:	4620      	mov	r0, r4
 8008f3e:	f000 fe75 	bl	8009c2c <ucdr_check_final_buffer_behavior>
 8008f42:	b188      	cbz	r0, 8008f68 <ucdr_serialize_endian_uint16_t+0xac>
 8008f44:	2d01      	cmp	r5, #1
 8008f46:	68a3      	ldr	r3, [r4, #8]
 8008f48:	d014      	beq.n	8008f74 <ucdr_serialize_endian_uint16_t+0xb8>
 8008f4a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8008f4e:	701a      	strb	r2, [r3, #0]
 8008f50:	68a3      	ldr	r3, [r4, #8]
 8008f52:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008f56:	705a      	strb	r2, [r3, #1]
 8008f58:	68a2      	ldr	r2, [r4, #8]
 8008f5a:	6923      	ldr	r3, [r4, #16]
 8008f5c:	3202      	adds	r2, #2
 8008f5e:	3302      	adds	r3, #2
 8008f60:	2102      	movs	r1, #2
 8008f62:	60a2      	str	r2, [r4, #8]
 8008f64:	6123      	str	r3, [r4, #16]
 8008f66:	7561      	strb	r1, [r4, #21]
 8008f68:	7da0      	ldrb	r0, [r4, #22]
 8008f6a:	f080 0001 	eor.w	r0, r0, #1
 8008f6e:	b003      	add	sp, #12
 8008f70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008f74:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8008f78:	801a      	strh	r2, [r3, #0]
 8008f7a:	e7ed      	b.n	8008f58 <ucdr_serialize_endian_uint16_t+0x9c>
 8008f7c:	68a2      	ldr	r2, [r4, #8]
 8008f7e:	6923      	ldr	r3, [r4, #16]
 8008f80:	7da0      	ldrb	r0, [r4, #22]
 8008f82:	f884 8015 	strb.w	r8, [r4, #21]
 8008f86:	1b92      	subs	r2, r2, r6
 8008f88:	1b9b      	subs	r3, r3, r6
 8008f8a:	f080 0001 	eor.w	r0, r0, #1
 8008f8e:	60a2      	str	r2, [r4, #8]
 8008f90:	6123      	str	r3, [r4, #16]
 8008f92:	b003      	add	sp, #12
 8008f94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008f98:	68a3      	ldr	r3, [r4, #8]
 8008f9a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008f9e:	701a      	strb	r2, [r3, #0]
 8008fa0:	e7bc      	b.n	8008f1c <ucdr_serialize_endian_uint16_t+0x60>
 8008fa2:	f10d 0506 	add.w	r5, sp, #6
 8008fa6:	4629      	mov	r1, r5
 8008fa8:	4632      	mov	r2, r6
 8008faa:	4638      	mov	r0, r7
 8008fac:	f007 fbcc 	bl	8010748 <memcpy>
 8008fb0:	68a0      	ldr	r0, [r4, #8]
 8008fb2:	464a      	mov	r2, r9
 8008fb4:	19a9      	adds	r1, r5, r6
 8008fb6:	f007 fbc7 	bl	8010748 <memcpy>
 8008fba:	e7af      	b.n	8008f1c <ucdr_serialize_endian_uint16_t+0x60>

08008fbc <ucdr_deserialize_uint16_t>:
 8008fbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fc0:	460d      	mov	r5, r1
 8008fc2:	2102      	movs	r1, #2
 8008fc4:	4604      	mov	r4, r0
 8008fc6:	f000 fe83 	bl	8009cd0 <ucdr_buffer_alignment>
 8008fca:	4601      	mov	r1, r0
 8008fcc:	4620      	mov	r0, r4
 8008fce:	f894 8015 	ldrb.w	r8, [r4, #21]
 8008fd2:	f000 fec1 	bl	8009d58 <ucdr_advance_buffer>
 8008fd6:	4620      	mov	r0, r4
 8008fd8:	2102      	movs	r1, #2
 8008fda:	f000 fe1b 	bl	8009c14 <ucdr_check_buffer_available_for>
 8008fde:	bb60      	cbnz	r0, 800903a <ucdr_deserialize_uint16_t+0x7e>
 8008fe0:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8008fe4:	42be      	cmp	r6, r7
 8008fe6:	d923      	bls.n	8009030 <ucdr_deserialize_uint16_t+0x74>
 8008fe8:	6922      	ldr	r2, [r4, #16]
 8008fea:	60a6      	str	r6, [r4, #8]
 8008fec:	1bf6      	subs	r6, r6, r7
 8008fee:	4432      	add	r2, r6
 8008ff0:	f1c6 0902 	rsb	r9, r6, #2
 8008ff4:	6122      	str	r2, [r4, #16]
 8008ff6:	4649      	mov	r1, r9
 8008ff8:	4620      	mov	r0, r4
 8008ffa:	f000 fe17 	bl	8009c2c <ucdr_check_final_buffer_behavior>
 8008ffe:	2800      	cmp	r0, #0
 8009000:	d034      	beq.n	800906c <ucdr_deserialize_uint16_t+0xb0>
 8009002:	7d23      	ldrb	r3, [r4, #20]
 8009004:	2b01      	cmp	r3, #1
 8009006:	d042      	beq.n	800908e <ucdr_deserialize_uint16_t+0xd2>
 8009008:	787b      	ldrb	r3, [r7, #1]
 800900a:	702b      	strb	r3, [r5, #0]
 800900c:	2e00      	cmp	r6, #0
 800900e:	d03a      	beq.n	8009086 <ucdr_deserialize_uint16_t+0xca>
 8009010:	783b      	ldrb	r3, [r7, #0]
 8009012:	706b      	strb	r3, [r5, #1]
 8009014:	6923      	ldr	r3, [r4, #16]
 8009016:	68a2      	ldr	r2, [r4, #8]
 8009018:	7da0      	ldrb	r0, [r4, #22]
 800901a:	2102      	movs	r1, #2
 800901c:	3302      	adds	r3, #2
 800901e:	1b9b      	subs	r3, r3, r6
 8009020:	444a      	add	r2, r9
 8009022:	7561      	strb	r1, [r4, #21]
 8009024:	6123      	str	r3, [r4, #16]
 8009026:	60a2      	str	r2, [r4, #8]
 8009028:	f080 0001 	eor.w	r0, r0, #1
 800902c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009030:	2102      	movs	r1, #2
 8009032:	4620      	mov	r0, r4
 8009034:	f000 fdfa 	bl	8009c2c <ucdr_check_final_buffer_behavior>
 8009038:	b180      	cbz	r0, 800905c <ucdr_deserialize_uint16_t+0xa0>
 800903a:	7d23      	ldrb	r3, [r4, #20]
 800903c:	2b01      	cmp	r3, #1
 800903e:	68a3      	ldr	r3, [r4, #8]
 8009040:	d011      	beq.n	8009066 <ucdr_deserialize_uint16_t+0xaa>
 8009042:	785b      	ldrb	r3, [r3, #1]
 8009044:	702b      	strb	r3, [r5, #0]
 8009046:	68a3      	ldr	r3, [r4, #8]
 8009048:	781b      	ldrb	r3, [r3, #0]
 800904a:	706b      	strb	r3, [r5, #1]
 800904c:	68a2      	ldr	r2, [r4, #8]
 800904e:	6923      	ldr	r3, [r4, #16]
 8009050:	3202      	adds	r2, #2
 8009052:	3302      	adds	r3, #2
 8009054:	2102      	movs	r1, #2
 8009056:	60a2      	str	r2, [r4, #8]
 8009058:	6123      	str	r3, [r4, #16]
 800905a:	7561      	strb	r1, [r4, #21]
 800905c:	7da0      	ldrb	r0, [r4, #22]
 800905e:	f080 0001 	eor.w	r0, r0, #1
 8009062:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009066:	881b      	ldrh	r3, [r3, #0]
 8009068:	802b      	strh	r3, [r5, #0]
 800906a:	e7ef      	b.n	800904c <ucdr_deserialize_uint16_t+0x90>
 800906c:	68a2      	ldr	r2, [r4, #8]
 800906e:	6923      	ldr	r3, [r4, #16]
 8009070:	7da0      	ldrb	r0, [r4, #22]
 8009072:	f884 8015 	strb.w	r8, [r4, #21]
 8009076:	1b92      	subs	r2, r2, r6
 8009078:	1b9b      	subs	r3, r3, r6
 800907a:	60a2      	str	r2, [r4, #8]
 800907c:	6123      	str	r3, [r4, #16]
 800907e:	f080 0001 	eor.w	r0, r0, #1
 8009082:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009086:	68a3      	ldr	r3, [r4, #8]
 8009088:	781b      	ldrb	r3, [r3, #0]
 800908a:	706b      	strb	r3, [r5, #1]
 800908c:	e7c2      	b.n	8009014 <ucdr_deserialize_uint16_t+0x58>
 800908e:	4639      	mov	r1, r7
 8009090:	4632      	mov	r2, r6
 8009092:	4628      	mov	r0, r5
 8009094:	f007 fb58 	bl	8010748 <memcpy>
 8009098:	68a1      	ldr	r1, [r4, #8]
 800909a:	464a      	mov	r2, r9
 800909c:	19a8      	adds	r0, r5, r6
 800909e:	f007 fb53 	bl	8010748 <memcpy>
 80090a2:	e7b7      	b.n	8009014 <ucdr_deserialize_uint16_t+0x58>

080090a4 <ucdr_deserialize_endian_uint16_t>:
 80090a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090a8:	460e      	mov	r6, r1
 80090aa:	2102      	movs	r1, #2
 80090ac:	4604      	mov	r4, r0
 80090ae:	4615      	mov	r5, r2
 80090b0:	f000 fe0e 	bl	8009cd0 <ucdr_buffer_alignment>
 80090b4:	4601      	mov	r1, r0
 80090b6:	4620      	mov	r0, r4
 80090b8:	f894 9015 	ldrb.w	r9, [r4, #21]
 80090bc:	f000 fe4c 	bl	8009d58 <ucdr_advance_buffer>
 80090c0:	4620      	mov	r0, r4
 80090c2:	2102      	movs	r1, #2
 80090c4:	f000 fda6 	bl	8009c14 <ucdr_check_buffer_available_for>
 80090c8:	bb70      	cbnz	r0, 8009128 <ucdr_deserialize_endian_uint16_t+0x84>
 80090ca:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 80090ce:	4547      	cmp	r7, r8
 80090d0:	d925      	bls.n	800911e <ucdr_deserialize_endian_uint16_t+0x7a>
 80090d2:	6922      	ldr	r2, [r4, #16]
 80090d4:	60a7      	str	r7, [r4, #8]
 80090d6:	eba7 0708 	sub.w	r7, r7, r8
 80090da:	443a      	add	r2, r7
 80090dc:	f1c7 0a02 	rsb	sl, r7, #2
 80090e0:	6122      	str	r2, [r4, #16]
 80090e2:	4651      	mov	r1, sl
 80090e4:	4620      	mov	r0, r4
 80090e6:	f000 fda1 	bl	8009c2c <ucdr_check_final_buffer_behavior>
 80090ea:	2800      	cmp	r0, #0
 80090ec:	d034      	beq.n	8009158 <ucdr_deserialize_endian_uint16_t+0xb4>
 80090ee:	2e01      	cmp	r6, #1
 80090f0:	d043      	beq.n	800917a <ucdr_deserialize_endian_uint16_t+0xd6>
 80090f2:	f898 3001 	ldrb.w	r3, [r8, #1]
 80090f6:	702b      	strb	r3, [r5, #0]
 80090f8:	2f00      	cmp	r7, #0
 80090fa:	d03a      	beq.n	8009172 <ucdr_deserialize_endian_uint16_t+0xce>
 80090fc:	f898 3000 	ldrb.w	r3, [r8]
 8009100:	706b      	strb	r3, [r5, #1]
 8009102:	6923      	ldr	r3, [r4, #16]
 8009104:	68a2      	ldr	r2, [r4, #8]
 8009106:	7da0      	ldrb	r0, [r4, #22]
 8009108:	2102      	movs	r1, #2
 800910a:	3302      	adds	r3, #2
 800910c:	1bdb      	subs	r3, r3, r7
 800910e:	4452      	add	r2, sl
 8009110:	7561      	strb	r1, [r4, #21]
 8009112:	6123      	str	r3, [r4, #16]
 8009114:	60a2      	str	r2, [r4, #8]
 8009116:	f080 0001 	eor.w	r0, r0, #1
 800911a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800911e:	2102      	movs	r1, #2
 8009120:	4620      	mov	r0, r4
 8009122:	f000 fd83 	bl	8009c2c <ucdr_check_final_buffer_behavior>
 8009126:	b178      	cbz	r0, 8009148 <ucdr_deserialize_endian_uint16_t+0xa4>
 8009128:	2e01      	cmp	r6, #1
 800912a:	68a3      	ldr	r3, [r4, #8]
 800912c:	d011      	beq.n	8009152 <ucdr_deserialize_endian_uint16_t+0xae>
 800912e:	785b      	ldrb	r3, [r3, #1]
 8009130:	702b      	strb	r3, [r5, #0]
 8009132:	68a3      	ldr	r3, [r4, #8]
 8009134:	781b      	ldrb	r3, [r3, #0]
 8009136:	706b      	strb	r3, [r5, #1]
 8009138:	68a2      	ldr	r2, [r4, #8]
 800913a:	6923      	ldr	r3, [r4, #16]
 800913c:	3202      	adds	r2, #2
 800913e:	3302      	adds	r3, #2
 8009140:	2102      	movs	r1, #2
 8009142:	60a2      	str	r2, [r4, #8]
 8009144:	6123      	str	r3, [r4, #16]
 8009146:	7561      	strb	r1, [r4, #21]
 8009148:	7da0      	ldrb	r0, [r4, #22]
 800914a:	f080 0001 	eor.w	r0, r0, #1
 800914e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009152:	881b      	ldrh	r3, [r3, #0]
 8009154:	802b      	strh	r3, [r5, #0]
 8009156:	e7ef      	b.n	8009138 <ucdr_deserialize_endian_uint16_t+0x94>
 8009158:	68a2      	ldr	r2, [r4, #8]
 800915a:	6923      	ldr	r3, [r4, #16]
 800915c:	7da0      	ldrb	r0, [r4, #22]
 800915e:	f884 9015 	strb.w	r9, [r4, #21]
 8009162:	1bd2      	subs	r2, r2, r7
 8009164:	1bdb      	subs	r3, r3, r7
 8009166:	60a2      	str	r2, [r4, #8]
 8009168:	6123      	str	r3, [r4, #16]
 800916a:	f080 0001 	eor.w	r0, r0, #1
 800916e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009172:	68a3      	ldr	r3, [r4, #8]
 8009174:	781b      	ldrb	r3, [r3, #0]
 8009176:	706b      	strb	r3, [r5, #1]
 8009178:	e7c3      	b.n	8009102 <ucdr_deserialize_endian_uint16_t+0x5e>
 800917a:	4641      	mov	r1, r8
 800917c:	463a      	mov	r2, r7
 800917e:	4628      	mov	r0, r5
 8009180:	f007 fae2 	bl	8010748 <memcpy>
 8009184:	68a1      	ldr	r1, [r4, #8]
 8009186:	4652      	mov	r2, sl
 8009188:	19e8      	adds	r0, r5, r7
 800918a:	f007 fadd 	bl	8010748 <memcpy>
 800918e:	e7b8      	b.n	8009102 <ucdr_deserialize_endian_uint16_t+0x5e>

08009190 <ucdr_serialize_uint32_t>:
 8009190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009194:	b082      	sub	sp, #8
 8009196:	4604      	mov	r4, r0
 8009198:	9101      	str	r1, [sp, #4]
 800919a:	2104      	movs	r1, #4
 800919c:	f000 fd98 	bl	8009cd0 <ucdr_buffer_alignment>
 80091a0:	4601      	mov	r1, r0
 80091a2:	4620      	mov	r0, r4
 80091a4:	7d67      	ldrb	r7, [r4, #21]
 80091a6:	f000 fdd7 	bl	8009d58 <ucdr_advance_buffer>
 80091aa:	4620      	mov	r0, r4
 80091ac:	2104      	movs	r1, #4
 80091ae:	f000 fd31 	bl	8009c14 <ucdr_check_buffer_available_for>
 80091b2:	2800      	cmp	r0, #0
 80091b4:	d139      	bne.n	800922a <ucdr_serialize_uint32_t+0x9a>
 80091b6:	e9d4 6501 	ldrd	r6, r5, [r4, #4]
 80091ba:	42ae      	cmp	r6, r5
 80091bc:	d930      	bls.n	8009220 <ucdr_serialize_uint32_t+0x90>
 80091be:	6922      	ldr	r2, [r4, #16]
 80091c0:	60a6      	str	r6, [r4, #8]
 80091c2:	1b76      	subs	r6, r6, r5
 80091c4:	4432      	add	r2, r6
 80091c6:	f1c6 0804 	rsb	r8, r6, #4
 80091ca:	6122      	str	r2, [r4, #16]
 80091cc:	4641      	mov	r1, r8
 80091ce:	4620      	mov	r0, r4
 80091d0:	f000 fd2c 	bl	8009c2c <ucdr_check_final_buffer_behavior>
 80091d4:	2800      	cmp	r0, #0
 80091d6:	d04c      	beq.n	8009272 <ucdr_serialize_uint32_t+0xe2>
 80091d8:	7d23      	ldrb	r3, [r4, #20]
 80091da:	2b01      	cmp	r3, #1
 80091dc:	d063      	beq.n	80092a6 <ucdr_serialize_uint32_t+0x116>
 80091de:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80091e2:	702b      	strb	r3, [r5, #0]
 80091e4:	2e00      	cmp	r6, #0
 80091e6:	d051      	beq.n	800928c <ucdr_serialize_uint32_t+0xfc>
 80091e8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80091ec:	706b      	strb	r3, [r5, #1]
 80091ee:	2e01      	cmp	r6, #1
 80091f0:	d050      	beq.n	8009294 <ucdr_serialize_uint32_t+0x104>
 80091f2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80091f6:	70ab      	strb	r3, [r5, #2]
 80091f8:	2e02      	cmp	r6, #2
 80091fa:	d04f      	beq.n	800929c <ucdr_serialize_uint32_t+0x10c>
 80091fc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8009200:	70eb      	strb	r3, [r5, #3]
 8009202:	6923      	ldr	r3, [r4, #16]
 8009204:	68a2      	ldr	r2, [r4, #8]
 8009206:	7da0      	ldrb	r0, [r4, #22]
 8009208:	3304      	adds	r3, #4
 800920a:	1b9b      	subs	r3, r3, r6
 800920c:	4442      	add	r2, r8
 800920e:	2104      	movs	r1, #4
 8009210:	f080 0001 	eor.w	r0, r0, #1
 8009214:	6123      	str	r3, [r4, #16]
 8009216:	60a2      	str	r2, [r4, #8]
 8009218:	7561      	strb	r1, [r4, #21]
 800921a:	b002      	add	sp, #8
 800921c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009220:	2104      	movs	r1, #4
 8009222:	4620      	mov	r0, r4
 8009224:	f000 fd02 	bl	8009c2c <ucdr_check_final_buffer_behavior>
 8009228:	b1d0      	cbz	r0, 8009260 <ucdr_serialize_uint32_t+0xd0>
 800922a:	7d23      	ldrb	r3, [r4, #20]
 800922c:	2b01      	cmp	r3, #1
 800922e:	68a3      	ldr	r3, [r4, #8]
 8009230:	d01c      	beq.n	800926c <ucdr_serialize_uint32_t+0xdc>
 8009232:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8009236:	701a      	strb	r2, [r3, #0]
 8009238:	68a3      	ldr	r3, [r4, #8]
 800923a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800923e:	705a      	strb	r2, [r3, #1]
 8009240:	68a3      	ldr	r3, [r4, #8]
 8009242:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8009246:	709a      	strb	r2, [r3, #2]
 8009248:	68a3      	ldr	r3, [r4, #8]
 800924a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800924e:	70da      	strb	r2, [r3, #3]
 8009250:	68a2      	ldr	r2, [r4, #8]
 8009252:	6923      	ldr	r3, [r4, #16]
 8009254:	3204      	adds	r2, #4
 8009256:	3304      	adds	r3, #4
 8009258:	2104      	movs	r1, #4
 800925a:	60a2      	str	r2, [r4, #8]
 800925c:	6123      	str	r3, [r4, #16]
 800925e:	7561      	strb	r1, [r4, #21]
 8009260:	7da0      	ldrb	r0, [r4, #22]
 8009262:	f080 0001 	eor.w	r0, r0, #1
 8009266:	b002      	add	sp, #8
 8009268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800926c:	9a01      	ldr	r2, [sp, #4]
 800926e:	601a      	str	r2, [r3, #0]
 8009270:	e7ee      	b.n	8009250 <ucdr_serialize_uint32_t+0xc0>
 8009272:	68a2      	ldr	r2, [r4, #8]
 8009274:	6923      	ldr	r3, [r4, #16]
 8009276:	7da0      	ldrb	r0, [r4, #22]
 8009278:	7567      	strb	r7, [r4, #21]
 800927a:	1b92      	subs	r2, r2, r6
 800927c:	1b9b      	subs	r3, r3, r6
 800927e:	f080 0001 	eor.w	r0, r0, #1
 8009282:	60a2      	str	r2, [r4, #8]
 8009284:	6123      	str	r3, [r4, #16]
 8009286:	b002      	add	sp, #8
 8009288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800928c:	68a3      	ldr	r3, [r4, #8]
 800928e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009292:	701a      	strb	r2, [r3, #0]
 8009294:	68a3      	ldr	r3, [r4, #8]
 8009296:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800929a:	701a      	strb	r2, [r3, #0]
 800929c:	68a3      	ldr	r3, [r4, #8]
 800929e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80092a2:	701a      	strb	r2, [r3, #0]
 80092a4:	e7ad      	b.n	8009202 <ucdr_serialize_uint32_t+0x72>
 80092a6:	4628      	mov	r0, r5
 80092a8:	ad01      	add	r5, sp, #4
 80092aa:	4629      	mov	r1, r5
 80092ac:	4632      	mov	r2, r6
 80092ae:	f007 fa4b 	bl	8010748 <memcpy>
 80092b2:	68a0      	ldr	r0, [r4, #8]
 80092b4:	4642      	mov	r2, r8
 80092b6:	19a9      	adds	r1, r5, r6
 80092b8:	f007 fa46 	bl	8010748 <memcpy>
 80092bc:	e7a1      	b.n	8009202 <ucdr_serialize_uint32_t+0x72>
 80092be:	bf00      	nop

080092c0 <ucdr_serialize_endian_uint32_t>:
 80092c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80092c4:	b083      	sub	sp, #12
 80092c6:	460d      	mov	r5, r1
 80092c8:	2104      	movs	r1, #4
 80092ca:	4604      	mov	r4, r0
 80092cc:	9201      	str	r2, [sp, #4]
 80092ce:	f000 fcff 	bl	8009cd0 <ucdr_buffer_alignment>
 80092d2:	4601      	mov	r1, r0
 80092d4:	4620      	mov	r0, r4
 80092d6:	f894 8015 	ldrb.w	r8, [r4, #21]
 80092da:	f000 fd3d 	bl	8009d58 <ucdr_advance_buffer>
 80092de:	4620      	mov	r0, r4
 80092e0:	2104      	movs	r1, #4
 80092e2:	f000 fc97 	bl	8009c14 <ucdr_check_buffer_available_for>
 80092e6:	2800      	cmp	r0, #0
 80092e8:	d138      	bne.n	800935c <ucdr_serialize_endian_uint32_t+0x9c>
 80092ea:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80092ee:	42b7      	cmp	r7, r6
 80092f0:	d92f      	bls.n	8009352 <ucdr_serialize_endian_uint32_t+0x92>
 80092f2:	6922      	ldr	r2, [r4, #16]
 80092f4:	60a7      	str	r7, [r4, #8]
 80092f6:	1bbf      	subs	r7, r7, r6
 80092f8:	443a      	add	r2, r7
 80092fa:	f1c7 0904 	rsb	r9, r7, #4
 80092fe:	6122      	str	r2, [r4, #16]
 8009300:	4649      	mov	r1, r9
 8009302:	4620      	mov	r0, r4
 8009304:	f000 fc92 	bl	8009c2c <ucdr_check_final_buffer_behavior>
 8009308:	2800      	cmp	r0, #0
 800930a:	d04a      	beq.n	80093a2 <ucdr_serialize_endian_uint32_t+0xe2>
 800930c:	2d01      	cmp	r5, #1
 800930e:	d063      	beq.n	80093d8 <ucdr_serialize_endian_uint32_t+0x118>
 8009310:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009314:	7033      	strb	r3, [r6, #0]
 8009316:	2f00      	cmp	r7, #0
 8009318:	d051      	beq.n	80093be <ucdr_serialize_endian_uint32_t+0xfe>
 800931a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800931e:	7073      	strb	r3, [r6, #1]
 8009320:	2f01      	cmp	r7, #1
 8009322:	d050      	beq.n	80093c6 <ucdr_serialize_endian_uint32_t+0x106>
 8009324:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8009328:	70b3      	strb	r3, [r6, #2]
 800932a:	2f02      	cmp	r7, #2
 800932c:	d04f      	beq.n	80093ce <ucdr_serialize_endian_uint32_t+0x10e>
 800932e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8009332:	70f3      	strb	r3, [r6, #3]
 8009334:	6923      	ldr	r3, [r4, #16]
 8009336:	68a2      	ldr	r2, [r4, #8]
 8009338:	7da0      	ldrb	r0, [r4, #22]
 800933a:	3304      	adds	r3, #4
 800933c:	1bdb      	subs	r3, r3, r7
 800933e:	444a      	add	r2, r9
 8009340:	2104      	movs	r1, #4
 8009342:	f080 0001 	eor.w	r0, r0, #1
 8009346:	6123      	str	r3, [r4, #16]
 8009348:	60a2      	str	r2, [r4, #8]
 800934a:	7561      	strb	r1, [r4, #21]
 800934c:	b003      	add	sp, #12
 800934e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009352:	2104      	movs	r1, #4
 8009354:	4620      	mov	r0, r4
 8009356:	f000 fc69 	bl	8009c2c <ucdr_check_final_buffer_behavior>
 800935a:	b1c8      	cbz	r0, 8009390 <ucdr_serialize_endian_uint32_t+0xd0>
 800935c:	2d01      	cmp	r5, #1
 800935e:	68a3      	ldr	r3, [r4, #8]
 8009360:	d01c      	beq.n	800939c <ucdr_serialize_endian_uint32_t+0xdc>
 8009362:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8009366:	701a      	strb	r2, [r3, #0]
 8009368:	68a3      	ldr	r3, [r4, #8]
 800936a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800936e:	705a      	strb	r2, [r3, #1]
 8009370:	68a3      	ldr	r3, [r4, #8]
 8009372:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8009376:	709a      	strb	r2, [r3, #2]
 8009378:	68a3      	ldr	r3, [r4, #8]
 800937a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800937e:	70da      	strb	r2, [r3, #3]
 8009380:	68a2      	ldr	r2, [r4, #8]
 8009382:	6923      	ldr	r3, [r4, #16]
 8009384:	3204      	adds	r2, #4
 8009386:	3304      	adds	r3, #4
 8009388:	2104      	movs	r1, #4
 800938a:	60a2      	str	r2, [r4, #8]
 800938c:	6123      	str	r3, [r4, #16]
 800938e:	7561      	strb	r1, [r4, #21]
 8009390:	7da0      	ldrb	r0, [r4, #22]
 8009392:	f080 0001 	eor.w	r0, r0, #1
 8009396:	b003      	add	sp, #12
 8009398:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800939c:	9a01      	ldr	r2, [sp, #4]
 800939e:	601a      	str	r2, [r3, #0]
 80093a0:	e7ee      	b.n	8009380 <ucdr_serialize_endian_uint32_t+0xc0>
 80093a2:	68a2      	ldr	r2, [r4, #8]
 80093a4:	6923      	ldr	r3, [r4, #16]
 80093a6:	7da0      	ldrb	r0, [r4, #22]
 80093a8:	f884 8015 	strb.w	r8, [r4, #21]
 80093ac:	1bd2      	subs	r2, r2, r7
 80093ae:	1bdb      	subs	r3, r3, r7
 80093b0:	f080 0001 	eor.w	r0, r0, #1
 80093b4:	60a2      	str	r2, [r4, #8]
 80093b6:	6123      	str	r3, [r4, #16]
 80093b8:	b003      	add	sp, #12
 80093ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80093be:	68a3      	ldr	r3, [r4, #8]
 80093c0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80093c4:	701a      	strb	r2, [r3, #0]
 80093c6:	68a3      	ldr	r3, [r4, #8]
 80093c8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80093cc:	701a      	strb	r2, [r3, #0]
 80093ce:	68a3      	ldr	r3, [r4, #8]
 80093d0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80093d4:	701a      	strb	r2, [r3, #0]
 80093d6:	e7ad      	b.n	8009334 <ucdr_serialize_endian_uint32_t+0x74>
 80093d8:	ad01      	add	r5, sp, #4
 80093da:	4629      	mov	r1, r5
 80093dc:	463a      	mov	r2, r7
 80093de:	4630      	mov	r0, r6
 80093e0:	f007 f9b2 	bl	8010748 <memcpy>
 80093e4:	68a0      	ldr	r0, [r4, #8]
 80093e6:	464a      	mov	r2, r9
 80093e8:	19e9      	adds	r1, r5, r7
 80093ea:	f007 f9ad 	bl	8010748 <memcpy>
 80093ee:	e7a1      	b.n	8009334 <ucdr_serialize_endian_uint32_t+0x74>

080093f0 <ucdr_deserialize_uint32_t>:
 80093f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093f4:	460d      	mov	r5, r1
 80093f6:	2104      	movs	r1, #4
 80093f8:	4604      	mov	r4, r0
 80093fa:	f000 fc69 	bl	8009cd0 <ucdr_buffer_alignment>
 80093fe:	4601      	mov	r1, r0
 8009400:	4620      	mov	r0, r4
 8009402:	f894 8015 	ldrb.w	r8, [r4, #21]
 8009406:	f000 fca7 	bl	8009d58 <ucdr_advance_buffer>
 800940a:	4620      	mov	r0, r4
 800940c:	2104      	movs	r1, #4
 800940e:	f000 fc01 	bl	8009c14 <ucdr_check_buffer_available_for>
 8009412:	2800      	cmp	r0, #0
 8009414:	d138      	bne.n	8009488 <ucdr_deserialize_uint32_t+0x98>
 8009416:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800941a:	42b7      	cmp	r7, r6
 800941c:	d92f      	bls.n	800947e <ucdr_deserialize_uint32_t+0x8e>
 800941e:	6922      	ldr	r2, [r4, #16]
 8009420:	60a7      	str	r7, [r4, #8]
 8009422:	1bbf      	subs	r7, r7, r6
 8009424:	443a      	add	r2, r7
 8009426:	f1c7 0904 	rsb	r9, r7, #4
 800942a:	6122      	str	r2, [r4, #16]
 800942c:	4649      	mov	r1, r9
 800942e:	4620      	mov	r0, r4
 8009430:	f000 fbfc 	bl	8009c2c <ucdr_check_final_buffer_behavior>
 8009434:	2800      	cmp	r0, #0
 8009436:	d046      	beq.n	80094c6 <ucdr_deserialize_uint32_t+0xd6>
 8009438:	7d23      	ldrb	r3, [r4, #20]
 800943a:	2b01      	cmp	r3, #1
 800943c:	d05c      	beq.n	80094f8 <ucdr_deserialize_uint32_t+0x108>
 800943e:	78f3      	ldrb	r3, [r6, #3]
 8009440:	702b      	strb	r3, [r5, #0]
 8009442:	2f00      	cmp	r7, #0
 8009444:	d04c      	beq.n	80094e0 <ucdr_deserialize_uint32_t+0xf0>
 8009446:	78b3      	ldrb	r3, [r6, #2]
 8009448:	706b      	strb	r3, [r5, #1]
 800944a:	2f01      	cmp	r7, #1
 800944c:	f105 0302 	add.w	r3, r5, #2
 8009450:	d04a      	beq.n	80094e8 <ucdr_deserialize_uint32_t+0xf8>
 8009452:	7873      	ldrb	r3, [r6, #1]
 8009454:	70ab      	strb	r3, [r5, #2]
 8009456:	2f02      	cmp	r7, #2
 8009458:	f105 0303 	add.w	r3, r5, #3
 800945c:	d048      	beq.n	80094f0 <ucdr_deserialize_uint32_t+0x100>
 800945e:	7833      	ldrb	r3, [r6, #0]
 8009460:	70eb      	strb	r3, [r5, #3]
 8009462:	6923      	ldr	r3, [r4, #16]
 8009464:	68a2      	ldr	r2, [r4, #8]
 8009466:	7da0      	ldrb	r0, [r4, #22]
 8009468:	2104      	movs	r1, #4
 800946a:	3304      	adds	r3, #4
 800946c:	1bdb      	subs	r3, r3, r7
 800946e:	444a      	add	r2, r9
 8009470:	7561      	strb	r1, [r4, #21]
 8009472:	6123      	str	r3, [r4, #16]
 8009474:	60a2      	str	r2, [r4, #8]
 8009476:	f080 0001 	eor.w	r0, r0, #1
 800947a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800947e:	2104      	movs	r1, #4
 8009480:	4620      	mov	r0, r4
 8009482:	f000 fbd3 	bl	8009c2c <ucdr_check_final_buffer_behavior>
 8009486:	b1b0      	cbz	r0, 80094b6 <ucdr_deserialize_uint32_t+0xc6>
 8009488:	7d23      	ldrb	r3, [r4, #20]
 800948a:	2b01      	cmp	r3, #1
 800948c:	68a3      	ldr	r3, [r4, #8]
 800948e:	d017      	beq.n	80094c0 <ucdr_deserialize_uint32_t+0xd0>
 8009490:	78db      	ldrb	r3, [r3, #3]
 8009492:	702b      	strb	r3, [r5, #0]
 8009494:	68a3      	ldr	r3, [r4, #8]
 8009496:	789b      	ldrb	r3, [r3, #2]
 8009498:	706b      	strb	r3, [r5, #1]
 800949a:	68a3      	ldr	r3, [r4, #8]
 800949c:	785b      	ldrb	r3, [r3, #1]
 800949e:	70ab      	strb	r3, [r5, #2]
 80094a0:	68a3      	ldr	r3, [r4, #8]
 80094a2:	781b      	ldrb	r3, [r3, #0]
 80094a4:	70eb      	strb	r3, [r5, #3]
 80094a6:	68a2      	ldr	r2, [r4, #8]
 80094a8:	6923      	ldr	r3, [r4, #16]
 80094aa:	3204      	adds	r2, #4
 80094ac:	3304      	adds	r3, #4
 80094ae:	2104      	movs	r1, #4
 80094b0:	60a2      	str	r2, [r4, #8]
 80094b2:	6123      	str	r3, [r4, #16]
 80094b4:	7561      	strb	r1, [r4, #21]
 80094b6:	7da0      	ldrb	r0, [r4, #22]
 80094b8:	f080 0001 	eor.w	r0, r0, #1
 80094bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	602b      	str	r3, [r5, #0]
 80094c4:	e7ef      	b.n	80094a6 <ucdr_deserialize_uint32_t+0xb6>
 80094c6:	68a2      	ldr	r2, [r4, #8]
 80094c8:	6923      	ldr	r3, [r4, #16]
 80094ca:	7da0      	ldrb	r0, [r4, #22]
 80094cc:	f884 8015 	strb.w	r8, [r4, #21]
 80094d0:	1bd2      	subs	r2, r2, r7
 80094d2:	1bdb      	subs	r3, r3, r7
 80094d4:	60a2      	str	r2, [r4, #8]
 80094d6:	6123      	str	r3, [r4, #16]
 80094d8:	f080 0001 	eor.w	r0, r0, #1
 80094dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094e0:	68a3      	ldr	r3, [r4, #8]
 80094e2:	789b      	ldrb	r3, [r3, #2]
 80094e4:	706b      	strb	r3, [r5, #1]
 80094e6:	1cab      	adds	r3, r5, #2
 80094e8:	68a2      	ldr	r2, [r4, #8]
 80094ea:	7852      	ldrb	r2, [r2, #1]
 80094ec:	f803 2b01 	strb.w	r2, [r3], #1
 80094f0:	68a2      	ldr	r2, [r4, #8]
 80094f2:	7812      	ldrb	r2, [r2, #0]
 80094f4:	701a      	strb	r2, [r3, #0]
 80094f6:	e7b4      	b.n	8009462 <ucdr_deserialize_uint32_t+0x72>
 80094f8:	4631      	mov	r1, r6
 80094fa:	463a      	mov	r2, r7
 80094fc:	4628      	mov	r0, r5
 80094fe:	f007 f923 	bl	8010748 <memcpy>
 8009502:	68a1      	ldr	r1, [r4, #8]
 8009504:	464a      	mov	r2, r9
 8009506:	19e8      	adds	r0, r5, r7
 8009508:	f007 f91e 	bl	8010748 <memcpy>
 800950c:	e7a9      	b.n	8009462 <ucdr_deserialize_uint32_t+0x72>
 800950e:	bf00      	nop

08009510 <ucdr_deserialize_endian_uint32_t>:
 8009510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009514:	460e      	mov	r6, r1
 8009516:	2104      	movs	r1, #4
 8009518:	4604      	mov	r4, r0
 800951a:	4615      	mov	r5, r2
 800951c:	f000 fbd8 	bl	8009cd0 <ucdr_buffer_alignment>
 8009520:	4601      	mov	r1, r0
 8009522:	4620      	mov	r0, r4
 8009524:	f894 9015 	ldrb.w	r9, [r4, #21]
 8009528:	f000 fc16 	bl	8009d58 <ucdr_advance_buffer>
 800952c:	4620      	mov	r0, r4
 800952e:	2104      	movs	r1, #4
 8009530:	f000 fb70 	bl	8009c14 <ucdr_check_buffer_available_for>
 8009534:	2800      	cmp	r0, #0
 8009536:	d13c      	bne.n	80095b2 <ucdr_deserialize_endian_uint32_t+0xa2>
 8009538:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800953c:	42bb      	cmp	r3, r7
 800953e:	d933      	bls.n	80095a8 <ucdr_deserialize_endian_uint32_t+0x98>
 8009540:	6922      	ldr	r2, [r4, #16]
 8009542:	60a3      	str	r3, [r4, #8]
 8009544:	eba3 0807 	sub.w	r8, r3, r7
 8009548:	4442      	add	r2, r8
 800954a:	f1c8 0a04 	rsb	sl, r8, #4
 800954e:	6122      	str	r2, [r4, #16]
 8009550:	4651      	mov	r1, sl
 8009552:	4620      	mov	r0, r4
 8009554:	f000 fb6a 	bl	8009c2c <ucdr_check_final_buffer_behavior>
 8009558:	2800      	cmp	r0, #0
 800955a:	d048      	beq.n	80095ee <ucdr_deserialize_endian_uint32_t+0xde>
 800955c:	2e01      	cmp	r6, #1
 800955e:	d061      	beq.n	8009624 <ucdr_deserialize_endian_uint32_t+0x114>
 8009560:	78fb      	ldrb	r3, [r7, #3]
 8009562:	702b      	strb	r3, [r5, #0]
 8009564:	f1b8 0f00 	cmp.w	r8, #0
 8009568:	d050      	beq.n	800960c <ucdr_deserialize_endian_uint32_t+0xfc>
 800956a:	78bb      	ldrb	r3, [r7, #2]
 800956c:	706b      	strb	r3, [r5, #1]
 800956e:	f1b8 0f01 	cmp.w	r8, #1
 8009572:	f105 0302 	add.w	r3, r5, #2
 8009576:	d04d      	beq.n	8009614 <ucdr_deserialize_endian_uint32_t+0x104>
 8009578:	787b      	ldrb	r3, [r7, #1]
 800957a:	70ab      	strb	r3, [r5, #2]
 800957c:	f1b8 0f02 	cmp.w	r8, #2
 8009580:	f105 0303 	add.w	r3, r5, #3
 8009584:	d04a      	beq.n	800961c <ucdr_deserialize_endian_uint32_t+0x10c>
 8009586:	783b      	ldrb	r3, [r7, #0]
 8009588:	70eb      	strb	r3, [r5, #3]
 800958a:	6923      	ldr	r3, [r4, #16]
 800958c:	68a2      	ldr	r2, [r4, #8]
 800958e:	7da0      	ldrb	r0, [r4, #22]
 8009590:	2104      	movs	r1, #4
 8009592:	3304      	adds	r3, #4
 8009594:	eba3 0308 	sub.w	r3, r3, r8
 8009598:	4452      	add	r2, sl
 800959a:	7561      	strb	r1, [r4, #21]
 800959c:	6123      	str	r3, [r4, #16]
 800959e:	60a2      	str	r2, [r4, #8]
 80095a0:	f080 0001 	eor.w	r0, r0, #1
 80095a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095a8:	2104      	movs	r1, #4
 80095aa:	4620      	mov	r0, r4
 80095ac:	f000 fb3e 	bl	8009c2c <ucdr_check_final_buffer_behavior>
 80095b0:	b1a8      	cbz	r0, 80095de <ucdr_deserialize_endian_uint32_t+0xce>
 80095b2:	2e01      	cmp	r6, #1
 80095b4:	68a3      	ldr	r3, [r4, #8]
 80095b6:	d017      	beq.n	80095e8 <ucdr_deserialize_endian_uint32_t+0xd8>
 80095b8:	78db      	ldrb	r3, [r3, #3]
 80095ba:	702b      	strb	r3, [r5, #0]
 80095bc:	68a3      	ldr	r3, [r4, #8]
 80095be:	789b      	ldrb	r3, [r3, #2]
 80095c0:	706b      	strb	r3, [r5, #1]
 80095c2:	68a3      	ldr	r3, [r4, #8]
 80095c4:	785b      	ldrb	r3, [r3, #1]
 80095c6:	70ab      	strb	r3, [r5, #2]
 80095c8:	68a3      	ldr	r3, [r4, #8]
 80095ca:	781b      	ldrb	r3, [r3, #0]
 80095cc:	70eb      	strb	r3, [r5, #3]
 80095ce:	68a2      	ldr	r2, [r4, #8]
 80095d0:	6923      	ldr	r3, [r4, #16]
 80095d2:	3204      	adds	r2, #4
 80095d4:	3304      	adds	r3, #4
 80095d6:	2104      	movs	r1, #4
 80095d8:	60a2      	str	r2, [r4, #8]
 80095da:	6123      	str	r3, [r4, #16]
 80095dc:	7561      	strb	r1, [r4, #21]
 80095de:	7da0      	ldrb	r0, [r4, #22]
 80095e0:	f080 0001 	eor.w	r0, r0, #1
 80095e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	602b      	str	r3, [r5, #0]
 80095ec:	e7ef      	b.n	80095ce <ucdr_deserialize_endian_uint32_t+0xbe>
 80095ee:	68a2      	ldr	r2, [r4, #8]
 80095f0:	6923      	ldr	r3, [r4, #16]
 80095f2:	7da0      	ldrb	r0, [r4, #22]
 80095f4:	f884 9015 	strb.w	r9, [r4, #21]
 80095f8:	eba2 0208 	sub.w	r2, r2, r8
 80095fc:	eba3 0308 	sub.w	r3, r3, r8
 8009600:	60a2      	str	r2, [r4, #8]
 8009602:	6123      	str	r3, [r4, #16]
 8009604:	f080 0001 	eor.w	r0, r0, #1
 8009608:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800960c:	68a3      	ldr	r3, [r4, #8]
 800960e:	789b      	ldrb	r3, [r3, #2]
 8009610:	706b      	strb	r3, [r5, #1]
 8009612:	1cab      	adds	r3, r5, #2
 8009614:	68a2      	ldr	r2, [r4, #8]
 8009616:	7852      	ldrb	r2, [r2, #1]
 8009618:	f803 2b01 	strb.w	r2, [r3], #1
 800961c:	68a2      	ldr	r2, [r4, #8]
 800961e:	7812      	ldrb	r2, [r2, #0]
 8009620:	701a      	strb	r2, [r3, #0]
 8009622:	e7b2      	b.n	800958a <ucdr_deserialize_endian_uint32_t+0x7a>
 8009624:	4639      	mov	r1, r7
 8009626:	4642      	mov	r2, r8
 8009628:	4628      	mov	r0, r5
 800962a:	f007 f88d 	bl	8010748 <memcpy>
 800962e:	68a1      	ldr	r1, [r4, #8]
 8009630:	4652      	mov	r2, sl
 8009632:	eb05 0008 	add.w	r0, r5, r8
 8009636:	f007 f887 	bl	8010748 <memcpy>
 800963a:	e7a6      	b.n	800958a <ucdr_deserialize_endian_uint32_t+0x7a>

0800963c <ucdr_serialize_uint64_t>:
 800963c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009640:	2108      	movs	r1, #8
 8009642:	b082      	sub	sp, #8
 8009644:	4604      	mov	r4, r0
 8009646:	e9cd 2300 	strd	r2, r3, [sp]
 800964a:	f000 fb41 	bl	8009cd0 <ucdr_buffer_alignment>
 800964e:	4601      	mov	r1, r0
 8009650:	4620      	mov	r0, r4
 8009652:	7d67      	ldrb	r7, [r4, #21]
 8009654:	f000 fb80 	bl	8009d58 <ucdr_advance_buffer>
 8009658:	4620      	mov	r0, r4
 800965a:	2108      	movs	r1, #8
 800965c:	f000 fada 	bl	8009c14 <ucdr_check_buffer_available_for>
 8009660:	2800      	cmp	r0, #0
 8009662:	d14e      	bne.n	8009702 <ucdr_serialize_uint64_t+0xc6>
 8009664:	e9d4 5601 	ldrd	r5, r6, [r4, #4]
 8009668:	42b5      	cmp	r5, r6
 800966a:	d945      	bls.n	80096f8 <ucdr_serialize_uint64_t+0xbc>
 800966c:	6923      	ldr	r3, [r4, #16]
 800966e:	60a5      	str	r5, [r4, #8]
 8009670:	1bad      	subs	r5, r5, r6
 8009672:	442b      	add	r3, r5
 8009674:	f1c5 0808 	rsb	r8, r5, #8
 8009678:	6123      	str	r3, [r4, #16]
 800967a:	4641      	mov	r1, r8
 800967c:	4620      	mov	r0, r4
 800967e:	f000 fad5 	bl	8009c2c <ucdr_check_final_buffer_behavior>
 8009682:	2800      	cmp	r0, #0
 8009684:	d074      	beq.n	8009770 <ucdr_serialize_uint64_t+0x134>
 8009686:	7d23      	ldrb	r3, [r4, #20]
 8009688:	2b01      	cmp	r3, #1
 800968a:	f000 809b 	beq.w	80097c4 <ucdr_serialize_uint64_t+0x188>
 800968e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009692:	7033      	strb	r3, [r6, #0]
 8009694:	2d00      	cmp	r5, #0
 8009696:	d078      	beq.n	800978a <ucdr_serialize_uint64_t+0x14e>
 8009698:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800969c:	7073      	strb	r3, [r6, #1]
 800969e:	2d01      	cmp	r5, #1
 80096a0:	d077      	beq.n	8009792 <ucdr_serialize_uint64_t+0x156>
 80096a2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80096a6:	70b3      	strb	r3, [r6, #2]
 80096a8:	2d02      	cmp	r5, #2
 80096aa:	d076      	beq.n	800979a <ucdr_serialize_uint64_t+0x15e>
 80096ac:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80096b0:	70f3      	strb	r3, [r6, #3]
 80096b2:	2d03      	cmp	r5, #3
 80096b4:	d075      	beq.n	80097a2 <ucdr_serialize_uint64_t+0x166>
 80096b6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80096ba:	7133      	strb	r3, [r6, #4]
 80096bc:	2d04      	cmp	r5, #4
 80096be:	d074      	beq.n	80097aa <ucdr_serialize_uint64_t+0x16e>
 80096c0:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80096c4:	7173      	strb	r3, [r6, #5]
 80096c6:	2d05      	cmp	r5, #5
 80096c8:	d073      	beq.n	80097b2 <ucdr_serialize_uint64_t+0x176>
 80096ca:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80096ce:	71b3      	strb	r3, [r6, #6]
 80096d0:	2d06      	cmp	r5, #6
 80096d2:	d072      	beq.n	80097ba <ucdr_serialize_uint64_t+0x17e>
 80096d4:	f89d 3000 	ldrb.w	r3, [sp]
 80096d8:	71f3      	strb	r3, [r6, #7]
 80096da:	6923      	ldr	r3, [r4, #16]
 80096dc:	68a2      	ldr	r2, [r4, #8]
 80096de:	7da0      	ldrb	r0, [r4, #22]
 80096e0:	3308      	adds	r3, #8
 80096e2:	1b5d      	subs	r5, r3, r5
 80096e4:	4442      	add	r2, r8
 80096e6:	2308      	movs	r3, #8
 80096e8:	f080 0001 	eor.w	r0, r0, #1
 80096ec:	6125      	str	r5, [r4, #16]
 80096ee:	60a2      	str	r2, [r4, #8]
 80096f0:	7563      	strb	r3, [r4, #21]
 80096f2:	b002      	add	sp, #8
 80096f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096f8:	2108      	movs	r1, #8
 80096fa:	4620      	mov	r0, r4
 80096fc:	f000 fa96 	bl	8009c2c <ucdr_check_final_buffer_behavior>
 8009700:	b350      	cbz	r0, 8009758 <ucdr_serialize_uint64_t+0x11c>
 8009702:	7d23      	ldrb	r3, [r4, #20]
 8009704:	2b01      	cmp	r3, #1
 8009706:	d02d      	beq.n	8009764 <ucdr_serialize_uint64_t+0x128>
 8009708:	68a3      	ldr	r3, [r4, #8]
 800970a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800970e:	701a      	strb	r2, [r3, #0]
 8009710:	68a3      	ldr	r3, [r4, #8]
 8009712:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009716:	705a      	strb	r2, [r3, #1]
 8009718:	68a3      	ldr	r3, [r4, #8]
 800971a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800971e:	709a      	strb	r2, [r3, #2]
 8009720:	68a3      	ldr	r3, [r4, #8]
 8009722:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8009726:	70da      	strb	r2, [r3, #3]
 8009728:	68a3      	ldr	r3, [r4, #8]
 800972a:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800972e:	711a      	strb	r2, [r3, #4]
 8009730:	68a3      	ldr	r3, [r4, #8]
 8009732:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8009736:	715a      	strb	r2, [r3, #5]
 8009738:	68a3      	ldr	r3, [r4, #8]
 800973a:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800973e:	719a      	strb	r2, [r3, #6]
 8009740:	68a3      	ldr	r3, [r4, #8]
 8009742:	f89d 2000 	ldrb.w	r2, [sp]
 8009746:	71da      	strb	r2, [r3, #7]
 8009748:	68a2      	ldr	r2, [r4, #8]
 800974a:	6923      	ldr	r3, [r4, #16]
 800974c:	3208      	adds	r2, #8
 800974e:	3308      	adds	r3, #8
 8009750:	2108      	movs	r1, #8
 8009752:	60a2      	str	r2, [r4, #8]
 8009754:	6123      	str	r3, [r4, #16]
 8009756:	7561      	strb	r1, [r4, #21]
 8009758:	7da0      	ldrb	r0, [r4, #22]
 800975a:	f080 0001 	eor.w	r0, r0, #1
 800975e:	b002      	add	sp, #8
 8009760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009764:	466b      	mov	r3, sp
 8009766:	cb03      	ldmia	r3!, {r0, r1}
 8009768:	68a3      	ldr	r3, [r4, #8]
 800976a:	6018      	str	r0, [r3, #0]
 800976c:	6059      	str	r1, [r3, #4]
 800976e:	e7eb      	b.n	8009748 <ucdr_serialize_uint64_t+0x10c>
 8009770:	68a2      	ldr	r2, [r4, #8]
 8009772:	6923      	ldr	r3, [r4, #16]
 8009774:	7da0      	ldrb	r0, [r4, #22]
 8009776:	7567      	strb	r7, [r4, #21]
 8009778:	1b52      	subs	r2, r2, r5
 800977a:	f080 0001 	eor.w	r0, r0, #1
 800977e:	1b5d      	subs	r5, r3, r5
 8009780:	60a2      	str	r2, [r4, #8]
 8009782:	6125      	str	r5, [r4, #16]
 8009784:	b002      	add	sp, #8
 8009786:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800978a:	68a3      	ldr	r3, [r4, #8]
 800978c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009790:	701a      	strb	r2, [r3, #0]
 8009792:	68a3      	ldr	r3, [r4, #8]
 8009794:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8009798:	701a      	strb	r2, [r3, #0]
 800979a:	68a3      	ldr	r3, [r4, #8]
 800979c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80097a0:	701a      	strb	r2, [r3, #0]
 80097a2:	68a3      	ldr	r3, [r4, #8]
 80097a4:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80097a8:	701a      	strb	r2, [r3, #0]
 80097aa:	68a3      	ldr	r3, [r4, #8]
 80097ac:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80097b0:	701a      	strb	r2, [r3, #0]
 80097b2:	68a3      	ldr	r3, [r4, #8]
 80097b4:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80097b8:	701a      	strb	r2, [r3, #0]
 80097ba:	68a3      	ldr	r3, [r4, #8]
 80097bc:	f89d 2000 	ldrb.w	r2, [sp]
 80097c0:	701a      	strb	r2, [r3, #0]
 80097c2:	e78a      	b.n	80096da <ucdr_serialize_uint64_t+0x9e>
 80097c4:	4630      	mov	r0, r6
 80097c6:	466e      	mov	r6, sp
 80097c8:	4631      	mov	r1, r6
 80097ca:	462a      	mov	r2, r5
 80097cc:	f006 ffbc 	bl	8010748 <memcpy>
 80097d0:	68a0      	ldr	r0, [r4, #8]
 80097d2:	4642      	mov	r2, r8
 80097d4:	1971      	adds	r1, r6, r5
 80097d6:	f006 ffb7 	bl	8010748 <memcpy>
 80097da:	e77e      	b.n	80096da <ucdr_serialize_uint64_t+0x9e>

080097dc <ucdr_serialize_int16_t>:
 80097dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097e0:	b082      	sub	sp, #8
 80097e2:	460b      	mov	r3, r1
 80097e4:	2102      	movs	r1, #2
 80097e6:	4604      	mov	r4, r0
 80097e8:	f8ad 3006 	strh.w	r3, [sp, #6]
 80097ec:	f000 fa70 	bl	8009cd0 <ucdr_buffer_alignment>
 80097f0:	4601      	mov	r1, r0
 80097f2:	4620      	mov	r0, r4
 80097f4:	7d67      	ldrb	r7, [r4, #21]
 80097f6:	f000 faaf 	bl	8009d58 <ucdr_advance_buffer>
 80097fa:	4620      	mov	r0, r4
 80097fc:	2102      	movs	r1, #2
 80097fe:	f000 fa09 	bl	8009c14 <ucdr_check_buffer_available_for>
 8009802:	bb78      	cbnz	r0, 8009864 <ucdr_serialize_int16_t+0x88>
 8009804:	e9d4 5601 	ldrd	r5, r6, [r4, #4]
 8009808:	42b5      	cmp	r5, r6
 800980a:	d926      	bls.n	800985a <ucdr_serialize_int16_t+0x7e>
 800980c:	6922      	ldr	r2, [r4, #16]
 800980e:	60a5      	str	r5, [r4, #8]
 8009810:	1bad      	subs	r5, r5, r6
 8009812:	442a      	add	r2, r5
 8009814:	f1c5 0802 	rsb	r8, r5, #2
 8009818:	6122      	str	r2, [r4, #16]
 800981a:	4641      	mov	r1, r8
 800981c:	4620      	mov	r0, r4
 800981e:	f000 fa05 	bl	8009c2c <ucdr_check_final_buffer_behavior>
 8009822:	2800      	cmp	r0, #0
 8009824:	d03b      	beq.n	800989e <ucdr_serialize_int16_t+0xc2>
 8009826:	7d23      	ldrb	r3, [r4, #20]
 8009828:	2b01      	cmp	r3, #1
 800982a:	d04a      	beq.n	80098c2 <ucdr_serialize_int16_t+0xe6>
 800982c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009830:	7033      	strb	r3, [r6, #0]
 8009832:	2d00      	cmp	r5, #0
 8009834:	d040      	beq.n	80098b8 <ucdr_serialize_int16_t+0xdc>
 8009836:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800983a:	7073      	strb	r3, [r6, #1]
 800983c:	6923      	ldr	r3, [r4, #16]
 800983e:	68a2      	ldr	r2, [r4, #8]
 8009840:	7da0      	ldrb	r0, [r4, #22]
 8009842:	3302      	adds	r3, #2
 8009844:	1b5b      	subs	r3, r3, r5
 8009846:	4442      	add	r2, r8
 8009848:	2102      	movs	r1, #2
 800984a:	f080 0001 	eor.w	r0, r0, #1
 800984e:	6123      	str	r3, [r4, #16]
 8009850:	60a2      	str	r2, [r4, #8]
 8009852:	7561      	strb	r1, [r4, #21]
 8009854:	b002      	add	sp, #8
 8009856:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800985a:	2102      	movs	r1, #2
 800985c:	4620      	mov	r0, r4
 800985e:	f000 f9e5 	bl	8009c2c <ucdr_check_final_buffer_behavior>
 8009862:	b190      	cbz	r0, 800988a <ucdr_serialize_int16_t+0xae>
 8009864:	7d23      	ldrb	r3, [r4, #20]
 8009866:	2b01      	cmp	r3, #1
 8009868:	68a3      	ldr	r3, [r4, #8]
 800986a:	d014      	beq.n	8009896 <ucdr_serialize_int16_t+0xba>
 800986c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8009870:	701a      	strb	r2, [r3, #0]
 8009872:	68a3      	ldr	r3, [r4, #8]
 8009874:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009878:	705a      	strb	r2, [r3, #1]
 800987a:	68a2      	ldr	r2, [r4, #8]
 800987c:	6923      	ldr	r3, [r4, #16]
 800987e:	3202      	adds	r2, #2
 8009880:	3302      	adds	r3, #2
 8009882:	2102      	movs	r1, #2
 8009884:	60a2      	str	r2, [r4, #8]
 8009886:	6123      	str	r3, [r4, #16]
 8009888:	7561      	strb	r1, [r4, #21]
 800988a:	7da0      	ldrb	r0, [r4, #22]
 800988c:	f080 0001 	eor.w	r0, r0, #1
 8009890:	b002      	add	sp, #8
 8009892:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009896:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800989a:	801a      	strh	r2, [r3, #0]
 800989c:	e7ed      	b.n	800987a <ucdr_serialize_int16_t+0x9e>
 800989e:	68a2      	ldr	r2, [r4, #8]
 80098a0:	6923      	ldr	r3, [r4, #16]
 80098a2:	7da0      	ldrb	r0, [r4, #22]
 80098a4:	7567      	strb	r7, [r4, #21]
 80098a6:	1b52      	subs	r2, r2, r5
 80098a8:	1b5b      	subs	r3, r3, r5
 80098aa:	f080 0001 	eor.w	r0, r0, #1
 80098ae:	60a2      	str	r2, [r4, #8]
 80098b0:	6123      	str	r3, [r4, #16]
 80098b2:	b002      	add	sp, #8
 80098b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098b8:	68a3      	ldr	r3, [r4, #8]
 80098ba:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80098be:	701a      	strb	r2, [r3, #0]
 80098c0:	e7bc      	b.n	800983c <ucdr_serialize_int16_t+0x60>
 80098c2:	4630      	mov	r0, r6
 80098c4:	f10d 0606 	add.w	r6, sp, #6
 80098c8:	4631      	mov	r1, r6
 80098ca:	462a      	mov	r2, r5
 80098cc:	f006 ff3c 	bl	8010748 <memcpy>
 80098d0:	68a0      	ldr	r0, [r4, #8]
 80098d2:	4642      	mov	r2, r8
 80098d4:	1971      	adds	r1, r6, r5
 80098d6:	f006 ff37 	bl	8010748 <memcpy>
 80098da:	e7af      	b.n	800983c <ucdr_serialize_int16_t+0x60>

080098dc <ucdr_deserialize_int16_t>:
 80098dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098e0:	460d      	mov	r5, r1
 80098e2:	2102      	movs	r1, #2
 80098e4:	4604      	mov	r4, r0
 80098e6:	f000 f9f3 	bl	8009cd0 <ucdr_buffer_alignment>
 80098ea:	4601      	mov	r1, r0
 80098ec:	4620      	mov	r0, r4
 80098ee:	f894 8015 	ldrb.w	r8, [r4, #21]
 80098f2:	f000 fa31 	bl	8009d58 <ucdr_advance_buffer>
 80098f6:	4620      	mov	r0, r4
 80098f8:	2102      	movs	r1, #2
 80098fa:	f000 f98b 	bl	8009c14 <ucdr_check_buffer_available_for>
 80098fe:	bb60      	cbnz	r0, 800995a <ucdr_deserialize_int16_t+0x7e>
 8009900:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8009904:	42be      	cmp	r6, r7
 8009906:	d923      	bls.n	8009950 <ucdr_deserialize_int16_t+0x74>
 8009908:	6922      	ldr	r2, [r4, #16]
 800990a:	60a6      	str	r6, [r4, #8]
 800990c:	1bf6      	subs	r6, r6, r7
 800990e:	4432      	add	r2, r6
 8009910:	f1c6 0902 	rsb	r9, r6, #2
 8009914:	6122      	str	r2, [r4, #16]
 8009916:	4649      	mov	r1, r9
 8009918:	4620      	mov	r0, r4
 800991a:	f000 f987 	bl	8009c2c <ucdr_check_final_buffer_behavior>
 800991e:	2800      	cmp	r0, #0
 8009920:	d034      	beq.n	800998c <ucdr_deserialize_int16_t+0xb0>
 8009922:	7d23      	ldrb	r3, [r4, #20]
 8009924:	2b01      	cmp	r3, #1
 8009926:	d042      	beq.n	80099ae <ucdr_deserialize_int16_t+0xd2>
 8009928:	787b      	ldrb	r3, [r7, #1]
 800992a:	702b      	strb	r3, [r5, #0]
 800992c:	2e00      	cmp	r6, #0
 800992e:	d03a      	beq.n	80099a6 <ucdr_deserialize_int16_t+0xca>
 8009930:	783b      	ldrb	r3, [r7, #0]
 8009932:	706b      	strb	r3, [r5, #1]
 8009934:	6923      	ldr	r3, [r4, #16]
 8009936:	68a2      	ldr	r2, [r4, #8]
 8009938:	7da0      	ldrb	r0, [r4, #22]
 800993a:	2102      	movs	r1, #2
 800993c:	3302      	adds	r3, #2
 800993e:	1b9b      	subs	r3, r3, r6
 8009940:	444a      	add	r2, r9
 8009942:	7561      	strb	r1, [r4, #21]
 8009944:	6123      	str	r3, [r4, #16]
 8009946:	60a2      	str	r2, [r4, #8]
 8009948:	f080 0001 	eor.w	r0, r0, #1
 800994c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009950:	2102      	movs	r1, #2
 8009952:	4620      	mov	r0, r4
 8009954:	f000 f96a 	bl	8009c2c <ucdr_check_final_buffer_behavior>
 8009958:	b180      	cbz	r0, 800997c <ucdr_deserialize_int16_t+0xa0>
 800995a:	7d23      	ldrb	r3, [r4, #20]
 800995c:	2b01      	cmp	r3, #1
 800995e:	68a3      	ldr	r3, [r4, #8]
 8009960:	d011      	beq.n	8009986 <ucdr_deserialize_int16_t+0xaa>
 8009962:	785b      	ldrb	r3, [r3, #1]
 8009964:	702b      	strb	r3, [r5, #0]
 8009966:	68a3      	ldr	r3, [r4, #8]
 8009968:	781b      	ldrb	r3, [r3, #0]
 800996a:	706b      	strb	r3, [r5, #1]
 800996c:	68a2      	ldr	r2, [r4, #8]
 800996e:	6923      	ldr	r3, [r4, #16]
 8009970:	3202      	adds	r2, #2
 8009972:	3302      	adds	r3, #2
 8009974:	2102      	movs	r1, #2
 8009976:	60a2      	str	r2, [r4, #8]
 8009978:	6123      	str	r3, [r4, #16]
 800997a:	7561      	strb	r1, [r4, #21]
 800997c:	7da0      	ldrb	r0, [r4, #22]
 800997e:	f080 0001 	eor.w	r0, r0, #1
 8009982:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009986:	881b      	ldrh	r3, [r3, #0]
 8009988:	802b      	strh	r3, [r5, #0]
 800998a:	e7ef      	b.n	800996c <ucdr_deserialize_int16_t+0x90>
 800998c:	68a2      	ldr	r2, [r4, #8]
 800998e:	6923      	ldr	r3, [r4, #16]
 8009990:	7da0      	ldrb	r0, [r4, #22]
 8009992:	f884 8015 	strb.w	r8, [r4, #21]
 8009996:	1b92      	subs	r2, r2, r6
 8009998:	1b9b      	subs	r3, r3, r6
 800999a:	60a2      	str	r2, [r4, #8]
 800999c:	6123      	str	r3, [r4, #16]
 800999e:	f080 0001 	eor.w	r0, r0, #1
 80099a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099a6:	68a3      	ldr	r3, [r4, #8]
 80099a8:	781b      	ldrb	r3, [r3, #0]
 80099aa:	706b      	strb	r3, [r5, #1]
 80099ac:	e7c2      	b.n	8009934 <ucdr_deserialize_int16_t+0x58>
 80099ae:	4639      	mov	r1, r7
 80099b0:	4632      	mov	r2, r6
 80099b2:	4628      	mov	r0, r5
 80099b4:	f006 fec8 	bl	8010748 <memcpy>
 80099b8:	68a1      	ldr	r1, [r4, #8]
 80099ba:	464a      	mov	r2, r9
 80099bc:	19a8      	adds	r0, r5, r6
 80099be:	f006 fec3 	bl	8010748 <memcpy>
 80099c2:	e7b7      	b.n	8009934 <ucdr_deserialize_int16_t+0x58>

080099c4 <ucdr_serialize_int32_t>:
 80099c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099c8:	b082      	sub	sp, #8
 80099ca:	4604      	mov	r4, r0
 80099cc:	9101      	str	r1, [sp, #4]
 80099ce:	2104      	movs	r1, #4
 80099d0:	f000 f97e 	bl	8009cd0 <ucdr_buffer_alignment>
 80099d4:	4601      	mov	r1, r0
 80099d6:	4620      	mov	r0, r4
 80099d8:	7d67      	ldrb	r7, [r4, #21]
 80099da:	f000 f9bd 	bl	8009d58 <ucdr_advance_buffer>
 80099de:	4620      	mov	r0, r4
 80099e0:	2104      	movs	r1, #4
 80099e2:	f000 f917 	bl	8009c14 <ucdr_check_buffer_available_for>
 80099e6:	2800      	cmp	r0, #0
 80099e8:	d139      	bne.n	8009a5e <ucdr_serialize_int32_t+0x9a>
 80099ea:	e9d4 6501 	ldrd	r6, r5, [r4, #4]
 80099ee:	42ae      	cmp	r6, r5
 80099f0:	d930      	bls.n	8009a54 <ucdr_serialize_int32_t+0x90>
 80099f2:	6922      	ldr	r2, [r4, #16]
 80099f4:	60a6      	str	r6, [r4, #8]
 80099f6:	1b76      	subs	r6, r6, r5
 80099f8:	4432      	add	r2, r6
 80099fa:	f1c6 0804 	rsb	r8, r6, #4
 80099fe:	6122      	str	r2, [r4, #16]
 8009a00:	4641      	mov	r1, r8
 8009a02:	4620      	mov	r0, r4
 8009a04:	f000 f912 	bl	8009c2c <ucdr_check_final_buffer_behavior>
 8009a08:	2800      	cmp	r0, #0
 8009a0a:	d04c      	beq.n	8009aa6 <ucdr_serialize_int32_t+0xe2>
 8009a0c:	7d23      	ldrb	r3, [r4, #20]
 8009a0e:	2b01      	cmp	r3, #1
 8009a10:	d063      	beq.n	8009ada <ucdr_serialize_int32_t+0x116>
 8009a12:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009a16:	702b      	strb	r3, [r5, #0]
 8009a18:	2e00      	cmp	r6, #0
 8009a1a:	d051      	beq.n	8009ac0 <ucdr_serialize_int32_t+0xfc>
 8009a1c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8009a20:	706b      	strb	r3, [r5, #1]
 8009a22:	2e01      	cmp	r6, #1
 8009a24:	d050      	beq.n	8009ac8 <ucdr_serialize_int32_t+0x104>
 8009a26:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8009a2a:	70ab      	strb	r3, [r5, #2]
 8009a2c:	2e02      	cmp	r6, #2
 8009a2e:	d04f      	beq.n	8009ad0 <ucdr_serialize_int32_t+0x10c>
 8009a30:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8009a34:	70eb      	strb	r3, [r5, #3]
 8009a36:	6923      	ldr	r3, [r4, #16]
 8009a38:	68a2      	ldr	r2, [r4, #8]
 8009a3a:	7da0      	ldrb	r0, [r4, #22]
 8009a3c:	3304      	adds	r3, #4
 8009a3e:	1b9b      	subs	r3, r3, r6
 8009a40:	4442      	add	r2, r8
 8009a42:	2104      	movs	r1, #4
 8009a44:	f080 0001 	eor.w	r0, r0, #1
 8009a48:	6123      	str	r3, [r4, #16]
 8009a4a:	60a2      	str	r2, [r4, #8]
 8009a4c:	7561      	strb	r1, [r4, #21]
 8009a4e:	b002      	add	sp, #8
 8009a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a54:	2104      	movs	r1, #4
 8009a56:	4620      	mov	r0, r4
 8009a58:	f000 f8e8 	bl	8009c2c <ucdr_check_final_buffer_behavior>
 8009a5c:	b1d0      	cbz	r0, 8009a94 <ucdr_serialize_int32_t+0xd0>
 8009a5e:	7d23      	ldrb	r3, [r4, #20]
 8009a60:	2b01      	cmp	r3, #1
 8009a62:	68a3      	ldr	r3, [r4, #8]
 8009a64:	d01c      	beq.n	8009aa0 <ucdr_serialize_int32_t+0xdc>
 8009a66:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8009a6a:	701a      	strb	r2, [r3, #0]
 8009a6c:	68a3      	ldr	r3, [r4, #8]
 8009a6e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009a72:	705a      	strb	r2, [r3, #1]
 8009a74:	68a3      	ldr	r3, [r4, #8]
 8009a76:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8009a7a:	709a      	strb	r2, [r3, #2]
 8009a7c:	68a3      	ldr	r3, [r4, #8]
 8009a7e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8009a82:	70da      	strb	r2, [r3, #3]
 8009a84:	68a2      	ldr	r2, [r4, #8]
 8009a86:	6923      	ldr	r3, [r4, #16]
 8009a88:	3204      	adds	r2, #4
 8009a8a:	3304      	adds	r3, #4
 8009a8c:	2104      	movs	r1, #4
 8009a8e:	60a2      	str	r2, [r4, #8]
 8009a90:	6123      	str	r3, [r4, #16]
 8009a92:	7561      	strb	r1, [r4, #21]
 8009a94:	7da0      	ldrb	r0, [r4, #22]
 8009a96:	f080 0001 	eor.w	r0, r0, #1
 8009a9a:	b002      	add	sp, #8
 8009a9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009aa0:	9a01      	ldr	r2, [sp, #4]
 8009aa2:	601a      	str	r2, [r3, #0]
 8009aa4:	e7ee      	b.n	8009a84 <ucdr_serialize_int32_t+0xc0>
 8009aa6:	68a2      	ldr	r2, [r4, #8]
 8009aa8:	6923      	ldr	r3, [r4, #16]
 8009aaa:	7da0      	ldrb	r0, [r4, #22]
 8009aac:	7567      	strb	r7, [r4, #21]
 8009aae:	1b92      	subs	r2, r2, r6
 8009ab0:	1b9b      	subs	r3, r3, r6
 8009ab2:	f080 0001 	eor.w	r0, r0, #1
 8009ab6:	60a2      	str	r2, [r4, #8]
 8009ab8:	6123      	str	r3, [r4, #16]
 8009aba:	b002      	add	sp, #8
 8009abc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ac0:	68a3      	ldr	r3, [r4, #8]
 8009ac2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009ac6:	701a      	strb	r2, [r3, #0]
 8009ac8:	68a3      	ldr	r3, [r4, #8]
 8009aca:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8009ace:	701a      	strb	r2, [r3, #0]
 8009ad0:	68a3      	ldr	r3, [r4, #8]
 8009ad2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8009ad6:	701a      	strb	r2, [r3, #0]
 8009ad8:	e7ad      	b.n	8009a36 <ucdr_serialize_int32_t+0x72>
 8009ada:	4628      	mov	r0, r5
 8009adc:	ad01      	add	r5, sp, #4
 8009ade:	4629      	mov	r1, r5
 8009ae0:	4632      	mov	r2, r6
 8009ae2:	f006 fe31 	bl	8010748 <memcpy>
 8009ae6:	68a0      	ldr	r0, [r4, #8]
 8009ae8:	4642      	mov	r2, r8
 8009aea:	19a9      	adds	r1, r5, r6
 8009aec:	f006 fe2c 	bl	8010748 <memcpy>
 8009af0:	e7a1      	b.n	8009a36 <ucdr_serialize_int32_t+0x72>
 8009af2:	bf00      	nop

08009af4 <ucdr_deserialize_int32_t>:
 8009af4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009af8:	460d      	mov	r5, r1
 8009afa:	2104      	movs	r1, #4
 8009afc:	4604      	mov	r4, r0
 8009afe:	f000 f8e7 	bl	8009cd0 <ucdr_buffer_alignment>
 8009b02:	4601      	mov	r1, r0
 8009b04:	4620      	mov	r0, r4
 8009b06:	f894 8015 	ldrb.w	r8, [r4, #21]
 8009b0a:	f000 f925 	bl	8009d58 <ucdr_advance_buffer>
 8009b0e:	4620      	mov	r0, r4
 8009b10:	2104      	movs	r1, #4
 8009b12:	f000 f87f 	bl	8009c14 <ucdr_check_buffer_available_for>
 8009b16:	2800      	cmp	r0, #0
 8009b18:	d138      	bne.n	8009b8c <ucdr_deserialize_int32_t+0x98>
 8009b1a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8009b1e:	42b7      	cmp	r7, r6
 8009b20:	d92f      	bls.n	8009b82 <ucdr_deserialize_int32_t+0x8e>
 8009b22:	6922      	ldr	r2, [r4, #16]
 8009b24:	60a7      	str	r7, [r4, #8]
 8009b26:	1bbf      	subs	r7, r7, r6
 8009b28:	443a      	add	r2, r7
 8009b2a:	f1c7 0904 	rsb	r9, r7, #4
 8009b2e:	6122      	str	r2, [r4, #16]
 8009b30:	4649      	mov	r1, r9
 8009b32:	4620      	mov	r0, r4
 8009b34:	f000 f87a 	bl	8009c2c <ucdr_check_final_buffer_behavior>
 8009b38:	2800      	cmp	r0, #0
 8009b3a:	d046      	beq.n	8009bca <ucdr_deserialize_int32_t+0xd6>
 8009b3c:	7d23      	ldrb	r3, [r4, #20]
 8009b3e:	2b01      	cmp	r3, #1
 8009b40:	d05c      	beq.n	8009bfc <ucdr_deserialize_int32_t+0x108>
 8009b42:	78f3      	ldrb	r3, [r6, #3]
 8009b44:	702b      	strb	r3, [r5, #0]
 8009b46:	2f00      	cmp	r7, #0
 8009b48:	d04c      	beq.n	8009be4 <ucdr_deserialize_int32_t+0xf0>
 8009b4a:	78b3      	ldrb	r3, [r6, #2]
 8009b4c:	706b      	strb	r3, [r5, #1]
 8009b4e:	2f01      	cmp	r7, #1
 8009b50:	f105 0302 	add.w	r3, r5, #2
 8009b54:	d04a      	beq.n	8009bec <ucdr_deserialize_int32_t+0xf8>
 8009b56:	7873      	ldrb	r3, [r6, #1]
 8009b58:	70ab      	strb	r3, [r5, #2]
 8009b5a:	2f02      	cmp	r7, #2
 8009b5c:	f105 0303 	add.w	r3, r5, #3
 8009b60:	d048      	beq.n	8009bf4 <ucdr_deserialize_int32_t+0x100>
 8009b62:	7833      	ldrb	r3, [r6, #0]
 8009b64:	70eb      	strb	r3, [r5, #3]
 8009b66:	6923      	ldr	r3, [r4, #16]
 8009b68:	68a2      	ldr	r2, [r4, #8]
 8009b6a:	7da0      	ldrb	r0, [r4, #22]
 8009b6c:	2104      	movs	r1, #4
 8009b6e:	3304      	adds	r3, #4
 8009b70:	1bdb      	subs	r3, r3, r7
 8009b72:	444a      	add	r2, r9
 8009b74:	7561      	strb	r1, [r4, #21]
 8009b76:	6123      	str	r3, [r4, #16]
 8009b78:	60a2      	str	r2, [r4, #8]
 8009b7a:	f080 0001 	eor.w	r0, r0, #1
 8009b7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b82:	2104      	movs	r1, #4
 8009b84:	4620      	mov	r0, r4
 8009b86:	f000 f851 	bl	8009c2c <ucdr_check_final_buffer_behavior>
 8009b8a:	b1b0      	cbz	r0, 8009bba <ucdr_deserialize_int32_t+0xc6>
 8009b8c:	7d23      	ldrb	r3, [r4, #20]
 8009b8e:	2b01      	cmp	r3, #1
 8009b90:	68a3      	ldr	r3, [r4, #8]
 8009b92:	d017      	beq.n	8009bc4 <ucdr_deserialize_int32_t+0xd0>
 8009b94:	78db      	ldrb	r3, [r3, #3]
 8009b96:	702b      	strb	r3, [r5, #0]
 8009b98:	68a3      	ldr	r3, [r4, #8]
 8009b9a:	789b      	ldrb	r3, [r3, #2]
 8009b9c:	706b      	strb	r3, [r5, #1]
 8009b9e:	68a3      	ldr	r3, [r4, #8]
 8009ba0:	785b      	ldrb	r3, [r3, #1]
 8009ba2:	70ab      	strb	r3, [r5, #2]
 8009ba4:	68a3      	ldr	r3, [r4, #8]
 8009ba6:	781b      	ldrb	r3, [r3, #0]
 8009ba8:	70eb      	strb	r3, [r5, #3]
 8009baa:	68a2      	ldr	r2, [r4, #8]
 8009bac:	6923      	ldr	r3, [r4, #16]
 8009bae:	3204      	adds	r2, #4
 8009bb0:	3304      	adds	r3, #4
 8009bb2:	2104      	movs	r1, #4
 8009bb4:	60a2      	str	r2, [r4, #8]
 8009bb6:	6123      	str	r3, [r4, #16]
 8009bb8:	7561      	strb	r1, [r4, #21]
 8009bba:	7da0      	ldrb	r0, [r4, #22]
 8009bbc:	f080 0001 	eor.w	r0, r0, #1
 8009bc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	602b      	str	r3, [r5, #0]
 8009bc8:	e7ef      	b.n	8009baa <ucdr_deserialize_int32_t+0xb6>
 8009bca:	68a2      	ldr	r2, [r4, #8]
 8009bcc:	6923      	ldr	r3, [r4, #16]
 8009bce:	7da0      	ldrb	r0, [r4, #22]
 8009bd0:	f884 8015 	strb.w	r8, [r4, #21]
 8009bd4:	1bd2      	subs	r2, r2, r7
 8009bd6:	1bdb      	subs	r3, r3, r7
 8009bd8:	60a2      	str	r2, [r4, #8]
 8009bda:	6123      	str	r3, [r4, #16]
 8009bdc:	f080 0001 	eor.w	r0, r0, #1
 8009be0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009be4:	68a3      	ldr	r3, [r4, #8]
 8009be6:	789b      	ldrb	r3, [r3, #2]
 8009be8:	706b      	strb	r3, [r5, #1]
 8009bea:	1cab      	adds	r3, r5, #2
 8009bec:	68a2      	ldr	r2, [r4, #8]
 8009bee:	7852      	ldrb	r2, [r2, #1]
 8009bf0:	f803 2b01 	strb.w	r2, [r3], #1
 8009bf4:	68a2      	ldr	r2, [r4, #8]
 8009bf6:	7812      	ldrb	r2, [r2, #0]
 8009bf8:	701a      	strb	r2, [r3, #0]
 8009bfa:	e7b4      	b.n	8009b66 <ucdr_deserialize_int32_t+0x72>
 8009bfc:	4631      	mov	r1, r6
 8009bfe:	463a      	mov	r2, r7
 8009c00:	4628      	mov	r0, r5
 8009c02:	f006 fda1 	bl	8010748 <memcpy>
 8009c06:	68a1      	ldr	r1, [r4, #8]
 8009c08:	464a      	mov	r2, r9
 8009c0a:	19e8      	adds	r0, r5, r7
 8009c0c:	f006 fd9c 	bl	8010748 <memcpy>
 8009c10:	e7a9      	b.n	8009b66 <ucdr_deserialize_int32_t+0x72>
 8009c12:	bf00      	nop

08009c14 <ucdr_check_buffer_available_for>:
 8009c14:	7d83      	ldrb	r3, [r0, #22]
 8009c16:	b93b      	cbnz	r3, 8009c28 <ucdr_check_buffer_available_for+0x14>
 8009c18:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 8009c1c:	4419      	add	r1, r3
 8009c1e:	4288      	cmp	r0, r1
 8009c20:	bf34      	ite	cc
 8009c22:	2000      	movcc	r0, #0
 8009c24:	2001      	movcs	r0, #1
 8009c26:	4770      	bx	lr
 8009c28:	2000      	movs	r0, #0
 8009c2a:	4770      	bx	lr

08009c2c <ucdr_check_final_buffer_behavior>:
 8009c2c:	7d83      	ldrb	r3, [r0, #22]
 8009c2e:	b943      	cbnz	r3, 8009c42 <ucdr_check_final_buffer_behavior+0x16>
 8009c30:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 8009c34:	4291      	cmp	r1, r2
 8009c36:	b510      	push	{r4, lr}
 8009c38:	4604      	mov	r4, r0
 8009c3a:	d205      	bcs.n	8009c48 <ucdr_check_final_buffer_behavior+0x1c>
 8009c3c:	2301      	movs	r3, #1
 8009c3e:	4618      	mov	r0, r3
 8009c40:	bd10      	pop	{r4, pc}
 8009c42:	2300      	movs	r3, #0
 8009c44:	4618      	mov	r0, r3
 8009c46:	4770      	bx	lr
 8009c48:	6982      	ldr	r2, [r0, #24]
 8009c4a:	b13a      	cbz	r2, 8009c5c <ucdr_check_final_buffer_behavior+0x30>
 8009c4c:	69c1      	ldr	r1, [r0, #28]
 8009c4e:	4790      	blx	r2
 8009c50:	f080 0301 	eor.w	r3, r0, #1
 8009c54:	b2db      	uxtb	r3, r3
 8009c56:	75a0      	strb	r0, [r4, #22]
 8009c58:	4618      	mov	r0, r3
 8009c5a:	bd10      	pop	{r4, pc}
 8009c5c:	2001      	movs	r0, #1
 8009c5e:	75a0      	strb	r0, [r4, #22]
 8009c60:	e7fa      	b.n	8009c58 <ucdr_check_final_buffer_behavior+0x2c>
 8009c62:	bf00      	nop

08009c64 <ucdr_set_on_full_buffer_callback>:
 8009c64:	e9c0 1206 	strd	r1, r2, [r0, #24]
 8009c68:	4770      	bx	lr
 8009c6a:	bf00      	nop

08009c6c <ucdr_init_buffer_origin_offset_endian>:
 8009c6c:	b430      	push	{r4, r5}
 8009c6e:	9c02      	ldr	r4, [sp, #8]
 8009c70:	f89d 500c 	ldrb.w	r5, [sp, #12]
 8009c74:	6001      	str	r1, [r0, #0]
 8009c76:	440a      	add	r2, r1
 8009c78:	60c3      	str	r3, [r0, #12]
 8009c7a:	4421      	add	r1, r4
 8009c7c:	441c      	add	r4, r3
 8009c7e:	2300      	movs	r3, #0
 8009c80:	6104      	str	r4, [r0, #16]
 8009c82:	7505      	strb	r5, [r0, #20]
 8009c84:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8009c88:	bc30      	pop	{r4, r5}
 8009c8a:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8009c8e:	7543      	strb	r3, [r0, #21]
 8009c90:	7583      	strb	r3, [r0, #22]
 8009c92:	4770      	bx	lr

08009c94 <ucdr_init_buffer_origin_offset>:
 8009c94:	b510      	push	{r4, lr}
 8009c96:	b082      	sub	sp, #8
 8009c98:	9c04      	ldr	r4, [sp, #16]
 8009c9a:	9400      	str	r4, [sp, #0]
 8009c9c:	2401      	movs	r4, #1
 8009c9e:	9401      	str	r4, [sp, #4]
 8009ca0:	f7ff ffe4 	bl	8009c6c <ucdr_init_buffer_origin_offset_endian>
 8009ca4:	b002      	add	sp, #8
 8009ca6:	bd10      	pop	{r4, pc}

08009ca8 <ucdr_init_buffer_origin>:
 8009ca8:	b510      	push	{r4, lr}
 8009caa:	b082      	sub	sp, #8
 8009cac:	2400      	movs	r4, #0
 8009cae:	9400      	str	r4, [sp, #0]
 8009cb0:	f7ff fff0 	bl	8009c94 <ucdr_init_buffer_origin_offset>
 8009cb4:	b002      	add	sp, #8
 8009cb6:	bd10      	pop	{r4, pc}

08009cb8 <ucdr_init_buffer>:
 8009cb8:	2300      	movs	r3, #0
 8009cba:	f7ff bff5 	b.w	8009ca8 <ucdr_init_buffer_origin>
 8009cbe:	bf00      	nop

08009cc0 <ucdr_alignment>:
 8009cc0:	fbb0 f3f1 	udiv	r3, r0, r1
 8009cc4:	fb03 0011 	mls	r0, r3, r1, r0
 8009cc8:	1a08      	subs	r0, r1, r0
 8009cca:	3901      	subs	r1, #1
 8009ccc:	4008      	ands	r0, r1
 8009cce:	4770      	bx	lr

08009cd0 <ucdr_buffer_alignment>:
 8009cd0:	7d43      	ldrb	r3, [r0, #21]
 8009cd2:	428b      	cmp	r3, r1
 8009cd4:	d208      	bcs.n	8009ce8 <ucdr_buffer_alignment+0x18>
 8009cd6:	6903      	ldr	r3, [r0, #16]
 8009cd8:	fbb3 f0f1 	udiv	r0, r3, r1
 8009cdc:	fb01 3010 	mls	r0, r1, r0, r3
 8009ce0:	1a08      	subs	r0, r1, r0
 8009ce2:	3901      	subs	r1, #1
 8009ce4:	4008      	ands	r0, r1
 8009ce6:	4770      	bx	lr
 8009ce8:	2000      	movs	r0, #0
 8009cea:	4770      	bx	lr

08009cec <ucdr_align_to>:
 8009cec:	b570      	push	{r4, r5, r6, lr}
 8009cee:	4604      	mov	r4, r0
 8009cf0:	460e      	mov	r6, r1
 8009cf2:	f7ff ffed 	bl	8009cd0 <ucdr_buffer_alignment>
 8009cf6:	68a5      	ldr	r5, [r4, #8]
 8009cf8:	6863      	ldr	r3, [r4, #4]
 8009cfa:	6922      	ldr	r2, [r4, #16]
 8009cfc:	7566      	strb	r6, [r4, #21]
 8009cfe:	4405      	add	r5, r0
 8009d00:	42ab      	cmp	r3, r5
 8009d02:	4410      	add	r0, r2
 8009d04:	bf28      	it	cs
 8009d06:	462b      	movcs	r3, r5
 8009d08:	6120      	str	r0, [r4, #16]
 8009d0a:	60a3      	str	r3, [r4, #8]
 8009d0c:	bd70      	pop	{r4, r5, r6, pc}
 8009d0e:	bf00      	nop

08009d10 <ucdr_buffer_length>:
 8009d10:	6882      	ldr	r2, [r0, #8]
 8009d12:	6800      	ldr	r0, [r0, #0]
 8009d14:	1a10      	subs	r0, r2, r0
 8009d16:	4770      	bx	lr

08009d18 <ucdr_buffer_remaining>:
 8009d18:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 8009d1c:	1a10      	subs	r0, r2, r0
 8009d1e:	4770      	bx	lr

08009d20 <ucdr_check_final_buffer_behavior_array>:
 8009d20:	b538      	push	{r3, r4, r5, lr}
 8009d22:	7d83      	ldrb	r3, [r0, #22]
 8009d24:	b963      	cbnz	r3, 8009d40 <ucdr_check_final_buffer_behavior_array+0x20>
 8009d26:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8009d2a:	429a      	cmp	r2, r3
 8009d2c:	4604      	mov	r4, r0
 8009d2e:	460d      	mov	r5, r1
 8009d30:	d308      	bcc.n	8009d44 <ucdr_check_final_buffer_behavior_array+0x24>
 8009d32:	b139      	cbz	r1, 8009d44 <ucdr_check_final_buffer_behavior_array+0x24>
 8009d34:	6983      	ldr	r3, [r0, #24]
 8009d36:	b163      	cbz	r3, 8009d52 <ucdr_check_final_buffer_behavior_array+0x32>
 8009d38:	69c1      	ldr	r1, [r0, #28]
 8009d3a:	4798      	blx	r3
 8009d3c:	75a0      	strb	r0, [r4, #22]
 8009d3e:	b108      	cbz	r0, 8009d44 <ucdr_check_final_buffer_behavior_array+0x24>
 8009d40:	2000      	movs	r0, #0
 8009d42:	bd38      	pop	{r3, r4, r5, pc}
 8009d44:	4620      	mov	r0, r4
 8009d46:	f7ff ffe7 	bl	8009d18 <ucdr_buffer_remaining>
 8009d4a:	42a8      	cmp	r0, r5
 8009d4c:	bf28      	it	cs
 8009d4e:	4628      	movcs	r0, r5
 8009d50:	bd38      	pop	{r3, r4, r5, pc}
 8009d52:	2301      	movs	r3, #1
 8009d54:	7583      	strb	r3, [r0, #22]
 8009d56:	e7f3      	b.n	8009d40 <ucdr_check_final_buffer_behavior_array+0x20>

08009d58 <ucdr_advance_buffer>:
 8009d58:	b538      	push	{r3, r4, r5, lr}
 8009d5a:	4604      	mov	r4, r0
 8009d5c:	460d      	mov	r5, r1
 8009d5e:	f7ff ff59 	bl	8009c14 <ucdr_check_buffer_available_for>
 8009d62:	b178      	cbz	r0, 8009d84 <ucdr_advance_buffer+0x2c>
 8009d64:	68a3      	ldr	r3, [r4, #8]
 8009d66:	6921      	ldr	r1, [r4, #16]
 8009d68:	442b      	add	r3, r5
 8009d6a:	60a3      	str	r3, [r4, #8]
 8009d6c:	2301      	movs	r3, #1
 8009d6e:	4429      	add	r1, r5
 8009d70:	7563      	strb	r3, [r4, #21]
 8009d72:	6121      	str	r1, [r4, #16]
 8009d74:	bd38      	pop	{r3, r4, r5, pc}
 8009d76:	68a2      	ldr	r2, [r4, #8]
 8009d78:	6923      	ldr	r3, [r4, #16]
 8009d7a:	4402      	add	r2, r0
 8009d7c:	4403      	add	r3, r0
 8009d7e:	1a2d      	subs	r5, r5, r0
 8009d80:	60a2      	str	r2, [r4, #8]
 8009d82:	6123      	str	r3, [r4, #16]
 8009d84:	2201      	movs	r2, #1
 8009d86:	4629      	mov	r1, r5
 8009d88:	4620      	mov	r0, r4
 8009d8a:	f7ff ffc9 	bl	8009d20 <ucdr_check_final_buffer_behavior_array>
 8009d8e:	2800      	cmp	r0, #0
 8009d90:	d1f1      	bne.n	8009d76 <ucdr_advance_buffer+0x1e>
 8009d92:	2301      	movs	r3, #1
 8009d94:	7563      	strb	r3, [r4, #21]
 8009d96:	bd38      	pop	{r3, r4, r5, pc}

08009d98 <uxr_buffer_delete_entity>:
 8009d98:	b530      	push	{r4, r5, lr}
 8009d9a:	b08f      	sub	sp, #60	; 0x3c
 8009d9c:	2403      	movs	r4, #3
 8009d9e:	2500      	movs	r5, #0
 8009da0:	e9cd 4500 	strd	r4, r5, [sp]
 8009da4:	9202      	str	r2, [sp, #8]
 8009da6:	ab06      	add	r3, sp, #24
 8009da8:	2204      	movs	r2, #4
 8009daa:	9103      	str	r1, [sp, #12]
 8009dac:	4604      	mov	r4, r0
 8009dae:	f001 f87b 	bl	800aea8 <uxr_prepare_stream_to_write_submessage>
 8009db2:	b918      	cbnz	r0, 8009dbc <uxr_buffer_delete_entity+0x24>
 8009db4:	4604      	mov	r4, r0
 8009db6:	4620      	mov	r0, r4
 8009db8:	b00f      	add	sp, #60	; 0x3c
 8009dba:	bd30      	pop	{r4, r5, pc}
 8009dbc:	9902      	ldr	r1, [sp, #8]
 8009dbe:	aa05      	add	r2, sp, #20
 8009dc0:	4620      	mov	r0, r4
 8009dc2:	f001 f9ab 	bl	800b11c <uxr_init_base_object_request>
 8009dc6:	a905      	add	r1, sp, #20
 8009dc8:	4604      	mov	r4, r0
 8009dca:	a806      	add	r0, sp, #24
 8009dcc:	f002 fafa 	bl	800c3c4 <uxr_serialize_DELETE_Payload>
 8009dd0:	4620      	mov	r0, r4
 8009dd2:	b00f      	add	sp, #60	; 0x3c
 8009dd4:	bd30      	pop	{r4, r5, pc}
 8009dd6:	bf00      	nop

08009dd8 <uxr_common_create_entity>:
 8009dd8:	b530      	push	{r4, r5, lr}
 8009dda:	f3c2 4507 	ubfx	r5, r2, #16, #8
 8009dde:	b08d      	sub	sp, #52	; 0x34
 8009de0:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8009de4:	2d01      	cmp	r5, #1
 8009de6:	bf0c      	ite	eq
 8009de8:	f003 0201 	andeq.w	r2, r3, #1
 8009dec:	2200      	movne	r2, #0
 8009dee:	330e      	adds	r3, #14
 8009df0:	4604      	mov	r4, r0
 8009df2:	441a      	add	r2, r3
 8009df4:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 8009df8:	9001      	str	r0, [sp, #4]
 8009dfa:	2101      	movs	r1, #1
 8009dfc:	9100      	str	r1, [sp, #0]
 8009dfe:	b292      	uxth	r2, r2
 8009e00:	9903      	ldr	r1, [sp, #12]
 8009e02:	ab04      	add	r3, sp, #16
 8009e04:	4620      	mov	r0, r4
 8009e06:	f001 f84f 	bl	800aea8 <uxr_prepare_stream_to_write_submessage>
 8009e0a:	b918      	cbnz	r0, 8009e14 <uxr_common_create_entity+0x3c>
 8009e0c:	4604      	mov	r4, r0
 8009e0e:	4620      	mov	r0, r4
 8009e10:	b00d      	add	sp, #52	; 0x34
 8009e12:	bd30      	pop	{r4, r5, pc}
 8009e14:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009e16:	9902      	ldr	r1, [sp, #8]
 8009e18:	4620      	mov	r0, r4
 8009e1a:	f001 f97f 	bl	800b11c <uxr_init_base_object_request>
 8009e1e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009e20:	4604      	mov	r4, r0
 8009e22:	a804      	add	r0, sp, #16
 8009e24:	f002 fa22 	bl	800c26c <uxr_serialize_CREATE_Payload>
 8009e28:	4620      	mov	r0, r4
 8009e2a:	b00d      	add	sp, #52	; 0x34
 8009e2c:	bd30      	pop	{r4, r5, pc}
 8009e2e:	bf00      	nop

08009e30 <uxr_buffer_create_participant_bin>:
 8009e30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e32:	f5ad 7d17 	sub.w	sp, sp, #604	; 0x25c
 8009e36:	ac11      	add	r4, sp, #68	; 0x44
 8009e38:	9103      	str	r1, [sp, #12]
 8009e3a:	9e9c      	ldr	r6, [sp, #624]	; 0x270
 8009e3c:	f8a4 3210 	strh.w	r3, [r4, #528]	; 0x210
 8009e40:	2103      	movs	r1, #3
 8009e42:	7221      	strb	r1, [r4, #8]
 8009e44:	2301      	movs	r3, #1
 8009e46:	2100      	movs	r1, #0
 8009e48:	7123      	strb	r3, [r4, #4]
 8009e4a:	f89d 7274 	ldrb.w	r7, [sp, #628]	; 0x274
 8009e4e:	9202      	str	r2, [sp, #8]
 8009e50:	4605      	mov	r5, r0
 8009e52:	f88d 1014 	strb.w	r1, [sp, #20]
 8009e56:	b1ce      	cbz	r6, 8009e8c <uxr_buffer_create_participant_bin+0x5c>
 8009e58:	f88d 301c 	strb.w	r3, [sp, #28]
 8009e5c:	9608      	str	r6, [sp, #32]
 8009e5e:	a809      	add	r0, sp, #36	; 0x24
 8009e60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009e64:	a915      	add	r1, sp, #84	; 0x54
 8009e66:	f7ff ff27 	bl	8009cb8 <ucdr_init_buffer>
 8009e6a:	a905      	add	r1, sp, #20
 8009e6c:	a809      	add	r0, sp, #36	; 0x24
 8009e6e:	f001 feb1 	bl	800bbd4 <uxr_serialize_OBJK_DomainParticipant_Binary>
 8009e72:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009e74:	9401      	str	r4, [sp, #4]
 8009e76:	b283      	uxth	r3, r0
 8009e78:	9700      	str	r7, [sp, #0]
 8009e7a:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009e7e:	60e0      	str	r0, [r4, #12]
 8009e80:	4628      	mov	r0, r5
 8009e82:	f7ff ffa9 	bl	8009dd8 <uxr_common_create_entity>
 8009e86:	f50d 7d17 	add.w	sp, sp, #604	; 0x25c
 8009e8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e8c:	f88d 601c 	strb.w	r6, [sp, #28]
 8009e90:	e7e5      	b.n	8009e5e <uxr_buffer_create_participant_bin+0x2e>
 8009e92:	bf00      	nop

08009e94 <uxr_buffer_create_topic_bin>:
 8009e94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e96:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8009e9a:	ac13      	add	r4, sp, #76	; 0x4c
 8009e9c:	4605      	mov	r5, r0
 8009e9e:	9105      	str	r1, [sp, #20]
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	a997      	add	r1, sp, #604	; 0x25c
 8009ea4:	2602      	movs	r6, #2
 8009ea6:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8009eaa:	f89d 7280 	ldrb.w	r7, [sp, #640]	; 0x280
 8009eae:	f88d 6050 	strb.w	r6, [sp, #80]	; 0x50
 8009eb2:	9e9f      	ldr	r6, [sp, #636]	; 0x27c
 8009eb4:	f000 f8ea 	bl	800a08c <uxr_object_id_to_raw>
 8009eb8:	9a9e      	ldr	r2, [sp, #632]	; 0x278
 8009eba:	9206      	str	r2, [sp, #24]
 8009ebc:	2303      	movs	r3, #3
 8009ebe:	2101      	movs	r1, #1
 8009ec0:	7223      	strb	r3, [r4, #8]
 8009ec2:	a80b      	add	r0, sp, #44	; 0x2c
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009eca:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8009ece:	a917      	add	r1, sp, #92	; 0x5c
 8009ed0:	f88d 301c 	strb.w	r3, [sp, #28]
 8009ed4:	960a      	str	r6, [sp, #40]	; 0x28
 8009ed6:	f7ff feef 	bl	8009cb8 <ucdr_init_buffer>
 8009eda:	a906      	add	r1, sp, #24
 8009edc:	a80b      	add	r0, sp, #44	; 0x2c
 8009ede:	f001 fe9b 	bl	800bc18 <uxr_serialize_OBJK_Topic_Binary>
 8009ee2:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8009ee4:	9401      	str	r4, [sp, #4]
 8009ee6:	9700      	str	r7, [sp, #0]
 8009ee8:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8009eec:	4628      	mov	r0, r5
 8009eee:	b2b3      	uxth	r3, r6
 8009ef0:	60e6      	str	r6, [r4, #12]
 8009ef2:	f7ff ff71 	bl	8009dd8 <uxr_common_create_entity>
 8009ef6:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8009efa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009efc <uxr_buffer_create_publisher_bin>:
 8009efc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009efe:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 8009f02:	ac0e      	add	r4, sp, #56	; 0x38
 8009f04:	4605      	mov	r5, r0
 8009f06:	9105      	str	r1, [sp, #20]
 8009f08:	4618      	mov	r0, r3
 8009f0a:	2603      	movs	r6, #3
 8009f0c:	a992      	add	r1, sp, #584	; 0x248
 8009f0e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8009f12:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 8009f16:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 8009f1a:	f000 f8b7 	bl	800a08c <uxr_object_id_to_raw>
 8009f1e:	2300      	movs	r3, #0
 8009f20:	a806      	add	r0, sp, #24
 8009f22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009f26:	a912      	add	r1, sp, #72	; 0x48
 8009f28:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 8009f2c:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 8009f30:	7226      	strb	r6, [r4, #8]
 8009f32:	f7ff fec1 	bl	8009cb8 <ucdr_init_buffer>
 8009f36:	a993      	add	r1, sp, #588	; 0x24c
 8009f38:	a806      	add	r0, sp, #24
 8009f3a:	f001 ff21 	bl	800bd80 <uxr_serialize_OBJK_Publisher_Binary>
 8009f3e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8009f40:	9700      	str	r7, [sp, #0]
 8009f42:	9401      	str	r4, [sp, #4]
 8009f44:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8009f48:	4628      	mov	r0, r5
 8009f4a:	b2b3      	uxth	r3, r6
 8009f4c:	60e6      	str	r6, [r4, #12]
 8009f4e:	f7ff ff43 	bl	8009dd8 <uxr_common_create_entity>
 8009f52:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 8009f56:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009f58 <uxr_buffer_create_datawriter_bin>:
 8009f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f5c:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8009f60:	ac1d      	add	r4, sp, #116	; 0x74
 8009f62:	2505      	movs	r5, #5
 8009f64:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8009f68:	9105      	str	r1, [sp, #20]
 8009f6a:	4606      	mov	r6, r0
 8009f6c:	a9a1      	add	r1, sp, #644	; 0x284
 8009f6e:	4618      	mov	r0, r3
 8009f70:	7125      	strb	r5, [r4, #4]
 8009f72:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	; 0x2a8
 8009f76:	f89d 82ac 	ldrb.w	r8, [sp, #684]	; 0x2ac
 8009f7a:	2703      	movs	r7, #3
 8009f7c:	f000 f886 	bl	800a08c <uxr_object_id_to_raw>
 8009f80:	a90e      	add	r1, sp, #56	; 0x38
 8009f82:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
 8009f84:	7227      	strb	r7, [r4, #8]
 8009f86:	f000 f881 	bl	800a08c <uxr_object_id_to_raw>
 8009f8a:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 8009f8e:	f89d 12a5 	ldrb.w	r1, [sp, #677]	; 0x2a5
 8009f92:	3d00      	subs	r5, #0
 8009f94:	f04f 0300 	mov.w	r3, #0
 8009f98:	bf18      	it	ne
 8009f9a:	2501      	movne	r5, #1
 8009f9c:	2201      	movs	r2, #1
 8009f9e:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 8009fa2:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
 8009fa6:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 8009faa:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 8009fae:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 8009fb2:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 8009fb6:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8009fba:	bb89      	cbnz	r1, 800a020 <uxr_buffer_create_datawriter_bin+0xc8>
 8009fbc:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8009fc0:	f04f 0e23 	mov.w	lr, #35	; 0x23
 8009fc4:	f04f 0c13 	mov.w	ip, #19
 8009fc8:	250b      	movs	r5, #11
 8009fca:	2221      	movs	r2, #33	; 0x21
 8009fcc:	2111      	movs	r1, #17
 8009fce:	2009      	movs	r0, #9
 8009fd0:	f89d 32a6 	ldrb.w	r3, [sp, #678]	; 0x2a6
 8009fd4:	b923      	cbnz	r3, 8009fe0 <uxr_buffer_create_datawriter_bin+0x88>
 8009fd6:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 8009fda:	4672      	mov	r2, lr
 8009fdc:	4661      	mov	r1, ip
 8009fde:	4628      	mov	r0, r5
 8009fe0:	f89d 32a4 	ldrb.w	r3, [sp, #676]	; 0x2a4
 8009fe4:	2b01      	cmp	r3, #1
 8009fe6:	d025      	beq.n	800a034 <uxr_buffer_create_datawriter_bin+0xdc>
 8009fe8:	2b03      	cmp	r3, #3
 8009fea:	d029      	beq.n	800a040 <uxr_buffer_create_datawriter_bin+0xe8>
 8009fec:	b32b      	cbz	r3, 800a03a <uxr_buffer_create_datawriter_bin+0xe2>
 8009fee:	a806      	add	r0, sp, #24
 8009ff0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009ff4:	a921      	add	r1, sp, #132	; 0x84
 8009ff6:	f7ff fe5f 	bl	8009cb8 <ucdr_init_buffer>
 8009ffa:	a90e      	add	r1, sp, #56	; 0x38
 8009ffc:	a806      	add	r0, sp, #24
 8009ffe:	f001 ff35 	bl	800be6c <uxr_serialize_OBJK_DataWriter_Binary>
 800a002:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a004:	9401      	str	r4, [sp, #4]
 800a006:	b283      	uxth	r3, r0
 800a008:	f8cd 8000 	str.w	r8, [sp]
 800a00c:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800a010:	60e0      	str	r0, [r4, #12]
 800a012:	4630      	mov	r0, r6
 800a014:	f7ff fee0 	bl	8009dd8 <uxr_common_create_entity>
 800a018:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800a01c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a020:	f04f 0e22 	mov.w	lr, #34	; 0x22
 800a024:	f04f 0c12 	mov.w	ip, #18
 800a028:	250a      	movs	r5, #10
 800a02a:	2220      	movs	r2, #32
 800a02c:	2110      	movs	r1, #16
 800a02e:	2008      	movs	r0, #8
 800a030:	2702      	movs	r7, #2
 800a032:	e7cd      	b.n	8009fd0 <uxr_buffer_create_datawriter_bin+0x78>
 800a034:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 800a038:	e7d9      	b.n	8009fee <uxr_buffer_create_datawriter_bin+0x96>
 800a03a:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 800a03e:	e7d6      	b.n	8009fee <uxr_buffer_create_datawriter_bin+0x96>
 800a040:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 800a044:	e7d3      	b.n	8009fee <uxr_buffer_create_datawriter_bin+0x96>
 800a046:	bf00      	nop

0800a048 <uxr_object_id>:
 800a048:	b082      	sub	sp, #8
 800a04a:	2300      	movs	r3, #0
 800a04c:	f88d 1006 	strb.w	r1, [sp, #6]
 800a050:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800a054:	f360 030f 	bfi	r3, r0, #0, #16
 800a058:	f362 431f 	bfi	r3, r2, #16, #16
 800a05c:	4618      	mov	r0, r3
 800a05e:	b002      	add	sp, #8
 800a060:	4770      	bx	lr
 800a062:	bf00      	nop

0800a064 <uxr_object_id_from_raw>:
 800a064:	7843      	ldrb	r3, [r0, #1]
 800a066:	7801      	ldrb	r1, [r0, #0]
 800a068:	b082      	sub	sp, #8
 800a06a:	f003 000f 	and.w	r0, r3, #15
 800a06e:	f88d 0006 	strb.w	r0, [sp, #6]
 800a072:	091b      	lsrs	r3, r3, #4
 800a074:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800a078:	2200      	movs	r2, #0
 800a07a:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 800a07e:	f363 020f 	bfi	r2, r3, #0, #16
 800a082:	f361 421f 	bfi	r2, r1, #16, #16
 800a086:	4610      	mov	r0, r2
 800a088:	b002      	add	sp, #8
 800a08a:	4770      	bx	lr

0800a08c <uxr_object_id_to_raw>:
 800a08c:	4602      	mov	r2, r0
 800a08e:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800a092:	b082      	sub	sp, #8
 800a094:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800a098:	f3c2 120b 	ubfx	r2, r2, #4, #12
 800a09c:	700a      	strb	r2, [r1, #0]
 800a09e:	704b      	strb	r3, [r1, #1]
 800a0a0:	b002      	add	sp, #8
 800a0a2:	4770      	bx	lr

0800a0a4 <on_get_fragmentation_info>:
 800a0a4:	b500      	push	{lr}
 800a0a6:	b08b      	sub	sp, #44	; 0x2c
 800a0a8:	4601      	mov	r1, r0
 800a0aa:	2204      	movs	r2, #4
 800a0ac:	a802      	add	r0, sp, #8
 800a0ae:	f7ff fe03 	bl	8009cb8 <ucdr_init_buffer>
 800a0b2:	f10d 0305 	add.w	r3, sp, #5
 800a0b6:	a802      	add	r0, sp, #8
 800a0b8:	f10d 0206 	add.w	r2, sp, #6
 800a0bc:	a901      	add	r1, sp, #4
 800a0be:	f001 f9b1 	bl	800b424 <uxr_read_submessage_header>
 800a0c2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800a0c6:	2b0d      	cmp	r3, #13
 800a0c8:	d003      	beq.n	800a0d2 <on_get_fragmentation_info+0x2e>
 800a0ca:	2000      	movs	r0, #0
 800a0cc:	b00b      	add	sp, #44	; 0x2c
 800a0ce:	f85d fb04 	ldr.w	pc, [sp], #4
 800a0d2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800a0d6:	f013 0f02 	tst.w	r3, #2
 800a0da:	bf14      	ite	ne
 800a0dc:	2002      	movne	r0, #2
 800a0de:	2001      	moveq	r0, #1
 800a0e0:	b00b      	add	sp, #44	; 0x2c
 800a0e2:	f85d fb04 	ldr.w	pc, [sp], #4
 800a0e6:	bf00      	nop

0800a0e8 <read_submessage_get_info>:
 800a0e8:	b570      	push	{r4, r5, r6, lr}
 800a0ea:	2500      	movs	r5, #0
 800a0ec:	f5ad 7d34 	sub.w	sp, sp, #720	; 0x2d0
 800a0f0:	4604      	mov	r4, r0
 800a0f2:	f44f 7224 	mov.w	r2, #656	; 0x290
 800a0f6:	460e      	mov	r6, r1
 800a0f8:	a810      	add	r0, sp, #64	; 0x40
 800a0fa:	4629      	mov	r1, r5
 800a0fc:	e9cd 5503 	strd	r5, r5, [sp, #12]
 800a100:	f006 fb30 	bl	8010764 <memset>
 800a104:	a903      	add	r1, sp, #12
 800a106:	4630      	mov	r0, r6
 800a108:	f002 f948 	bl	800c39c <uxr_deserialize_GET_INFO_Payload>
 800a10c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800a110:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800a114:	4620      	mov	r0, r4
 800a116:	f000 fff9 	bl	800b10c <uxr_session_header_offset>
 800a11a:	462b      	mov	r3, r5
 800a11c:	9000      	str	r0, [sp, #0]
 800a11e:	a905      	add	r1, sp, #20
 800a120:	a808      	add	r0, sp, #32
 800a122:	220c      	movs	r2, #12
 800a124:	f7ff fdb6 	bl	8009c94 <ucdr_init_buffer_origin_offset>
 800a128:	a910      	add	r1, sp, #64	; 0x40
 800a12a:	a808      	add	r0, sp, #32
 800a12c:	f002 f9a8 	bl	800c480 <uxr_serialize_INFO_Payload>
 800a130:	9b08      	ldr	r3, [sp, #32]
 800a132:	462a      	mov	r2, r5
 800a134:	4629      	mov	r1, r5
 800a136:	4620      	mov	r0, r4
 800a138:	f000 ff90 	bl	800b05c <uxr_stamp_session_header>
 800a13c:	a808      	add	r0, sp, #32
 800a13e:	f7ff fde7 	bl	8009d10 <ucdr_buffer_length>
 800a142:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800a144:	4602      	mov	r2, r0
 800a146:	a905      	add	r1, sp, #20
 800a148:	e9d3 0400 	ldrd	r0, r4, [r3]
 800a14c:	47a0      	blx	r4
 800a14e:	f50d 7d34 	add.w	sp, sp, #720	; 0x2d0
 800a152:	bd70      	pop	{r4, r5, r6, pc}

0800a154 <write_submessage_acknack.isra.0>:
 800a154:	b570      	push	{r4, r5, r6, lr}
 800a156:	b092      	sub	sp, #72	; 0x48
 800a158:	4605      	mov	r5, r0
 800a15a:	460e      	mov	r6, r1
 800a15c:	4614      	mov	r4, r2
 800a15e:	f000 ffd5 	bl	800b10c <uxr_session_header_offset>
 800a162:	a905      	add	r1, sp, #20
 800a164:	9000      	str	r0, [sp, #0]
 800a166:	2300      	movs	r3, #0
 800a168:	a80a      	add	r0, sp, #40	; 0x28
 800a16a:	2211      	movs	r2, #17
 800a16c:	f7ff fd92 	bl	8009c94 <ucdr_init_buffer_origin_offset>
 800a170:	2218      	movs	r2, #24
 800a172:	fb02 5404 	mla	r4, r2, r4, r5
 800a176:	2300      	movs	r3, #0
 800a178:	2205      	movs	r2, #5
 800a17a:	3450      	adds	r4, #80	; 0x50
 800a17c:	a80a      	add	r0, sp, #40	; 0x28
 800a17e:	210a      	movs	r1, #10
 800a180:	f001 f936 	bl	800b3f0 <uxr_buffer_submessage_header>
 800a184:	a903      	add	r1, sp, #12
 800a186:	4620      	mov	r0, r4
 800a188:	f004 ff14 	bl	800efb4 <uxr_compute_acknack>
 800a18c:	a903      	add	r1, sp, #12
 800a18e:	ba43      	rev16	r3, r0
 800a190:	a80a      	add	r0, sp, #40	; 0x28
 800a192:	f8ad 300e 	strh.w	r3, [sp, #14]
 800a196:	f88d 6010 	strb.w	r6, [sp, #16]
 800a19a:	f002 f9e1 	bl	800c560 <uxr_serialize_ACKNACK_Payload>
 800a19e:	2200      	movs	r2, #0
 800a1a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1a2:	4611      	mov	r1, r2
 800a1a4:	4628      	mov	r0, r5
 800a1a6:	f000 ff59 	bl	800b05c <uxr_stamp_session_header>
 800a1aa:	a80a      	add	r0, sp, #40	; 0x28
 800a1ac:	f7ff fdb0 	bl	8009d10 <ucdr_buffer_length>
 800a1b0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800a1b2:	4602      	mov	r2, r0
 800a1b4:	a905      	add	r1, sp, #20
 800a1b6:	e9d3 0400 	ldrd	r0, r4, [r3]
 800a1ba:	47a0      	blx	r4
 800a1bc:	b012      	add	sp, #72	; 0x48
 800a1be:	bd70      	pop	{r4, r5, r6, pc}

0800a1c0 <uxr_init_session>:
 800a1c0:	b5d0      	push	{r4, r6, r7, lr}
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	2600      	movs	r6, #0
 800a1c6:	2700      	movs	r7, #0
 800a1c8:	e9c0 6726 	strd	r6, r7, [r0, #152]	; 0x98
 800a1cc:	4604      	mov	r4, r0
 800a1ce:	6701      	str	r1, [r0, #112]	; 0x70
 800a1d0:	e9c0 331d 	strd	r3, r3, [r0, #116]	; 0x74
 800a1d4:	e9c0 331f 	strd	r3, r3, [r0, #124]	; 0x7c
 800a1d8:	e9c0 3321 	strd	r3, r3, [r0, #132]	; 0x84
 800a1dc:	e9c0 3323 	strd	r3, r3, [r0, #140]	; 0x8c
 800a1e0:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
 800a1e4:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 800a1e8:	2181      	movs	r1, #129	; 0x81
 800a1ea:	f000 fea1 	bl	800af30 <uxr_init_session_info>
 800a1ee:	f104 0008 	add.w	r0, r4, #8
 800a1f2:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
 800a1f6:	f001 b817 	b.w	800b228 <uxr_init_stream_storage>
 800a1fa:	bf00      	nop

0800a1fc <uxr_set_status_callback>:
 800a1fc:	e9c0 1220 	strd	r1, r2, [r0, #128]	; 0x80
 800a200:	4770      	bx	lr
 800a202:	bf00      	nop

0800a204 <uxr_set_topic_callback>:
 800a204:	e9c0 1222 	strd	r1, r2, [r0, #136]	; 0x88
 800a208:	4770      	bx	lr
 800a20a:	bf00      	nop

0800a20c <uxr_set_request_callback>:
 800a20c:	e9c0 1229 	strd	r1, r2, [r0, #164]	; 0xa4
 800a210:	4770      	bx	lr
 800a212:	bf00      	nop

0800a214 <uxr_set_reply_callback>:
 800a214:	e9c0 122b 	strd	r1, r2, [r0, #172]	; 0xac
 800a218:	4770      	bx	lr
 800a21a:	bf00      	nop

0800a21c <uxr_create_output_best_effort_stream>:
 800a21c:	b510      	push	{r4, lr}
 800a21e:	b084      	sub	sp, #16
 800a220:	e9cd 2100 	strd	r2, r1, [sp]
 800a224:	4604      	mov	r4, r0
 800a226:	f000 ff71 	bl	800b10c <uxr_session_header_offset>
 800a22a:	e9dd 2100 	ldrd	r2, r1, [sp]
 800a22e:	4603      	mov	r3, r0
 800a230:	f104 0008 	add.w	r0, r4, #8
 800a234:	b004      	add	sp, #16
 800a236:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a23a:	f001 b83f 	b.w	800b2bc <uxr_add_output_best_effort_buffer>
 800a23e:	bf00      	nop

0800a240 <uxr_create_output_reliable_stream>:
 800a240:	b530      	push	{r4, r5, lr}
 800a242:	b089      	sub	sp, #36	; 0x24
 800a244:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800a248:	9303      	str	r3, [sp, #12]
 800a24a:	4604      	mov	r4, r0
 800a24c:	f000 ff5e 	bl	800b10c <uxr_session_header_offset>
 800a250:	4605      	mov	r5, r0
 800a252:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800a256:	9905      	ldr	r1, [sp, #20]
 800a258:	9500      	str	r5, [sp, #0]
 800a25a:	f104 0008 	add.w	r0, r4, #8
 800a25e:	f001 f83f 	bl	800b2e0 <uxr_add_output_reliable_buffer>
 800a262:	2200      	movs	r2, #0
 800a264:	b2c3      	uxtb	r3, r0
 800a266:	f363 0207 	bfi	r2, r3, #0, #8
 800a26a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800a26e:	f363 220f 	bfi	r2, r3, #8, #8
 800a272:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800a276:	f363 4217 	bfi	r2, r3, #16, #8
 800a27a:	0e03      	lsrs	r3, r0, #24
 800a27c:	f363 621f 	bfi	r2, r3, #24, #8
 800a280:	4610      	mov	r0, r2
 800a282:	b009      	add	sp, #36	; 0x24
 800a284:	bd30      	pop	{r4, r5, pc}
 800a286:	bf00      	nop

0800a288 <uxr_create_input_best_effort_stream>:
 800a288:	b082      	sub	sp, #8
 800a28a:	3008      	adds	r0, #8
 800a28c:	b002      	add	sp, #8
 800a28e:	f001 b841 	b.w	800b314 <uxr_add_input_best_effort_buffer>
 800a292:	bf00      	nop

0800a294 <uxr_create_input_reliable_stream>:
 800a294:	b510      	push	{r4, lr}
 800a296:	b084      	sub	sp, #16
 800a298:	4c0b      	ldr	r4, [pc, #44]	; (800a2c8 <uxr_create_input_reliable_stream+0x34>)
 800a29a:	9400      	str	r4, [sp, #0]
 800a29c:	3008      	adds	r0, #8
 800a29e:	f001 f84f 	bl	800b340 <uxr_add_input_reliable_buffer>
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	b2c3      	uxtb	r3, r0
 800a2a6:	f363 0207 	bfi	r2, r3, #0, #8
 800a2aa:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800a2ae:	f363 220f 	bfi	r2, r3, #8, #8
 800a2b2:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800a2b6:	f363 4217 	bfi	r2, r3, #16, #8
 800a2ba:	0e03      	lsrs	r3, r0, #24
 800a2bc:	f363 621f 	bfi	r2, r3, #24, #8
 800a2c0:	4610      	mov	r0, r2
 800a2c2:	b004      	add	sp, #16
 800a2c4:	bd10      	pop	{r4, pc}
 800a2c6:	bf00      	nop
 800a2c8:	0800a0a5 	.word	0x0800a0a5

0800a2cc <uxr_epoch_nanos>:
 800a2cc:	b510      	push	{r4, lr}
 800a2ce:	4604      	mov	r4, r0
 800a2d0:	f001 f8f0 	bl	800b4b4 <uxr_nanos>
 800a2d4:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	; 0x98
 800a2d8:	1ac0      	subs	r0, r0, r3
 800a2da:	eb61 0102 	sbc.w	r1, r1, r2
 800a2de:	bd10      	pop	{r4, pc}

0800a2e0 <uxr_flash_output_streams>:
 800a2e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2e4:	7e03      	ldrb	r3, [r0, #24]
 800a2e6:	b084      	sub	sp, #16
 800a2e8:	4604      	mov	r4, r0
 800a2ea:	b1fb      	cbz	r3, 800a32c <uxr_flash_output_streams+0x4c>
 800a2ec:	f04f 0900 	mov.w	r9, #0
 800a2f0:	4648      	mov	r0, r9
 800a2f2:	f10d 0802 	add.w	r8, sp, #2
 800a2f6:	af03      	add	r7, sp, #12
 800a2f8:	ae02      	add	r6, sp, #8
 800a2fa:	2201      	movs	r2, #1
 800a2fc:	4611      	mov	r1, r2
 800a2fe:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 800a302:	f000 ff3b 	bl	800b17c <uxr_stream_id>
 800a306:	3508      	adds	r5, #8
 800a308:	4684      	mov	ip, r0
 800a30a:	4643      	mov	r3, r8
 800a30c:	4628      	mov	r0, r5
 800a30e:	463a      	mov	r2, r7
 800a310:	4631      	mov	r1, r6
 800a312:	f8cd c004 	str.w	ip, [sp, #4]
 800a316:	f004 fed5 	bl	800f0c4 <uxr_prepare_best_effort_buffer_to_send>
 800a31a:	2800      	cmp	r0, #0
 800a31c:	d13d      	bne.n	800a39a <uxr_flash_output_streams+0xba>
 800a31e:	7e23      	ldrb	r3, [r4, #24]
 800a320:	f109 0901 	add.w	r9, r9, #1
 800a324:	fa5f f089 	uxtb.w	r0, r9
 800a328:	4283      	cmp	r3, r0
 800a32a:	d8e6      	bhi.n	800a2fa <uxr_flash_output_streams+0x1a>
 800a32c:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800a330:	b383      	cbz	r3, 800a394 <uxr_flash_output_streams+0xb4>
 800a332:	f04f 0900 	mov.w	r9, #0
 800a336:	4648      	mov	r0, r9
 800a338:	f10d 0802 	add.w	r8, sp, #2
 800a33c:	af03      	add	r7, sp, #12
 800a33e:	ae02      	add	r6, sp, #8
 800a340:	2201      	movs	r2, #1
 800a342:	2102      	movs	r1, #2
 800a344:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 800a348:	f000 ff18 	bl	800b17c <uxr_stream_id>
 800a34c:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800a350:	3520      	adds	r5, #32
 800a352:	9001      	str	r0, [sp, #4]
 800a354:	e00c      	b.n	800a370 <uxr_flash_output_streams+0x90>
 800a356:	9b02      	ldr	r3, [sp, #8]
 800a358:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800a35c:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800a360:	f000 fe7c 	bl	800b05c <uxr_stamp_session_header>
 800a364:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800a366:	9a03      	ldr	r2, [sp, #12]
 800a368:	9902      	ldr	r1, [sp, #8]
 800a36a:	e9d3 0a00 	ldrd	r0, sl, [r3]
 800a36e:	47d0      	blx	sl
 800a370:	4643      	mov	r3, r8
 800a372:	463a      	mov	r2, r7
 800a374:	4631      	mov	r1, r6
 800a376:	4628      	mov	r0, r5
 800a378:	f005 f8ac 	bl	800f4d4 <uxr_prepare_next_reliable_buffer_to_send>
 800a37c:	4603      	mov	r3, r0
 800a37e:	4620      	mov	r0, r4
 800a380:	2b00      	cmp	r3, #0
 800a382:	d1e8      	bne.n	800a356 <uxr_flash_output_streams+0x76>
 800a384:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800a388:	f109 0901 	add.w	r9, r9, #1
 800a38c:	fa5f f089 	uxtb.w	r0, r9
 800a390:	4283      	cmp	r3, r0
 800a392:	d8d5      	bhi.n	800a340 <uxr_flash_output_streams+0x60>
 800a394:	b004      	add	sp, #16
 800a396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a39a:	9b02      	ldr	r3, [sp, #8]
 800a39c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800a3a0:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800a3a4:	4620      	mov	r0, r4
 800a3a6:	f000 fe59 	bl	800b05c <uxr_stamp_session_header>
 800a3aa:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800a3ac:	9a03      	ldr	r2, [sp, #12]
 800a3ae:	9902      	ldr	r1, [sp, #8]
 800a3b0:	e9d3 0500 	ldrd	r0, r5, [r3]
 800a3b4:	47a8      	blx	r5
 800a3b6:	f109 0901 	add.w	r9, r9, #1
 800a3ba:	7e23      	ldrb	r3, [r4, #24]
 800a3bc:	fa5f f089 	uxtb.w	r0, r9
 800a3c0:	4283      	cmp	r3, r0
 800a3c2:	d89a      	bhi.n	800a2fa <uxr_flash_output_streams+0x1a>
 800a3c4:	e7b2      	b.n	800a32c <uxr_flash_output_streams+0x4c>
 800a3c6:	bf00      	nop

0800a3c8 <read_submessage_info>:
 800a3c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3cc:	460d      	mov	r5, r1
 800a3ce:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 800a3d2:	4669      	mov	r1, sp
 800a3d4:	4607      	mov	r7, r0
 800a3d6:	4628      	mov	r0, r5
 800a3d8:	f001 fee6 	bl	800c1a8 <uxr_deserialize_BaseObjectReply>
 800a3dc:	a902      	add	r1, sp, #8
 800a3de:	4604      	mov	r4, r0
 800a3e0:	4628      	mov	r0, r5
 800a3e2:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800a3e6:	f7fe fca3 	bl	8008d30 <ucdr_deserialize_bool>
 800a3ea:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800a3ee:	4004      	ands	r4, r0
 800a3f0:	b2e4      	uxtb	r4, r4
 800a3f2:	b95b      	cbnz	r3, 800a40c <read_submessage_info+0x44>
 800a3f4:	a987      	add	r1, sp, #540	; 0x21c
 800a3f6:	4628      	mov	r0, r5
 800a3f8:	f7fe fc9a 	bl	8008d30 <ucdr_deserialize_bool>
 800a3fc:	f89d 321c 	ldrb.w	r3, [sp, #540]	; 0x21c
 800a400:	4606      	mov	r6, r0
 800a402:	b94b      	cbnz	r3, 800a418 <read_submessage_info+0x50>
 800a404:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 800a408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a40c:	a903      	add	r1, sp, #12
 800a40e:	4628      	mov	r0, r5
 800a410:	f001 fd58 	bl	800bec4 <uxr_deserialize_ObjectVariant>
 800a414:	4004      	ands	r4, r0
 800a416:	e7ed      	b.n	800a3f4 <read_submessage_info+0x2c>
 800a418:	a988      	add	r1, sp, #544	; 0x220
 800a41a:	4628      	mov	r0, r5
 800a41c:	f7fe fcb8 	bl	8008d90 <ucdr_deserialize_uint8_t>
 800a420:	4234      	tst	r4, r6
 800a422:	d0ef      	beq.n	800a404 <read_submessage_info+0x3c>
 800a424:	2800      	cmp	r0, #0
 800a426:	d0ed      	beq.n	800a404 <read_submessage_info+0x3c>
 800a428:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
 800a42c:	2b0d      	cmp	r3, #13
 800a42e:	d1e9      	bne.n	800a404 <read_submessage_info+0x3c>
 800a430:	4628      	mov	r0, r5
 800a432:	a98a      	add	r1, sp, #552	; 0x228
 800a434:	f7ff fa52 	bl	80098dc <ucdr_deserialize_int16_t>
 800a438:	b140      	cbz	r0, 800a44c <read_submessage_info+0x84>
 800a43a:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	; 0x228
 800a43e:	2b00      	cmp	r3, #0
 800a440:	dd07      	ble.n	800a452 <read_submessage_info+0x8a>
 800a442:	f1b8 0f00 	cmp.w	r8, #0
 800a446:	bf14      	ite	ne
 800a448:	2001      	movne	r0, #1
 800a44a:	2002      	moveq	r0, #2
 800a44c:	f887 00b5 	strb.w	r0, [r7, #181]	; 0xb5
 800a450:	e7d8      	b.n	800a404 <read_submessage_info+0x3c>
 800a452:	2000      	movs	r0, #0
 800a454:	e7fa      	b.n	800a44c <read_submessage_info+0x84>
 800a456:	bf00      	nop

0800a458 <read_submessage_list>:
 800a458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a45c:	b098      	sub	sp, #96	; 0x60
 800a45e:	f8df 9304 	ldr.w	r9, [pc, #772]	; 800a764 <read_submessage_list+0x30c>
 800a462:	920b      	str	r2, [sp, #44]	; 0x2c
 800a464:	4604      	mov	r4, r0
 800a466:	4688      	mov	r8, r1
 800a468:	f10d 0337 	add.w	r3, sp, #55	; 0x37
 800a46c:	aa0e      	add	r2, sp, #56	; 0x38
 800a46e:	f10d 0136 	add.w	r1, sp, #54	; 0x36
 800a472:	4640      	mov	r0, r8
 800a474:	f000 ffd6 	bl	800b424 <uxr_read_submessage_header>
 800a478:	2800      	cmp	r0, #0
 800a47a:	f000 813d 	beq.w	800a6f8 <read_submessage_list+0x2a0>
 800a47e:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 800a482:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
 800a486:	3b02      	subs	r3, #2
 800a488:	2b0d      	cmp	r3, #13
 800a48a:	d8ed      	bhi.n	800a468 <read_submessage_list+0x10>
 800a48c:	a101      	add	r1, pc, #4	; (adr r1, 800a494 <read_submessage_list+0x3c>)
 800a48e:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a492:	bf00      	nop
 800a494:	0800a6ef 	.word	0x0800a6ef
 800a498:	0800a469 	.word	0x0800a469
 800a49c:	0800a6df 	.word	0x0800a6df
 800a4a0:	0800a683 	.word	0x0800a683
 800a4a4:	0800a679 	.word	0x0800a679
 800a4a8:	0800a469 	.word	0x0800a469
 800a4ac:	0800a469 	.word	0x0800a469
 800a4b0:	0800a5db 	.word	0x0800a5db
 800a4b4:	0800a56d 	.word	0x0800a56d
 800a4b8:	0800a52b 	.word	0x0800a52b
 800a4bc:	0800a469 	.word	0x0800a469
 800a4c0:	0800a469 	.word	0x0800a469
 800a4c4:	0800a469 	.word	0x0800a469
 800a4c8:	0800a4cd 	.word	0x0800a4cd
 800a4cc:	a912      	add	r1, sp, #72	; 0x48
 800a4ce:	4640      	mov	r0, r8
 800a4d0:	f002 f896 	bl	800c600 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800a4d4:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
 800a4d8:	2d00      	cmp	r5, #0
 800a4da:	f000 8115 	beq.w	800a708 <read_submessage_list+0x2b0>
 800a4de:	f000 ffe9 	bl	800b4b4 <uxr_nanos>
 800a4e2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800a4e4:	460b      	mov	r3, r1
 800a4e6:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a4e8:	2700      	movs	r7, #0
 800a4ea:	fbc9 6701 	smlal	r6, r7, r9, r1
 800a4ee:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800a4f2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a4f4:	4602      	mov	r2, r0
 800a4f6:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a4f8:	460e      	mov	r6, r1
 800a4fa:	2700      	movs	r7, #0
 800a4fc:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800a500:	9106      	str	r1, [sp, #24]
 800a502:	fbc9 6700 	smlal	r6, r7, r9, r0
 800a506:	9915      	ldr	r1, [sp, #84]	; 0x54
 800a508:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800a50c:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800a50e:	2700      	movs	r7, #0
 800a510:	4608      	mov	r0, r1
 800a512:	4639      	mov	r1, r7
 800a514:	fbc9 0106 	smlal	r0, r1, r9, r6
 800a518:	e9cd 0100 	strd	r0, r1, [sp]
 800a51c:	4620      	mov	r0, r4
 800a51e:	47a8      	blx	r5
 800a520:	f04f 0301 	mov.w	r3, #1
 800a524:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
 800a528:	e79e      	b.n	800a468 <read_submessage_list+0x10>
 800a52a:	a912      	add	r1, sp, #72	; 0x48
 800a52c:	4640      	mov	r0, r8
 800a52e:	f002 f855 	bl	800c5dc <uxr_deserialize_HEARTBEAT_Payload>
 800a532:	2100      	movs	r1, #0
 800a534:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 800a538:	f000 fe4a 	bl	800b1d0 <uxr_stream_id_from_raw>
 800a53c:	f3c0 2507 	ubfx	r5, r0, #8, #8
 800a540:	4603      	mov	r3, r0
 800a542:	4629      	mov	r1, r5
 800a544:	f104 0008 	add.w	r0, r4, #8
 800a548:	9311      	str	r3, [sp, #68]	; 0x44
 800a54a:	f000 ff2f 	bl	800b3ac <uxr_get_input_reliable_stream>
 800a54e:	2800      	cmp	r0, #0
 800a550:	d08a      	beq.n	800a468 <read_submessage_list+0x10>
 800a552:	f8bd 204a 	ldrh.w	r2, [sp, #74]	; 0x4a
 800a556:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
 800a55a:	f004 fd1f 	bl	800ef9c <uxr_process_heartbeat>
 800a55e:	f89d 1044 	ldrb.w	r1, [sp, #68]	; 0x44
 800a562:	462a      	mov	r2, r5
 800a564:	4620      	mov	r0, r4
 800a566:	f7ff fdf5 	bl	800a154 <write_submessage_acknack.isra.0>
 800a56a:	e77d      	b.n	800a468 <read_submessage_list+0x10>
 800a56c:	a912      	add	r1, sp, #72	; 0x48
 800a56e:	4640      	mov	r0, r8
 800a570:	f002 f80c 	bl	800c58c <uxr_deserialize_ACKNACK_Payload>
 800a574:	2100      	movs	r1, #0
 800a576:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 800a57a:	f000 fe29 	bl	800b1d0 <uxr_stream_id_from_raw>
 800a57e:	4603      	mov	r3, r0
 800a580:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800a584:	f104 0008 	add.w	r0, r4, #8
 800a588:	930f      	str	r3, [sp, #60]	; 0x3c
 800a58a:	f000 fef9 	bl	800b380 <uxr_get_output_reliable_stream>
 800a58e:	4605      	mov	r5, r0
 800a590:	2800      	cmp	r0, #0
 800a592:	f43f af69 	beq.w	800a468 <read_submessage_list+0x10>
 800a596:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
 800a59a:	f89d 104b 	ldrb.w	r1, [sp, #75]	; 0x4b
 800a59e:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 800a5a2:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800a5a6:	b289      	uxth	r1, r1
 800a5a8:	f005 f83c 	bl	800f624 <uxr_process_acknack>
 800a5ac:	4628      	mov	r0, r5
 800a5ae:	f004 ffff 	bl	800f5b0 <uxr_begin_output_nack_buffer_it>
 800a5b2:	af10      	add	r7, sp, #64	; 0x40
 800a5b4:	f8ad 003a 	strh.w	r0, [sp, #58]	; 0x3a
 800a5b8:	e005      	b.n	800a5c6 <read_submessage_list+0x16e>
 800a5ba:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800a5bc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a5be:	9910      	ldr	r1, [sp, #64]	; 0x40
 800a5c0:	e9d3 0600 	ldrd	r0, r6, [r3]
 800a5c4:	47b0      	blx	r6
 800a5c6:	f10d 033a 	add.w	r3, sp, #58	; 0x3a
 800a5ca:	aa11      	add	r2, sp, #68	; 0x44
 800a5cc:	4639      	mov	r1, r7
 800a5ce:	4628      	mov	r0, r5
 800a5d0:	f004 fff0 	bl	800f5b4 <uxr_next_reliable_nack_buffer_to_send>
 800a5d4:	2800      	cmp	r0, #0
 800a5d6:	d1f0      	bne.n	800a5ba <read_submessage_list+0x162>
 800a5d8:	e746      	b.n	800a468 <read_submessage_list+0x10>
 800a5da:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 800a5de:	f88d 203e 	strb.w	r2, [sp, #62]	; 0x3e
 800a5e2:	af10      	add	r7, sp, #64	; 0x40
 800a5e4:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 800a5e8:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
 800a5ec:	4639      	mov	r1, r7
 800a5ee:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 800a5f2:	f89d 6037 	ldrb.w	r6, [sp, #55]	; 0x37
 800a5f6:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 800a5fa:	f88d 203f 	strb.w	r2, [sp, #63]	; 0x3f
 800a5fe:	4640      	mov	r0, r8
 800a600:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
 800a604:	f001 fd0c 	bl	800c020 <uxr_deserialize_BaseObjectRequest>
 800a608:	4638      	mov	r0, r7
 800a60a:	a911      	add	r1, sp, #68	; 0x44
 800a60c:	f10d 023a 	add.w	r2, sp, #58	; 0x3a
 800a610:	f000 fda2 	bl	800b158 <uxr_parse_base_object_request>
 800a614:	f8d4 a080 	ldr.w	sl, [r4, #128]	; 0x80
 800a618:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a61a:	f8bd 703a 	ldrh.w	r7, [sp, #58]	; 0x3a
 800a61e:	9112      	str	r1, [sp, #72]	; 0x48
 800a620:	3d04      	subs	r5, #4
 800a622:	f006 060e 	and.w	r6, r6, #14
 800a626:	b2ad      	uxth	r5, r5
 800a628:	f1ba 0f00 	cmp.w	sl, #0
 800a62c:	d006      	beq.n	800a63c <read_submessage_list+0x1e4>
 800a62e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800a632:	9300      	str	r3, [sp, #0]
 800a634:	463a      	mov	r2, r7
 800a636:	2300      	movs	r3, #0
 800a638:	4620      	mov	r0, r4
 800a63a:	47d0      	blx	sl
 800a63c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800a63e:	b168      	cbz	r0, 800a65c <read_submessage_list+0x204>
 800a640:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800a642:	2300      	movs	r3, #0
 800a644:	3902      	subs	r1, #2
 800a646:	e002      	b.n	800a64e <read_submessage_list+0x1f6>
 800a648:	3301      	adds	r3, #1
 800a64a:	4283      	cmp	r3, r0
 800a64c:	d006      	beq.n	800a65c <read_submessage_list+0x204>
 800a64e:	f831 2f02 	ldrh.w	r2, [r1, #2]!
 800a652:	42ba      	cmp	r2, r7
 800a654:	d1f8      	bne.n	800a648 <read_submessage_list+0x1f0>
 800a656:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800a658:	2100      	movs	r1, #0
 800a65a:	54d1      	strb	r1, [r2, r3]
 800a65c:	9811      	ldr	r0, [sp, #68]	; 0x44
 800a65e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a660:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 800a664:	9302      	str	r3, [sp, #8]
 800a666:	e9cd 1000 	strd	r1, r0, [sp]
 800a66a:	4633      	mov	r3, r6
 800a66c:	462a      	mov	r2, r5
 800a66e:	4641      	mov	r1, r8
 800a670:	4620      	mov	r0, r4
 800a672:	f005 f85b 	bl	800f72c <read_submessage_format>
 800a676:	e6f7      	b.n	800a468 <read_submessage_list+0x10>
 800a678:	4641      	mov	r1, r8
 800a67a:	4620      	mov	r0, r4
 800a67c:	f7ff fea4 	bl	800a3c8 <read_submessage_info>
 800a680:	e6f2      	b.n	800a468 <read_submessage_list+0x10>
 800a682:	2a00      	cmp	r2, #0
 800a684:	d03b      	beq.n	800a6fe <read_submessage_list+0x2a6>
 800a686:	a912      	add	r1, sp, #72	; 0x48
 800a688:	4640      	mov	r0, r8
 800a68a:	f001 fedb 	bl	800c444 <uxr_deserialize_STATUS_Payload>
 800a68e:	a910      	add	r1, sp, #64	; 0x40
 800a690:	aa0f      	add	r2, sp, #60	; 0x3c
 800a692:	a812      	add	r0, sp, #72	; 0x48
 800a694:	f000 fd60 	bl	800b158 <uxr_parse_base_object_request>
 800a698:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 800a69c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800a69e:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 800a6a2:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 800a6a6:	9111      	str	r1, [sp, #68]	; 0x44
 800a6a8:	b135      	cbz	r5, 800a6b8 <read_submessage_list+0x260>
 800a6aa:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800a6ae:	9300      	str	r3, [sp, #0]
 800a6b0:	4632      	mov	r2, r6
 800a6b2:	463b      	mov	r3, r7
 800a6b4:	4620      	mov	r0, r4
 800a6b6:	47a8      	blx	r5
 800a6b8:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	f43f aed4 	beq.w	800a468 <read_submessage_list+0x10>
 800a6c0:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800a6c2:	2100      	movs	r1, #0
 800a6c4:	3802      	subs	r0, #2
 800a6c6:	e003      	b.n	800a6d0 <read_submessage_list+0x278>
 800a6c8:	3101      	adds	r1, #1
 800a6ca:	4299      	cmp	r1, r3
 800a6cc:	f43f aecc 	beq.w	800a468 <read_submessage_list+0x10>
 800a6d0:	f830 2f02 	ldrh.w	r2, [r0, #2]!
 800a6d4:	42b2      	cmp	r2, r6
 800a6d6:	d1f7      	bne.n	800a6c8 <read_submessage_list+0x270>
 800a6d8:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800a6da:	545f      	strb	r7, [r3, r1]
 800a6dc:	e6c4      	b.n	800a468 <read_submessage_list+0x10>
 800a6de:	2a00      	cmp	r2, #0
 800a6e0:	f47f aec2 	bne.w	800a468 <read_submessage_list+0x10>
 800a6e4:	4641      	mov	r1, r8
 800a6e6:	4620      	mov	r0, r4
 800a6e8:	f000 fc7a 	bl	800afe0 <uxr_read_create_session_status>
 800a6ec:	e6bc      	b.n	800a468 <read_submessage_list+0x10>
 800a6ee:	4641      	mov	r1, r8
 800a6f0:	4620      	mov	r0, r4
 800a6f2:	f7ff fcf9 	bl	800a0e8 <read_submessage_get_info>
 800a6f6:	e6b7      	b.n	800a468 <read_submessage_list+0x10>
 800a6f8:	b018      	add	sp, #96	; 0x60
 800a6fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6fe:	4641      	mov	r1, r8
 800a700:	4620      	mov	r0, r4
 800a702:	f000 fc79 	bl	800aff8 <uxr_read_delete_session_status>
 800a706:	e6af      	b.n	800a468 <read_submessage_list+0x10>
 800a708:	f000 fed4 	bl	800b4b4 <uxr_nanos>
 800a70c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a70e:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800a710:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a712:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800a714:	2700      	movs	r7, #0
 800a716:	fbc9 6703 	smlal	r6, r7, r9, r3
 800a71a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a71c:	eb16 0c00 	adds.w	ip, r6, r0
 800a720:	4618      	mov	r0, r3
 800a722:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a724:	eb47 0e01 	adc.w	lr, r7, r1
 800a728:	461e      	mov	r6, r3
 800a72a:	2100      	movs	r1, #0
 800a72c:	2700      	movs	r7, #0
 800a72e:	fbc9 0105 	smlal	r0, r1, r9, r5
 800a732:	fbc9 6702 	smlal	r6, r7, r9, r2
 800a736:	1983      	adds	r3, r0, r6
 800a738:	eb41 0207 	adc.w	r2, r1, r7
 800a73c:	ebbc 0303 	subs.w	r3, ip, r3
 800a740:	9308      	str	r3, [sp, #32]
 800a742:	eb6e 0302 	sbc.w	r3, lr, r2
 800a746:	9309      	str	r3, [sp, #36]	; 0x24
 800a748:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800a74c:	0fd3      	lsrs	r3, r2, #31
 800a74e:	18c9      	adds	r1, r1, r3
 800a750:	f142 0200 	adc.w	r2, r2, #0
 800a754:	084b      	lsrs	r3, r1, #1
 800a756:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 800a75a:	1052      	asrs	r2, r2, #1
 800a75c:	e9c4 3226 	strd	r3, r2, [r4, #152]	; 0x98
 800a760:	e6de      	b.n	800a520 <read_submessage_list+0xc8>
 800a762:	bf00      	nop
 800a764:	3b9aca00 	.word	0x3b9aca00

0800a768 <listen_message_reliably>:
 800a768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a76c:	1e0b      	subs	r3, r1, #0
 800a76e:	b09d      	sub	sp, #116	; 0x74
 800a770:	bfb8      	it	lt
 800a772:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 800a776:	9305      	str	r3, [sp, #20]
 800a778:	4607      	mov	r7, r0
 800a77a:	f000 fe7f 	bl	800b47c <uxr_millis>
 800a77e:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 800a782:	4681      	mov	r9, r0
 800a784:	2a00      	cmp	r2, #0
 800a786:	f000 8095 	beq.w	800a8b4 <listen_message_reliably+0x14c>
 800a78a:	2600      	movs	r6, #0
 800a78c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a790:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 800a794:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a798:	4630      	mov	r0, r6
 800a79a:	4688      	mov	r8, r1
 800a79c:	46ca      	mov	sl, r9
 800a79e:	e00f      	b.n	800a7c0 <listen_message_reliably+0x58>
 800a7a0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800a7a4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a7a8:	42a2      	cmp	r2, r4
 800a7aa:	eb73 0105 	sbcs.w	r1, r3, r5
 800a7ae:	bfb8      	it	lt
 800a7b0:	e9cd 2302 	strdlt	r2, r3, [sp, #8]
 800a7b4:	3601      	adds	r6, #1
 800a7b6:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800a7ba:	b2f0      	uxtb	r0, r6
 800a7bc:	4283      	cmp	r3, r0
 800a7be:	d951      	bls.n	800a864 <listen_message_reliably+0xfc>
 800a7c0:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 800a7c4:	2201      	movs	r2, #1
 800a7c6:	2102      	movs	r1, #2
 800a7c8:	f000 fcd8 	bl	800b17c <uxr_stream_id>
 800a7cc:	00e4      	lsls	r4, r4, #3
 800a7ce:	f104 0520 	add.w	r5, r4, #32
 800a7d2:	443d      	add	r5, r7
 800a7d4:	4601      	mov	r1, r0
 800a7d6:	4643      	mov	r3, r8
 800a7d8:	4652      	mov	r2, sl
 800a7da:	4628      	mov	r0, r5
 800a7dc:	9109      	str	r1, [sp, #36]	; 0x24
 800a7de:	f004 febb 	bl	800f558 <uxr_update_output_stream_heartbeat_timestamp>
 800a7e2:	193b      	adds	r3, r7, r4
 800a7e4:	2800      	cmp	r0, #0
 800a7e6:	d0db      	beq.n	800a7a0 <listen_message_reliably+0x38>
 800a7e8:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
 800a7ec:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 800a7f0:	4638      	mov	r0, r7
 800a7f2:	f000 fc8b 	bl	800b10c <uxr_session_header_offset>
 800a7f6:	3501      	adds	r5, #1
 800a7f8:	f10d 0b50 	add.w	fp, sp, #80	; 0x50
 800a7fc:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800a800:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
 800a804:	9000      	str	r0, [sp, #0]
 800a806:	2300      	movs	r3, #0
 800a808:	4658      	mov	r0, fp
 800a80a:	2211      	movs	r2, #17
 800a80c:	a90c      	add	r1, sp, #48	; 0x30
 800a80e:	f7ff fa41 	bl	8009c94 <ucdr_init_buffer_origin_offset>
 800a812:	2300      	movs	r3, #0
 800a814:	2205      	movs	r2, #5
 800a816:	210b      	movs	r1, #11
 800a818:	4658      	mov	r0, fp
 800a81a:	f000 fde9 	bl	800b3f0 <uxr_buffer_submessage_header>
 800a81e:	8968      	ldrh	r0, [r5, #10]
 800a820:	2101      	movs	r1, #1
 800a822:	f005 f843 	bl	800f8ac <uxr_seq_num_add>
 800a826:	892a      	ldrh	r2, [r5, #8]
 800a828:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 800a82c:	4603      	mov	r3, r0
 800a82e:	a90a      	add	r1, sp, #40	; 0x28
 800a830:	4658      	mov	r0, fp
 800a832:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 800a836:	f88d 902c 	strb.w	r9, [sp, #44]	; 0x2c
 800a83a:	f001 febb 	bl	800c5b4 <uxr_serialize_HEARTBEAT_Payload>
 800a83e:	2200      	movs	r2, #0
 800a840:	4611      	mov	r1, r2
 800a842:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a844:	4638      	mov	r0, r7
 800a846:	f000 fc09 	bl	800b05c <uxr_stamp_session_header>
 800a84a:	4658      	mov	r0, fp
 800a84c:	f7ff fa60 	bl	8009d10 <ucdr_buffer_length>
 800a850:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a852:	4602      	mov	r2, r0
 800a854:	a90c      	add	r1, sp, #48	; 0x30
 800a856:	e9d3 0500 	ldrd	r0, r5, [r3]
 800a85a:	443c      	add	r4, r7
 800a85c:	47a8      	blx	r5
 800a85e:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 800a862:	e79f      	b.n	800a7a4 <listen_message_reliably+0x3c>
 800a864:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
 800a868:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800a86c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a870:	4294      	cmp	r4, r2
 800a872:	bf08      	it	eq
 800a874:	428b      	cmpeq	r3, r1
 800a876:	d01d      	beq.n	800a8b4 <listen_message_reliably+0x14c>
 800a878:	eba3 030a 	sub.w	r3, r3, sl
 800a87c:	9905      	ldr	r1, [sp, #20]
 800a87e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800a880:	2b00      	cmp	r3, #0
 800a882:	bf08      	it	eq
 800a884:	2301      	moveq	r3, #1
 800a886:	4299      	cmp	r1, r3
 800a888:	bfa8      	it	ge
 800a88a:	4619      	movge	r1, r3
 800a88c:	6894      	ldr	r4, [r2, #8]
 800a88e:	6810      	ldr	r0, [r2, #0]
 800a890:	4689      	mov	r9, r1
 800a892:	460b      	mov	r3, r1
 800a894:	aa08      	add	r2, sp, #32
 800a896:	a907      	add	r1, sp, #28
 800a898:	47a0      	blx	r4
 800a89a:	b968      	cbnz	r0, 800a8b8 <listen_message_reliably+0x150>
 800a89c:	9b05      	ldr	r3, [sp, #20]
 800a89e:	eba3 0309 	sub.w	r3, r3, r9
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	9305      	str	r3, [sp, #20]
 800a8a6:	f73f af68 	bgt.w	800a77a <listen_message_reliably+0x12>
 800a8aa:	4604      	mov	r4, r0
 800a8ac:	4620      	mov	r0, r4
 800a8ae:	b01d      	add	sp, #116	; 0x74
 800a8b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8b4:	9b05      	ldr	r3, [sp, #20]
 800a8b6:	e7e1      	b.n	800a87c <listen_message_reliably+0x114>
 800a8b8:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800a8bc:	4604      	mov	r4, r0
 800a8be:	a80c      	add	r0, sp, #48	; 0x30
 800a8c0:	f7ff f9fa 	bl	8009cb8 <ucdr_init_buffer>
 800a8c4:	2500      	movs	r5, #0
 800a8c6:	a90c      	add	r1, sp, #48	; 0x30
 800a8c8:	f10d 031a 	add.w	r3, sp, #26
 800a8cc:	aa06      	add	r2, sp, #24
 800a8ce:	4638      	mov	r0, r7
 800a8d0:	f88d 5018 	strb.w	r5, [sp, #24]
 800a8d4:	f000 fbd8 	bl	800b088 <uxr_read_session_header>
 800a8d8:	b918      	cbnz	r0, 800a8e2 <listen_message_reliably+0x17a>
 800a8da:	4620      	mov	r0, r4
 800a8dc:	b01d      	add	sp, #116	; 0x74
 800a8de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8e2:	4629      	mov	r1, r5
 800a8e4:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800a8e8:	f000 fc72 	bl	800b1d0 <uxr_stream_id_from_raw>
 800a8ec:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800a8f0:	2e01      	cmp	r6, #1
 800a8f2:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 800a8f6:	900a      	str	r0, [sp, #40]	; 0x28
 800a8f8:	fa5f fa80 	uxtb.w	sl, r0
 800a8fc:	f3c0 2507 	ubfx	r5, r0, #8, #8
 800a900:	d04b      	beq.n	800a99a <listen_message_reliably+0x232>
 800a902:	2e02      	cmp	r6, #2
 800a904:	d00f      	beq.n	800a926 <listen_message_reliably+0x1be>
 800a906:	2e00      	cmp	r6, #0
 800a908:	d1e7      	bne.n	800a8da <listen_message_reliably+0x172>
 800a90a:	4631      	mov	r1, r6
 800a90c:	4630      	mov	r0, r6
 800a90e:	f000 fc5f 	bl	800b1d0 <uxr_stream_id_from_raw>
 800a912:	a90c      	add	r1, sp, #48	; 0x30
 800a914:	4602      	mov	r2, r0
 800a916:	4638      	mov	r0, r7
 800a918:	920a      	str	r2, [sp, #40]	; 0x28
 800a91a:	f7ff fd9d 	bl	800a458 <read_submessage_list>
 800a91e:	4620      	mov	r0, r4
 800a920:	b01d      	add	sp, #116	; 0x74
 800a922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a926:	4629      	mov	r1, r5
 800a928:	f107 0008 	add.w	r0, r7, #8
 800a92c:	f000 fd3e 	bl	800b3ac <uxr_get_input_reliable_stream>
 800a930:	4680      	mov	r8, r0
 800a932:	b348      	cbz	r0, 800a988 <listen_message_reliably+0x220>
 800a934:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a936:	9202      	str	r2, [sp, #8]
 800a938:	a80c      	add	r0, sp, #48	; 0x30
 800a93a:	f7ff f9ed 	bl	8009d18 <ucdr_buffer_remaining>
 800a93e:	4603      	mov	r3, r0
 800a940:	f10d 0019 	add.w	r0, sp, #25
 800a944:	9000      	str	r0, [sp, #0]
 800a946:	9a02      	ldr	r2, [sp, #8]
 800a948:	4649      	mov	r1, r9
 800a94a:	4640      	mov	r0, r8
 800a94c:	f004 fa28 	bl	800eda0 <uxr_receive_reliable_message>
 800a950:	b1d0      	cbz	r0, 800a988 <listen_message_reliably+0x220>
 800a952:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d037      	beq.n	800a9ca <listen_message_reliably+0x262>
 800a95a:	ae14      	add	r6, sp, #80	; 0x50
 800a95c:	f04f 0902 	mov.w	r9, #2
 800a960:	e008      	b.n	800a974 <listen_message_reliably+0x20c>
 800a962:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 800a966:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 800a96a:	f88d 902a 	strb.w	r9, [sp, #42]	; 0x2a
 800a96e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a970:	f7ff fd72 	bl	800a458 <read_submessage_list>
 800a974:	4631      	mov	r1, r6
 800a976:	2204      	movs	r2, #4
 800a978:	4640      	mov	r0, r8
 800a97a:	f004 fa91 	bl	800eea0 <uxr_next_input_reliable_buffer_available>
 800a97e:	4603      	mov	r3, r0
 800a980:	4631      	mov	r1, r6
 800a982:	4638      	mov	r0, r7
 800a984:	2b00      	cmp	r3, #0
 800a986:	d1ec      	bne.n	800a962 <listen_message_reliably+0x1fa>
 800a988:	4638      	mov	r0, r7
 800a98a:	462a      	mov	r2, r5
 800a98c:	4651      	mov	r1, sl
 800a98e:	f7ff fbe1 	bl	800a154 <write_submessage_acknack.isra.0>
 800a992:	4620      	mov	r0, r4
 800a994:	b01d      	add	sp, #116	; 0x74
 800a996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a99a:	4629      	mov	r1, r5
 800a99c:	f107 0008 	add.w	r0, r7, #8
 800a9a0:	f000 fcfa 	bl	800b398 <uxr_get_input_best_effort_stream>
 800a9a4:	2800      	cmp	r0, #0
 800a9a6:	d098      	beq.n	800a8da <listen_message_reliably+0x172>
 800a9a8:	4649      	mov	r1, r9
 800a9aa:	f004 f975 	bl	800ec98 <uxr_receive_best_effort_message>
 800a9ae:	2800      	cmp	r0, #0
 800a9b0:	d093      	beq.n	800a8da <listen_message_reliably+0x172>
 800a9b2:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 800a9b6:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 800a9ba:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 800a9be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a9c0:	a90c      	add	r1, sp, #48	; 0x30
 800a9c2:	4638      	mov	r0, r7
 800a9c4:	f7ff fd48 	bl	800a458 <read_submessage_list>
 800a9c8:	e787      	b.n	800a8da <listen_message_reliably+0x172>
 800a9ca:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 800a9ce:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 800a9d2:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 800a9d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a9d8:	a90c      	add	r1, sp, #48	; 0x30
 800a9da:	4638      	mov	r0, r7
 800a9dc:	f7ff fd3c 	bl	800a458 <read_submessage_list>
 800a9e0:	e7bb      	b.n	800a95a <listen_message_reliably+0x1f2>
 800a9e2:	bf00      	nop

0800a9e4 <uxr_run_session_until_confirm_delivery>:
 800a9e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9e8:	4606      	mov	r6, r0
 800a9ea:	460d      	mov	r5, r1
 800a9ec:	f000 fd46 	bl	800b47c <uxr_millis>
 800a9f0:	4607      	mov	r7, r0
 800a9f2:	4630      	mov	r0, r6
 800a9f4:	f7ff fc74 	bl	800a2e0 <uxr_flash_output_streams>
 800a9f8:	2d00      	cmp	r5, #0
 800a9fa:	f106 0808 	add.w	r8, r6, #8
 800a9fe:	bfa8      	it	ge
 800aa00:	462c      	movge	r4, r5
 800aa02:	da07      	bge.n	800aa14 <uxr_run_session_until_confirm_delivery+0x30>
 800aa04:	e00e      	b.n	800aa24 <uxr_run_session_until_confirm_delivery+0x40>
 800aa06:	f7ff feaf 	bl	800a768 <listen_message_reliably>
 800aa0a:	f000 fd37 	bl	800b47c <uxr_millis>
 800aa0e:	1bc3      	subs	r3, r0, r7
 800aa10:	1aec      	subs	r4, r5, r3
 800aa12:	d407      	bmi.n	800aa24 <uxr_run_session_until_confirm_delivery+0x40>
 800aa14:	4640      	mov	r0, r8
 800aa16:	f000 fcd5 	bl	800b3c4 <uxr_output_streams_confirmed>
 800aa1a:	4603      	mov	r3, r0
 800aa1c:	4621      	mov	r1, r4
 800aa1e:	4630      	mov	r0, r6
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d0f0      	beq.n	800aa06 <uxr_run_session_until_confirm_delivery+0x22>
 800aa24:	4640      	mov	r0, r8
 800aa26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa2a:	f000 bccb 	b.w	800b3c4 <uxr_output_streams_confirmed>
 800aa2e:	bf00      	nop

0800aa30 <uxr_run_session_until_all_status>:
 800aa30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa34:	9d08      	ldr	r5, [sp, #32]
 800aa36:	460f      	mov	r7, r1
 800aa38:	4692      	mov	sl, r2
 800aa3a:	461c      	mov	r4, r3
 800aa3c:	4606      	mov	r6, r0
 800aa3e:	f7ff fc4f 	bl	800a2e0 <uxr_flash_output_streams>
 800aa42:	b125      	cbz	r5, 800aa4e <uxr_run_session_until_all_status+0x1e>
 800aa44:	462a      	mov	r2, r5
 800aa46:	21ff      	movs	r1, #255	; 0xff
 800aa48:	4620      	mov	r0, r4
 800aa4a:	f005 fe8b 	bl	8010764 <memset>
 800aa4e:	e9c6 a41d 	strd	sl, r4, [r6, #116]	; 0x74
 800aa52:	67f5      	str	r5, [r6, #124]	; 0x7c
 800aa54:	f000 fd12 	bl	800b47c <uxr_millis>
 800aa58:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
 800aa5c:	f1aa 0a02 	sub.w	sl, sl, #2
 800aa60:	4680      	mov	r8, r0
 800aa62:	4639      	mov	r1, r7
 800aa64:	4630      	mov	r0, r6
 800aa66:	f7ff fe7f 	bl	800a768 <listen_message_reliably>
 800aa6a:	f000 fd07 	bl	800b47c <uxr_millis>
 800aa6e:	eba0 0008 	sub.w	r0, r0, r8
 800aa72:	1a39      	subs	r1, r7, r0
 800aa74:	b33d      	cbz	r5, 800aac6 <uxr_run_session_until_all_status+0x96>
 800aa76:	46cc      	mov	ip, r9
 800aa78:	464a      	mov	r2, r9
 800aa7a:	2301      	movs	r3, #1
 800aa7c:	e002      	b.n	800aa84 <uxr_run_session_until_all_status+0x54>
 800aa7e:	42ab      	cmp	r3, r5
 800aa80:	d20c      	bcs.n	800aa9c <uxr_run_session_until_all_status+0x6c>
 800aa82:	3301      	adds	r3, #1
 800aa84:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 800aa88:	2cff      	cmp	r4, #255	; 0xff
 800aa8a:	d1f8      	bne.n	800aa7e <uxr_run_session_until_all_status+0x4e>
 800aa8c:	42ab      	cmp	r3, r5
 800aa8e:	f83a 0013 	ldrh.w	r0, [sl, r3, lsl #1]
 800aa92:	d213      	bcs.n	800aabc <uxr_run_session_until_all_status+0x8c>
 800aa94:	2800      	cmp	r0, #0
 800aa96:	d0f4      	beq.n	800aa82 <uxr_run_session_until_all_status+0x52>
 800aa98:	2900      	cmp	r1, #0
 800aa9a:	dce3      	bgt.n	800aa64 <uxr_run_session_until_all_status+0x34>
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	444d      	add	r5, r9
 800aaa0:	67f3      	str	r3, [r6, #124]	; 0x7c
 800aaa2:	e001      	b.n	800aaa8 <uxr_run_session_until_all_status+0x78>
 800aaa4:	2b01      	cmp	r3, #1
 800aaa6:	d812      	bhi.n	800aace <uxr_run_session_until_all_status+0x9e>
 800aaa8:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 800aaac:	4565      	cmp	r5, ip
 800aaae:	d1f9      	bne.n	800aaa4 <uxr_run_session_until_all_status+0x74>
 800aab0:	2b01      	cmp	r3, #1
 800aab2:	bf8c      	ite	hi
 800aab4:	2000      	movhi	r0, #0
 800aab6:	2001      	movls	r0, #1
 800aab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aabc:	2900      	cmp	r1, #0
 800aabe:	dded      	ble.n	800aa9c <uxr_run_session_until_all_status+0x6c>
 800aac0:	2800      	cmp	r0, #0
 800aac2:	d1cf      	bne.n	800aa64 <uxr_run_session_until_all_status+0x34>
 800aac4:	e7ea      	b.n	800aa9c <uxr_run_session_until_all_status+0x6c>
 800aac6:	67f5      	str	r5, [r6, #124]	; 0x7c
 800aac8:	2001      	movs	r0, #1
 800aaca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aace:	2000      	movs	r0, #0
 800aad0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800aad4 <uxr_create_session>:
 800aad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aad8:	ed2d 8b02 	vpush	{d8}
 800aadc:	f100 0808 	add.w	r8, r0, #8
 800aae0:	b0a9      	sub	sp, #164	; 0xa4
 800aae2:	4604      	mov	r4, r0
 800aae4:	4640      	mov	r0, r8
 800aae6:	f000 fba9 	bl	800b23c <uxr_reset_stream_storage>
 800aaea:	4620      	mov	r0, r4
 800aaec:	f000 fb0e 	bl	800b10c <uxr_session_header_offset>
 800aaf0:	a909      	add	r1, sp, #36	; 0x24
 800aaf2:	9000      	str	r0, [sp, #0]
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	a810      	add	r0, sp, #64	; 0x40
 800aaf8:	221c      	movs	r2, #28
 800aafa:	f7ff f8cb 	bl	8009c94 <ucdr_init_buffer_origin_offset>
 800aafe:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800ab00:	8a1a      	ldrh	r2, [r3, #16]
 800ab02:	3a04      	subs	r2, #4
 800ab04:	b292      	uxth	r2, r2
 800ab06:	4620      	mov	r0, r4
 800ab08:	a910      	add	r1, sp, #64	; 0x40
 800ab0a:	f000 fa23 	bl	800af54 <uxr_buffer_create_session>
 800ab0e:	9910      	ldr	r1, [sp, #64]	; 0x40
 800ab10:	4620      	mov	r0, r4
 800ab12:	f000 fa8f 	bl	800b034 <uxr_stamp_create_session_header>
 800ab16:	a810      	add	r0, sp, #64	; 0x40
 800ab18:	f7ff f8fa 	bl	8009d10 <ucdr_buffer_length>
 800ab1c:	23ff      	movs	r3, #255	; 0xff
 800ab1e:	ee08 0a10 	vmov	s16, r0
 800ab22:	7163      	strb	r3, [r4, #5]
 800ab24:	f04f 090a 	mov.w	r9, #10
 800ab28:	46c2      	mov	sl, r8
 800ab2a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800ab2c:	ee18 2a10 	vmov	r2, s16
 800ab30:	e9d3 0500 	ldrd	r0, r5, [r3]
 800ab34:	a909      	add	r1, sp, #36	; 0x24
 800ab36:	47a8      	blx	r5
 800ab38:	f000 fca0 	bl	800b47c <uxr_millis>
 800ab3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ab40:	9002      	str	r0, [sp, #8]
 800ab42:	e00c      	b.n	800ab5e <uxr_create_session+0x8a>
 800ab44:	f000 fc9a 	bl	800b47c <uxr_millis>
 800ab48:	9b02      	ldr	r3, [sp, #8]
 800ab4a:	7962      	ldrb	r2, [r4, #5]
 800ab4c:	1ac0      	subs	r0, r0, r3
 800ab4e:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	f340 8094 	ble.w	800ac80 <uxr_create_session+0x1ac>
 800ab58:	2aff      	cmp	r2, #255	; 0xff
 800ab5a:	f040 8097 	bne.w	800ac8c <uxr_create_session+0x1b8>
 800ab5e:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800ab60:	a905      	add	r1, sp, #20
 800ab62:	6895      	ldr	r5, [r2, #8]
 800ab64:	6810      	ldr	r0, [r2, #0]
 800ab66:	aa06      	add	r2, sp, #24
 800ab68:	47a8      	blx	r5
 800ab6a:	2800      	cmp	r0, #0
 800ab6c:	d0ea      	beq.n	800ab44 <uxr_create_session+0x70>
 800ab6e:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 800ab72:	a818      	add	r0, sp, #96	; 0x60
 800ab74:	f7ff f8a0 	bl	8009cb8 <ucdr_init_buffer>
 800ab78:	2500      	movs	r5, #0
 800ab7a:	f10d 0312 	add.w	r3, sp, #18
 800ab7e:	aa04      	add	r2, sp, #16
 800ab80:	a918      	add	r1, sp, #96	; 0x60
 800ab82:	4620      	mov	r0, r4
 800ab84:	f88d 5010 	strb.w	r5, [sp, #16]
 800ab88:	f000 fa7e 	bl	800b088 <uxr_read_session_header>
 800ab8c:	2800      	cmp	r0, #0
 800ab8e:	d0d9      	beq.n	800ab44 <uxr_create_session+0x70>
 800ab90:	4629      	mov	r1, r5
 800ab92:	f89d 0010 	ldrb.w	r0, [sp, #16]
 800ab96:	f000 fb1b 	bl	800b1d0 <uxr_stream_id_from_raw>
 800ab9a:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800ab9e:	2f01      	cmp	r7, #1
 800aba0:	e9cd 0007 	strd	r0, r0, [sp, #28]
 800aba4:	f8bd b012 	ldrh.w	fp, [sp, #18]
 800aba8:	fa5f f880 	uxtb.w	r8, r0
 800abac:	f3c0 2507 	ubfx	r5, r0, #8, #8
 800abb0:	d04d      	beq.n	800ac4e <uxr_create_session+0x17a>
 800abb2:	2f02      	cmp	r7, #2
 800abb4:	d00c      	beq.n	800abd0 <uxr_create_session+0xfc>
 800abb6:	2f00      	cmp	r7, #0
 800abb8:	d1c4      	bne.n	800ab44 <uxr_create_session+0x70>
 800abba:	4639      	mov	r1, r7
 800abbc:	4638      	mov	r0, r7
 800abbe:	f000 fb07 	bl	800b1d0 <uxr_stream_id_from_raw>
 800abc2:	a918      	add	r1, sp, #96	; 0x60
 800abc4:	4602      	mov	r2, r0
 800abc6:	4620      	mov	r0, r4
 800abc8:	9208      	str	r2, [sp, #32]
 800abca:	f7ff fc45 	bl	800a458 <read_submessage_list>
 800abce:	e7b9      	b.n	800ab44 <uxr_create_session+0x70>
 800abd0:	4629      	mov	r1, r5
 800abd2:	4650      	mov	r0, sl
 800abd4:	f000 fbea 	bl	800b3ac <uxr_get_input_reliable_stream>
 800abd8:	4606      	mov	r6, r0
 800abda:	b390      	cbz	r0, 800ac42 <uxr_create_session+0x16e>
 800abdc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800abde:	9203      	str	r2, [sp, #12]
 800abe0:	a818      	add	r0, sp, #96	; 0x60
 800abe2:	f7ff f899 	bl	8009d18 <ucdr_buffer_remaining>
 800abe6:	4603      	mov	r3, r0
 800abe8:	f10d 0011 	add.w	r0, sp, #17
 800abec:	9000      	str	r0, [sp, #0]
 800abee:	9a03      	ldr	r2, [sp, #12]
 800abf0:	4659      	mov	r1, fp
 800abf2:	4630      	mov	r0, r6
 800abf4:	f004 f8d4 	bl	800eda0 <uxr_receive_reliable_message>
 800abf8:	b318      	cbz	r0, 800ac42 <uxr_create_session+0x16e>
 800abfa:	f89d 3011 	ldrb.w	r3, [sp, #17]
 800abfe:	b9b3      	cbnz	r3, 800ac2e <uxr_create_session+0x15a>
 800ac00:	f88d 8020 	strb.w	r8, [sp, #32]
 800ac04:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 800ac08:	f88d 7022 	strb.w	r7, [sp, #34]	; 0x22
 800ac0c:	9a08      	ldr	r2, [sp, #32]
 800ac0e:	a918      	add	r1, sp, #96	; 0x60
 800ac10:	4620      	mov	r0, r4
 800ac12:	f7ff fc21 	bl	800a458 <read_submessage_list>
 800ac16:	e00a      	b.n	800ac2e <uxr_create_session+0x15a>
 800ac18:	f04f 0302 	mov.w	r3, #2
 800ac1c:	f88d 8020 	strb.w	r8, [sp, #32]
 800ac20:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 800ac24:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
 800ac28:	9a08      	ldr	r2, [sp, #32]
 800ac2a:	f7ff fc15 	bl	800a458 <read_submessage_list>
 800ac2e:	a920      	add	r1, sp, #128	; 0x80
 800ac30:	2204      	movs	r2, #4
 800ac32:	4630      	mov	r0, r6
 800ac34:	f004 f934 	bl	800eea0 <uxr_next_input_reliable_buffer_available>
 800ac38:	4603      	mov	r3, r0
 800ac3a:	a920      	add	r1, sp, #128	; 0x80
 800ac3c:	4620      	mov	r0, r4
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d1ea      	bne.n	800ac18 <uxr_create_session+0x144>
 800ac42:	462a      	mov	r2, r5
 800ac44:	4641      	mov	r1, r8
 800ac46:	4620      	mov	r0, r4
 800ac48:	f7ff fa84 	bl	800a154 <write_submessage_acknack.isra.0>
 800ac4c:	e77a      	b.n	800ab44 <uxr_create_session+0x70>
 800ac4e:	4629      	mov	r1, r5
 800ac50:	4650      	mov	r0, sl
 800ac52:	f000 fba1 	bl	800b398 <uxr_get_input_best_effort_stream>
 800ac56:	2800      	cmp	r0, #0
 800ac58:	f43f af74 	beq.w	800ab44 <uxr_create_session+0x70>
 800ac5c:	4659      	mov	r1, fp
 800ac5e:	f004 f81b 	bl	800ec98 <uxr_receive_best_effort_message>
 800ac62:	2800      	cmp	r0, #0
 800ac64:	f43f af6e 	beq.w	800ab44 <uxr_create_session+0x70>
 800ac68:	f88d 8020 	strb.w	r8, [sp, #32]
 800ac6c:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 800ac70:	f88d 7022 	strb.w	r7, [sp, #34]	; 0x22
 800ac74:	9a08      	ldr	r2, [sp, #32]
 800ac76:	a918      	add	r1, sp, #96	; 0x60
 800ac78:	4620      	mov	r0, r4
 800ac7a:	f7ff fbed 	bl	800a458 <read_submessage_list>
 800ac7e:	e761      	b.n	800ab44 <uxr_create_session+0x70>
 800ac80:	f1b9 0901 	subs.w	r9, r9, #1
 800ac84:	d002      	beq.n	800ac8c <uxr_create_session+0x1b8>
 800ac86:	2aff      	cmp	r2, #255	; 0xff
 800ac88:	f43f af4f 	beq.w	800ab2a <uxr_create_session+0x56>
 800ac8c:	b12a      	cbz	r2, 800ac9a <uxr_create_session+0x1c6>
 800ac8e:	2000      	movs	r0, #0
 800ac90:	b029      	add	sp, #164	; 0xa4
 800ac92:	ecbd 8b02 	vpop	{d8}
 800ac96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac9a:	4650      	mov	r0, sl
 800ac9c:	f000 face 	bl	800b23c <uxr_reset_stream_storage>
 800aca0:	2001      	movs	r0, #1
 800aca2:	b029      	add	sp, #164	; 0xa4
 800aca4:	ecbd 8b02 	vpop	{d8}
 800aca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800acac <wait_session_status>:
 800acac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acb0:	4604      	mov	r4, r0
 800acb2:	b09d      	sub	sp, #116	; 0x74
 800acb4:	20ff      	movs	r0, #255	; 0xff
 800acb6:	7160      	strb	r0, [r4, #5]
 800acb8:	9304      	str	r3, [sp, #16]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	f000 80b8 	beq.w	800ae30 <wait_session_status+0x184>
 800acc0:	2300      	movs	r3, #0
 800acc2:	468b      	mov	fp, r1
 800acc4:	4692      	mov	sl, r2
 800acc6:	9303      	str	r3, [sp, #12]
 800acc8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800acca:	4652      	mov	r2, sl
 800accc:	e9d3 0500 	ldrd	r0, r5, [r3]
 800acd0:	4659      	mov	r1, fp
 800acd2:	47a8      	blx	r5
 800acd4:	f000 fbd2 	bl	800b47c <uxr_millis>
 800acd8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800acdc:	4605      	mov	r5, r0
 800acde:	e009      	b.n	800acf4 <wait_session_status+0x48>
 800ace0:	f000 fbcc 	bl	800b47c <uxr_millis>
 800ace4:	1b40      	subs	r0, r0, r5
 800ace6:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 800acea:	2b00      	cmp	r3, #0
 800acec:	dd42      	ble.n	800ad74 <wait_session_status+0xc8>
 800acee:	7960      	ldrb	r0, [r4, #5]
 800acf0:	28ff      	cmp	r0, #255	; 0xff
 800acf2:	d148      	bne.n	800ad86 <wait_session_status+0xda>
 800acf4:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800acf6:	a908      	add	r1, sp, #32
 800acf8:	6896      	ldr	r6, [r2, #8]
 800acfa:	6810      	ldr	r0, [r2, #0]
 800acfc:	aa09      	add	r2, sp, #36	; 0x24
 800acfe:	47b0      	blx	r6
 800ad00:	2800      	cmp	r0, #0
 800ad02:	d0ed      	beq.n	800ace0 <wait_session_status+0x34>
 800ad04:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800ad08:	a80c      	add	r0, sp, #48	; 0x30
 800ad0a:	f7fe ffd5 	bl	8009cb8 <ucdr_init_buffer>
 800ad0e:	2600      	movs	r6, #0
 800ad10:	f10d 031e 	add.w	r3, sp, #30
 800ad14:	aa07      	add	r2, sp, #28
 800ad16:	a90c      	add	r1, sp, #48	; 0x30
 800ad18:	4620      	mov	r0, r4
 800ad1a:	f88d 601c 	strb.w	r6, [sp, #28]
 800ad1e:	f000 f9b3 	bl	800b088 <uxr_read_session_header>
 800ad22:	2800      	cmp	r0, #0
 800ad24:	d0dc      	beq.n	800ace0 <wait_session_status+0x34>
 800ad26:	4631      	mov	r1, r6
 800ad28:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800ad2c:	f000 fa50 	bl	800b1d0 <uxr_stream_id_from_raw>
 800ad30:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800ad34:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800ad38:	9302      	str	r3, [sp, #8]
 800ad3a:	2f01      	cmp	r7, #1
 800ad3c:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 800ad40:	fa5f f880 	uxtb.w	r8, r0
 800ad44:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800ad48:	d058      	beq.n	800adfc <wait_session_status+0x150>
 800ad4a:	2f02      	cmp	r7, #2
 800ad4c:	d021      	beq.n	800ad92 <wait_session_status+0xe6>
 800ad4e:	2f00      	cmp	r7, #0
 800ad50:	d1c6      	bne.n	800ace0 <wait_session_status+0x34>
 800ad52:	4639      	mov	r1, r7
 800ad54:	4638      	mov	r0, r7
 800ad56:	f000 fa3b 	bl	800b1d0 <uxr_stream_id_from_raw>
 800ad5a:	a90c      	add	r1, sp, #48	; 0x30
 800ad5c:	4602      	mov	r2, r0
 800ad5e:	4620      	mov	r0, r4
 800ad60:	920b      	str	r2, [sp, #44]	; 0x2c
 800ad62:	f7ff fb79 	bl	800a458 <read_submessage_list>
 800ad66:	f000 fb89 	bl	800b47c <uxr_millis>
 800ad6a:	1b40      	subs	r0, r0, r5
 800ad6c:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	dcbc      	bgt.n	800acee <wait_session_status+0x42>
 800ad74:	9b03      	ldr	r3, [sp, #12]
 800ad76:	9a04      	ldr	r2, [sp, #16]
 800ad78:	7960      	ldrb	r0, [r4, #5]
 800ad7a:	3301      	adds	r3, #1
 800ad7c:	429a      	cmp	r2, r3
 800ad7e:	9303      	str	r3, [sp, #12]
 800ad80:	d001      	beq.n	800ad86 <wait_session_status+0xda>
 800ad82:	28ff      	cmp	r0, #255	; 0xff
 800ad84:	d0a0      	beq.n	800acc8 <wait_session_status+0x1c>
 800ad86:	38ff      	subs	r0, #255	; 0xff
 800ad88:	bf18      	it	ne
 800ad8a:	2001      	movne	r0, #1
 800ad8c:	b01d      	add	sp, #116	; 0x74
 800ad8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad92:	4631      	mov	r1, r6
 800ad94:	f104 0008 	add.w	r0, r4, #8
 800ad98:	f000 fb08 	bl	800b3ac <uxr_get_input_reliable_stream>
 800ad9c:	4681      	mov	r9, r0
 800ad9e:	b338      	cbz	r0, 800adf0 <wait_session_status+0x144>
 800ada0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ada2:	9205      	str	r2, [sp, #20]
 800ada4:	a80c      	add	r0, sp, #48	; 0x30
 800ada6:	f7fe ffb7 	bl	8009d18 <ucdr_buffer_remaining>
 800adaa:	4603      	mov	r3, r0
 800adac:	f10d 001d 	add.w	r0, sp, #29
 800adb0:	9000      	str	r0, [sp, #0]
 800adb2:	9a05      	ldr	r2, [sp, #20]
 800adb4:	9902      	ldr	r1, [sp, #8]
 800adb6:	4648      	mov	r0, r9
 800adb8:	f003 fff2 	bl	800eda0 <uxr_receive_reliable_message>
 800adbc:	b1c0      	cbz	r0, 800adf0 <wait_session_status+0x144>
 800adbe:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800adc2:	b95b      	cbnz	r3, 800addc <wait_session_status+0x130>
 800adc4:	e03c      	b.n	800ae40 <wait_session_status+0x194>
 800adc6:	f04f 0302 	mov.w	r3, #2
 800adca:	f88d 802c 	strb.w	r8, [sp, #44]	; 0x2c
 800adce:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 800add2:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 800add6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800add8:	f7ff fb3e 	bl	800a458 <read_submessage_list>
 800addc:	a914      	add	r1, sp, #80	; 0x50
 800adde:	2204      	movs	r2, #4
 800ade0:	4648      	mov	r0, r9
 800ade2:	f004 f85d 	bl	800eea0 <uxr_next_input_reliable_buffer_available>
 800ade6:	4603      	mov	r3, r0
 800ade8:	a914      	add	r1, sp, #80	; 0x50
 800adea:	4620      	mov	r0, r4
 800adec:	2b00      	cmp	r3, #0
 800adee:	d1ea      	bne.n	800adc6 <wait_session_status+0x11a>
 800adf0:	4632      	mov	r2, r6
 800adf2:	4641      	mov	r1, r8
 800adf4:	4620      	mov	r0, r4
 800adf6:	f7ff f9ad 	bl	800a154 <write_submessage_acknack.isra.0>
 800adfa:	e771      	b.n	800ace0 <wait_session_status+0x34>
 800adfc:	4631      	mov	r1, r6
 800adfe:	f104 0008 	add.w	r0, r4, #8
 800ae02:	f000 fac9 	bl	800b398 <uxr_get_input_best_effort_stream>
 800ae06:	2800      	cmp	r0, #0
 800ae08:	f43f af6a 	beq.w	800ace0 <wait_session_status+0x34>
 800ae0c:	9902      	ldr	r1, [sp, #8]
 800ae0e:	f003 ff43 	bl	800ec98 <uxr_receive_best_effort_message>
 800ae12:	2800      	cmp	r0, #0
 800ae14:	f43f af64 	beq.w	800ace0 <wait_session_status+0x34>
 800ae18:	f88d 802c 	strb.w	r8, [sp, #44]	; 0x2c
 800ae1c:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 800ae20:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 800ae24:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ae26:	a90c      	add	r1, sp, #48	; 0x30
 800ae28:	4620      	mov	r0, r4
 800ae2a:	f7ff fb15 	bl	800a458 <read_submessage_list>
 800ae2e:	e757      	b.n	800ace0 <wait_session_status+0x34>
 800ae30:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800ae32:	e9d3 0400 	ldrd	r0, r4, [r3]
 800ae36:	47a0      	blx	r4
 800ae38:	2001      	movs	r0, #1
 800ae3a:	b01d      	add	sp, #116	; 0x74
 800ae3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae40:	f88d 802c 	strb.w	r8, [sp, #44]	; 0x2c
 800ae44:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 800ae48:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 800ae4c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ae4e:	a90c      	add	r1, sp, #48	; 0x30
 800ae50:	4620      	mov	r0, r4
 800ae52:	f7ff fb01 	bl	800a458 <read_submessage_list>
 800ae56:	e7c1      	b.n	800addc <wait_session_status+0x130>

0800ae58 <uxr_delete_session_retries>:
 800ae58:	b530      	push	{r4, r5, lr}
 800ae5a:	b08f      	sub	sp, #60	; 0x3c
 800ae5c:	4604      	mov	r4, r0
 800ae5e:	460d      	mov	r5, r1
 800ae60:	f000 f954 	bl	800b10c <uxr_session_header_offset>
 800ae64:	2300      	movs	r3, #0
 800ae66:	2210      	movs	r2, #16
 800ae68:	9000      	str	r0, [sp, #0]
 800ae6a:	a902      	add	r1, sp, #8
 800ae6c:	a806      	add	r0, sp, #24
 800ae6e:	f7fe ff11 	bl	8009c94 <ucdr_init_buffer_origin_offset>
 800ae72:	a906      	add	r1, sp, #24
 800ae74:	4620      	mov	r0, r4
 800ae76:	f000 f897 	bl	800afa8 <uxr_buffer_delete_session>
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	4611      	mov	r1, r2
 800ae7e:	9b06      	ldr	r3, [sp, #24]
 800ae80:	4620      	mov	r0, r4
 800ae82:	f000 f8eb 	bl	800b05c <uxr_stamp_session_header>
 800ae86:	a806      	add	r0, sp, #24
 800ae88:	f7fe ff42 	bl	8009d10 <ucdr_buffer_length>
 800ae8c:	462b      	mov	r3, r5
 800ae8e:	4602      	mov	r2, r0
 800ae90:	a902      	add	r1, sp, #8
 800ae92:	4620      	mov	r0, r4
 800ae94:	f7ff ff0a 	bl	800acac <wait_session_status>
 800ae98:	b118      	cbz	r0, 800aea2 <uxr_delete_session_retries+0x4a>
 800ae9a:	7960      	ldrb	r0, [r4, #5]
 800ae9c:	fab0 f080 	clz	r0, r0
 800aea0:	0940      	lsrs	r0, r0, #5
 800aea2:	b00f      	add	sp, #60	; 0x3c
 800aea4:	bd30      	pop	{r4, r5, pc}
 800aea6:	bf00      	nop

0800aea8 <uxr_prepare_stream_to_write_submessage>:
 800aea8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aeac:	b082      	sub	sp, #8
 800aeae:	4682      	mov	sl, r0
 800aeb0:	4610      	mov	r0, r2
 800aeb2:	4615      	mov	r5, r2
 800aeb4:	461e      	mov	r6, r3
 800aeb6:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 800aeba:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 800aebe:	9101      	str	r1, [sp, #4]
 800aec0:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800aec4:	f000 fad4 	bl	800b470 <uxr_submessage_padding>
 800aec8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800aecc:	f105 0904 	add.w	r9, r5, #4
 800aed0:	2b01      	cmp	r3, #1
 800aed2:	4481      	add	r9, r0
 800aed4:	d01d      	beq.n	800af12 <uxr_prepare_stream_to_write_submessage+0x6a>
 800aed6:	2b02      	cmp	r3, #2
 800aed8:	d116      	bne.n	800af08 <uxr_prepare_stream_to_write_submessage+0x60>
 800aeda:	4621      	mov	r1, r4
 800aedc:	f10a 0008 	add.w	r0, sl, #8
 800aee0:	f000 fa4e 	bl	800b380 <uxr_get_output_reliable_stream>
 800aee4:	4604      	mov	r4, r0
 800aee6:	b158      	cbz	r0, 800af00 <uxr_prepare_stream_to_write_submessage+0x58>
 800aee8:	4649      	mov	r1, r9
 800aeea:	4632      	mov	r2, r6
 800aeec:	f004 f98e 	bl	800f20c <uxr_prepare_reliable_buffer_to_write>
 800aef0:	4604      	mov	r4, r0
 800aef2:	b12c      	cbz	r4, 800af00 <uxr_prepare_stream_to_write_submessage+0x58>
 800aef4:	4643      	mov	r3, r8
 800aef6:	b2aa      	uxth	r2, r5
 800aef8:	4639      	mov	r1, r7
 800aefa:	4630      	mov	r0, r6
 800aefc:	f000 fa78 	bl	800b3f0 <uxr_buffer_submessage_header>
 800af00:	4620      	mov	r0, r4
 800af02:	b002      	add	sp, #8
 800af04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af08:	2400      	movs	r4, #0
 800af0a:	4620      	mov	r0, r4
 800af0c:	b002      	add	sp, #8
 800af0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af12:	4621      	mov	r1, r4
 800af14:	f10a 0008 	add.w	r0, sl, #8
 800af18:	f000 fa2a 	bl	800b370 <uxr_get_output_best_effort_stream>
 800af1c:	4604      	mov	r4, r0
 800af1e:	2800      	cmp	r0, #0
 800af20:	d0ee      	beq.n	800af00 <uxr_prepare_stream_to_write_submessage+0x58>
 800af22:	4649      	mov	r1, r9
 800af24:	4632      	mov	r2, r6
 800af26:	f004 f8ad 	bl	800f084 <uxr_prepare_best_effort_buffer_to_write>
 800af2a:	4604      	mov	r4, r0
 800af2c:	e7e1      	b.n	800aef2 <uxr_prepare_stream_to_write_submessage+0x4a>
 800af2e:	bf00      	nop

0800af30 <uxr_init_session_info>:
 800af30:	b470      	push	{r4, r5, r6}
 800af32:	7102      	strb	r2, [r0, #4]
 800af34:	0e16      	lsrs	r6, r2, #24
 800af36:	f3c2 4507 	ubfx	r5, r2, #16, #8
 800af3a:	f3c2 2407 	ubfx	r4, r2, #8, #8
 800af3e:	23ff      	movs	r3, #255	; 0xff
 800af40:	2209      	movs	r2, #9
 800af42:	7046      	strb	r6, [r0, #1]
 800af44:	7085      	strb	r5, [r0, #2]
 800af46:	70c4      	strb	r4, [r0, #3]
 800af48:	7001      	strb	r1, [r0, #0]
 800af4a:	bc70      	pop	{r4, r5, r6}
 800af4c:	80c2      	strh	r2, [r0, #6]
 800af4e:	7143      	strb	r3, [r0, #5]
 800af50:	4770      	bx	lr
 800af52:	bf00      	nop

0800af54 <uxr_buffer_create_session>:
 800af54:	b570      	push	{r4, r5, r6, lr}
 800af56:	b088      	sub	sp, #32
 800af58:	2300      	movs	r3, #0
 800af5a:	4d12      	ldr	r5, [pc, #72]	; (800afa4 <uxr_buffer_create_session+0x50>)
 800af5c:	9307      	str	r3, [sp, #28]
 800af5e:	f8ad 201c 	strh.w	r2, [sp, #28]
 800af62:	7802      	ldrb	r2, [r0, #0]
 800af64:	9303      	str	r3, [sp, #12]
 800af66:	460c      	mov	r4, r1
 800af68:	f88d 200c 	strb.w	r2, [sp, #12]
 800af6c:	2101      	movs	r1, #1
 800af6e:	682a      	ldr	r2, [r5, #0]
 800af70:	f8d0 6001 	ldr.w	r6, [r0, #1]
 800af74:	88ad      	ldrh	r5, [r5, #4]
 800af76:	80c1      	strh	r1, [r0, #6]
 800af78:	f8ad 1004 	strh.w	r1, [sp, #4]
 800af7c:	9200      	str	r2, [sp, #0]
 800af7e:	4619      	mov	r1, r3
 800af80:	2210      	movs	r2, #16
 800af82:	4620      	mov	r0, r4
 800af84:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800af88:	9306      	str	r3, [sp, #24]
 800af8a:	f88d 300d 	strb.w	r3, [sp, #13]
 800af8e:	9602      	str	r6, [sp, #8]
 800af90:	f8ad 5006 	strh.w	r5, [sp, #6]
 800af94:	f000 fa2c 	bl	800b3f0 <uxr_buffer_submessage_header>
 800af98:	4620      	mov	r0, r4
 800af9a:	4669      	mov	r1, sp
 800af9c:	f001 f964 	bl	800c268 <uxr_serialize_CREATE_CLIENT_Payload>
 800afa0:	b008      	add	sp, #32
 800afa2:	bd70      	pop	{r4, r5, r6, pc}
 800afa4:	08011f04 	.word	0x08011f04

0800afa8 <uxr_buffer_delete_session>:
 800afa8:	b530      	push	{r4, r5, lr}
 800afaa:	4b0c      	ldr	r3, [pc, #48]	; (800afdc <uxr_buffer_delete_session+0x34>)
 800afac:	b083      	sub	sp, #12
 800afae:	891b      	ldrh	r3, [r3, #8]
 800afb0:	f8ad 3006 	strh.w	r3, [sp, #6]
 800afb4:	2202      	movs	r2, #2
 800afb6:	460c      	mov	r4, r1
 800afb8:	80c2      	strh	r2, [r0, #6]
 800afba:	2300      	movs	r3, #0
 800afbc:	2204      	movs	r2, #4
 800afbe:	4608      	mov	r0, r1
 800afc0:	f44f 7500 	mov.w	r5, #512	; 0x200
 800afc4:	2103      	movs	r1, #3
 800afc6:	f8ad 5004 	strh.w	r5, [sp, #4]
 800afca:	f000 fa11 	bl	800b3f0 <uxr_buffer_submessage_header>
 800afce:	4620      	mov	r0, r4
 800afd0:	a901      	add	r1, sp, #4
 800afd2:	f001 f9f7 	bl	800c3c4 <uxr_serialize_DELETE_Payload>
 800afd6:	b003      	add	sp, #12
 800afd8:	bd30      	pop	{r4, r5, pc}
 800afda:	bf00      	nop
 800afdc:	08011f04 	.word	0x08011f04

0800afe0 <uxr_read_create_session_status>:
 800afe0:	b510      	push	{r4, lr}
 800afe2:	b088      	sub	sp, #32
 800afe4:	4604      	mov	r4, r0
 800afe6:	4608      	mov	r0, r1
 800afe8:	a901      	add	r1, sp, #4
 800afea:	f001 f9fb 	bl	800c3e4 <uxr_deserialize_STATUS_AGENT_Payload>
 800afee:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800aff2:	7163      	strb	r3, [r4, #5]
 800aff4:	b008      	add	sp, #32
 800aff6:	bd10      	pop	{r4, pc}

0800aff8 <uxr_read_delete_session_status>:
 800aff8:	b510      	push	{r4, lr}
 800affa:	4604      	mov	r4, r0
 800affc:	b084      	sub	sp, #16
 800affe:	4608      	mov	r0, r1
 800b000:	a902      	add	r1, sp, #8
 800b002:	f001 fa1f 	bl	800c444 <uxr_deserialize_STATUS_Payload>
 800b006:	88e3      	ldrh	r3, [r4, #6]
 800b008:	2b02      	cmp	r3, #2
 800b00a:	d001      	beq.n	800b010 <uxr_read_delete_session_status+0x18>
 800b00c:	b004      	add	sp, #16
 800b00e:	bd10      	pop	{r4, pc}
 800b010:	f10d 000a 	add.w	r0, sp, #10
 800b014:	f7ff f826 	bl	800a064 <uxr_object_id_from_raw>
 800b018:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800b01c:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800b020:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800b024:	b29b      	uxth	r3, r3
 800b026:	2b02      	cmp	r3, #2
 800b028:	bf04      	itt	eq
 800b02a:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 800b02e:	7163      	strbeq	r3, [r4, #5]
 800b030:	b004      	add	sp, #16
 800b032:	bd10      	pop	{r4, pc}

0800b034 <uxr_stamp_create_session_header>:
 800b034:	b510      	push	{r4, lr}
 800b036:	4604      	mov	r4, r0
 800b038:	b08a      	sub	sp, #40	; 0x28
 800b03a:	a802      	add	r0, sp, #8
 800b03c:	2208      	movs	r2, #8
 800b03e:	f7fe fe3b 	bl	8009cb8 <ucdr_init_buffer>
 800b042:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b046:	9400      	str	r4, [sp, #0]
 800b048:	2300      	movs	r3, #0
 800b04a:	a802      	add	r0, sp, #8
 800b04c:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800b050:	461a      	mov	r2, r3
 800b052:	f000 fbcb 	bl	800b7ec <uxr_serialize_message_header>
 800b056:	b00a      	add	sp, #40	; 0x28
 800b058:	bd10      	pop	{r4, pc}
 800b05a:	bf00      	nop

0800b05c <uxr_stamp_session_header>:
 800b05c:	b570      	push	{r4, r5, r6, lr}
 800b05e:	4604      	mov	r4, r0
 800b060:	b08c      	sub	sp, #48	; 0x30
 800b062:	460d      	mov	r5, r1
 800b064:	4616      	mov	r6, r2
 800b066:	4619      	mov	r1, r3
 800b068:	a804      	add	r0, sp, #16
 800b06a:	2208      	movs	r2, #8
 800b06c:	9603      	str	r6, [sp, #12]
 800b06e:	f7fe fe23 	bl	8009cb8 <ucdr_init_buffer>
 800b072:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b076:	9b03      	ldr	r3, [sp, #12]
 800b078:	9400      	str	r4, [sp, #0]
 800b07a:	462a      	mov	r2, r5
 800b07c:	a804      	add	r0, sp, #16
 800b07e:	f000 fbb5 	bl	800b7ec <uxr_serialize_message_header>
 800b082:	b00c      	add	sp, #48	; 0x30
 800b084:	bd70      	pop	{r4, r5, r6, pc}
 800b086:	bf00      	nop

0800b088 <uxr_read_session_header>:
 800b088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b08c:	4607      	mov	r7, r0
 800b08e:	b084      	sub	sp, #16
 800b090:	4608      	mov	r0, r1
 800b092:	460c      	mov	r4, r1
 800b094:	4615      	mov	r5, r2
 800b096:	461e      	mov	r6, r3
 800b098:	f7fe fe3e 	bl	8009d18 <ucdr_buffer_remaining>
 800b09c:	2808      	cmp	r0, #8
 800b09e:	d803      	bhi.n	800b0a8 <uxr_read_session_header+0x20>
 800b0a0:	2000      	movs	r0, #0
 800b0a2:	b004      	add	sp, #16
 800b0a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0a8:	f10d 080c 	add.w	r8, sp, #12
 800b0ac:	4633      	mov	r3, r6
 800b0ae:	462a      	mov	r2, r5
 800b0b0:	4620      	mov	r0, r4
 800b0b2:	f8cd 8000 	str.w	r8, [sp]
 800b0b6:	f10d 010b 	add.w	r1, sp, #11
 800b0ba:	f000 fbb5 	bl	800b828 <uxr_deserialize_message_header>
 800b0be:	783a      	ldrb	r2, [r7, #0]
 800b0c0:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800b0c4:	4293      	cmp	r3, r2
 800b0c6:	d1eb      	bne.n	800b0a0 <uxr_read_session_header+0x18>
 800b0c8:	061b      	lsls	r3, r3, #24
 800b0ca:	d41c      	bmi.n	800b106 <uxr_read_session_header+0x7e>
 800b0cc:	f898 2000 	ldrb.w	r2, [r8]
 800b0d0:	787b      	ldrb	r3, [r7, #1]
 800b0d2:	429a      	cmp	r2, r3
 800b0d4:	d003      	beq.n	800b0de <uxr_read_session_header+0x56>
 800b0d6:	2001      	movs	r0, #1
 800b0d8:	f080 0001 	eor.w	r0, r0, #1
 800b0dc:	e7e1      	b.n	800b0a2 <uxr_read_session_header+0x1a>
 800b0de:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800b0e2:	78bb      	ldrb	r3, [r7, #2]
 800b0e4:	429a      	cmp	r2, r3
 800b0e6:	f107 0102 	add.w	r1, r7, #2
 800b0ea:	d1f4      	bne.n	800b0d6 <uxr_read_session_header+0x4e>
 800b0ec:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800b0f0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b0f4:	429a      	cmp	r2, r3
 800b0f6:	d1ee      	bne.n	800b0d6 <uxr_read_session_header+0x4e>
 800b0f8:	784b      	ldrb	r3, [r1, #1]
 800b0fa:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800b0fe:	429a      	cmp	r2, r3
 800b100:	d1e9      	bne.n	800b0d6 <uxr_read_session_header+0x4e>
 800b102:	2000      	movs	r0, #0
 800b104:	e7e8      	b.n	800b0d8 <uxr_read_session_header+0x50>
 800b106:	2001      	movs	r0, #1
 800b108:	e7cb      	b.n	800b0a2 <uxr_read_session_header+0x1a>
 800b10a:	bf00      	nop

0800b10c <uxr_session_header_offset>:
 800b10c:	f990 3000 	ldrsb.w	r3, [r0]
 800b110:	2b00      	cmp	r3, #0
 800b112:	bfac      	ite	ge
 800b114:	2008      	movge	r0, #8
 800b116:	2004      	movlt	r0, #4
 800b118:	4770      	bx	lr
 800b11a:	bf00      	nop

0800b11c <uxr_init_base_object_request>:
 800b11c:	b530      	push	{r4, r5, lr}
 800b11e:	88c3      	ldrh	r3, [r0, #6]
 800b120:	b083      	sub	sp, #12
 800b122:	f64f 74f4 	movw	r4, #65524	; 0xfff4
 800b126:	9101      	str	r1, [sp, #4]
 800b128:	f1a3 010a 	sub.w	r1, r3, #10
 800b12c:	b289      	uxth	r1, r1
 800b12e:	42a1      	cmp	r1, r4
 800b130:	d80e      	bhi.n	800b150 <uxr_init_base_object_request+0x34>
 800b132:	3301      	adds	r3, #1
 800b134:	b29c      	uxth	r4, r3
 800b136:	f3c3 2507 	ubfx	r5, r3, #8, #8
 800b13a:	b2db      	uxtb	r3, r3
 800b13c:	80c4      	strh	r4, [r0, #6]
 800b13e:	1c91      	adds	r1, r2, #2
 800b140:	9801      	ldr	r0, [sp, #4]
 800b142:	7015      	strb	r5, [r2, #0]
 800b144:	7053      	strb	r3, [r2, #1]
 800b146:	f7fe ffa1 	bl	800a08c <uxr_object_id_to_raw>
 800b14a:	4620      	mov	r0, r4
 800b14c:	b003      	add	sp, #12
 800b14e:	bd30      	pop	{r4, r5, pc}
 800b150:	230a      	movs	r3, #10
 800b152:	461c      	mov	r4, r3
 800b154:	2500      	movs	r5, #0
 800b156:	e7f1      	b.n	800b13c <uxr_init_base_object_request+0x20>

0800b158 <uxr_parse_base_object_request>:
 800b158:	b570      	push	{r4, r5, r6, lr}
 800b15a:	4604      	mov	r4, r0
 800b15c:	3002      	adds	r0, #2
 800b15e:	460d      	mov	r5, r1
 800b160:	4616      	mov	r6, r2
 800b162:	f7fe ff7f 	bl	800a064 <uxr_object_id_from_raw>
 800b166:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800b16a:	8028      	strh	r0, [r5, #0]
 800b16c:	806b      	strh	r3, [r5, #2]
 800b16e:	7822      	ldrb	r2, [r4, #0]
 800b170:	7863      	ldrb	r3, [r4, #1]
 800b172:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800b176:	8033      	strh	r3, [r6, #0]
 800b178:	bd70      	pop	{r4, r5, r6, pc}
 800b17a:	bf00      	nop

0800b17c <uxr_stream_id>:
 800b17c:	b410      	push	{r4}
 800b17e:	2901      	cmp	r1, #1
 800b180:	b083      	sub	sp, #12
 800b182:	d01f      	beq.n	800b1c4 <uxr_stream_id+0x48>
 800b184:	2902      	cmp	r1, #2
 800b186:	f04f 0400 	mov.w	r4, #0
 800b18a:	d01e      	beq.n	800b1ca <uxr_stream_id+0x4e>
 800b18c:	2300      	movs	r3, #0
 800b18e:	f364 0307 	bfi	r3, r4, #0, #8
 800b192:	f360 230f 	bfi	r3, r0, #8, #8
 800b196:	f361 4317 	bfi	r3, r1, #16, #8
 800b19a:	f362 631f 	bfi	r3, r2, #24, #8
 800b19e:	b2da      	uxtb	r2, r3
 800b1a0:	2000      	movs	r0, #0
 800b1a2:	f362 0007 	bfi	r0, r2, #0, #8
 800b1a6:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800b1aa:	f362 200f 	bfi	r0, r2, #8, #8
 800b1ae:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800b1b2:	f362 4017 	bfi	r0, r2, #16, #8
 800b1b6:	0e1b      	lsrs	r3, r3, #24
 800b1b8:	f363 601f 	bfi	r0, r3, #24, #8
 800b1bc:	b003      	add	sp, #12
 800b1be:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b1c2:	4770      	bx	lr
 800b1c4:	1c44      	adds	r4, r0, #1
 800b1c6:	b2e4      	uxtb	r4, r4
 800b1c8:	e7e0      	b.n	800b18c <uxr_stream_id+0x10>
 800b1ca:	f080 0480 	eor.w	r4, r0, #128	; 0x80
 800b1ce:	e7dd      	b.n	800b18c <uxr_stream_id+0x10>

0800b1d0 <uxr_stream_id_from_raw>:
 800b1d0:	b410      	push	{r4}
 800b1d2:	b083      	sub	sp, #12
 800b1d4:	b128      	cbz	r0, 800b1e2 <uxr_stream_id_from_raw+0x12>
 800b1d6:	0603      	lsls	r3, r0, #24
 800b1d8:	d421      	bmi.n	800b21e <uxr_stream_id_from_raw+0x4e>
 800b1da:	1e42      	subs	r2, r0, #1
 800b1dc:	b2d2      	uxtb	r2, r2
 800b1de:	2401      	movs	r4, #1
 800b1e0:	e001      	b.n	800b1e6 <uxr_stream_id_from_raw+0x16>
 800b1e2:	4604      	mov	r4, r0
 800b1e4:	4602      	mov	r2, r0
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	f360 0307 	bfi	r3, r0, #0, #8
 800b1ec:	f362 230f 	bfi	r3, r2, #8, #8
 800b1f0:	f364 4317 	bfi	r3, r4, #16, #8
 800b1f4:	f361 631f 	bfi	r3, r1, #24, #8
 800b1f8:	b2da      	uxtb	r2, r3
 800b1fa:	2000      	movs	r0, #0
 800b1fc:	f362 0007 	bfi	r0, r2, #0, #8
 800b200:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800b204:	f362 200f 	bfi	r0, r2, #8, #8
 800b208:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800b20c:	f362 4017 	bfi	r0, r2, #16, #8
 800b210:	0e1b      	lsrs	r3, r3, #24
 800b212:	f363 601f 	bfi	r0, r3, #24, #8
 800b216:	b003      	add	sp, #12
 800b218:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b21c:	4770      	bx	lr
 800b21e:	f080 0280 	eor.w	r2, r0, #128	; 0x80
 800b222:	2402      	movs	r4, #2
 800b224:	e7df      	b.n	800b1e6 <uxr_stream_id_from_raw+0x16>
 800b226:	bf00      	nop

0800b228 <uxr_init_stream_storage>:
 800b228:	2300      	movs	r3, #0
 800b22a:	7403      	strb	r3, [r0, #16]
 800b22c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800b230:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 800b234:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 800b238:	4770      	bx	lr
 800b23a:	bf00      	nop

0800b23c <uxr_reset_stream_storage>:
 800b23c:	b570      	push	{r4, r5, r6, lr}
 800b23e:	7c03      	ldrb	r3, [r0, #16]
 800b240:	4604      	mov	r4, r0
 800b242:	b153      	cbz	r3, 800b25a <uxr_reset_stream_storage+0x1e>
 800b244:	4606      	mov	r6, r0
 800b246:	2500      	movs	r5, #0
 800b248:	4630      	mov	r0, r6
 800b24a:	f003 ff15 	bl	800f078 <uxr_reset_output_best_effort_stream>
 800b24e:	7c23      	ldrb	r3, [r4, #16]
 800b250:	3501      	adds	r5, #1
 800b252:	42ab      	cmp	r3, r5
 800b254:	f106 0610 	add.w	r6, r6, #16
 800b258:	d8f6      	bhi.n	800b248 <uxr_reset_stream_storage+0xc>
 800b25a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b25e:	b163      	cbz	r3, 800b27a <uxr_reset_stream_storage+0x3e>
 800b260:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b264:	2500      	movs	r5, #0
 800b266:	4630      	mov	r0, r6
 800b268:	f003 fd12 	bl	800ec90 <uxr_reset_input_best_effort_stream>
 800b26c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b270:	3501      	adds	r5, #1
 800b272:	42ab      	cmp	r3, r5
 800b274:	f106 0602 	add.w	r6, r6, #2
 800b278:	d8f5      	bhi.n	800b266 <uxr_reset_stream_storage+0x2a>
 800b27a:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800b27e:	b163      	cbz	r3, 800b29a <uxr_reset_stream_storage+0x5e>
 800b280:	f104 0618 	add.w	r6, r4, #24
 800b284:	2500      	movs	r5, #0
 800b286:	4630      	mov	r0, r6
 800b288:	f003 ff96 	bl	800f1b8 <uxr_reset_output_reliable_stream>
 800b28c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800b290:	3501      	adds	r5, #1
 800b292:	42ab      	cmp	r3, r5
 800b294:	f106 0628 	add.w	r6, r6, #40	; 0x28
 800b298:	d8f5      	bhi.n	800b286 <uxr_reset_stream_storage+0x4a>
 800b29a:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 800b29e:	b163      	cbz	r3, 800b2ba <uxr_reset_stream_storage+0x7e>
 800b2a0:	f104 0648 	add.w	r6, r4, #72	; 0x48
 800b2a4:	2500      	movs	r5, #0
 800b2a6:	4630      	mov	r0, r6
 800b2a8:	f003 fd5a 	bl	800ed60 <uxr_reset_input_reliable_stream>
 800b2ac:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 800b2b0:	3501      	adds	r5, #1
 800b2b2:	42ab      	cmp	r3, r5
 800b2b4:	f106 0618 	add.w	r6, r6, #24
 800b2b8:	d8f5      	bhi.n	800b2a6 <uxr_reset_stream_storage+0x6a>
 800b2ba:	bd70      	pop	{r4, r5, r6, pc}

0800b2bc <uxr_add_output_best_effort_buffer>:
 800b2bc:	b530      	push	{r4, r5, lr}
 800b2be:	7c04      	ldrb	r4, [r0, #16]
 800b2c0:	1c65      	adds	r5, r4, #1
 800b2c2:	b083      	sub	sp, #12
 800b2c4:	7405      	strb	r5, [r0, #16]
 800b2c6:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800b2ca:	f003 fec9 	bl	800f060 <uxr_init_output_best_effort_stream>
 800b2ce:	2201      	movs	r2, #1
 800b2d0:	4620      	mov	r0, r4
 800b2d2:	4611      	mov	r1, r2
 800b2d4:	b003      	add	sp, #12
 800b2d6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b2da:	f7ff bf4f 	b.w	800b17c <uxr_stream_id>
 800b2de:	bf00      	nop

0800b2e0 <uxr_add_output_reliable_buffer>:
 800b2e0:	b570      	push	{r4, r5, r6, lr}
 800b2e2:	b084      	sub	sp, #16
 800b2e4:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 800b2e8:	f89d 6020 	ldrb.w	r6, [sp, #32]
 800b2ec:	9600      	str	r6, [sp, #0]
 800b2ee:	2528      	movs	r5, #40	; 0x28
 800b2f0:	1c66      	adds	r6, r4, #1
 800b2f2:	fb05 0504 	mla	r5, r5, r4, r0
 800b2f6:	f880 6040 	strb.w	r6, [r0, #64]	; 0x40
 800b2fa:	f105 0018 	add.w	r0, r5, #24
 800b2fe:	f003 ff29 	bl	800f154 <uxr_init_output_reliable_stream>
 800b302:	4620      	mov	r0, r4
 800b304:	2201      	movs	r2, #1
 800b306:	2102      	movs	r1, #2
 800b308:	b004      	add	sp, #16
 800b30a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b30e:	f7ff bf35 	b.w	800b17c <uxr_stream_id>
 800b312:	bf00      	nop

0800b314 <uxr_add_input_best_effort_buffer>:
 800b314:	b510      	push	{r4, lr}
 800b316:	f890 4044 	ldrb.w	r4, [r0, #68]	; 0x44
 800b31a:	1c62      	adds	r2, r4, #1
 800b31c:	f104 0321 	add.w	r3, r4, #33	; 0x21
 800b320:	b082      	sub	sp, #8
 800b322:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 800b326:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800b32a:	f003 fcad 	bl	800ec88 <uxr_init_input_best_effort_stream>
 800b32e:	4620      	mov	r0, r4
 800b330:	2200      	movs	r2, #0
 800b332:	2101      	movs	r1, #1
 800b334:	b002      	add	sp, #8
 800b336:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b33a:	f7ff bf1f 	b.w	800b17c <uxr_stream_id>
 800b33e:	bf00      	nop

0800b340 <uxr_add_input_reliable_buffer>:
 800b340:	b570      	push	{r4, r5, r6, lr}
 800b342:	b084      	sub	sp, #16
 800b344:	f890 4060 	ldrb.w	r4, [r0, #96]	; 0x60
 800b348:	9e08      	ldr	r6, [sp, #32]
 800b34a:	9600      	str	r6, [sp, #0]
 800b34c:	2518      	movs	r5, #24
 800b34e:	1c66      	adds	r6, r4, #1
 800b350:	fb05 0504 	mla	r5, r5, r4, r0
 800b354:	f880 6060 	strb.w	r6, [r0, #96]	; 0x60
 800b358:	f105 0048 	add.w	r0, r5, #72	; 0x48
 800b35c:	f003 fcdc 	bl	800ed18 <uxr_init_input_reliable_stream>
 800b360:	4620      	mov	r0, r4
 800b362:	2200      	movs	r2, #0
 800b364:	2102      	movs	r1, #2
 800b366:	b004      	add	sp, #16
 800b368:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b36c:	f7ff bf06 	b.w	800b17c <uxr_stream_id>

0800b370 <uxr_get_output_best_effort_stream>:
 800b370:	7c03      	ldrb	r3, [r0, #16]
 800b372:	428b      	cmp	r3, r1
 800b374:	bf8c      	ite	hi
 800b376:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 800b37a:	2000      	movls	r0, #0
 800b37c:	4770      	bx	lr
 800b37e:	bf00      	nop

0800b380 <uxr_get_output_reliable_stream>:
 800b380:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800b384:	428b      	cmp	r3, r1
 800b386:	bf83      	ittte	hi
 800b388:	2328      	movhi	r3, #40	; 0x28
 800b38a:	fb03 0101 	mlahi	r1, r3, r1, r0
 800b38e:	f101 0018 	addhi.w	r0, r1, #24
 800b392:	2000      	movls	r0, #0
 800b394:	4770      	bx	lr
 800b396:	bf00      	nop

0800b398 <uxr_get_input_best_effort_stream>:
 800b398:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800b39c:	428b      	cmp	r3, r1
 800b39e:	bf86      	itte	hi
 800b3a0:	3121      	addhi	r1, #33	; 0x21
 800b3a2:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 800b3a6:	2000      	movls	r0, #0
 800b3a8:	4770      	bx	lr
 800b3aa:	bf00      	nop

0800b3ac <uxr_get_input_reliable_stream>:
 800b3ac:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 800b3b0:	428b      	cmp	r3, r1
 800b3b2:	bf83      	ittte	hi
 800b3b4:	2318      	movhi	r3, #24
 800b3b6:	fb03 0101 	mlahi	r1, r3, r1, r0
 800b3ba:	f101 0048 	addhi.w	r0, r1, #72	; 0x48
 800b3be:	2000      	movls	r0, #0
 800b3c0:	4770      	bx	lr
 800b3c2:	bf00      	nop

0800b3c4 <uxr_output_streams_confirmed>:
 800b3c4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800b3c8:	b183      	cbz	r3, 800b3ec <uxr_output_streams_confirmed+0x28>
 800b3ca:	b570      	push	{r4, r5, r6, lr}
 800b3cc:	4606      	mov	r6, r0
 800b3ce:	f100 0518 	add.w	r5, r0, #24
 800b3d2:	2400      	movs	r4, #0
 800b3d4:	e001      	b.n	800b3da <uxr_output_streams_confirmed+0x16>
 800b3d6:	3528      	adds	r5, #40	; 0x28
 800b3d8:	b138      	cbz	r0, 800b3ea <uxr_output_streams_confirmed+0x26>
 800b3da:	4628      	mov	r0, r5
 800b3dc:	f004 f950 	bl	800f680 <uxr_is_output_up_to_date>
 800b3e0:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
 800b3e4:	3401      	adds	r4, #1
 800b3e6:	42a3      	cmp	r3, r4
 800b3e8:	d8f5      	bhi.n	800b3d6 <uxr_output_streams_confirmed+0x12>
 800b3ea:	bd70      	pop	{r4, r5, r6, pc}
 800b3ec:	2001      	movs	r0, #1
 800b3ee:	4770      	bx	lr

0800b3f0 <uxr_buffer_submessage_header>:
 800b3f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3f2:	4604      	mov	r4, r0
 800b3f4:	460e      	mov	r6, r1
 800b3f6:	2104      	movs	r1, #4
 800b3f8:	4615      	mov	r5, r2
 800b3fa:	461f      	mov	r7, r3
 800b3fc:	f7fe fc76 	bl	8009cec <ucdr_align_to>
 800b400:	2301      	movs	r3, #1
 800b402:	ea47 0203 	orr.w	r2, r7, r3
 800b406:	4631      	mov	r1, r6
 800b408:	7523      	strb	r3, [r4, #20]
 800b40a:	4620      	mov	r0, r4
 800b40c:	462b      	mov	r3, r5
 800b40e:	f000 fa2b 	bl	800b868 <uxr_serialize_submessage_header>
 800b412:	4620      	mov	r0, r4
 800b414:	f7fe fc80 	bl	8009d18 <ucdr_buffer_remaining>
 800b418:	42a8      	cmp	r0, r5
 800b41a:	bf34      	ite	cc
 800b41c:	2000      	movcc	r0, #0
 800b41e:	2001      	movcs	r0, #1
 800b420:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b422:	bf00      	nop

0800b424 <uxr_read_submessage_header>:
 800b424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b428:	4604      	mov	r4, r0
 800b42a:	460d      	mov	r5, r1
 800b42c:	2104      	movs	r1, #4
 800b42e:	4616      	mov	r6, r2
 800b430:	4698      	mov	r8, r3
 800b432:	f7fe fc5b 	bl	8009cec <ucdr_align_to>
 800b436:	4620      	mov	r0, r4
 800b438:	f7fe fc6e 	bl	8009d18 <ucdr_buffer_remaining>
 800b43c:	2803      	cmp	r0, #3
 800b43e:	bf8c      	ite	hi
 800b440:	2701      	movhi	r7, #1
 800b442:	2700      	movls	r7, #0
 800b444:	d802      	bhi.n	800b44c <uxr_read_submessage_header+0x28>
 800b446:	4638      	mov	r0, r7
 800b448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b44c:	4633      	mov	r3, r6
 800b44e:	4642      	mov	r2, r8
 800b450:	4620      	mov	r0, r4
 800b452:	4629      	mov	r1, r5
 800b454:	f000 fa1c 	bl	800b890 <uxr_deserialize_submessage_header>
 800b458:	f898 3000 	ldrb.w	r3, [r8]
 800b45c:	f003 02fe 	and.w	r2, r3, #254	; 0xfe
 800b460:	f003 0301 	and.w	r3, r3, #1
 800b464:	f888 2000 	strb.w	r2, [r8]
 800b468:	7523      	strb	r3, [r4, #20]
 800b46a:	4638      	mov	r0, r7
 800b46c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b470 <uxr_submessage_padding>:
 800b470:	f010 0003 	ands.w	r0, r0, #3
 800b474:	bf18      	it	ne
 800b476:	f1c0 0004 	rsbne	r0, r0, #4
 800b47a:	4770      	bx	lr

0800b47c <uxr_millis>:
 800b47c:	b510      	push	{r4, lr}
 800b47e:	b084      	sub	sp, #16
 800b480:	4669      	mov	r1, sp
 800b482:	2001      	movs	r0, #1
 800b484:	f7f5 fdc0 	bl	8001008 <clock_gettime>
 800b488:	e9dd 2400 	ldrd	r2, r4, [sp]
 800b48c:	4907      	ldr	r1, [pc, #28]	; (800b4ac <uxr_millis+0x30>)
 800b48e:	9802      	ldr	r0, [sp, #8]
 800b490:	fba2 2301 	umull	r2, r3, r2, r1
 800b494:	fb01 3304 	mla	r3, r1, r4, r3
 800b498:	4604      	mov	r4, r0
 800b49a:	1810      	adds	r0, r2, r0
 800b49c:	eb43 71e4 	adc.w	r1, r3, r4, asr #31
 800b4a0:	4a03      	ldr	r2, [pc, #12]	; (800b4b0 <uxr_millis+0x34>)
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	f7f4 ff1c 	bl	80002e0 <__aeabi_ldivmod>
 800b4a8:	b004      	add	sp, #16
 800b4aa:	bd10      	pop	{r4, pc}
 800b4ac:	3b9aca00 	.word	0x3b9aca00
 800b4b0:	000f4240 	.word	0x000f4240

0800b4b4 <uxr_nanos>:
 800b4b4:	b510      	push	{r4, lr}
 800b4b6:	b084      	sub	sp, #16
 800b4b8:	4669      	mov	r1, sp
 800b4ba:	2001      	movs	r0, #1
 800b4bc:	f7f5 fda4 	bl	8001008 <clock_gettime>
 800b4c0:	e9dd 2400 	ldrd	r2, r4, [sp]
 800b4c4:	4905      	ldr	r1, [pc, #20]	; (800b4dc <uxr_nanos+0x28>)
 800b4c6:	9802      	ldr	r0, [sp, #8]
 800b4c8:	fba2 2301 	umull	r2, r3, r2, r1
 800b4cc:	fb01 3304 	mla	r3, r1, r4, r3
 800b4d0:	4604      	mov	r4, r0
 800b4d2:	1810      	adds	r0, r2, r0
 800b4d4:	eb43 71e4 	adc.w	r1, r3, r4, asr #31
 800b4d8:	b004      	add	sp, #16
 800b4da:	bd10      	pop	{r4, pc}
 800b4dc:	3b9aca00 	.word	0x3b9aca00

0800b4e0 <on_full_output_buffer_fragmented>:
 800b4e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4e4:	460c      	mov	r4, r1
 800b4e6:	b08a      	sub	sp, #40	; 0x28
 800b4e8:	f891 10c1 	ldrb.w	r1, [r1, #193]	; 0xc1
 800b4ec:	4606      	mov	r6, r0
 800b4ee:	f104 0008 	add.w	r0, r4, #8
 800b4f2:	f7ff ff45 	bl	800b380 <uxr_get_output_reliable_stream>
 800b4f6:	4605      	mov	r5, r0
 800b4f8:	f004 f8cc 	bl	800f694 <get_available_free_slots>
 800b4fc:	b968      	cbnz	r0, 800b51a <on_full_output_buffer_fragmented+0x3a>
 800b4fe:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	; 0xb8
 800b502:	4620      	mov	r0, r4
 800b504:	4798      	blx	r3
 800b506:	b918      	cbnz	r0, 800b510 <on_full_output_buffer_fragmented+0x30>
 800b508:	2001      	movs	r0, #1
 800b50a:	b00a      	add	sp, #40	; 0x28
 800b50c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b510:	4628      	mov	r0, r5
 800b512:	f004 f8bf 	bl	800f694 <get_available_free_slots>
 800b516:	2800      	cmp	r0, #0
 800b518:	d0f6      	beq.n	800b508 <on_full_output_buffer_fragmented+0x28>
 800b51a:	8928      	ldrh	r0, [r5, #8]
 800b51c:	89eb      	ldrh	r3, [r5, #14]
 800b51e:	7b2a      	ldrb	r2, [r5, #12]
 800b520:	fbb3 f1f0 	udiv	r1, r3, r0
 800b524:	f5c2 427f 	rsb	r2, r2, #65280	; 0xff00
 800b528:	fb00 3111 	mls	r1, r0, r1, r3
 800b52c:	b28b      	uxth	r3, r1
 800b52e:	32fc      	adds	r2, #252	; 0xfc
 800b530:	6869      	ldr	r1, [r5, #4]
 800b532:	fbb1 f1f0 	udiv	r1, r1, r0
 800b536:	1f0f      	subs	r7, r1, #4
 800b538:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
 800b53c:	fb01 f103 	mul.w	r1, r1, r3
 800b540:	443a      	add	r2, r7
 800b542:	682b      	ldr	r3, [r5, #0]
 800b544:	fa1f f882 	uxth.w	r8, r2
 800b548:	3104      	adds	r1, #4
 800b54a:	4419      	add	r1, r3
 800b54c:	eba0 0008 	sub.w	r0, r0, r8
 800b550:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
 800b554:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b558:	9300      	str	r3, [sp, #0]
 800b55a:	463a      	mov	r2, r7
 800b55c:	2300      	movs	r3, #0
 800b55e:	a802      	add	r0, sp, #8
 800b560:	f7fe fb98 	bl	8009c94 <ucdr_init_buffer_origin_offset>
 800b564:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 800b568:	f102 0308 	add.w	r3, r2, #8
 800b56c:	42bb      	cmp	r3, r7
 800b56e:	d927      	bls.n	800b5c0 <on_full_output_buffer_fragmented+0xe0>
 800b570:	4642      	mov	r2, r8
 800b572:	2300      	movs	r3, #0
 800b574:	210d      	movs	r1, #13
 800b576:	a802      	add	r0, sp, #8
 800b578:	f7ff ff3a 	bl	800b3f0 <uxr_buffer_submessage_header>
 800b57c:	8928      	ldrh	r0, [r5, #8]
 800b57e:	89eb      	ldrh	r3, [r5, #14]
 800b580:	fbb3 f1f0 	udiv	r1, r3, r0
 800b584:	fb00 3111 	mls	r1, r0, r1, r3
 800b588:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b58c:	b289      	uxth	r1, r1
 800b58e:	fbb3 f3f0 	udiv	r3, r3, r0
 800b592:	fb03 f301 	mul.w	r3, r3, r1
 800b596:	50d7      	str	r7, [r2, r3]
 800b598:	89e8      	ldrh	r0, [r5, #14]
 800b59a:	2101      	movs	r1, #1
 800b59c:	f004 f986 	bl	800f8ac <uxr_seq_num_add>
 800b5a0:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 800b5a4:	81e8      	strh	r0, [r5, #14]
 800b5a6:	1a52      	subs	r2, r2, r1
 800b5a8:	4630      	mov	r0, r6
 800b5aa:	f7fe fb85 	bl	8009cb8 <ucdr_init_buffer>
 800b5ae:	4630      	mov	r0, r6
 800b5b0:	490f      	ldr	r1, [pc, #60]	; (800b5f0 <on_full_output_buffer_fragmented+0x110>)
 800b5b2:	4622      	mov	r2, r4
 800b5b4:	f7fe fb56 	bl	8009c64 <ucdr_set_on_full_buffer_callback>
 800b5b8:	2000      	movs	r0, #0
 800b5ba:	b00a      	add	sp, #40	; 0x28
 800b5bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5c0:	b292      	uxth	r2, r2
 800b5c2:	2302      	movs	r3, #2
 800b5c4:	210d      	movs	r1, #13
 800b5c6:	a802      	add	r0, sp, #8
 800b5c8:	f7ff ff12 	bl	800b3f0 <uxr_buffer_submessage_header>
 800b5cc:	8928      	ldrh	r0, [r5, #8]
 800b5ce:	89eb      	ldrh	r3, [r5, #14]
 800b5d0:	fbb3 f2f0 	udiv	r2, r3, r0
 800b5d4:	fb00 3212 	mls	r2, r0, r2, r3
 800b5d8:	f8d4 10c4 	ldr.w	r1, [r4, #196]	; 0xc4
 800b5dc:	686b      	ldr	r3, [r5, #4]
 800b5de:	fbb3 f3f0 	udiv	r3, r3, r0
 800b5e2:	b292      	uxth	r2, r2
 800b5e4:	6828      	ldr	r0, [r5, #0]
 800b5e6:	fb03 f302 	mul.w	r3, r3, r2
 800b5ea:	3108      	adds	r1, #8
 800b5ec:	50c1      	str	r1, [r0, r3]
 800b5ee:	e7d3      	b.n	800b598 <on_full_output_buffer_fragmented+0xb8>
 800b5f0:	0800b4e1 	.word	0x0800b4e1

0800b5f4 <uxr_prepare_output_stream>:
 800b5f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b5f6:	b087      	sub	sp, #28
 800b5f8:	2407      	movs	r4, #7
 800b5fa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800b5fc:	9202      	str	r2, [sp, #8]
 800b5fe:	2500      	movs	r5, #0
 800b600:	1d32      	adds	r2, r6, #4
 800b602:	e9cd 4500 	strd	r4, r5, [sp]
 800b606:	9103      	str	r1, [sp, #12]
 800b608:	461c      	mov	r4, r3
 800b60a:	4606      	mov	r6, r0
 800b60c:	f7ff fc4c 	bl	800aea8 <uxr_prepare_stream_to_write_submessage>
 800b610:	f080 0201 	eor.w	r2, r0, #1
 800b614:	b2d2      	uxtb	r2, r2
 800b616:	75a2      	strb	r2, [r4, #22]
 800b618:	b112      	cbz	r2, 800b620 <uxr_prepare_output_stream+0x2c>
 800b61a:	4628      	mov	r0, r5
 800b61c:	b007      	add	sp, #28
 800b61e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b620:	aa05      	add	r2, sp, #20
 800b622:	9902      	ldr	r1, [sp, #8]
 800b624:	4630      	mov	r0, r6
 800b626:	f7ff fd79 	bl	800b11c <uxr_init_base_object_request>
 800b62a:	a905      	add	r1, sp, #20
 800b62c:	4605      	mov	r5, r0
 800b62e:	4620      	mov	r0, r4
 800b630:	f000 ff86 	bl	800c540 <uxr_serialize_WRITE_DATA_Payload_Data>
 800b634:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 800b638:	e9d4 6706 	ldrd	r6, r7, [r4, #24]
 800b63c:	1a52      	subs	r2, r2, r1
 800b63e:	4620      	mov	r0, r4
 800b640:	f7fe fb3a 	bl	8009cb8 <ucdr_init_buffer>
 800b644:	4620      	mov	r0, r4
 800b646:	463a      	mov	r2, r7
 800b648:	4631      	mov	r1, r6
 800b64a:	f7fe fb0b 	bl	8009c64 <ucdr_set_on_full_buffer_callback>
 800b64e:	4628      	mov	r0, r5
 800b650:	b007      	add	sp, #28
 800b652:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b654 <uxr_prepare_output_stream_fragmented>:
 800b654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b658:	b093      	sub	sp, #76	; 0x4c
 800b65a:	4605      	mov	r5, r0
 800b65c:	9107      	str	r1, [sp, #28]
 800b65e:	3008      	adds	r0, #8
 800b660:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800b664:	9303      	str	r3, [sp, #12]
 800b666:	9206      	str	r2, [sp, #24]
 800b668:	f7ff fe8a 	bl	800b380 <uxr_get_output_reliable_stream>
 800b66c:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800b670:	2b01      	cmp	r3, #1
 800b672:	f000 8094 	beq.w	800b79e <uxr_prepare_output_stream_fragmented+0x14a>
 800b676:	4604      	mov	r4, r0
 800b678:	2800      	cmp	r0, #0
 800b67a:	f000 8090 	beq.w	800b79e <uxr_prepare_output_stream_fragmented+0x14a>
 800b67e:	f004 f809 	bl	800f694 <get_available_free_slots>
 800b682:	2800      	cmp	r0, #0
 800b684:	f000 8086 	beq.w	800b794 <uxr_prepare_output_stream_fragmented+0x140>
 800b688:	8922      	ldrh	r2, [r4, #8]
 800b68a:	89e7      	ldrh	r7, [r4, #14]
 800b68c:	fbb7 f8f2 	udiv	r8, r7, r2
 800b690:	e9d4 3100 	ldrd	r3, r1, [r4]
 800b694:	fb02 7818 	mls	r8, r2, r8, r7
 800b698:	fa1f f888 	uxth.w	r8, r8
 800b69c:	fbb1 f2f2 	udiv	r2, r1, r2
 800b6a0:	fb02 f808 	mul.w	r8, r2, r8
 800b6a4:	f108 0804 	add.w	r8, r8, #4
 800b6a8:	4498      	add	r8, r3
 800b6aa:	7b23      	ldrb	r3, [r4, #12]
 800b6ac:	f858 ac04 	ldr.w	sl, [r8, #-4]
 800b6b0:	9204      	str	r2, [sp, #16]
 800b6b2:	4553      	cmp	r3, sl
 800b6b4:	f1a2 0b04 	sub.w	fp, r2, #4
 800b6b8:	d37d      	bcc.n	800b7b6 <uxr_prepare_output_stream_fragmented+0x162>
 800b6ba:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 800b6bc:	f8cd a000 	str.w	sl, [sp]
 800b6c0:	f1ab 0904 	sub.w	r9, fp, #4
 800b6c4:	eba9 0903 	sub.w	r9, r9, r3
 800b6c8:	3608      	adds	r6, #8
 800b6ca:	a80a      	add	r0, sp, #40	; 0x28
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	465a      	mov	r2, fp
 800b6d0:	4641      	mov	r1, r8
 800b6d2:	fa1f f989 	uxth.w	r9, r9
 800b6d6:	9605      	str	r6, [sp, #20]
 800b6d8:	f7fe fadc 	bl	8009c94 <ucdr_init_buffer_origin_offset>
 800b6dc:	455e      	cmp	r6, fp
 800b6de:	bf34      	ite	cc
 800b6e0:	2302      	movcc	r3, #2
 800b6e2:	2300      	movcs	r3, #0
 800b6e4:	464a      	mov	r2, r9
 800b6e6:	210d      	movs	r1, #13
 800b6e8:	a80a      	add	r0, sp, #40	; 0x28
 800b6ea:	f7ff fe81 	bl	800b3f0 <uxr_buffer_submessage_header>
 800b6ee:	8920      	ldrh	r0, [r4, #8]
 800b6f0:	fbb7 f3f0 	udiv	r3, r7, r0
 800b6f4:	e9d4 2100 	ldrd	r2, r1, [r4]
 800b6f8:	fb00 7313 	mls	r3, r0, r3, r7
 800b6fc:	b29b      	uxth	r3, r3
 800b6fe:	fbb1 f1f0 	udiv	r1, r1, r0
 800b702:	fb03 f301 	mul.w	r3, r3, r1
 800b706:	4638      	mov	r0, r7
 800b708:	f842 b003 	str.w	fp, [r2, r3]
 800b70c:	2101      	movs	r1, #1
 800b70e:	f004 f8cd 	bl	800f8ac <uxr_seq_num_add>
 800b712:	9b04      	ldr	r3, [sp, #16]
 800b714:	9e03      	ldr	r6, [sp, #12]
 800b716:	f1a3 0208 	sub.w	r2, r3, #8
 800b71a:	f10a 0104 	add.w	r1, sl, #4
 800b71e:	4607      	mov	r7, r0
 800b720:	eba2 020a 	sub.w	r2, r2, sl
 800b724:	4441      	add	r1, r8
 800b726:	4630      	mov	r0, r6
 800b728:	f7fe fac6 	bl	8009cb8 <ucdr_init_buffer>
 800b72c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800b72e:	81e7      	strh	r7, [r4, #14]
 800b730:	1d1a      	adds	r2, r3, #4
 800b732:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800b736:	bf28      	it	cs
 800b738:	2200      	movcs	r2, #0
 800b73a:	b292      	uxth	r2, r2
 800b73c:	2300      	movs	r3, #0
 800b73e:	2107      	movs	r1, #7
 800b740:	4630      	mov	r0, r6
 800b742:	f7ff fe55 	bl	800b3f0 <uxr_buffer_submessage_header>
 800b746:	9906      	ldr	r1, [sp, #24]
 800b748:	aa09      	add	r2, sp, #36	; 0x24
 800b74a:	4628      	mov	r0, r5
 800b74c:	f7ff fce6 	bl	800b11c <uxr_init_base_object_request>
 800b750:	4604      	mov	r4, r0
 800b752:	b328      	cbz	r0, 800b7a0 <uxr_prepare_output_stream_fragmented+0x14c>
 800b754:	9e03      	ldr	r6, [sp, #12]
 800b756:	a909      	add	r1, sp, #36	; 0x24
 800b758:	4630      	mov	r0, r6
 800b75a:	f000 fef1 	bl	800c540 <uxr_serialize_WRITE_DATA_Payload_Data>
 800b75e:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 800b762:	4630      	mov	r0, r6
 800b764:	1a52      	subs	r2, r2, r1
 800b766:	f7fe faa7 	bl	8009cb8 <ucdr_init_buffer>
 800b76a:	9a05      	ldr	r2, [sp, #20]
 800b76c:	f8c5 20c4 	str.w	r2, [r5, #196]	; 0xc4
 800b770:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800b772:	9b07      	ldr	r3, [sp, #28]
 800b774:	f8c5 20b8 	str.w	r2, [r5, #184]	; 0xb8
 800b778:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b77a:	f8c5 20bc 	str.w	r2, [r5, #188]	; 0xbc
 800b77e:	4630      	mov	r0, r6
 800b780:	4919      	ldr	r1, [pc, #100]	; (800b7e8 <uxr_prepare_output_stream_fragmented+0x194>)
 800b782:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
 800b786:	462a      	mov	r2, r5
 800b788:	f7fe fa6c 	bl	8009c64 <ucdr_set_on_full_buffer_callback>
 800b78c:	4620      	mov	r0, r4
 800b78e:	b013      	add	sp, #76	; 0x4c
 800b790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b794:	991e      	ldr	r1, [sp, #120]	; 0x78
 800b796:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b798:	4628      	mov	r0, r5
 800b79a:	4798      	blx	r3
 800b79c:	b920      	cbnz	r0, 800b7a8 <uxr_prepare_output_stream_fragmented+0x154>
 800b79e:	2400      	movs	r4, #0
 800b7a0:	4620      	mov	r0, r4
 800b7a2:	b013      	add	sp, #76	; 0x4c
 800b7a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7a8:	4620      	mov	r0, r4
 800b7aa:	f003 ff73 	bl	800f694 <get_available_free_slots>
 800b7ae:	2800      	cmp	r0, #0
 800b7b0:	f47f af6a 	bne.w	800b688 <uxr_prepare_output_stream_fragmented+0x34>
 800b7b4:	e7f3      	b.n	800b79e <uxr_prepare_output_stream_fragmented+0x14a>
 800b7b6:	4638      	mov	r0, r7
 800b7b8:	2101      	movs	r1, #1
 800b7ba:	f004 f877 	bl	800f8ac <uxr_seq_num_add>
 800b7be:	8922      	ldrh	r2, [r4, #8]
 800b7c0:	fbb0 f8f2 	udiv	r8, r0, r2
 800b7c4:	fb02 0818 	mls	r8, r2, r8, r0
 800b7c8:	fa1f f888 	uxth.w	r8, r8
 800b7cc:	6863      	ldr	r3, [r4, #4]
 800b7ce:	fbb3 f3f2 	udiv	r3, r3, r2
 800b7d2:	6822      	ldr	r2, [r4, #0]
 800b7d4:	fb08 f803 	mul.w	r8, r8, r3
 800b7d8:	f108 0804 	add.w	r8, r8, #4
 800b7dc:	4490      	add	r8, r2
 800b7de:	7b23      	ldrb	r3, [r4, #12]
 800b7e0:	f858 ac04 	ldr.w	sl, [r8, #-4]
 800b7e4:	4607      	mov	r7, r0
 800b7e6:	e768      	b.n	800b6ba <uxr_prepare_output_stream_fragmented+0x66>
 800b7e8:	0800b4e1 	.word	0x0800b4e1

0800b7ec <uxr_serialize_message_header>:
 800b7ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b7ee:	b083      	sub	sp, #12
 800b7f0:	4616      	mov	r6, r2
 800b7f2:	4604      	mov	r4, r0
 800b7f4:	9301      	str	r3, [sp, #4]
 800b7f6:	460d      	mov	r5, r1
 800b7f8:	9f08      	ldr	r7, [sp, #32]
 800b7fa:	f7fd fab3 	bl	8008d64 <ucdr_serialize_uint8_t>
 800b7fe:	4631      	mov	r1, r6
 800b800:	4620      	mov	r0, r4
 800b802:	f7fd faaf 	bl	8008d64 <ucdr_serialize_uint8_t>
 800b806:	9a01      	ldr	r2, [sp, #4]
 800b808:	4620      	mov	r0, r4
 800b80a:	2101      	movs	r1, #1
 800b80c:	f7fd fb56 	bl	8008ebc <ucdr_serialize_endian_uint16_t>
 800b810:	062b      	lsls	r3, r5, #24
 800b812:	d501      	bpl.n	800b818 <uxr_serialize_message_header+0x2c>
 800b814:	b003      	add	sp, #12
 800b816:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b818:	4639      	mov	r1, r7
 800b81a:	4620      	mov	r0, r4
 800b81c:	2204      	movs	r2, #4
 800b81e:	b003      	add	sp, #12
 800b820:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800b824:	f003 b838 	b.w	800e898 <ucdr_serialize_array_uint8_t>

0800b828 <uxr_deserialize_message_header>:
 800b828:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b82a:	b083      	sub	sp, #12
 800b82c:	4616      	mov	r6, r2
 800b82e:	4604      	mov	r4, r0
 800b830:	9301      	str	r3, [sp, #4]
 800b832:	460d      	mov	r5, r1
 800b834:	9f08      	ldr	r7, [sp, #32]
 800b836:	f7fd faab 	bl	8008d90 <ucdr_deserialize_uint8_t>
 800b83a:	4631      	mov	r1, r6
 800b83c:	4620      	mov	r0, r4
 800b83e:	f7fd faa7 	bl	8008d90 <ucdr_deserialize_uint8_t>
 800b842:	9a01      	ldr	r2, [sp, #4]
 800b844:	4620      	mov	r0, r4
 800b846:	2101      	movs	r1, #1
 800b848:	f7fd fc2c 	bl	80090a4 <ucdr_deserialize_endian_uint16_t>
 800b84c:	f995 3000 	ldrsb.w	r3, [r5]
 800b850:	2b00      	cmp	r3, #0
 800b852:	da01      	bge.n	800b858 <uxr_deserialize_message_header+0x30>
 800b854:	b003      	add	sp, #12
 800b856:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b858:	4639      	mov	r1, r7
 800b85a:	4620      	mov	r0, r4
 800b85c:	2204      	movs	r2, #4
 800b85e:	b003      	add	sp, #12
 800b860:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800b864:	f003 b87c 	b.w	800e960 <ucdr_deserialize_array_uint8_t>

0800b868 <uxr_serialize_submessage_header>:
 800b868:	b530      	push	{r4, r5, lr}
 800b86a:	b083      	sub	sp, #12
 800b86c:	4615      	mov	r5, r2
 800b86e:	4604      	mov	r4, r0
 800b870:	9301      	str	r3, [sp, #4]
 800b872:	f7fd fa77 	bl	8008d64 <ucdr_serialize_uint8_t>
 800b876:	4629      	mov	r1, r5
 800b878:	4620      	mov	r0, r4
 800b87a:	f7fd fa73 	bl	8008d64 <ucdr_serialize_uint8_t>
 800b87e:	9a01      	ldr	r2, [sp, #4]
 800b880:	4620      	mov	r0, r4
 800b882:	2101      	movs	r1, #1
 800b884:	b003      	add	sp, #12
 800b886:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b88a:	f7fd bb17 	b.w	8008ebc <ucdr_serialize_endian_uint16_t>
 800b88e:	bf00      	nop

0800b890 <uxr_deserialize_submessage_header>:
 800b890:	b530      	push	{r4, r5, lr}
 800b892:	b083      	sub	sp, #12
 800b894:	4615      	mov	r5, r2
 800b896:	4604      	mov	r4, r0
 800b898:	9301      	str	r3, [sp, #4]
 800b89a:	f7fd fa79 	bl	8008d90 <ucdr_deserialize_uint8_t>
 800b89e:	4629      	mov	r1, r5
 800b8a0:	4620      	mov	r0, r4
 800b8a2:	f7fd fa75 	bl	8008d90 <ucdr_deserialize_uint8_t>
 800b8a6:	9a01      	ldr	r2, [sp, #4]
 800b8a8:	4620      	mov	r0, r4
 800b8aa:	2101      	movs	r1, #1
 800b8ac:	b003      	add	sp, #12
 800b8ae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b8b2:	f7fd bbf7 	b.w	80090a4 <ucdr_deserialize_endian_uint16_t>
 800b8b6:	bf00      	nop

0800b8b8 <uxr_serialize_CLIENT_Representation>:
 800b8b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8bc:	2204      	movs	r2, #4
 800b8be:	460c      	mov	r4, r1
 800b8c0:	4605      	mov	r5, r0
 800b8c2:	f002 ffe9 	bl	800e898 <ucdr_serialize_array_uint8_t>
 800b8c6:	1d21      	adds	r1, r4, #4
 800b8c8:	4607      	mov	r7, r0
 800b8ca:	2202      	movs	r2, #2
 800b8cc:	4628      	mov	r0, r5
 800b8ce:	f002 ffe3 	bl	800e898 <ucdr_serialize_array_uint8_t>
 800b8d2:	1da1      	adds	r1, r4, #6
 800b8d4:	4007      	ands	r7, r0
 800b8d6:	2202      	movs	r2, #2
 800b8d8:	4628      	mov	r0, r5
 800b8da:	f002 ffdd 	bl	800e898 <ucdr_serialize_array_uint8_t>
 800b8de:	fa5f f887 	uxtb.w	r8, r7
 800b8e2:	2204      	movs	r2, #4
 800b8e4:	4607      	mov	r7, r0
 800b8e6:	f104 0108 	add.w	r1, r4, #8
 800b8ea:	4628      	mov	r0, r5
 800b8ec:	f002 ffd4 	bl	800e898 <ucdr_serialize_array_uint8_t>
 800b8f0:	ea08 0707 	and.w	r7, r8, r7
 800b8f4:	7b21      	ldrb	r1, [r4, #12]
 800b8f6:	4680      	mov	r8, r0
 800b8f8:	4628      	mov	r0, r5
 800b8fa:	f7fd fa33 	bl	8008d64 <ucdr_serialize_uint8_t>
 800b8fe:	ea08 0807 	and.w	r8, r8, r7
 800b902:	7b61      	ldrb	r1, [r4, #13]
 800b904:	4607      	mov	r7, r0
 800b906:	4628      	mov	r0, r5
 800b908:	f7fd f9fc 	bl	8008d04 <ucdr_serialize_bool>
 800b90c:	7b63      	ldrb	r3, [r4, #13]
 800b90e:	ea08 0707 	and.w	r7, r8, r7
 800b912:	ea07 0600 	and.w	r6, r7, r0
 800b916:	b933      	cbnz	r3, 800b926 <uxr_serialize_CLIENT_Representation+0x6e>
 800b918:	8ba1      	ldrh	r1, [r4, #28]
 800b91a:	4628      	mov	r0, r5
 800b91c:	f7fd fa4e 	bl	8008dbc <ucdr_serialize_uint16_t>
 800b920:	4030      	ands	r0, r6
 800b922:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b926:	6921      	ldr	r1, [r4, #16]
 800b928:	4628      	mov	r0, r5
 800b92a:	f7fd fc31 	bl	8009190 <ucdr_serialize_uint32_t>
 800b92e:	6923      	ldr	r3, [r4, #16]
 800b930:	b1cb      	cbz	r3, 800b966 <uxr_serialize_CLIENT_Representation+0xae>
 800b932:	b1d0      	cbz	r0, 800b96a <uxr_serialize_CLIENT_Representation+0xb2>
 800b934:	46a0      	mov	r8, r4
 800b936:	f04f 0900 	mov.w	r9, #0
 800b93a:	e002      	b.n	800b942 <uxr_serialize_CLIENT_Representation+0x8a>
 800b93c:	f108 0808 	add.w	r8, r8, #8
 800b940:	b198      	cbz	r0, 800b96a <uxr_serialize_CLIENT_Representation+0xb2>
 800b942:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800b946:	4628      	mov	r0, r5
 800b948:	f003 f8c6 	bl	800ead8 <ucdr_serialize_string>
 800b94c:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800b950:	4607      	mov	r7, r0
 800b952:	4628      	mov	r0, r5
 800b954:	f003 f8c0 	bl	800ead8 <ucdr_serialize_string>
 800b958:	6923      	ldr	r3, [r4, #16]
 800b95a:	f109 0901 	add.w	r9, r9, #1
 800b95e:	4038      	ands	r0, r7
 800b960:	4599      	cmp	r9, r3
 800b962:	b2c0      	uxtb	r0, r0
 800b964:	d3ea      	bcc.n	800b93c <uxr_serialize_CLIENT_Representation+0x84>
 800b966:	4006      	ands	r6, r0
 800b968:	e7d6      	b.n	800b918 <uxr_serialize_CLIENT_Representation+0x60>
 800b96a:	2600      	movs	r6, #0
 800b96c:	e7d4      	b.n	800b918 <uxr_serialize_CLIENT_Representation+0x60>
 800b96e:	bf00      	nop

0800b970 <uxr_deserialize_CLIENT_Representation>:
 800b970:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b974:	2204      	movs	r2, #4
 800b976:	460c      	mov	r4, r1
 800b978:	4605      	mov	r5, r0
 800b97a:	f002 fff1 	bl	800e960 <ucdr_deserialize_array_uint8_t>
 800b97e:	1d21      	adds	r1, r4, #4
 800b980:	4607      	mov	r7, r0
 800b982:	2202      	movs	r2, #2
 800b984:	4628      	mov	r0, r5
 800b986:	f002 ffeb 	bl	800e960 <ucdr_deserialize_array_uint8_t>
 800b98a:	1da1      	adds	r1, r4, #6
 800b98c:	4007      	ands	r7, r0
 800b98e:	2202      	movs	r2, #2
 800b990:	4628      	mov	r0, r5
 800b992:	f002 ffe5 	bl	800e960 <ucdr_deserialize_array_uint8_t>
 800b996:	fa5f f887 	uxtb.w	r8, r7
 800b99a:	2204      	movs	r2, #4
 800b99c:	4607      	mov	r7, r0
 800b99e:	f104 0108 	add.w	r1, r4, #8
 800b9a2:	4628      	mov	r0, r5
 800b9a4:	f002 ffdc 	bl	800e960 <ucdr_deserialize_array_uint8_t>
 800b9a8:	ea08 0707 	and.w	r7, r8, r7
 800b9ac:	f104 010c 	add.w	r1, r4, #12
 800b9b0:	4680      	mov	r8, r0
 800b9b2:	4628      	mov	r0, r5
 800b9b4:	f7fd f9ec 	bl	8008d90 <ucdr_deserialize_uint8_t>
 800b9b8:	ea08 0807 	and.w	r8, r8, r7
 800b9bc:	f104 010d 	add.w	r1, r4, #13
 800b9c0:	4607      	mov	r7, r0
 800b9c2:	4628      	mov	r0, r5
 800b9c4:	f7fd f9b4 	bl	8008d30 <ucdr_deserialize_bool>
 800b9c8:	7b63      	ldrb	r3, [r4, #13]
 800b9ca:	ea08 0707 	and.w	r7, r8, r7
 800b9ce:	ea07 0600 	and.w	r6, r7, r0
 800b9d2:	b93b      	cbnz	r3, 800b9e4 <uxr_deserialize_CLIENT_Representation+0x74>
 800b9d4:	f104 011c 	add.w	r1, r4, #28
 800b9d8:	4628      	mov	r0, r5
 800b9da:	f7fd faef 	bl	8008fbc <ucdr_deserialize_uint16_t>
 800b9de:	4030      	ands	r0, r6
 800b9e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9e4:	f104 0110 	add.w	r1, r4, #16
 800b9e8:	4628      	mov	r0, r5
 800b9ea:	f7fd fd01 	bl	80093f0 <ucdr_deserialize_uint32_t>
 800b9ee:	6923      	ldr	r3, [r4, #16]
 800b9f0:	2b01      	cmp	r3, #1
 800b9f2:	d903      	bls.n	800b9fc <uxr_deserialize_CLIENT_Representation+0x8c>
 800b9f4:	2301      	movs	r3, #1
 800b9f6:	75ab      	strb	r3, [r5, #22]
 800b9f8:	2600      	movs	r6, #0
 800b9fa:	e7eb      	b.n	800b9d4 <uxr_deserialize_CLIENT_Representation+0x64>
 800b9fc:	b1fb      	cbz	r3, 800ba3e <uxr_deserialize_CLIENT_Representation+0xce>
 800b9fe:	2800      	cmp	r0, #0
 800ba00:	d0fa      	beq.n	800b9f8 <uxr_deserialize_CLIENT_Representation+0x88>
 800ba02:	46a0      	mov	r8, r4
 800ba04:	f04f 0900 	mov.w	r9, #0
 800ba08:	e003      	b.n	800ba12 <uxr_deserialize_CLIENT_Representation+0xa2>
 800ba0a:	f108 0808 	add.w	r8, r8, #8
 800ba0e:	2800      	cmp	r0, #0
 800ba10:	d0f2      	beq.n	800b9f8 <uxr_deserialize_CLIENT_Representation+0x88>
 800ba12:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800ba16:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ba1a:	4628      	mov	r0, r5
 800ba1c:	f003 f86c 	bl	800eaf8 <ucdr_deserialize_string>
 800ba20:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800ba24:	4607      	mov	r7, r0
 800ba26:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ba2a:	4628      	mov	r0, r5
 800ba2c:	f003 f864 	bl	800eaf8 <ucdr_deserialize_string>
 800ba30:	6923      	ldr	r3, [r4, #16]
 800ba32:	f109 0901 	add.w	r9, r9, #1
 800ba36:	4038      	ands	r0, r7
 800ba38:	4599      	cmp	r9, r3
 800ba3a:	b2c0      	uxtb	r0, r0
 800ba3c:	d3e5      	bcc.n	800ba0a <uxr_deserialize_CLIENT_Representation+0x9a>
 800ba3e:	4006      	ands	r6, r0
 800ba40:	e7c8      	b.n	800b9d4 <uxr_deserialize_CLIENT_Representation+0x64>
 800ba42:	bf00      	nop

0800ba44 <uxr_serialize_AGENT_Representation>:
 800ba44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba48:	2204      	movs	r2, #4
 800ba4a:	460c      	mov	r4, r1
 800ba4c:	4605      	mov	r5, r0
 800ba4e:	f002 ff23 	bl	800e898 <ucdr_serialize_array_uint8_t>
 800ba52:	1d21      	adds	r1, r4, #4
 800ba54:	4606      	mov	r6, r0
 800ba56:	2202      	movs	r2, #2
 800ba58:	4628      	mov	r0, r5
 800ba5a:	f002 ff1d 	bl	800e898 <ucdr_serialize_array_uint8_t>
 800ba5e:	1da1      	adds	r1, r4, #6
 800ba60:	4006      	ands	r6, r0
 800ba62:	2202      	movs	r2, #2
 800ba64:	4628      	mov	r0, r5
 800ba66:	f002 ff17 	bl	800e898 <ucdr_serialize_array_uint8_t>
 800ba6a:	b2f6      	uxtb	r6, r6
 800ba6c:	4603      	mov	r3, r0
 800ba6e:	7a21      	ldrb	r1, [r4, #8]
 800ba70:	4628      	mov	r0, r5
 800ba72:	401e      	ands	r6, r3
 800ba74:	f7fd f946 	bl	8008d04 <ucdr_serialize_bool>
 800ba78:	7a23      	ldrb	r3, [r4, #8]
 800ba7a:	ea00 0706 	and.w	r7, r0, r6
 800ba7e:	b913      	cbnz	r3, 800ba86 <uxr_serialize_AGENT_Representation+0x42>
 800ba80:	4638      	mov	r0, r7
 800ba82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba86:	68e1      	ldr	r1, [r4, #12]
 800ba88:	4628      	mov	r0, r5
 800ba8a:	f7fd fb81 	bl	8009190 <ucdr_serialize_uint32_t>
 800ba8e:	68e3      	ldr	r3, [r4, #12]
 800ba90:	b313      	cbz	r3, 800bad8 <uxr_serialize_AGENT_Representation+0x94>
 800ba92:	b1e8      	cbz	r0, 800bad0 <uxr_serialize_AGENT_Representation+0x8c>
 800ba94:	46a0      	mov	r8, r4
 800ba96:	f04f 0900 	mov.w	r9, #0
 800ba9a:	e002      	b.n	800baa2 <uxr_serialize_AGENT_Representation+0x5e>
 800ba9c:	f108 0808 	add.w	r8, r8, #8
 800baa0:	b1b3      	cbz	r3, 800bad0 <uxr_serialize_AGENT_Representation+0x8c>
 800baa2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800baa6:	4628      	mov	r0, r5
 800baa8:	f003 f816 	bl	800ead8 <ucdr_serialize_string>
 800baac:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800bab0:	4606      	mov	r6, r0
 800bab2:	4628      	mov	r0, r5
 800bab4:	f003 f810 	bl	800ead8 <ucdr_serialize_string>
 800bab8:	68e2      	ldr	r2, [r4, #12]
 800baba:	f109 0901 	add.w	r9, r9, #1
 800babe:	ea06 0300 	and.w	r3, r6, r0
 800bac2:	4591      	cmp	r9, r2
 800bac4:	b2db      	uxtb	r3, r3
 800bac6:	d3e9      	bcc.n	800ba9c <uxr_serialize_AGENT_Representation+0x58>
 800bac8:	401f      	ands	r7, r3
 800baca:	4638      	mov	r0, r7
 800bacc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bad0:	2700      	movs	r7, #0
 800bad2:	4638      	mov	r0, r7
 800bad4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bad8:	4007      	ands	r7, r0
 800bada:	e7d1      	b.n	800ba80 <uxr_serialize_AGENT_Representation+0x3c>

0800badc <uxr_serialize_ObjectVariant.part.0>:
 800badc:	b570      	push	{r4, r5, r6, lr}
 800bade:	780b      	ldrb	r3, [r1, #0]
 800bae0:	3b01      	subs	r3, #1
 800bae2:	460c      	mov	r4, r1
 800bae4:	4605      	mov	r5, r0
 800bae6:	2b0d      	cmp	r3, #13
 800bae8:	d869      	bhi.n	800bbbe <uxr_serialize_ObjectVariant.part.0+0xe2>
 800baea:	e8df f003 	tbb	[pc, r3]
 800baee:	074a      	.short	0x074a
 800baf0:	07073030 	.word	0x07073030
 800baf4:	21680707 	.word	0x21680707
 800baf8:	45632121 	.word	0x45632121
 800bafc:	7909      	ldrb	r1, [r1, #4]
 800bafe:	f7fd f931 	bl	8008d64 <ucdr_serialize_uint8_t>
 800bb02:	4606      	mov	r6, r0
 800bb04:	b158      	cbz	r0, 800bb1e <uxr_serialize_ObjectVariant.part.0+0x42>
 800bb06:	7923      	ldrb	r3, [r4, #4]
 800bb08:	2b02      	cmp	r3, #2
 800bb0a:	d003      	beq.n	800bb14 <uxr_serialize_ObjectVariant.part.0+0x38>
 800bb0c:	2b03      	cmp	r3, #3
 800bb0e:	d029      	beq.n	800bb64 <uxr_serialize_ObjectVariant.part.0+0x88>
 800bb10:	2b01      	cmp	r3, #1
 800bb12:	d104      	bne.n	800bb1e <uxr_serialize_ObjectVariant.part.0+0x42>
 800bb14:	68a1      	ldr	r1, [r4, #8]
 800bb16:	4628      	mov	r0, r5
 800bb18:	f002 ffde 	bl	800ead8 <ucdr_serialize_string>
 800bb1c:	4606      	mov	r6, r0
 800bb1e:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 800bb22:	4628      	mov	r0, r5
 800bb24:	2202      	movs	r2, #2
 800bb26:	f002 feb7 	bl	800e898 <ucdr_serialize_array_uint8_t>
 800bb2a:	4030      	ands	r0, r6
 800bb2c:	b2c0      	uxtb	r0, r0
 800bb2e:	bd70      	pop	{r4, r5, r6, pc}
 800bb30:	7909      	ldrb	r1, [r1, #4]
 800bb32:	f7fd f917 	bl	8008d64 <ucdr_serialize_uint8_t>
 800bb36:	b1e8      	cbz	r0, 800bb74 <uxr_serialize_ObjectVariant.part.0+0x98>
 800bb38:	7923      	ldrb	r3, [r4, #4]
 800bb3a:	2b01      	cmp	r3, #1
 800bb3c:	d001      	beq.n	800bb42 <uxr_serialize_ObjectVariant.part.0+0x66>
 800bb3e:	2b02      	cmp	r3, #2
 800bb40:	d13d      	bne.n	800bbbe <uxr_serialize_ObjectVariant.part.0+0xe2>
 800bb42:	68a1      	ldr	r1, [r4, #8]
 800bb44:	4628      	mov	r0, r5
 800bb46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bb4a:	f002 bfc5 	b.w	800ead8 <ucdr_serialize_string>
 800bb4e:	7909      	ldrb	r1, [r1, #4]
 800bb50:	f7fd f908 	bl	8008d64 <ucdr_serialize_uint8_t>
 800bb54:	4606      	mov	r6, r0
 800bb56:	2800      	cmp	r0, #0
 800bb58:	d0e1      	beq.n	800bb1e <uxr_serialize_ObjectVariant.part.0+0x42>
 800bb5a:	7923      	ldrb	r3, [r4, #4]
 800bb5c:	2b02      	cmp	r3, #2
 800bb5e:	d0d9      	beq.n	800bb14 <uxr_serialize_ObjectVariant.part.0+0x38>
 800bb60:	2b03      	cmp	r3, #3
 800bb62:	d1dc      	bne.n	800bb1e <uxr_serialize_ObjectVariant.part.0+0x42>
 800bb64:	68a2      	ldr	r2, [r4, #8]
 800bb66:	f104 010c 	add.w	r1, r4, #12
 800bb6a:	4628      	mov	r0, r5
 800bb6c:	f002 ff88 	bl	800ea80 <ucdr_serialize_sequence_uint8_t>
 800bb70:	4606      	mov	r6, r0
 800bb72:	e7d4      	b.n	800bb1e <uxr_serialize_ObjectVariant.part.0+0x42>
 800bb74:	2000      	movs	r0, #0
 800bb76:	bd70      	pop	{r4, r5, r6, pc}
 800bb78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bb7c:	3104      	adds	r1, #4
 800bb7e:	f7ff be9b 	b.w	800b8b8 <uxr_serialize_CLIENT_Representation>
 800bb82:	7909      	ldrb	r1, [r1, #4]
 800bb84:	f7fd f8ee 	bl	8008d64 <ucdr_serialize_uint8_t>
 800bb88:	4606      	mov	r6, r0
 800bb8a:	b158      	cbz	r0, 800bba4 <uxr_serialize_ObjectVariant.part.0+0xc8>
 800bb8c:	7923      	ldrb	r3, [r4, #4]
 800bb8e:	2b02      	cmp	r3, #2
 800bb90:	d003      	beq.n	800bb9a <uxr_serialize_ObjectVariant.part.0+0xbe>
 800bb92:	2b03      	cmp	r3, #3
 800bb94:	d015      	beq.n	800bbc2 <uxr_serialize_ObjectVariant.part.0+0xe6>
 800bb96:	2b01      	cmp	r3, #1
 800bb98:	d104      	bne.n	800bba4 <uxr_serialize_ObjectVariant.part.0+0xc8>
 800bb9a:	68a1      	ldr	r1, [r4, #8]
 800bb9c:	4628      	mov	r0, r5
 800bb9e:	f002 ff9b 	bl	800ead8 <ucdr_serialize_string>
 800bba2:	4606      	mov	r6, r0
 800bba4:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	; 0x20c
 800bba8:	4628      	mov	r0, r5
 800bbaa:	f7fd fe17 	bl	80097dc <ucdr_serialize_int16_t>
 800bbae:	4030      	ands	r0, r6
 800bbb0:	b2c0      	uxtb	r0, r0
 800bbb2:	bd70      	pop	{r4, r5, r6, pc}
 800bbb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bbb8:	3104      	adds	r1, #4
 800bbba:	f7ff bf43 	b.w	800ba44 <uxr_serialize_AGENT_Representation>
 800bbbe:	2001      	movs	r0, #1
 800bbc0:	bd70      	pop	{r4, r5, r6, pc}
 800bbc2:	68a2      	ldr	r2, [r4, #8]
 800bbc4:	f104 010c 	add.w	r1, r4, #12
 800bbc8:	4628      	mov	r0, r5
 800bbca:	f002 ff59 	bl	800ea80 <ucdr_serialize_sequence_uint8_t>
 800bbce:	4606      	mov	r6, r0
 800bbd0:	e7e8      	b.n	800bba4 <uxr_serialize_ObjectVariant.part.0+0xc8>
 800bbd2:	bf00      	nop

0800bbd4 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 800bbd4:	b570      	push	{r4, r5, r6, lr}
 800bbd6:	460d      	mov	r5, r1
 800bbd8:	7809      	ldrb	r1, [r1, #0]
 800bbda:	4606      	mov	r6, r0
 800bbdc:	f7fd f892 	bl	8008d04 <ucdr_serialize_bool>
 800bbe0:	782b      	ldrb	r3, [r5, #0]
 800bbe2:	4604      	mov	r4, r0
 800bbe4:	b94b      	cbnz	r3, 800bbfa <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 800bbe6:	7a29      	ldrb	r1, [r5, #8]
 800bbe8:	4630      	mov	r0, r6
 800bbea:	f7fd f88b 	bl	8008d04 <ucdr_serialize_bool>
 800bbee:	7a2b      	ldrb	r3, [r5, #8]
 800bbf0:	4004      	ands	r4, r0
 800bbf2:	b2e4      	uxtb	r4, r4
 800bbf4:	b943      	cbnz	r3, 800bc08 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 800bbf6:	4620      	mov	r0, r4
 800bbf8:	bd70      	pop	{r4, r5, r6, pc}
 800bbfa:	6869      	ldr	r1, [r5, #4]
 800bbfc:	4630      	mov	r0, r6
 800bbfe:	f002 ff6b 	bl	800ead8 <ucdr_serialize_string>
 800bc02:	4004      	ands	r4, r0
 800bc04:	b2e4      	uxtb	r4, r4
 800bc06:	e7ee      	b.n	800bbe6 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 800bc08:	68e9      	ldr	r1, [r5, #12]
 800bc0a:	4630      	mov	r0, r6
 800bc0c:	f002 ff64 	bl	800ead8 <ucdr_serialize_string>
 800bc10:	4004      	ands	r4, r0
 800bc12:	4620      	mov	r0, r4
 800bc14:	bd70      	pop	{r4, r5, r6, pc}
 800bc16:	bf00      	nop

0800bc18 <uxr_serialize_OBJK_Topic_Binary>:
 800bc18:	b570      	push	{r4, r5, r6, lr}
 800bc1a:	460d      	mov	r5, r1
 800bc1c:	6809      	ldr	r1, [r1, #0]
 800bc1e:	4606      	mov	r6, r0
 800bc20:	f002 ff5a 	bl	800ead8 <ucdr_serialize_string>
 800bc24:	7929      	ldrb	r1, [r5, #4]
 800bc26:	4604      	mov	r4, r0
 800bc28:	4630      	mov	r0, r6
 800bc2a:	f7fd f86b 	bl	8008d04 <ucdr_serialize_bool>
 800bc2e:	792b      	ldrb	r3, [r5, #4]
 800bc30:	4004      	ands	r4, r0
 800bc32:	b2e4      	uxtb	r4, r4
 800bc34:	b943      	cbnz	r3, 800bc48 <uxr_serialize_OBJK_Topic_Binary+0x30>
 800bc36:	7b29      	ldrb	r1, [r5, #12]
 800bc38:	4630      	mov	r0, r6
 800bc3a:	f7fd f863 	bl	8008d04 <ucdr_serialize_bool>
 800bc3e:	7b2b      	ldrb	r3, [r5, #12]
 800bc40:	4004      	ands	r4, r0
 800bc42:	b93b      	cbnz	r3, 800bc54 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 800bc44:	4620      	mov	r0, r4
 800bc46:	bd70      	pop	{r4, r5, r6, pc}
 800bc48:	68a9      	ldr	r1, [r5, #8]
 800bc4a:	4630      	mov	r0, r6
 800bc4c:	f002 ff44 	bl	800ead8 <ucdr_serialize_string>
 800bc50:	4004      	ands	r4, r0
 800bc52:	e7f0      	b.n	800bc36 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 800bc54:	6929      	ldr	r1, [r5, #16]
 800bc56:	4630      	mov	r0, r6
 800bc58:	f002 ff3e 	bl	800ead8 <ucdr_serialize_string>
 800bc5c:	4004      	ands	r4, r0
 800bc5e:	b2e4      	uxtb	r4, r4
 800bc60:	4620      	mov	r0, r4
 800bc62:	bd70      	pop	{r4, r5, r6, pc}

0800bc64 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 800bc64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc68:	460c      	mov	r4, r1
 800bc6a:	7809      	ldrb	r1, [r1, #0]
 800bc6c:	4606      	mov	r6, r0
 800bc6e:	f7fd f849 	bl	8008d04 <ucdr_serialize_bool>
 800bc72:	7823      	ldrb	r3, [r4, #0]
 800bc74:	4605      	mov	r5, r0
 800bc76:	b96b      	cbnz	r3, 800bc94 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 800bc78:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 800bc7c:	4630      	mov	r0, r6
 800bc7e:	f7fd f841 	bl	8008d04 <ucdr_serialize_bool>
 800bc82:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800bc86:	4005      	ands	r5, r0
 800bc88:	b2ed      	uxtb	r5, r5
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d169      	bne.n	800bd62 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 800bc8e:	4628      	mov	r0, r5
 800bc90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc94:	6861      	ldr	r1, [r4, #4]
 800bc96:	4630      	mov	r0, r6
 800bc98:	f7fd fa7a 	bl	8009190 <ucdr_serialize_uint32_t>
 800bc9c:	6863      	ldr	r3, [r4, #4]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d06b      	beq.n	800bd7a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 800bca2:	2800      	cmp	r0, #0
 800bca4:	d067      	beq.n	800bd76 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800bca6:	68a1      	ldr	r1, [r4, #8]
 800bca8:	4630      	mov	r0, r6
 800bcaa:	f002 ff15 	bl	800ead8 <ucdr_serialize_string>
 800bcae:	6863      	ldr	r3, [r4, #4]
 800bcb0:	2b01      	cmp	r3, #1
 800bcb2:	d953      	bls.n	800bd5c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800bcb4:	2800      	cmp	r0, #0
 800bcb6:	d05e      	beq.n	800bd76 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800bcb8:	68e1      	ldr	r1, [r4, #12]
 800bcba:	4630      	mov	r0, r6
 800bcbc:	f002 ff0c 	bl	800ead8 <ucdr_serialize_string>
 800bcc0:	6863      	ldr	r3, [r4, #4]
 800bcc2:	2b02      	cmp	r3, #2
 800bcc4:	d94a      	bls.n	800bd5c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800bcc6:	2800      	cmp	r0, #0
 800bcc8:	d055      	beq.n	800bd76 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800bcca:	6921      	ldr	r1, [r4, #16]
 800bccc:	4630      	mov	r0, r6
 800bcce:	f002 ff03 	bl	800ead8 <ucdr_serialize_string>
 800bcd2:	6863      	ldr	r3, [r4, #4]
 800bcd4:	2b03      	cmp	r3, #3
 800bcd6:	d941      	bls.n	800bd5c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800bcd8:	2800      	cmp	r0, #0
 800bcda:	d04c      	beq.n	800bd76 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800bcdc:	6961      	ldr	r1, [r4, #20]
 800bcde:	4630      	mov	r0, r6
 800bce0:	f002 fefa 	bl	800ead8 <ucdr_serialize_string>
 800bce4:	6863      	ldr	r3, [r4, #4]
 800bce6:	2b04      	cmp	r3, #4
 800bce8:	d938      	bls.n	800bd5c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800bcea:	2800      	cmp	r0, #0
 800bcec:	d043      	beq.n	800bd76 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800bcee:	69a1      	ldr	r1, [r4, #24]
 800bcf0:	4630      	mov	r0, r6
 800bcf2:	f002 fef1 	bl	800ead8 <ucdr_serialize_string>
 800bcf6:	6863      	ldr	r3, [r4, #4]
 800bcf8:	2b05      	cmp	r3, #5
 800bcfa:	d92f      	bls.n	800bd5c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800bcfc:	2800      	cmp	r0, #0
 800bcfe:	d03a      	beq.n	800bd76 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800bd00:	69e1      	ldr	r1, [r4, #28]
 800bd02:	4630      	mov	r0, r6
 800bd04:	f002 fee8 	bl	800ead8 <ucdr_serialize_string>
 800bd08:	6863      	ldr	r3, [r4, #4]
 800bd0a:	2b06      	cmp	r3, #6
 800bd0c:	d926      	bls.n	800bd5c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800bd0e:	b390      	cbz	r0, 800bd76 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800bd10:	6a21      	ldr	r1, [r4, #32]
 800bd12:	4630      	mov	r0, r6
 800bd14:	f002 fee0 	bl	800ead8 <ucdr_serialize_string>
 800bd18:	6863      	ldr	r3, [r4, #4]
 800bd1a:	2b07      	cmp	r3, #7
 800bd1c:	d91e      	bls.n	800bd5c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800bd1e:	b350      	cbz	r0, 800bd76 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800bd20:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800bd22:	4630      	mov	r0, r6
 800bd24:	f002 fed8 	bl	800ead8 <ucdr_serialize_string>
 800bd28:	6863      	ldr	r3, [r4, #4]
 800bd2a:	2b08      	cmp	r3, #8
 800bd2c:	d916      	bls.n	800bd5c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800bd2e:	b310      	cbz	r0, 800bd76 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800bd30:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800bd32:	4630      	mov	r0, r6
 800bd34:	f002 fed0 	bl	800ead8 <ucdr_serialize_string>
 800bd38:	6863      	ldr	r3, [r4, #4]
 800bd3a:	2b09      	cmp	r3, #9
 800bd3c:	d90e      	bls.n	800bd5c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800bd3e:	b1d0      	cbz	r0, 800bd76 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800bd40:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 800bd44:	2709      	movs	r7, #9
 800bd46:	e000      	b.n	800bd4a <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 800bd48:	b1a8      	cbz	r0, 800bd76 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800bd4a:	f858 1b04 	ldr.w	r1, [r8], #4
 800bd4e:	4630      	mov	r0, r6
 800bd50:	f002 fec2 	bl	800ead8 <ucdr_serialize_string>
 800bd54:	6862      	ldr	r2, [r4, #4]
 800bd56:	3701      	adds	r7, #1
 800bd58:	4297      	cmp	r7, r2
 800bd5a:	d3f5      	bcc.n	800bd48 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 800bd5c:	4005      	ands	r5, r0
 800bd5e:	b2ed      	uxtb	r5, r5
 800bd60:	e78a      	b.n	800bc78 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800bd62:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800bd64:	4630      	mov	r0, r6
 800bd66:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800bd6a:	f002 fe89 	bl	800ea80 <ucdr_serialize_sequence_uint8_t>
 800bd6e:	4005      	ands	r5, r0
 800bd70:	4628      	mov	r0, r5
 800bd72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd76:	2500      	movs	r5, #0
 800bd78:	e77e      	b.n	800bc78 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800bd7a:	4028      	ands	r0, r5
 800bd7c:	b2c5      	uxtb	r5, r0
 800bd7e:	e77b      	b.n	800bc78 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

0800bd80 <uxr_serialize_OBJK_Publisher_Binary>:
 800bd80:	b570      	push	{r4, r5, r6, lr}
 800bd82:	460d      	mov	r5, r1
 800bd84:	7809      	ldrb	r1, [r1, #0]
 800bd86:	4606      	mov	r6, r0
 800bd88:	f7fc ffbc 	bl	8008d04 <ucdr_serialize_bool>
 800bd8c:	782b      	ldrb	r3, [r5, #0]
 800bd8e:	4604      	mov	r4, r0
 800bd90:	b94b      	cbnz	r3, 800bda6 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 800bd92:	7a29      	ldrb	r1, [r5, #8]
 800bd94:	4630      	mov	r0, r6
 800bd96:	f7fc ffb5 	bl	8008d04 <ucdr_serialize_bool>
 800bd9a:	7a2b      	ldrb	r3, [r5, #8]
 800bd9c:	4004      	ands	r4, r0
 800bd9e:	b2e4      	uxtb	r4, r4
 800bda0:	b943      	cbnz	r3, 800bdb4 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 800bda2:	4620      	mov	r0, r4
 800bda4:	bd70      	pop	{r4, r5, r6, pc}
 800bda6:	6869      	ldr	r1, [r5, #4]
 800bda8:	4630      	mov	r0, r6
 800bdaa:	f002 fe95 	bl	800ead8 <ucdr_serialize_string>
 800bdae:	4004      	ands	r4, r0
 800bdb0:	b2e4      	uxtb	r4, r4
 800bdb2:	e7ee      	b.n	800bd92 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 800bdb4:	f105 010c 	add.w	r1, r5, #12
 800bdb8:	4630      	mov	r0, r6
 800bdba:	f7ff ff53 	bl	800bc64 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 800bdbe:	4004      	ands	r4, r0
 800bdc0:	4620      	mov	r0, r4
 800bdc2:	bd70      	pop	{r4, r5, r6, pc}

0800bdc4 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 800bdc4:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 800bdc8:	4688      	mov	r8, r1
 800bdca:	8809      	ldrh	r1, [r1, #0]
 800bdcc:	4681      	mov	r9, r0
 800bdce:	f7fc fff5 	bl	8008dbc <ucdr_serialize_uint16_t>
 800bdd2:	f898 1002 	ldrb.w	r1, [r8, #2]
 800bdd6:	4606      	mov	r6, r0
 800bdd8:	4648      	mov	r0, r9
 800bdda:	f7fc ff93 	bl	8008d04 <ucdr_serialize_bool>
 800bdde:	f898 3002 	ldrb.w	r3, [r8, #2]
 800bde2:	4030      	ands	r0, r6
 800bde4:	b2c5      	uxtb	r5, r0
 800bde6:	b9eb      	cbnz	r3, 800be24 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 800bde8:	f898 1006 	ldrb.w	r1, [r8, #6]
 800bdec:	4648      	mov	r0, r9
 800bdee:	f7fc ff89 	bl	8008d04 <ucdr_serialize_bool>
 800bdf2:	f898 3006 	ldrb.w	r3, [r8, #6]
 800bdf6:	4005      	ands	r5, r0
 800bdf8:	bb7b      	cbnz	r3, 800be5a <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 800bdfa:	f898 100c 	ldrb.w	r1, [r8, #12]
 800bdfe:	4648      	mov	r0, r9
 800be00:	f7fc ff80 	bl	8008d04 <ucdr_serialize_bool>
 800be04:	f898 300c 	ldrb.w	r3, [r8, #12]
 800be08:	4005      	ands	r5, r0
 800be0a:	b9f3      	cbnz	r3, 800be4a <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 800be0c:	f898 1014 	ldrb.w	r1, [r8, #20]
 800be10:	4648      	mov	r0, r9
 800be12:	f7fc ff77 	bl	8008d04 <ucdr_serialize_bool>
 800be16:	f898 3014 	ldrb.w	r3, [r8, #20]
 800be1a:	4005      	ands	r5, r0
 800be1c:	b94b      	cbnz	r3, 800be32 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 800be1e:	4628      	mov	r0, r5
 800be20:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800be24:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 800be28:	4648      	mov	r0, r9
 800be2a:	f7fc ffc7 	bl	8008dbc <ucdr_serialize_uint16_t>
 800be2e:	4005      	ands	r5, r0
 800be30:	e7da      	b.n	800bde8 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 800be32:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800be36:	4648      	mov	r0, r9
 800be38:	f108 011c 	add.w	r1, r8, #28
 800be3c:	f002 fe20 	bl	800ea80 <ucdr_serialize_sequence_uint8_t>
 800be40:	4028      	ands	r0, r5
 800be42:	b2c5      	uxtb	r5, r0
 800be44:	4628      	mov	r0, r5
 800be46:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800be4a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800be4e:	4648      	mov	r0, r9
 800be50:	f7fd f99e 	bl	8009190 <ucdr_serialize_uint32_t>
 800be54:	4028      	ands	r0, r5
 800be56:	b2c5      	uxtb	r5, r0
 800be58:	e7d8      	b.n	800be0c <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 800be5a:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800be5e:	4648      	mov	r0, r9
 800be60:	f7fd f996 	bl	8009190 <ucdr_serialize_uint32_t>
 800be64:	4028      	ands	r0, r5
 800be66:	b2c5      	uxtb	r5, r0
 800be68:	e7c7      	b.n	800bdfa <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 800be6a:	bf00      	nop

0800be6c <uxr_serialize_OBJK_DataWriter_Binary>:
 800be6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be6e:	2202      	movs	r2, #2
 800be70:	460d      	mov	r5, r1
 800be72:	4606      	mov	r6, r0
 800be74:	f002 fd10 	bl	800e898 <ucdr_serialize_array_uint8_t>
 800be78:	78a9      	ldrb	r1, [r5, #2]
 800be7a:	4604      	mov	r4, r0
 800be7c:	4630      	mov	r0, r6
 800be7e:	f7fc ff41 	bl	8008d04 <ucdr_serialize_bool>
 800be82:	78ab      	ldrb	r3, [r5, #2]
 800be84:	4004      	ands	r4, r0
 800be86:	b2e4      	uxtb	r4, r4
 800be88:	b90b      	cbnz	r3, 800be8e <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 800be8a:	4620      	mov	r0, r4
 800be8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be8e:	f105 0108 	add.w	r1, r5, #8
 800be92:	4630      	mov	r0, r6
 800be94:	f7ff ff96 	bl	800bdc4 <uxr_serialize_OBJK_Endpoint_QosBinary>
 800be98:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
 800be9c:	4607      	mov	r7, r0
 800be9e:	4630      	mov	r0, r6
 800bea0:	f7fc ff30 	bl	8008d04 <ucdr_serialize_bool>
 800bea4:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 800bea8:	4007      	ands	r7, r0
 800beaa:	b2ff      	uxtb	r7, r7
 800beac:	b913      	cbnz	r3, 800beb4 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 800beae:	403c      	ands	r4, r7
 800beb0:	4620      	mov	r0, r4
 800beb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800beb4:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	; 0x30
 800beb8:	4630      	mov	r0, r6
 800beba:	f7fd fbbf 	bl	800963c <ucdr_serialize_uint64_t>
 800bebe:	4007      	ands	r7, r0
 800bec0:	e7f5      	b.n	800beae <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 800bec2:	bf00      	nop

0800bec4 <uxr_deserialize_ObjectVariant>:
 800bec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bec6:	4605      	mov	r5, r0
 800bec8:	460e      	mov	r6, r1
 800beca:	f7fc ff61 	bl	8008d90 <ucdr_deserialize_uint8_t>
 800bece:	b320      	cbz	r0, 800bf1a <uxr_deserialize_ObjectVariant+0x56>
 800bed0:	7833      	ldrb	r3, [r6, #0]
 800bed2:	3b01      	subs	r3, #1
 800bed4:	4604      	mov	r4, r0
 800bed6:	2b0d      	cmp	r3, #13
 800bed8:	d81d      	bhi.n	800bf16 <uxr_deserialize_ObjectVariant+0x52>
 800beda:	e8df f003 	tbb	[pc, r3]
 800bede:	2107      	.short	0x2107
 800bee0:	21214b4b 	.word	0x21214b4b
 800bee4:	381c2121 	.word	0x381c2121
 800bee8:	876a3838 	.word	0x876a3838
 800beec:	1d31      	adds	r1, r6, #4
 800beee:	4628      	mov	r0, r5
 800bef0:	f7fc ff4e 	bl	8008d90 <ucdr_deserialize_uint8_t>
 800bef4:	4607      	mov	r7, r0
 800bef6:	b138      	cbz	r0, 800bf08 <uxr_deserialize_ObjectVariant+0x44>
 800bef8:	7933      	ldrb	r3, [r6, #4]
 800befa:	2b02      	cmp	r3, #2
 800befc:	d07c      	beq.n	800bff8 <uxr_deserialize_ObjectVariant+0x134>
 800befe:	2b03      	cmp	r3, #3
 800bf00:	f000 8082 	beq.w	800c008 <uxr_deserialize_ObjectVariant+0x144>
 800bf04:	2b01      	cmp	r3, #1
 800bf06:	d077      	beq.n	800bff8 <uxr_deserialize_ObjectVariant+0x134>
 800bf08:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 800bf0c:	4628      	mov	r0, r5
 800bf0e:	f7fd fce5 	bl	80098dc <ucdr_deserialize_int16_t>
 800bf12:	4038      	ands	r0, r7
 800bf14:	b2c4      	uxtb	r4, r0
 800bf16:	4620      	mov	r0, r4
 800bf18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf1a:	2400      	movs	r4, #0
 800bf1c:	4620      	mov	r0, r4
 800bf1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf20:	1d31      	adds	r1, r6, #4
 800bf22:	4628      	mov	r0, r5
 800bf24:	f7fc ff34 	bl	8008d90 <ucdr_deserialize_uint8_t>
 800bf28:	4607      	mov	r7, r0
 800bf2a:	b130      	cbz	r0, 800bf3a <uxr_deserialize_ObjectVariant+0x76>
 800bf2c:	7933      	ldrb	r3, [r6, #4]
 800bf2e:	2b02      	cmp	r3, #2
 800bf30:	d037      	beq.n	800bfa2 <uxr_deserialize_ObjectVariant+0xde>
 800bf32:	2b03      	cmp	r3, #3
 800bf34:	d02a      	beq.n	800bf8c <uxr_deserialize_ObjectVariant+0xc8>
 800bf36:	2b01      	cmp	r3, #1
 800bf38:	d033      	beq.n	800bfa2 <uxr_deserialize_ObjectVariant+0xde>
 800bf3a:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 800bf3e:	4628      	mov	r0, r5
 800bf40:	2202      	movs	r2, #2
 800bf42:	f002 fd0d 	bl	800e960 <ucdr_deserialize_array_uint8_t>
 800bf46:	4038      	ands	r0, r7
 800bf48:	b2c4      	uxtb	r4, r0
 800bf4a:	4620      	mov	r0, r4
 800bf4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf4e:	1d31      	adds	r1, r6, #4
 800bf50:	4628      	mov	r0, r5
 800bf52:	f7fc ff1d 	bl	8008d90 <ucdr_deserialize_uint8_t>
 800bf56:	2800      	cmp	r0, #0
 800bf58:	d0df      	beq.n	800bf1a <uxr_deserialize_ObjectVariant+0x56>
 800bf5a:	7933      	ldrb	r3, [r6, #4]
 800bf5c:	2b01      	cmp	r3, #1
 800bf5e:	d001      	beq.n	800bf64 <uxr_deserialize_ObjectVariant+0xa0>
 800bf60:	2b02      	cmp	r3, #2
 800bf62:	d1d8      	bne.n	800bf16 <uxr_deserialize_ObjectVariant+0x52>
 800bf64:	68b1      	ldr	r1, [r6, #8]
 800bf66:	4628      	mov	r0, r5
 800bf68:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bf6c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bf70:	f002 bdc2 	b.w	800eaf8 <ucdr_deserialize_string>
 800bf74:	1d31      	adds	r1, r6, #4
 800bf76:	4628      	mov	r0, r5
 800bf78:	f7fc ff0a 	bl	8008d90 <ucdr_deserialize_uint8_t>
 800bf7c:	4607      	mov	r7, r0
 800bf7e:	2800      	cmp	r0, #0
 800bf80:	d0db      	beq.n	800bf3a <uxr_deserialize_ObjectVariant+0x76>
 800bf82:	7933      	ldrb	r3, [r6, #4]
 800bf84:	2b02      	cmp	r3, #2
 800bf86:	d00c      	beq.n	800bfa2 <uxr_deserialize_ObjectVariant+0xde>
 800bf88:	2b03      	cmp	r3, #3
 800bf8a:	d1d6      	bne.n	800bf3a <uxr_deserialize_ObjectVariant+0x76>
 800bf8c:	f106 0308 	add.w	r3, r6, #8
 800bf90:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bf94:	f106 010c 	add.w	r1, r6, #12
 800bf98:	4628      	mov	r0, r5
 800bf9a:	f002 fd83 	bl	800eaa4 <ucdr_deserialize_sequence_uint8_t>
 800bf9e:	4607      	mov	r7, r0
 800bfa0:	e7cb      	b.n	800bf3a <uxr_deserialize_ObjectVariant+0x76>
 800bfa2:	68b1      	ldr	r1, [r6, #8]
 800bfa4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bfa8:	4628      	mov	r0, r5
 800bfaa:	f002 fda5 	bl	800eaf8 <ucdr_deserialize_string>
 800bfae:	4607      	mov	r7, r0
 800bfb0:	e7c3      	b.n	800bf3a <uxr_deserialize_ObjectVariant+0x76>
 800bfb2:	2204      	movs	r2, #4
 800bfb4:	18b1      	adds	r1, r6, r2
 800bfb6:	4628      	mov	r0, r5
 800bfb8:	f002 fcd2 	bl	800e960 <ucdr_deserialize_array_uint8_t>
 800bfbc:	2202      	movs	r2, #2
 800bfbe:	4604      	mov	r4, r0
 800bfc0:	f106 0108 	add.w	r1, r6, #8
 800bfc4:	4628      	mov	r0, r5
 800bfc6:	f002 fccb 	bl	800e960 <ucdr_deserialize_array_uint8_t>
 800bfca:	2202      	movs	r2, #2
 800bfcc:	4004      	ands	r4, r0
 800bfce:	f106 010a 	add.w	r1, r6, #10
 800bfd2:	4628      	mov	r0, r5
 800bfd4:	f002 fcc4 	bl	800e960 <ucdr_deserialize_array_uint8_t>
 800bfd8:	b2e4      	uxtb	r4, r4
 800bfda:	4603      	mov	r3, r0
 800bfdc:	f106 010c 	add.w	r1, r6, #12
 800bfe0:	4628      	mov	r0, r5
 800bfe2:	401c      	ands	r4, r3
 800bfe4:	f7fc fea4 	bl	8008d30 <ucdr_deserialize_bool>
 800bfe8:	4004      	ands	r4, r0
 800bfea:	e794      	b.n	800bf16 <uxr_deserialize_ObjectVariant+0x52>
 800bfec:	1d31      	adds	r1, r6, #4
 800bfee:	4628      	mov	r0, r5
 800bff0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bff4:	f7ff bcbc 	b.w	800b970 <uxr_deserialize_CLIENT_Representation>
 800bff8:	68b1      	ldr	r1, [r6, #8]
 800bffa:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bffe:	4628      	mov	r0, r5
 800c000:	f002 fd7a 	bl	800eaf8 <ucdr_deserialize_string>
 800c004:	4607      	mov	r7, r0
 800c006:	e77f      	b.n	800bf08 <uxr_deserialize_ObjectVariant+0x44>
 800c008:	f106 0308 	add.w	r3, r6, #8
 800c00c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c010:	f106 010c 	add.w	r1, r6, #12
 800c014:	4628      	mov	r0, r5
 800c016:	f002 fd45 	bl	800eaa4 <ucdr_deserialize_sequence_uint8_t>
 800c01a:	4607      	mov	r7, r0
 800c01c:	e774      	b.n	800bf08 <uxr_deserialize_ObjectVariant+0x44>
 800c01e:	bf00      	nop

0800c020 <uxr_deserialize_BaseObjectRequest>:
 800c020:	b570      	push	{r4, r5, r6, lr}
 800c022:	2202      	movs	r2, #2
 800c024:	4605      	mov	r5, r0
 800c026:	460e      	mov	r6, r1
 800c028:	f002 fc9a 	bl	800e960 <ucdr_deserialize_array_uint8_t>
 800c02c:	1cb1      	adds	r1, r6, #2
 800c02e:	4604      	mov	r4, r0
 800c030:	2202      	movs	r2, #2
 800c032:	4628      	mov	r0, r5
 800c034:	f002 fc94 	bl	800e960 <ucdr_deserialize_array_uint8_t>
 800c038:	4020      	ands	r0, r4
 800c03a:	b2c0      	uxtb	r0, r0
 800c03c:	bd70      	pop	{r4, r5, r6, pc}
 800c03e:	bf00      	nop

0800c040 <uxr_serialize_AGENT_ActivityInfo>:
 800c040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c044:	460e      	mov	r6, r1
 800c046:	f9b1 1000 	ldrsh.w	r1, [r1]
 800c04a:	4607      	mov	r7, r0
 800c04c:	f7fd fbc6 	bl	80097dc <ucdr_serialize_int16_t>
 800c050:	6871      	ldr	r1, [r6, #4]
 800c052:	4680      	mov	r8, r0
 800c054:	4638      	mov	r0, r7
 800c056:	f7fd f89b 	bl	8009190 <ucdr_serialize_uint32_t>
 800c05a:	6873      	ldr	r3, [r6, #4]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d06a      	beq.n	800c136 <uxr_serialize_AGENT_ActivityInfo+0xf6>
 800c060:	b318      	cbz	r0, 800c0aa <uxr_serialize_AGENT_ActivityInfo+0x6a>
 800c062:	f106 0904 	add.w	r9, r6, #4
 800c066:	2500      	movs	r5, #0
 800c068:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 800c06c:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
 800c070:	7a21      	ldrb	r1, [r4, #8]
 800c072:	4638      	mov	r0, r7
 800c074:	f7fc fe76 	bl	8008d64 <ucdr_serialize_uint8_t>
 800c078:	2800      	cmp	r0, #0
 800c07a:	d051      	beq.n	800c120 <uxr_serialize_AGENT_ActivityInfo+0xe0>
 800c07c:	7a23      	ldrb	r3, [r4, #8]
 800c07e:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800c082:	00c9      	lsls	r1, r1, #3
 800c084:	ea4f 0a45 	mov.w	sl, r5, lsl #1
 800c088:	2b03      	cmp	r3, #3
 800c08a:	d859      	bhi.n	800c140 <uxr_serialize_AGENT_ActivityInfo+0x100>
 800c08c:	e8df f003 	tbb	[pc, r3]
 800c090:	02122436 	.word	0x02122436
 800c094:	4449      	add	r1, r9
 800c096:	4638      	mov	r0, r7
 800c098:	6889      	ldr	r1, [r1, #8]
 800c09a:	f002 fd1d 	bl	800ead8 <ucdr_serialize_string>
 800c09e:	6873      	ldr	r3, [r6, #4]
 800c0a0:	3501      	adds	r5, #1
 800c0a2:	429d      	cmp	r5, r3
 800c0a4:	d240      	bcs.n	800c128 <uxr_serialize_AGENT_ActivityInfo+0xe8>
 800c0a6:	2800      	cmp	r0, #0
 800c0a8:	d1de      	bne.n	800c068 <uxr_serialize_AGENT_ActivityInfo+0x28>
 800c0aa:	f04f 0800 	mov.w	r8, #0
 800c0ae:	4640      	mov	r0, r8
 800c0b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0b4:	3108      	adds	r1, #8
 800c0b6:	4449      	add	r1, r9
 800c0b8:	2210      	movs	r2, #16
 800c0ba:	4638      	mov	r0, r7
 800c0bc:	f002 fbec 	bl	800e898 <ucdr_serialize_array_uint8_t>
 800c0c0:	44aa      	add	sl, r5
 800c0c2:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 800c0c6:	4604      	mov	r4, r0
 800c0c8:	f8da 101c 	ldr.w	r1, [sl, #28]
 800c0cc:	4638      	mov	r0, r7
 800c0ce:	f7fd f85f 	bl	8009190 <ucdr_serialize_uint32_t>
 800c0d2:	4020      	ands	r0, r4
 800c0d4:	b2c0      	uxtb	r0, r0
 800c0d6:	e7e2      	b.n	800c09e <uxr_serialize_AGENT_ActivityInfo+0x5e>
 800c0d8:	3108      	adds	r1, #8
 800c0da:	4449      	add	r1, r9
 800c0dc:	2204      	movs	r2, #4
 800c0de:	4638      	mov	r0, r7
 800c0e0:	f002 fbda 	bl	800e898 <ucdr_serialize_array_uint8_t>
 800c0e4:	44aa      	add	sl, r5
 800c0e6:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 800c0ea:	4604      	mov	r4, r0
 800c0ec:	f8ba 1010 	ldrh.w	r1, [sl, #16]
 800c0f0:	4638      	mov	r0, r7
 800c0f2:	f7fc fe63 	bl	8008dbc <ucdr_serialize_uint16_t>
 800c0f6:	4020      	ands	r0, r4
 800c0f8:	b2c0      	uxtb	r0, r0
 800c0fa:	e7d0      	b.n	800c09e <uxr_serialize_AGENT_ActivityInfo+0x5e>
 800c0fc:	3108      	adds	r1, #8
 800c0fe:	4449      	add	r1, r9
 800c100:	2202      	movs	r2, #2
 800c102:	4638      	mov	r0, r7
 800c104:	f002 fbc8 	bl	800e898 <ucdr_serialize_array_uint8_t>
 800c108:	44aa      	add	sl, r5
 800c10a:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 800c10e:	4604      	mov	r4, r0
 800c110:	f89a 100e 	ldrb.w	r1, [sl, #14]
 800c114:	4638      	mov	r0, r7
 800c116:	f7fc fe25 	bl	8008d64 <ucdr_serialize_uint8_t>
 800c11a:	4020      	ands	r0, r4
 800c11c:	b2c0      	uxtb	r0, r0
 800c11e:	e7be      	b.n	800c09e <uxr_serialize_AGENT_ActivityInfo+0x5e>
 800c120:	6873      	ldr	r3, [r6, #4]
 800c122:	3501      	adds	r5, #1
 800c124:	429d      	cmp	r5, r3
 800c126:	d3c0      	bcc.n	800c0aa <uxr_serialize_AGENT_ActivityInfo+0x6a>
 800c128:	ea08 0000 	and.w	r0, r8, r0
 800c12c:	fa5f f880 	uxtb.w	r8, r0
 800c130:	4640      	mov	r0, r8
 800c132:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c136:	ea08 0800 	and.w	r8, r8, r0
 800c13a:	fa5f f888 	uxtb.w	r8, r8
 800c13e:	e7b6      	b.n	800c0ae <uxr_serialize_AGENT_ActivityInfo+0x6e>
 800c140:	6873      	ldr	r3, [r6, #4]
 800c142:	3501      	adds	r5, #1
 800c144:	42ab      	cmp	r3, r5
 800c146:	f104 0418 	add.w	r4, r4, #24
 800c14a:	d891      	bhi.n	800c070 <uxr_serialize_AGENT_ActivityInfo+0x30>
 800c14c:	e7af      	b.n	800c0ae <uxr_serialize_AGENT_ActivityInfo+0x6e>
 800c14e:	bf00      	nop

0800c150 <uxr_serialize_ActivityInfoVariant>:
 800c150:	b570      	push	{r4, r5, r6, lr}
 800c152:	460d      	mov	r5, r1
 800c154:	7809      	ldrb	r1, [r1, #0]
 800c156:	4606      	mov	r6, r0
 800c158:	f7fc fe04 	bl	8008d64 <ucdr_serialize_uint8_t>
 800c15c:	b130      	cbz	r0, 800c16c <uxr_serialize_ActivityInfoVariant+0x1c>
 800c15e:	782b      	ldrb	r3, [r5, #0]
 800c160:	2b06      	cmp	r3, #6
 800c162:	d019      	beq.n	800c198 <uxr_serialize_ActivityInfoVariant+0x48>
 800c164:	2b0d      	cmp	r3, #13
 800c166:	d010      	beq.n	800c18a <uxr_serialize_ActivityInfoVariant+0x3a>
 800c168:	2b05      	cmp	r3, #5
 800c16a:	d000      	beq.n	800c16e <uxr_serialize_ActivityInfoVariant+0x1e>
 800c16c:	bd70      	pop	{r4, r5, r6, pc}
 800c16e:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800c172:	4630      	mov	r0, r6
 800c174:	f7fd fb32 	bl	80097dc <ucdr_serialize_int16_t>
 800c178:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 800c17c:	4604      	mov	r4, r0
 800c17e:	4630      	mov	r0, r6
 800c180:	f7fd fa5c 	bl	800963c <ucdr_serialize_uint64_t>
 800c184:	4020      	ands	r0, r4
 800c186:	b2c0      	uxtb	r0, r0
 800c188:	bd70      	pop	{r4, r5, r6, pc}
 800c18a:	f105 0108 	add.w	r1, r5, #8
 800c18e:	4630      	mov	r0, r6
 800c190:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c194:	f7ff bf54 	b.w	800c040 <uxr_serialize_AGENT_ActivityInfo>
 800c198:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800c19c:	4630      	mov	r0, r6
 800c19e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c1a2:	f7fd bb1b 	b.w	80097dc <ucdr_serialize_int16_t>
 800c1a6:	bf00      	nop

0800c1a8 <uxr_deserialize_BaseObjectReply>:
 800c1a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1ac:	2202      	movs	r2, #2
 800c1ae:	4606      	mov	r6, r0
 800c1b0:	460f      	mov	r7, r1
 800c1b2:	f002 fbd5 	bl	800e960 <ucdr_deserialize_array_uint8_t>
 800c1b6:	2202      	movs	r2, #2
 800c1b8:	1cb9      	adds	r1, r7, #2
 800c1ba:	4605      	mov	r5, r0
 800c1bc:	4630      	mov	r0, r6
 800c1be:	f002 fbcf 	bl	800e960 <ucdr_deserialize_array_uint8_t>
 800c1c2:	1d39      	adds	r1, r7, #4
 800c1c4:	4680      	mov	r8, r0
 800c1c6:	4630      	mov	r0, r6
 800c1c8:	f7fc fde2 	bl	8008d90 <ucdr_deserialize_uint8_t>
 800c1cc:	1d79      	adds	r1, r7, #5
 800c1ce:	4604      	mov	r4, r0
 800c1d0:	4630      	mov	r0, r6
 800c1d2:	f7fc fddd 	bl	8008d90 <ucdr_deserialize_uint8_t>
 800c1d6:	ea05 0508 	and.w	r5, r5, r8
 800c1da:	402c      	ands	r4, r5
 800c1dc:	4020      	ands	r0, r4
 800c1de:	b2c0      	uxtb	r0, r0
 800c1e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c1e4 <uxr_serialize_ReadSpecification>:
 800c1e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1e8:	460e      	mov	r6, r1
 800c1ea:	7809      	ldrb	r1, [r1, #0]
 800c1ec:	4607      	mov	r7, r0
 800c1ee:	f7fc fdb9 	bl	8008d64 <ucdr_serialize_uint8_t>
 800c1f2:	7871      	ldrb	r1, [r6, #1]
 800c1f4:	4604      	mov	r4, r0
 800c1f6:	4638      	mov	r0, r7
 800c1f8:	f7fc fdb4 	bl	8008d64 <ucdr_serialize_uint8_t>
 800c1fc:	78b1      	ldrb	r1, [r6, #2]
 800c1fe:	4004      	ands	r4, r0
 800c200:	4638      	mov	r0, r7
 800c202:	f7fc fd7f 	bl	8008d04 <ucdr_serialize_bool>
 800c206:	78b3      	ldrb	r3, [r6, #2]
 800c208:	b2e4      	uxtb	r4, r4
 800c20a:	4004      	ands	r4, r0
 800c20c:	b94b      	cbnz	r3, 800c222 <uxr_serialize_ReadSpecification+0x3e>
 800c20e:	7a31      	ldrb	r1, [r6, #8]
 800c210:	4638      	mov	r0, r7
 800c212:	f7fc fd77 	bl	8008d04 <ucdr_serialize_bool>
 800c216:	7a33      	ldrb	r3, [r6, #8]
 800c218:	4004      	ands	r4, r0
 800c21a:	b943      	cbnz	r3, 800c22e <uxr_serialize_ReadSpecification+0x4a>
 800c21c:	4620      	mov	r0, r4
 800c21e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c222:	6871      	ldr	r1, [r6, #4]
 800c224:	4638      	mov	r0, r7
 800c226:	f002 fc57 	bl	800ead8 <ucdr_serialize_string>
 800c22a:	4004      	ands	r4, r0
 800c22c:	e7ef      	b.n	800c20e <uxr_serialize_ReadSpecification+0x2a>
 800c22e:	8971      	ldrh	r1, [r6, #10]
 800c230:	4638      	mov	r0, r7
 800c232:	f7fc fdc3 	bl	8008dbc <ucdr_serialize_uint16_t>
 800c236:	89b1      	ldrh	r1, [r6, #12]
 800c238:	4605      	mov	r5, r0
 800c23a:	4638      	mov	r0, r7
 800c23c:	f7fc fdbe 	bl	8008dbc <ucdr_serialize_uint16_t>
 800c240:	89f1      	ldrh	r1, [r6, #14]
 800c242:	4005      	ands	r5, r0
 800c244:	4638      	mov	r0, r7
 800c246:	f7fc fdb9 	bl	8008dbc <ucdr_serialize_uint16_t>
 800c24a:	8a31      	ldrh	r1, [r6, #16]
 800c24c:	4680      	mov	r8, r0
 800c24e:	4638      	mov	r0, r7
 800c250:	f7fc fdb4 	bl	8008dbc <ucdr_serialize_uint16_t>
 800c254:	b2ed      	uxtb	r5, r5
 800c256:	4025      	ands	r5, r4
 800c258:	ea08 0505 	and.w	r5, r8, r5
 800c25c:	ea00 0405 	and.w	r4, r0, r5
 800c260:	4620      	mov	r0, r4
 800c262:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c266:	bf00      	nop

0800c268 <uxr_serialize_CREATE_CLIENT_Payload>:
 800c268:	f7ff bb26 	b.w	800b8b8 <uxr_serialize_CLIENT_Representation>

0800c26c <uxr_serialize_CREATE_Payload>:
 800c26c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c26e:	2202      	movs	r2, #2
 800c270:	4606      	mov	r6, r0
 800c272:	460d      	mov	r5, r1
 800c274:	f002 fb10 	bl	800e898 <ucdr_serialize_array_uint8_t>
 800c278:	1ca9      	adds	r1, r5, #2
 800c27a:	4604      	mov	r4, r0
 800c27c:	2202      	movs	r2, #2
 800c27e:	4630      	mov	r0, r6
 800c280:	f002 fb0a 	bl	800e898 <ucdr_serialize_array_uint8_t>
 800c284:	7929      	ldrb	r1, [r5, #4]
 800c286:	4607      	mov	r7, r0
 800c288:	4630      	mov	r0, r6
 800c28a:	f7fc fd6b 	bl	8008d64 <ucdr_serialize_uint8_t>
 800c28e:	b328      	cbz	r0, 800c2dc <uxr_serialize_CREATE_Payload+0x70>
 800c290:	792b      	ldrb	r3, [r5, #4]
 800c292:	403c      	ands	r4, r7
 800c294:	3b01      	subs	r3, #1
 800c296:	b2e4      	uxtb	r4, r4
 800c298:	2b0d      	cmp	r3, #13
 800c29a:	d81d      	bhi.n	800c2d8 <uxr_serialize_CREATE_Payload+0x6c>
 800c29c:	e8df f003 	tbb	[pc, r3]
 800c2a0:	32320753 	.word	0x32320753
 800c2a4:	07070707 	.word	0x07070707
 800c2a8:	2121211c 	.word	0x2121211c
 800c2ac:	684c      	.short	0x684c
 800c2ae:	7a29      	ldrb	r1, [r5, #8]
 800c2b0:	4630      	mov	r0, r6
 800c2b2:	f7fc fd57 	bl	8008d64 <ucdr_serialize_uint8_t>
 800c2b6:	4607      	mov	r7, r0
 800c2b8:	b130      	cbz	r0, 800c2c8 <uxr_serialize_CREATE_Payload+0x5c>
 800c2ba:	7a2b      	ldrb	r3, [r5, #8]
 800c2bc:	2b02      	cmp	r3, #2
 800c2be:	d035      	beq.n	800c32c <uxr_serialize_CREATE_Payload+0xc0>
 800c2c0:	2b03      	cmp	r3, #3
 800c2c2:	d02b      	beq.n	800c31c <uxr_serialize_CREATE_Payload+0xb0>
 800c2c4:	2b01      	cmp	r3, #1
 800c2c6:	d031      	beq.n	800c32c <uxr_serialize_CREATE_Payload+0xc0>
 800c2c8:	f505 7104 	add.w	r1, r5, #528	; 0x210
 800c2cc:	4630      	mov	r0, r6
 800c2ce:	2202      	movs	r2, #2
 800c2d0:	f002 fae2 	bl	800e898 <ucdr_serialize_array_uint8_t>
 800c2d4:	4038      	ands	r0, r7
 800c2d6:	4004      	ands	r4, r0
 800c2d8:	4620      	mov	r0, r4
 800c2da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c2dc:	2400      	movs	r4, #0
 800c2de:	4620      	mov	r0, r4
 800c2e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c2e2:	7a29      	ldrb	r1, [r5, #8]
 800c2e4:	4630      	mov	r0, r6
 800c2e6:	f7fc fd3d 	bl	8008d64 <ucdr_serialize_uint8_t>
 800c2ea:	2800      	cmp	r0, #0
 800c2ec:	d0f6      	beq.n	800c2dc <uxr_serialize_CREATE_Payload+0x70>
 800c2ee:	7a2b      	ldrb	r3, [r5, #8]
 800c2f0:	2b01      	cmp	r3, #1
 800c2f2:	d001      	beq.n	800c2f8 <uxr_serialize_CREATE_Payload+0x8c>
 800c2f4:	2b02      	cmp	r3, #2
 800c2f6:	d1ef      	bne.n	800c2d8 <uxr_serialize_CREATE_Payload+0x6c>
 800c2f8:	68e9      	ldr	r1, [r5, #12]
 800c2fa:	4630      	mov	r0, r6
 800c2fc:	f002 fbec 	bl	800ead8 <ucdr_serialize_string>
 800c300:	4004      	ands	r4, r0
 800c302:	e7e9      	b.n	800c2d8 <uxr_serialize_CREATE_Payload+0x6c>
 800c304:	7a29      	ldrb	r1, [r5, #8]
 800c306:	4630      	mov	r0, r6
 800c308:	f7fc fd2c 	bl	8008d64 <ucdr_serialize_uint8_t>
 800c30c:	4607      	mov	r7, r0
 800c30e:	2800      	cmp	r0, #0
 800c310:	d0da      	beq.n	800c2c8 <uxr_serialize_CREATE_Payload+0x5c>
 800c312:	7a2b      	ldrb	r3, [r5, #8]
 800c314:	2b02      	cmp	r3, #2
 800c316:	d009      	beq.n	800c32c <uxr_serialize_CREATE_Payload+0xc0>
 800c318:	2b03      	cmp	r3, #3
 800c31a:	d1d5      	bne.n	800c2c8 <uxr_serialize_CREATE_Payload+0x5c>
 800c31c:	68ea      	ldr	r2, [r5, #12]
 800c31e:	f105 0110 	add.w	r1, r5, #16
 800c322:	4630      	mov	r0, r6
 800c324:	f002 fbac 	bl	800ea80 <ucdr_serialize_sequence_uint8_t>
 800c328:	4607      	mov	r7, r0
 800c32a:	e7cd      	b.n	800c2c8 <uxr_serialize_CREATE_Payload+0x5c>
 800c32c:	68e9      	ldr	r1, [r5, #12]
 800c32e:	4630      	mov	r0, r6
 800c330:	f002 fbd2 	bl	800ead8 <ucdr_serialize_string>
 800c334:	4607      	mov	r7, r0
 800c336:	e7c7      	b.n	800c2c8 <uxr_serialize_CREATE_Payload+0x5c>
 800c338:	f105 0108 	add.w	r1, r5, #8
 800c33c:	4630      	mov	r0, r6
 800c33e:	f7ff fb81 	bl	800ba44 <uxr_serialize_AGENT_Representation>
 800c342:	4004      	ands	r4, r0
 800c344:	e7c8      	b.n	800c2d8 <uxr_serialize_CREATE_Payload+0x6c>
 800c346:	7a29      	ldrb	r1, [r5, #8]
 800c348:	4630      	mov	r0, r6
 800c34a:	f7fc fd0b 	bl	8008d64 <ucdr_serialize_uint8_t>
 800c34e:	4607      	mov	r7, r0
 800c350:	b130      	cbz	r0, 800c360 <uxr_serialize_CREATE_Payload+0xf4>
 800c352:	7a2b      	ldrb	r3, [r5, #8]
 800c354:	2b02      	cmp	r3, #2
 800c356:	d012      	beq.n	800c37e <uxr_serialize_CREATE_Payload+0x112>
 800c358:	2b03      	cmp	r3, #3
 800c35a:	d016      	beq.n	800c38a <uxr_serialize_CREATE_Payload+0x11e>
 800c35c:	2b01      	cmp	r3, #1
 800c35e:	d00e      	beq.n	800c37e <uxr_serialize_CREATE_Payload+0x112>
 800c360:	f9b5 1210 	ldrsh.w	r1, [r5, #528]	; 0x210
 800c364:	4630      	mov	r0, r6
 800c366:	f7fd fa39 	bl	80097dc <ucdr_serialize_int16_t>
 800c36a:	4038      	ands	r0, r7
 800c36c:	4004      	ands	r4, r0
 800c36e:	e7b3      	b.n	800c2d8 <uxr_serialize_CREATE_Payload+0x6c>
 800c370:	f105 0108 	add.w	r1, r5, #8
 800c374:	4630      	mov	r0, r6
 800c376:	f7ff fa9f 	bl	800b8b8 <uxr_serialize_CLIENT_Representation>
 800c37a:	4004      	ands	r4, r0
 800c37c:	e7ac      	b.n	800c2d8 <uxr_serialize_CREATE_Payload+0x6c>
 800c37e:	68e9      	ldr	r1, [r5, #12]
 800c380:	4630      	mov	r0, r6
 800c382:	f002 fba9 	bl	800ead8 <ucdr_serialize_string>
 800c386:	4607      	mov	r7, r0
 800c388:	e7ea      	b.n	800c360 <uxr_serialize_CREATE_Payload+0xf4>
 800c38a:	68ea      	ldr	r2, [r5, #12]
 800c38c:	f105 0110 	add.w	r1, r5, #16
 800c390:	4630      	mov	r0, r6
 800c392:	f002 fb75 	bl	800ea80 <ucdr_serialize_sequence_uint8_t>
 800c396:	4607      	mov	r7, r0
 800c398:	e7e2      	b.n	800c360 <uxr_serialize_CREATE_Payload+0xf4>
 800c39a:	bf00      	nop

0800c39c <uxr_deserialize_GET_INFO_Payload>:
 800c39c:	b570      	push	{r4, r5, r6, lr}
 800c39e:	2202      	movs	r2, #2
 800c3a0:	4605      	mov	r5, r0
 800c3a2:	460e      	mov	r6, r1
 800c3a4:	f002 fadc 	bl	800e960 <ucdr_deserialize_array_uint8_t>
 800c3a8:	1cb1      	adds	r1, r6, #2
 800c3aa:	2202      	movs	r2, #2
 800c3ac:	4604      	mov	r4, r0
 800c3ae:	4628      	mov	r0, r5
 800c3b0:	f002 fad6 	bl	800e960 <ucdr_deserialize_array_uint8_t>
 800c3b4:	1d31      	adds	r1, r6, #4
 800c3b6:	4004      	ands	r4, r0
 800c3b8:	4628      	mov	r0, r5
 800c3ba:	f7fd f819 	bl	80093f0 <ucdr_deserialize_uint32_t>
 800c3be:	b2e4      	uxtb	r4, r4
 800c3c0:	4020      	ands	r0, r4
 800c3c2:	bd70      	pop	{r4, r5, r6, pc}

0800c3c4 <uxr_serialize_DELETE_Payload>:
 800c3c4:	b570      	push	{r4, r5, r6, lr}
 800c3c6:	2202      	movs	r2, #2
 800c3c8:	4605      	mov	r5, r0
 800c3ca:	460e      	mov	r6, r1
 800c3cc:	f002 fa64 	bl	800e898 <ucdr_serialize_array_uint8_t>
 800c3d0:	1cb1      	adds	r1, r6, #2
 800c3d2:	4604      	mov	r4, r0
 800c3d4:	2202      	movs	r2, #2
 800c3d6:	4628      	mov	r0, r5
 800c3d8:	f002 fa5e 	bl	800e898 <ucdr_serialize_array_uint8_t>
 800c3dc:	4020      	ands	r0, r4
 800c3de:	b2c0      	uxtb	r0, r0
 800c3e0:	bd70      	pop	{r4, r5, r6, pc}
 800c3e2:	bf00      	nop

0800c3e4 <uxr_deserialize_STATUS_AGENT_Payload>:
 800c3e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c3e8:	4606      	mov	r6, r0
 800c3ea:	460f      	mov	r7, r1
 800c3ec:	f7fc fcd0 	bl	8008d90 <ucdr_deserialize_uint8_t>
 800c3f0:	1c79      	adds	r1, r7, #1
 800c3f2:	4605      	mov	r5, r0
 800c3f4:	4630      	mov	r0, r6
 800c3f6:	f7fc fccb 	bl	8008d90 <ucdr_deserialize_uint8_t>
 800c3fa:	1d39      	adds	r1, r7, #4
 800c3fc:	4681      	mov	r9, r0
 800c3fe:	2204      	movs	r2, #4
 800c400:	4630      	mov	r0, r6
 800c402:	f002 faad 	bl	800e960 <ucdr_deserialize_array_uint8_t>
 800c406:	f107 0108 	add.w	r1, r7, #8
 800c40a:	4604      	mov	r4, r0
 800c40c:	2202      	movs	r2, #2
 800c40e:	4630      	mov	r0, r6
 800c410:	f002 faa6 	bl	800e960 <ucdr_deserialize_array_uint8_t>
 800c414:	f107 010a 	add.w	r1, r7, #10
 800c418:	4680      	mov	r8, r0
 800c41a:	2202      	movs	r2, #2
 800c41c:	4630      	mov	r0, r6
 800c41e:	f002 fa9f 	bl	800e960 <ucdr_deserialize_array_uint8_t>
 800c422:	ea05 0509 	and.w	r5, r5, r9
 800c426:	b2ed      	uxtb	r5, r5
 800c428:	402c      	ands	r4, r5
 800c42a:	f107 010c 	add.w	r1, r7, #12
 800c42e:	4605      	mov	r5, r0
 800c430:	4630      	mov	r0, r6
 800c432:	f7fc fc7d 	bl	8008d30 <ucdr_deserialize_bool>
 800c436:	ea08 0404 	and.w	r4, r8, r4
 800c43a:	4025      	ands	r5, r4
 800c43c:	4028      	ands	r0, r5
 800c43e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c442:	bf00      	nop

0800c444 <uxr_deserialize_STATUS_Payload>:
 800c444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c448:	2202      	movs	r2, #2
 800c44a:	4606      	mov	r6, r0
 800c44c:	460f      	mov	r7, r1
 800c44e:	f002 fa87 	bl	800e960 <ucdr_deserialize_array_uint8_t>
 800c452:	2202      	movs	r2, #2
 800c454:	1cb9      	adds	r1, r7, #2
 800c456:	4605      	mov	r5, r0
 800c458:	4630      	mov	r0, r6
 800c45a:	f002 fa81 	bl	800e960 <ucdr_deserialize_array_uint8_t>
 800c45e:	1d39      	adds	r1, r7, #4
 800c460:	4680      	mov	r8, r0
 800c462:	4630      	mov	r0, r6
 800c464:	f7fc fc94 	bl	8008d90 <ucdr_deserialize_uint8_t>
 800c468:	1d79      	adds	r1, r7, #5
 800c46a:	4604      	mov	r4, r0
 800c46c:	4630      	mov	r0, r6
 800c46e:	f7fc fc8f 	bl	8008d90 <ucdr_deserialize_uint8_t>
 800c472:	ea05 0508 	and.w	r5, r5, r8
 800c476:	402c      	ands	r4, r5
 800c478:	4020      	ands	r0, r4
 800c47a:	b2c0      	uxtb	r0, r0
 800c47c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c480 <uxr_serialize_INFO_Payload>:
 800c480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c484:	2202      	movs	r2, #2
 800c486:	460c      	mov	r4, r1
 800c488:	4605      	mov	r5, r0
 800c48a:	f002 fa05 	bl	800e898 <ucdr_serialize_array_uint8_t>
 800c48e:	2202      	movs	r2, #2
 800c490:	4680      	mov	r8, r0
 800c492:	1ca1      	adds	r1, r4, #2
 800c494:	4628      	mov	r0, r5
 800c496:	f002 f9ff 	bl	800e898 <ucdr_serialize_array_uint8_t>
 800c49a:	7921      	ldrb	r1, [r4, #4]
 800c49c:	4607      	mov	r7, r0
 800c49e:	4628      	mov	r0, r5
 800c4a0:	f7fc fc60 	bl	8008d64 <ucdr_serialize_uint8_t>
 800c4a4:	7961      	ldrb	r1, [r4, #5]
 800c4a6:	4606      	mov	r6, r0
 800c4a8:	4628      	mov	r0, r5
 800c4aa:	f7fc fc5b 	bl	8008d64 <ucdr_serialize_uint8_t>
 800c4ae:	ea08 0807 	and.w	r8, r8, r7
 800c4b2:	ea06 0608 	and.w	r6, r6, r8
 800c4b6:	4006      	ands	r6, r0
 800c4b8:	7a21      	ldrb	r1, [r4, #8]
 800c4ba:	4628      	mov	r0, r5
 800c4bc:	f7fc fc22 	bl	8008d04 <ucdr_serialize_bool>
 800c4c0:	7a23      	ldrb	r3, [r4, #8]
 800c4c2:	b2f7      	uxtb	r7, r6
 800c4c4:	4606      	mov	r6, r0
 800c4c6:	b96b      	cbnz	r3, 800c4e4 <uxr_serialize_INFO_Payload+0x64>
 800c4c8:	f894 121c 	ldrb.w	r1, [r4, #540]	; 0x21c
 800c4cc:	4628      	mov	r0, r5
 800c4ce:	f7fc fc19 	bl	8008d04 <ucdr_serialize_bool>
 800c4d2:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
 800c4d6:	4030      	ands	r0, r6
 800c4d8:	b2c6      	uxtb	r6, r0
 800c4da:	b983      	cbnz	r3, 800c4fe <uxr_serialize_INFO_Payload+0x7e>
 800c4dc:	ea06 0007 	and.w	r0, r6, r7
 800c4e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4e4:	7b21      	ldrb	r1, [r4, #12]
 800c4e6:	4628      	mov	r0, r5
 800c4e8:	f7fc fc3c 	bl	8008d64 <ucdr_serialize_uint8_t>
 800c4ec:	b188      	cbz	r0, 800c512 <uxr_serialize_INFO_Payload+0x92>
 800c4ee:	f104 010c 	add.w	r1, r4, #12
 800c4f2:	4628      	mov	r0, r5
 800c4f4:	f7ff faf2 	bl	800badc <uxr_serialize_ObjectVariant.part.0>
 800c4f8:	4030      	ands	r0, r6
 800c4fa:	b2c6      	uxtb	r6, r0
 800c4fc:	e7e4      	b.n	800c4c8 <uxr_serialize_INFO_Payload+0x48>
 800c4fe:	f504 7108 	add.w	r1, r4, #544	; 0x220
 800c502:	4628      	mov	r0, r5
 800c504:	f7ff fe24 	bl	800c150 <uxr_serialize_ActivityInfoVariant>
 800c508:	4006      	ands	r6, r0
 800c50a:	ea06 0007 	and.w	r0, r6, r7
 800c50e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c512:	4606      	mov	r6, r0
 800c514:	e7d8      	b.n	800c4c8 <uxr_serialize_INFO_Payload+0x48>
 800c516:	bf00      	nop

0800c518 <uxr_serialize_READ_DATA_Payload>:
 800c518:	b570      	push	{r4, r5, r6, lr}
 800c51a:	2202      	movs	r2, #2
 800c51c:	4605      	mov	r5, r0
 800c51e:	460e      	mov	r6, r1
 800c520:	f002 f9ba 	bl	800e898 <ucdr_serialize_array_uint8_t>
 800c524:	1cb1      	adds	r1, r6, #2
 800c526:	2202      	movs	r2, #2
 800c528:	4604      	mov	r4, r0
 800c52a:	4628      	mov	r0, r5
 800c52c:	f002 f9b4 	bl	800e898 <ucdr_serialize_array_uint8_t>
 800c530:	1d31      	adds	r1, r6, #4
 800c532:	4004      	ands	r4, r0
 800c534:	4628      	mov	r0, r5
 800c536:	f7ff fe55 	bl	800c1e4 <uxr_serialize_ReadSpecification>
 800c53a:	b2e4      	uxtb	r4, r4
 800c53c:	4020      	ands	r0, r4
 800c53e:	bd70      	pop	{r4, r5, r6, pc}

0800c540 <uxr_serialize_WRITE_DATA_Payload_Data>:
 800c540:	b570      	push	{r4, r5, r6, lr}
 800c542:	2202      	movs	r2, #2
 800c544:	4605      	mov	r5, r0
 800c546:	460e      	mov	r6, r1
 800c548:	f002 f9a6 	bl	800e898 <ucdr_serialize_array_uint8_t>
 800c54c:	1cb1      	adds	r1, r6, #2
 800c54e:	4604      	mov	r4, r0
 800c550:	2202      	movs	r2, #2
 800c552:	4628      	mov	r0, r5
 800c554:	f002 f9a0 	bl	800e898 <ucdr_serialize_array_uint8_t>
 800c558:	4020      	ands	r0, r4
 800c55a:	b2c0      	uxtb	r0, r0
 800c55c:	bd70      	pop	{r4, r5, r6, pc}
 800c55e:	bf00      	nop

0800c560 <uxr_serialize_ACKNACK_Payload>:
 800c560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c562:	460f      	mov	r7, r1
 800c564:	460e      	mov	r6, r1
 800c566:	f837 1b02 	ldrh.w	r1, [r7], #2
 800c56a:	4605      	mov	r5, r0
 800c56c:	f7fc fc26 	bl	8008dbc <ucdr_serialize_uint16_t>
 800c570:	4639      	mov	r1, r7
 800c572:	2202      	movs	r2, #2
 800c574:	4604      	mov	r4, r0
 800c576:	4628      	mov	r0, r5
 800c578:	f002 f98e 	bl	800e898 <ucdr_serialize_array_uint8_t>
 800c57c:	7931      	ldrb	r1, [r6, #4]
 800c57e:	4004      	ands	r4, r0
 800c580:	4628      	mov	r0, r5
 800c582:	f7fc fbef 	bl	8008d64 <ucdr_serialize_uint8_t>
 800c586:	b2e4      	uxtb	r4, r4
 800c588:	4020      	ands	r0, r4
 800c58a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c58c <uxr_deserialize_ACKNACK_Payload>:
 800c58c:	b570      	push	{r4, r5, r6, lr}
 800c58e:	4605      	mov	r5, r0
 800c590:	460e      	mov	r6, r1
 800c592:	f7fc fd13 	bl	8008fbc <ucdr_deserialize_uint16_t>
 800c596:	1cb1      	adds	r1, r6, #2
 800c598:	2202      	movs	r2, #2
 800c59a:	4604      	mov	r4, r0
 800c59c:	4628      	mov	r0, r5
 800c59e:	f002 f9df 	bl	800e960 <ucdr_deserialize_array_uint8_t>
 800c5a2:	1d31      	adds	r1, r6, #4
 800c5a4:	4004      	ands	r4, r0
 800c5a6:	4628      	mov	r0, r5
 800c5a8:	f7fc fbf2 	bl	8008d90 <ucdr_deserialize_uint8_t>
 800c5ac:	b2e4      	uxtb	r4, r4
 800c5ae:	4020      	ands	r0, r4
 800c5b0:	bd70      	pop	{r4, r5, r6, pc}
 800c5b2:	bf00      	nop

0800c5b4 <uxr_serialize_HEARTBEAT_Payload>:
 800c5b4:	b570      	push	{r4, r5, r6, lr}
 800c5b6:	460d      	mov	r5, r1
 800c5b8:	8809      	ldrh	r1, [r1, #0]
 800c5ba:	4606      	mov	r6, r0
 800c5bc:	f7fc fbfe 	bl	8008dbc <ucdr_serialize_uint16_t>
 800c5c0:	8869      	ldrh	r1, [r5, #2]
 800c5c2:	4604      	mov	r4, r0
 800c5c4:	4630      	mov	r0, r6
 800c5c6:	f7fc fbf9 	bl	8008dbc <ucdr_serialize_uint16_t>
 800c5ca:	7929      	ldrb	r1, [r5, #4]
 800c5cc:	4004      	ands	r4, r0
 800c5ce:	4630      	mov	r0, r6
 800c5d0:	f7fc fbc8 	bl	8008d64 <ucdr_serialize_uint8_t>
 800c5d4:	b2e4      	uxtb	r4, r4
 800c5d6:	4020      	ands	r0, r4
 800c5d8:	bd70      	pop	{r4, r5, r6, pc}
 800c5da:	bf00      	nop

0800c5dc <uxr_deserialize_HEARTBEAT_Payload>:
 800c5dc:	b570      	push	{r4, r5, r6, lr}
 800c5de:	4605      	mov	r5, r0
 800c5e0:	460e      	mov	r6, r1
 800c5e2:	f7fc fceb 	bl	8008fbc <ucdr_deserialize_uint16_t>
 800c5e6:	1cb1      	adds	r1, r6, #2
 800c5e8:	4604      	mov	r4, r0
 800c5ea:	4628      	mov	r0, r5
 800c5ec:	f7fc fce6 	bl	8008fbc <ucdr_deserialize_uint16_t>
 800c5f0:	1d31      	adds	r1, r6, #4
 800c5f2:	4004      	ands	r4, r0
 800c5f4:	4628      	mov	r0, r5
 800c5f6:	f7fc fbcb 	bl	8008d90 <ucdr_deserialize_uint8_t>
 800c5fa:	b2e4      	uxtb	r4, r4
 800c5fc:	4020      	ands	r0, r4
 800c5fe:	bd70      	pop	{r4, r5, r6, pc}

0800c600 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 800c600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c604:	4605      	mov	r5, r0
 800c606:	460e      	mov	r6, r1
 800c608:	f7fd fa74 	bl	8009af4 <ucdr_deserialize_int32_t>
 800c60c:	1d31      	adds	r1, r6, #4
 800c60e:	4607      	mov	r7, r0
 800c610:	4628      	mov	r0, r5
 800c612:	f7fc feed 	bl	80093f0 <ucdr_deserialize_uint32_t>
 800c616:	f106 0108 	add.w	r1, r6, #8
 800c61a:	4680      	mov	r8, r0
 800c61c:	4628      	mov	r0, r5
 800c61e:	f7fd fa69 	bl	8009af4 <ucdr_deserialize_int32_t>
 800c622:	f106 010c 	add.w	r1, r6, #12
 800c626:	4604      	mov	r4, r0
 800c628:	4628      	mov	r0, r5
 800c62a:	f7fc fee1 	bl	80093f0 <ucdr_deserialize_uint32_t>
 800c62e:	ea07 0708 	and.w	r7, r7, r8
 800c632:	403c      	ands	r4, r7
 800c634:	f106 0110 	add.w	r1, r6, #16
 800c638:	4004      	ands	r4, r0
 800c63a:	4628      	mov	r0, r5
 800c63c:	f7fd fa5a 	bl	8009af4 <ucdr_deserialize_int32_t>
 800c640:	f106 0114 	add.w	r1, r6, #20
 800c644:	4603      	mov	r3, r0
 800c646:	4628      	mov	r0, r5
 800c648:	461d      	mov	r5, r3
 800c64a:	f7fc fed1 	bl	80093f0 <ucdr_deserialize_uint32_t>
 800c64e:	b2e4      	uxtb	r4, r4
 800c650:	402c      	ands	r4, r5
 800c652:	4020      	ands	r0, r4
 800c654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c658 <uxr_deserialize_SampleIdentity>:
 800c658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c65c:	220c      	movs	r2, #12
 800c65e:	4604      	mov	r4, r0
 800c660:	460d      	mov	r5, r1
 800c662:	f002 f97d 	bl	800e960 <ucdr_deserialize_array_uint8_t>
 800c666:	2203      	movs	r2, #3
 800c668:	f105 010c 	add.w	r1, r5, #12
 800c66c:	4607      	mov	r7, r0
 800c66e:	4620      	mov	r0, r4
 800c670:	f002 f976 	bl	800e960 <ucdr_deserialize_array_uint8_t>
 800c674:	f105 010f 	add.w	r1, r5, #15
 800c678:	4680      	mov	r8, r0
 800c67a:	4620      	mov	r0, r4
 800c67c:	f7fc fb88 	bl	8008d90 <ucdr_deserialize_uint8_t>
 800c680:	f105 0110 	add.w	r1, r5, #16
 800c684:	4606      	mov	r6, r0
 800c686:	4620      	mov	r0, r4
 800c688:	f7fd fa34 	bl	8009af4 <ucdr_deserialize_int32_t>
 800c68c:	f105 0114 	add.w	r1, r5, #20
 800c690:	4603      	mov	r3, r0
 800c692:	4620      	mov	r0, r4
 800c694:	ea07 0708 	and.w	r7, r7, r8
 800c698:	461c      	mov	r4, r3
 800c69a:	f7fc fea9 	bl	80093f0 <ucdr_deserialize_uint32_t>
 800c69e:	403e      	ands	r6, r7
 800c6a0:	4034      	ands	r4, r6
 800c6a2:	4020      	ands	r0, r4
 800c6a4:	b2c0      	uxtb	r0, r0
 800c6a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6aa:	bf00      	nop

0800c6ac <rcl_convert_rmw_ret_to_rcl_ret>:
 800c6ac:	280b      	cmp	r0, #11
 800c6ae:	dc0d      	bgt.n	800c6cc <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 800c6b0:	2800      	cmp	r0, #0
 800c6b2:	db09      	blt.n	800c6c8 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800c6b4:	280b      	cmp	r0, #11
 800c6b6:	d807      	bhi.n	800c6c8 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800c6b8:	e8df f000 	tbb	[pc, r0]
 800c6bc:	07060607 	.word	0x07060607
 800c6c0:	06060606 	.word	0x06060606
 800c6c4:	07070606 	.word	0x07070606
 800c6c8:	2001      	movs	r0, #1
 800c6ca:	4770      	bx	lr
 800c6cc:	28cb      	cmp	r0, #203	; 0xcb
 800c6ce:	bf18      	it	ne
 800c6d0:	2001      	movne	r0, #1
 800c6d2:	4770      	bx	lr

0800c6d4 <rcl_get_zero_initialized_context>:
 800c6d4:	4a03      	ldr	r2, [pc, #12]	; (800c6e4 <rcl_get_zero_initialized_context+0x10>)
 800c6d6:	4603      	mov	r3, r0
 800c6d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c6dc:	e883 0003 	stmia.w	r3, {r0, r1}
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	4770      	bx	lr
 800c6e4:	08012074 	.word	0x08012074

0800c6e8 <rcl_context_is_valid>:
 800c6e8:	b118      	cbz	r0, 800c6f2 <rcl_context_is_valid+0xa>
 800c6ea:	6840      	ldr	r0, [r0, #4]
 800c6ec:	3800      	subs	r0, #0
 800c6ee:	bf18      	it	ne
 800c6f0:	2001      	movne	r0, #1
 800c6f2:	4770      	bx	lr

0800c6f4 <__cleanup_context>:
 800c6f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c6f8:	4606      	mov	r6, r0
 800c6fa:	6800      	ldr	r0, [r0, #0]
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	6073      	str	r3, [r6, #4]
 800c700:	2800      	cmp	r0, #0
 800c702:	d04d      	beq.n	800c7a0 <__cleanup_context+0xac>
 800c704:	6947      	ldr	r7, [r0, #20]
 800c706:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800c70a:	f8d0 9010 	ldr.w	r9, [r0, #16]
 800c70e:	b137      	cbz	r7, 800c71e <__cleanup_context+0x2a>
 800c710:	3014      	adds	r0, #20
 800c712:	f000 fb1d 	bl	800cd50 <rcl_init_options_fini>
 800c716:	4607      	mov	r7, r0
 800c718:	2800      	cmp	r0, #0
 800c71a:	d148      	bne.n	800c7ae <__cleanup_context+0xba>
 800c71c:	6830      	ldr	r0, [r6, #0]
 800c71e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800c720:	b143      	cbz	r3, 800c734 <__cleanup_context+0x40>
 800c722:	3028      	adds	r0, #40	; 0x28
 800c724:	f001 fdd4 	bl	800e2d0 <rmw_context_fini>
 800c728:	b118      	cbz	r0, 800c732 <__cleanup_context+0x3e>
 800c72a:	2f00      	cmp	r7, #0
 800c72c:	d042      	beq.n	800c7b4 <__cleanup_context+0xc0>
 800c72e:	f7fb fca5 	bl	800807c <rcutils_reset_error>
 800c732:	6830      	ldr	r0, [r6, #0]
 800c734:	f8d0 c020 	ldr.w	ip, [r0, #32]
 800c738:	f1bc 0f00 	cmp.w	ip, #0
 800c73c:	d01c      	beq.n	800c778 <__cleanup_context+0x84>
 800c73e:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 800c742:	2a01      	cmp	r2, #1
 800c744:	f173 0100 	sbcs.w	r1, r3, #0
 800c748:	db12      	blt.n	800c770 <__cleanup_context+0x7c>
 800c74a:	2400      	movs	r4, #0
 800c74c:	2500      	movs	r5, #0
 800c74e:	f85c 0024 	ldr.w	r0, [ip, r4, lsl #2]
 800c752:	4649      	mov	r1, r9
 800c754:	b1c0      	cbz	r0, 800c788 <__cleanup_context+0x94>
 800c756:	47c0      	blx	r8
 800c758:	6831      	ldr	r1, [r6, #0]
 800c75a:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 800c75e:	3401      	adds	r4, #1
 800c760:	f145 0500 	adc.w	r5, r5, #0
 800c764:	4294      	cmp	r4, r2
 800c766:	f8d1 c020 	ldr.w	ip, [r1, #32]
 800c76a:	eb75 0103 	sbcs.w	r1, r5, r3
 800c76e:	dbee      	blt.n	800c74e <__cleanup_context+0x5a>
 800c770:	4660      	mov	r0, ip
 800c772:	4649      	mov	r1, r9
 800c774:	47c0      	blx	r8
 800c776:	6830      	ldr	r0, [r6, #0]
 800c778:	4649      	mov	r1, r9
 800c77a:	47c0      	blx	r8
 800c77c:	2300      	movs	r3, #0
 800c77e:	e9c6 3300 	strd	r3, r3, [r6]
 800c782:	4638      	mov	r0, r7
 800c784:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c788:	3401      	adds	r4, #1
 800c78a:	f145 0500 	adc.w	r5, r5, #0
 800c78e:	4294      	cmp	r4, r2
 800c790:	eb75 0103 	sbcs.w	r1, r5, r3
 800c794:	dbdb      	blt.n	800c74e <__cleanup_context+0x5a>
 800c796:	4660      	mov	r0, ip
 800c798:	4649      	mov	r1, r9
 800c79a:	47c0      	blx	r8
 800c79c:	6830      	ldr	r0, [r6, #0]
 800c79e:	e7eb      	b.n	800c778 <__cleanup_context+0x84>
 800c7a0:	4607      	mov	r7, r0
 800c7a2:	2300      	movs	r3, #0
 800c7a4:	e9c6 3300 	strd	r3, r3, [r6]
 800c7a8:	4638      	mov	r0, r7
 800c7aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c7ae:	f7fb fc65 	bl	800807c <rcutils_reset_error>
 800c7b2:	e7b3      	b.n	800c71c <__cleanup_context+0x28>
 800c7b4:	f7ff ff7a 	bl	800c6ac <rcl_convert_rmw_ret_to_rcl_ret>
 800c7b8:	4607      	mov	r7, r0
 800c7ba:	e7b8      	b.n	800c72e <__cleanup_context+0x3a>

0800c7bc <rcl_expand_topic_name>:
 800c7bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7c0:	b08b      	sub	sp, #44	; 0x2c
 800c7c2:	9306      	str	r3, [sp, #24]
 800c7c4:	2800      	cmp	r0, #0
 800c7c6:	f000 80d2 	beq.w	800c96e <rcl_expand_topic_name+0x1b2>
 800c7ca:	460e      	mov	r6, r1
 800c7cc:	2900      	cmp	r1, #0
 800c7ce:	f000 80ce 	beq.w	800c96e <rcl_expand_topic_name+0x1b2>
 800c7d2:	4617      	mov	r7, r2
 800c7d4:	2a00      	cmp	r2, #0
 800c7d6:	f000 80ca 	beq.w	800c96e <rcl_expand_topic_name+0x1b2>
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	f000 80c7 	beq.w	800c96e <rcl_expand_topic_name+0x1b2>
 800c7e0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	f000 80c3 	beq.w	800c96e <rcl_expand_topic_name+0x1b2>
 800c7e8:	a909      	add	r1, sp, #36	; 0x24
 800c7ea:	2200      	movs	r2, #0
 800c7ec:	4680      	mov	r8, r0
 800c7ee:	f000 ff67 	bl	800d6c0 <rcl_validate_topic_name>
 800c7f2:	4604      	mov	r4, r0
 800c7f4:	2800      	cmp	r0, #0
 800c7f6:	f040 80b6 	bne.w	800c966 <rcl_expand_topic_name+0x1aa>
 800c7fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	f040 80bf 	bne.w	800c980 <rcl_expand_topic_name+0x1c4>
 800c802:	4602      	mov	r2, r0
 800c804:	a909      	add	r1, sp, #36	; 0x24
 800c806:	4630      	mov	r0, r6
 800c808:	f001 fac8 	bl	800dd9c <rmw_validate_node_name>
 800c80c:	2800      	cmp	r0, #0
 800c80e:	f040 80b3 	bne.w	800c978 <rcl_expand_topic_name+0x1bc>
 800c812:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c814:	2a00      	cmp	r2, #0
 800c816:	f040 80b8 	bne.w	800c98a <rcl_expand_topic_name+0x1ce>
 800c81a:	a909      	add	r1, sp, #36	; 0x24
 800c81c:	4638      	mov	r0, r7
 800c81e:	f001 fa9f 	bl	800dd60 <rmw_validate_namespace>
 800c822:	2800      	cmp	r0, #0
 800c824:	f040 80a8 	bne.w	800c978 <rcl_expand_topic_name+0x1bc>
 800c828:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800c82a:	2c00      	cmp	r4, #0
 800c82c:	f040 80f6 	bne.w	800ca1c <rcl_expand_topic_name+0x260>
 800c830:	217b      	movs	r1, #123	; 0x7b
 800c832:	4640      	mov	r0, r8
 800c834:	f004 f964 	bl	8010b00 <strchr>
 800c838:	f898 3000 	ldrb.w	r3, [r8]
 800c83c:	2b2f      	cmp	r3, #47	; 0x2f
 800c83e:	4605      	mov	r5, r0
 800c840:	f000 80c4 	beq.w	800c9cc <rcl_expand_topic_name+0x210>
 800c844:	2b7e      	cmp	r3, #126	; 0x7e
 800c846:	d16f      	bne.n	800c928 <rcl_expand_topic_name+0x16c>
 800c848:	4638      	mov	r0, r7
 800c84a:	f7f3 fceb 	bl	8000224 <strlen>
 800c84e:	4b87      	ldr	r3, [pc, #540]	; (800ca6c <rcl_expand_topic_name+0x2b0>)
 800c850:	4987      	ldr	r1, [pc, #540]	; (800ca70 <rcl_expand_topic_name+0x2b4>)
 800c852:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c854:	9604      	str	r6, [sp, #16]
 800c856:	2801      	cmp	r0, #1
 800c858:	bf0c      	ite	eq
 800c85a:	4618      	moveq	r0, r3
 800c85c:	4608      	movne	r0, r1
 800c85e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c862:	e9cd 2300 	strd	r2, r3, [sp]
 800c866:	e9cd 0702 	strd	r0, r7, [sp, #8]
 800c86a:	f108 0101 	add.w	r1, r8, #1
 800c86e:	9105      	str	r1, [sp, #20]
 800c870:	ab14      	add	r3, sp, #80	; 0x50
 800c872:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c874:	f001 f852 	bl	800d91c <rcutils_format_string_limit>
 800c878:	4682      	mov	sl, r0
 800c87a:	2800      	cmp	r0, #0
 800c87c:	f000 80d0 	beq.w	800ca20 <rcl_expand_topic_name+0x264>
 800c880:	2d00      	cmp	r5, #0
 800c882:	f000 80aa 	beq.w	800c9da <rcl_expand_topic_name+0x21e>
 800c886:	217b      	movs	r1, #123	; 0x7b
 800c888:	f004 f93a 	bl	8010b00 <strchr>
 800c88c:	46d1      	mov	r9, sl
 800c88e:	4605      	mov	r5, r0
 800c890:	9407      	str	r4, [sp, #28]
 800c892:	46d3      	mov	fp, sl
 800c894:	464c      	mov	r4, r9
 800c896:	2d00      	cmp	r5, #0
 800c898:	f000 80c7 	beq.w	800ca2a <rcl_expand_topic_name+0x26e>
 800c89c:	217d      	movs	r1, #125	; 0x7d
 800c89e:	4620      	mov	r0, r4
 800c8a0:	f004 f92e 	bl	8010b00 <strchr>
 800c8a4:	eba0 0905 	sub.w	r9, r0, r5
 800c8a8:	f109 0a01 	add.w	sl, r9, #1
 800c8ac:	4871      	ldr	r0, [pc, #452]	; (800ca74 <rcl_expand_topic_name+0x2b8>)
 800c8ae:	4652      	mov	r2, sl
 800c8b0:	4629      	mov	r1, r5
 800c8b2:	f004 f93a 	bl	8010b2a <strncmp>
 800c8b6:	2800      	cmp	r0, #0
 800c8b8:	f000 808d 	beq.w	800c9d6 <rcl_expand_topic_name+0x21a>
 800c8bc:	486e      	ldr	r0, [pc, #440]	; (800ca78 <rcl_expand_topic_name+0x2bc>)
 800c8be:	4652      	mov	r2, sl
 800c8c0:	4629      	mov	r1, r5
 800c8c2:	f004 f932 	bl	8010b2a <strncmp>
 800c8c6:	b130      	cbz	r0, 800c8d6 <rcl_expand_topic_name+0x11a>
 800c8c8:	486c      	ldr	r0, [pc, #432]	; (800ca7c <rcl_expand_topic_name+0x2c0>)
 800c8ca:	4652      	mov	r2, sl
 800c8cc:	4629      	mov	r1, r5
 800c8ce:	f004 f92c 	bl	8010b2a <strncmp>
 800c8d2:	2800      	cmp	r0, #0
 800c8d4:	d15b      	bne.n	800c98e <rcl_expand_topic_name+0x1d2>
 800c8d6:	46b9      	mov	r9, r7
 800c8d8:	ab16      	add	r3, sp, #88	; 0x58
 800c8da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c8de:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800c8e2:	ab14      	add	r3, sp, #80	; 0x50
 800c8e4:	4628      	mov	r0, r5
 800c8e6:	cb0c      	ldmia	r3, {r2, r3}
 800c8e8:	4651      	mov	r1, sl
 800c8ea:	f001 f963 	bl	800dbb4 <rcutils_strndup>
 800c8ee:	4605      	mov	r5, r0
 800c8f0:	2800      	cmp	r0, #0
 800c8f2:	f000 80a4 	beq.w	800ca3e <rcl_expand_topic_name+0x282>
 800c8f6:	464a      	mov	r2, r9
 800c8f8:	4620      	mov	r0, r4
 800c8fa:	ab14      	add	r3, sp, #80	; 0x50
 800c8fc:	4629      	mov	r1, r5
 800c8fe:	f001 f85f 	bl	800d9c0 <rcutils_repl_str>
 800c902:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c904:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c906:	4604      	mov	r4, r0
 800c908:	4628      	mov	r0, r5
 800c90a:	4798      	blx	r3
 800c90c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c90e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c910:	4658      	mov	r0, fp
 800c912:	4798      	blx	r3
 800c914:	2c00      	cmp	r4, #0
 800c916:	f000 8083 	beq.w	800ca20 <rcl_expand_topic_name+0x264>
 800c91a:	217b      	movs	r1, #123	; 0x7b
 800c91c:	4620      	mov	r0, r4
 800c91e:	f004 f8ef 	bl	8010b00 <strchr>
 800c922:	46a3      	mov	fp, r4
 800c924:	4605      	mov	r5, r0
 800c926:	e7b6      	b.n	800c896 <rcl_expand_topic_name+0xda>
 800c928:	2800      	cmp	r0, #0
 800c92a:	d151      	bne.n	800c9d0 <rcl_expand_topic_name+0x214>
 800c92c:	4638      	mov	r0, r7
 800c92e:	f7f3 fc79 	bl	8000224 <strlen>
 800c932:	4b53      	ldr	r3, [pc, #332]	; (800ca80 <rcl_expand_topic_name+0x2c4>)
 800c934:	4a53      	ldr	r2, [pc, #332]	; (800ca84 <rcl_expand_topic_name+0x2c8>)
 800c936:	f8cd 8010 	str.w	r8, [sp, #16]
 800c93a:	2801      	cmp	r0, #1
 800c93c:	bf0c      	ite	eq
 800c93e:	4618      	moveq	r0, r3
 800c940:	4610      	movne	r0, r2
 800c942:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800c944:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c948:	e9cd 3200 	strd	r3, r2, [sp]
 800c94c:	e9cd 0702 	strd	r0, r7, [sp, #8]
 800c950:	ab14      	add	r3, sp, #80	; 0x50
 800c952:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c954:	f000 ffe2 	bl	800d91c <rcutils_format_string_limit>
 800c958:	4682      	mov	sl, r0
 800c95a:	4653      	mov	r3, sl
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d05f      	beq.n	800ca20 <rcl_expand_topic_name+0x264>
 800c960:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c962:	f8c3 a000 	str.w	sl, [r3]
 800c966:	4620      	mov	r0, r4
 800c968:	b00b      	add	sp, #44	; 0x2c
 800c96a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c96e:	240b      	movs	r4, #11
 800c970:	4620      	mov	r0, r4
 800c972:	b00b      	add	sp, #44	; 0x2c
 800c974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c978:	f7ff fe98 	bl	800c6ac <rcl_convert_rmw_ret_to_rcl_ret>
 800c97c:	4604      	mov	r4, r0
 800c97e:	e7f2      	b.n	800c966 <rcl_expand_topic_name+0x1aa>
 800c980:	2467      	movs	r4, #103	; 0x67
 800c982:	4620      	mov	r0, r4
 800c984:	b00b      	add	sp, #44	; 0x2c
 800c986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c98a:	24c9      	movs	r4, #201	; 0xc9
 800c98c:	e7eb      	b.n	800c966 <rcl_expand_topic_name+0x1aa>
 800c98e:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 800c992:	9806      	ldr	r0, [sp, #24]
 800c994:	1c69      	adds	r1, r5, #1
 800c996:	f7fb fc87 	bl	80082a8 <rcutils_string_map_getn>
 800c99a:	4681      	mov	r9, r0
 800c99c:	2800      	cmp	r0, #0
 800c99e:	d19b      	bne.n	800c8d8 <rcl_expand_topic_name+0x11c>
 800c9a0:	aa16      	add	r2, sp, #88	; 0x58
 800c9a2:	ca07      	ldmia	r2, {r0, r1, r2}
 800c9a4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c9a6:	f8c3 9000 	str.w	r9, [r3]
 800c9aa:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800c9ae:	ab14      	add	r3, sp, #80	; 0x50
 800c9b0:	cb0c      	ldmia	r3, {r2, r3}
 800c9b2:	4651      	mov	r1, sl
 800c9b4:	4628      	mov	r0, r5
 800c9b6:	f001 f8fd 	bl	800dbb4 <rcutils_strndup>
 800c9ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c9bc:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c9be:	4798      	blx	r3
 800c9c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c9c2:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c9c4:	4658      	mov	r0, fp
 800c9c6:	4798      	blx	r3
 800c9c8:	2469      	movs	r4, #105	; 0x69
 800c9ca:	e7cc      	b.n	800c966 <rcl_expand_topic_name+0x1aa>
 800c9cc:	2800      	cmp	r0, #0
 800c9ce:	d03e      	beq.n	800ca4e <rcl_expand_topic_name+0x292>
 800c9d0:	46c1      	mov	r9, r8
 800c9d2:	46a2      	mov	sl, r4
 800c9d4:	e75c      	b.n	800c890 <rcl_expand_topic_name+0xd4>
 800c9d6:	46b1      	mov	r9, r6
 800c9d8:	e77e      	b.n	800c8d8 <rcl_expand_topic_name+0x11c>
 800c9da:	f89a 3000 	ldrb.w	r3, [sl]
 800c9de:	2b2f      	cmp	r3, #47	; 0x2f
 800c9e0:	d0be      	beq.n	800c960 <rcl_expand_topic_name+0x1a4>
 800c9e2:	4638      	mov	r0, r7
 800c9e4:	f7f3 fc1e 	bl	8000224 <strlen>
 800c9e8:	4b25      	ldr	r3, [pc, #148]	; (800ca80 <rcl_expand_topic_name+0x2c4>)
 800c9ea:	4926      	ldr	r1, [pc, #152]	; (800ca84 <rcl_expand_topic_name+0x2c8>)
 800c9ec:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c9ee:	f8cd a010 	str.w	sl, [sp, #16]
 800c9f2:	2801      	cmp	r0, #1
 800c9f4:	bf0c      	ite	eq
 800c9f6:	4618      	moveq	r0, r3
 800c9f8:	4608      	movne	r0, r1
 800c9fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c9fe:	e9cd 2300 	strd	r2, r3, [sp]
 800ca02:	e9cd 0702 	strd	r0, r7, [sp, #8]
 800ca06:	ab14      	add	r3, sp, #80	; 0x50
 800ca08:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ca0a:	f000 ff87 	bl	800d91c <rcutils_format_string_limit>
 800ca0e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ca10:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ca12:	4603      	mov	r3, r0
 800ca14:	4650      	mov	r0, sl
 800ca16:	469a      	mov	sl, r3
 800ca18:	4790      	blx	r2
 800ca1a:	e79e      	b.n	800c95a <rcl_expand_topic_name+0x19e>
 800ca1c:	24ca      	movs	r4, #202	; 0xca
 800ca1e:	e7a2      	b.n	800c966 <rcl_expand_topic_name+0x1aa>
 800ca20:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ca22:	2300      	movs	r3, #0
 800ca24:	6013      	str	r3, [r2, #0]
 800ca26:	240a      	movs	r4, #10
 800ca28:	e79d      	b.n	800c966 <rcl_expand_topic_name+0x1aa>
 800ca2a:	465b      	mov	r3, fp
 800ca2c:	9c07      	ldr	r4, [sp, #28]
 800ca2e:	46da      	mov	sl, fp
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d1d2      	bne.n	800c9da <rcl_expand_topic_name+0x21e>
 800ca34:	f898 3000 	ldrb.w	r3, [r8]
 800ca38:	2b2f      	cmp	r3, #47	; 0x2f
 800ca3a:	d091      	beq.n	800c960 <rcl_expand_topic_name+0x1a4>
 800ca3c:	e776      	b.n	800c92c <rcl_expand_topic_name+0x170>
 800ca3e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ca40:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ca42:	601d      	str	r5, [r3, #0]
 800ca44:	4658      	mov	r0, fp
 800ca46:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ca48:	4798      	blx	r3
 800ca4a:	240a      	movs	r4, #10
 800ca4c:	e78b      	b.n	800c966 <rcl_expand_topic_name+0x1aa>
 800ca4e:	e9dd 0117 	ldrd	r0, r1, [sp, #92]	; 0x5c
 800ca52:	e88d 0003 	stmia.w	sp, {r0, r1}
 800ca56:	ab14      	add	r3, sp, #80	; 0x50
 800ca58:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ca5a:	4640      	mov	r0, r8
 800ca5c:	f001 f888 	bl	800db70 <rcutils_strdup>
 800ca60:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ca62:	2800      	cmp	r0, #0
 800ca64:	bf08      	it	eq
 800ca66:	240a      	moveq	r4, #10
 800ca68:	6018      	str	r0, [r3, #0]
 800ca6a:	e77c      	b.n	800c966 <rcl_expand_topic_name+0x1aa>
 800ca6c:	08012040 	.word	0x08012040
 800ca70:	0801207c 	.word	0x0801207c
 800ca74:	0801208c 	.word	0x0801208c
 800ca78:	08012094 	.word	0x08012094
 800ca7c:	0801209c 	.word	0x0801209c
 800ca80:	08012050 	.word	0x08012050
 800ca84:	08012084 	.word	0x08012084

0800ca88 <rcl_get_default_topic_name_substitutions>:
 800ca88:	2800      	cmp	r0, #0
 800ca8a:	bf0c      	ite	eq
 800ca8c:	200b      	moveq	r0, #11
 800ca8e:	2000      	movne	r0, #0
 800ca90:	4770      	bx	lr
 800ca92:	bf00      	nop

0800ca94 <rcl_init>:
 800ca94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca98:	1e07      	subs	r7, r0, #0
 800ca9a:	b09f      	sub	sp, #124	; 0x7c
 800ca9c:	4688      	mov	r8, r1
 800ca9e:	4692      	mov	sl, r2
 800caa0:	4699      	mov	r9, r3
 800caa2:	f340 8097 	ble.w	800cbd4 <rcl_init+0x140>
 800caa6:	2900      	cmp	r1, #0
 800caa8:	f000 8097 	beq.w	800cbda <rcl_init+0x146>
 800caac:	1f0d      	subs	r5, r1, #4
 800caae:	2400      	movs	r4, #0
 800cab0:	f855 6f04 	ldr.w	r6, [r5, #4]!
 800cab4:	3401      	adds	r4, #1
 800cab6:	2e00      	cmp	r6, #0
 800cab8:	f000 808f 	beq.w	800cbda <rcl_init+0x146>
 800cabc:	42a7      	cmp	r7, r4
 800cabe:	d1f7      	bne.n	800cab0 <rcl_init+0x1c>
 800cac0:	f1ba 0f00 	cmp.w	sl, #0
 800cac4:	f000 8089 	beq.w	800cbda <rcl_init+0x146>
 800cac8:	f8da 4000 	ldr.w	r4, [sl]
 800cacc:	2c00      	cmp	r4, #0
 800cace:	f000 8084 	beq.w	800cbda <rcl_init+0x146>
 800cad2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cad4:	ad19      	add	r5, sp, #100	; 0x64
 800cad6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cad8:	6823      	ldr	r3, [r4, #0]
 800cada:	602b      	str	r3, [r5, #0]
 800cadc:	a819      	add	r0, sp, #100	; 0x64
 800cade:	f7fb faa9 	bl	8008034 <rcutils_allocator_is_valid>
 800cae2:	2800      	cmp	r0, #0
 800cae4:	d079      	beq.n	800cbda <rcl_init+0x146>
 800cae6:	f1b9 0f00 	cmp.w	r9, #0
 800caea:	d076      	beq.n	800cbda <rcl_init+0x146>
 800caec:	f8d9 3000 	ldr.w	r3, [r9]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d177      	bne.n	800cbe4 <rcl_init+0x150>
 800caf4:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 800caf8:	2178      	movs	r1, #120	; 0x78
 800cafa:	2001      	movs	r0, #1
 800cafc:	4798      	blx	r3
 800cafe:	4604      	mov	r4, r0
 800cb00:	f8c9 0000 	str.w	r0, [r9]
 800cb04:	2800      	cmp	r0, #0
 800cb06:	f000 80ba 	beq.w	800cc7e <rcl_init+0x1ea>
 800cb0a:	a802      	add	r0, sp, #8
 800cb0c:	f001 f8be 	bl	800dc8c <rmw_get_zero_initialized_context>
 800cb10:	a902      	add	r1, sp, #8
 800cb12:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800cb16:	2250      	movs	r2, #80	; 0x50
 800cb18:	ac19      	add	r4, sp, #100	; 0x64
 800cb1a:	f003 fe15 	bl	8010748 <memcpy>
 800cb1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cb20:	f8d9 5000 	ldr.w	r5, [r9]
 800cb24:	6826      	ldr	r6, [r4, #0]
 800cb26:	462c      	mov	r4, r5
 800cb28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cb2a:	f105 0114 	add.w	r1, r5, #20
 800cb2e:	6026      	str	r6, [r4, #0]
 800cb30:	4650      	mov	r0, sl
 800cb32:	f000 f931 	bl	800cd98 <rcl_init_options_copy>
 800cb36:	4606      	mov	r6, r0
 800cb38:	2800      	cmp	r0, #0
 800cb3a:	d144      	bne.n	800cbc6 <rcl_init+0x132>
 800cb3c:	f8d9 a000 	ldr.w	sl, [r9]
 800cb40:	463c      	mov	r4, r7
 800cb42:	17fd      	asrs	r5, r7, #31
 800cb44:	e9ca 4506 	strd	r4, r5, [sl, #24]
 800cb48:	f8ca 0020 	str.w	r0, [sl, #32]
 800cb4c:	2f00      	cmp	r7, #0
 800cb4e:	d050      	beq.n	800cbf2 <rcl_init+0x15e>
 800cb50:	f1b8 0f00 	cmp.w	r8, #0
 800cb54:	d04d      	beq.n	800cbf2 <rcl_init+0x15e>
 800cb56:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 800cb5a:	4638      	mov	r0, r7
 800cb5c:	2104      	movs	r1, #4
 800cb5e:	4798      	blx	r3
 800cb60:	f8ca 0020 	str.w	r0, [sl, #32]
 800cb64:	f8d9 a000 	ldr.w	sl, [r9]
 800cb68:	f8da 3020 	ldr.w	r3, [sl, #32]
 800cb6c:	46d3      	mov	fp, sl
 800cb6e:	b34b      	cbz	r3, 800cbc4 <rcl_init+0x130>
 800cb70:	2f01      	cmp	r7, #1
 800cb72:	f175 0300 	sbcs.w	r3, r5, #0
 800cb76:	db3c      	blt.n	800cbf2 <rcl_init+0x15e>
 800cb78:	f1a8 0804 	sub.w	r8, r8, #4
 800cb7c:	2600      	movs	r6, #0
 800cb7e:	2700      	movs	r7, #0
 800cb80:	e00c      	b.n	800cb9c <rcl_init+0x108>
 800cb82:	f8d8 1000 	ldr.w	r1, [r8]
 800cb86:	f003 fddf 	bl	8010748 <memcpy>
 800cb8a:	3601      	adds	r6, #1
 800cb8c:	f147 0700 	adc.w	r7, r7, #0
 800cb90:	42bd      	cmp	r5, r7
 800cb92:	bf08      	it	eq
 800cb94:	42b4      	cmpeq	r4, r6
 800cb96:	d02a      	beq.n	800cbee <rcl_init+0x15a>
 800cb98:	f8d9 b000 	ldr.w	fp, [r9]
 800cb9c:	f858 0f04 	ldr.w	r0, [r8, #4]!
 800cba0:	f7f3 fb40 	bl	8000224 <strlen>
 800cba4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cba6:	991d      	ldr	r1, [sp, #116]	; 0x74
 800cba8:	f8db a020 	ldr.w	sl, [fp, #32]
 800cbac:	9001      	str	r0, [sp, #4]
 800cbae:	4798      	blx	r3
 800cbb0:	f8d9 1000 	ldr.w	r1, [r9]
 800cbb4:	9a01      	ldr	r2, [sp, #4]
 800cbb6:	6a09      	ldr	r1, [r1, #32]
 800cbb8:	00b3      	lsls	r3, r6, #2
 800cbba:	f84a 0003 	str.w	r0, [sl, r3]
 800cbbe:	58c8      	ldr	r0, [r1, r3]
 800cbc0:	2800      	cmp	r0, #0
 800cbc2:	d1de      	bne.n	800cb82 <rcl_init+0xee>
 800cbc4:	260a      	movs	r6, #10
 800cbc6:	4648      	mov	r0, r9
 800cbc8:	f7ff fd94 	bl	800c6f4 <__cleanup_context>
 800cbcc:	4630      	mov	r0, r6
 800cbce:	b01f      	add	sp, #124	; 0x7c
 800cbd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbd4:	2900      	cmp	r1, #0
 800cbd6:	f43f af73 	beq.w	800cac0 <rcl_init+0x2c>
 800cbda:	260b      	movs	r6, #11
 800cbdc:	4630      	mov	r0, r6
 800cbde:	b01f      	add	sp, #124	; 0x7c
 800cbe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbe4:	2664      	movs	r6, #100	; 0x64
 800cbe6:	4630      	mov	r0, r6
 800cbe8:	b01f      	add	sp, #124	; 0x7c
 800cbea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbee:	f8d9 a000 	ldr.w	sl, [r9]
 800cbf2:	4a2c      	ldr	r2, [pc, #176]	; (800cca4 <rcl_init+0x210>)
 800cbf4:	6813      	ldr	r3, [r2, #0]
 800cbf6:	3301      	adds	r3, #1
 800cbf8:	d03b      	beq.n	800cc72 <rcl_init+0x1de>
 800cbfa:	6013      	str	r3, [r2, #0]
 800cbfc:	4619      	mov	r1, r3
 800cbfe:	2000      	movs	r0, #0
 800cc00:	f8da 4014 	ldr.w	r4, [sl, #20]
 800cc04:	f8c9 3004 	str.w	r3, [r9, #4]
 800cc08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cc0a:	3301      	adds	r3, #1
 800cc0c:	e9c4 1006 	strd	r1, r0, [r4, #24]
 800cc10:	d039      	beq.n	800cc86 <rcl_init+0x1f2>
 800cc12:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800cc16:	b94b      	cbnz	r3, 800cc2c <rcl_init+0x198>
 800cc18:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800cc1c:	f000 f962 	bl	800cee4 <rcl_get_localhost_only>
 800cc20:	4606      	mov	r6, r0
 800cc22:	2800      	cmp	r0, #0
 800cc24:	d1cf      	bne.n	800cbc6 <rcl_init+0x132>
 800cc26:	f8d9 3000 	ldr.w	r3, [r9]
 800cc2a:	695c      	ldr	r4, [r3, #20]
 800cc2c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800cc2e:	aa18      	add	r2, sp, #96	; 0x60
 800cc30:	a917      	add	r1, sp, #92	; 0x5c
 800cc32:	f000 fd33 	bl	800d69c <rcl_validate_enclave_name>
 800cc36:	4606      	mov	r6, r0
 800cc38:	2800      	cmp	r0, #0
 800cc3a:	d1c4      	bne.n	800cbc6 <rcl_init+0x132>
 800cc3c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cc3e:	bb03      	cbnz	r3, 800cc82 <rcl_init+0x1ee>
 800cc40:	f8d9 1000 	ldr.w	r1, [r9]
 800cc44:	694b      	ldr	r3, [r1, #20]
 800cc46:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800cc48:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800cc4c:	f000 fbf2 	bl	800d434 <rcl_get_security_options_from_environment>
 800cc50:	4606      	mov	r6, r0
 800cc52:	2800      	cmp	r0, #0
 800cc54:	d1b7      	bne.n	800cbc6 <rcl_init+0x132>
 800cc56:	f8d9 1000 	ldr.w	r1, [r9]
 800cc5a:	6948      	ldr	r0, [r1, #20]
 800cc5c:	3128      	adds	r1, #40	; 0x28
 800cc5e:	3018      	adds	r0, #24
 800cc60:	f001 f9fe 	bl	800e060 <rmw_init>
 800cc64:	4606      	mov	r6, r0
 800cc66:	2800      	cmp	r0, #0
 800cc68:	d0b8      	beq.n	800cbdc <rcl_init+0x148>
 800cc6a:	f7ff fd1f 	bl	800c6ac <rcl_convert_rmw_ret_to_rcl_ret>
 800cc6e:	4606      	mov	r6, r0
 800cc70:	e7a9      	b.n	800cbc6 <rcl_init+0x132>
 800cc72:	2401      	movs	r4, #1
 800cc74:	4618      	mov	r0, r3
 800cc76:	4621      	mov	r1, r4
 800cc78:	6014      	str	r4, [r2, #0]
 800cc7a:	4623      	mov	r3, r4
 800cc7c:	e7c0      	b.n	800cc00 <rcl_init+0x16c>
 800cc7e:	260a      	movs	r6, #10
 800cc80:	e7ac      	b.n	800cbdc <rcl_init+0x148>
 800cc82:	2601      	movs	r6, #1
 800cc84:	e79f      	b.n	800cbc6 <rcl_init+0x132>
 800cc86:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800cc8a:	f003 faad 	bl	80101e8 <rcl_get_default_domain_id>
 800cc8e:	4606      	mov	r6, r0
 800cc90:	2800      	cmp	r0, #0
 800cc92:	d198      	bne.n	800cbc6 <rcl_init+0x132>
 800cc94:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cc96:	3301      	adds	r3, #1
 800cc98:	f8d9 3000 	ldr.w	r3, [r9]
 800cc9c:	bf08      	it	eq
 800cc9e:	6260      	streq	r0, [r4, #36]	; 0x24
 800cca0:	695c      	ldr	r4, [r3, #20]
 800cca2:	e7b6      	b.n	800cc12 <rcl_init+0x17e>
 800cca4:	2000bfb8 	.word	0x2000bfb8

0800cca8 <rcl_get_zero_initialized_init_options>:
 800cca8:	2000      	movs	r0, #0
 800ccaa:	4770      	bx	lr

0800ccac <rcl_init_options_init>:
 800ccac:	b084      	sub	sp, #16
 800ccae:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ccb0:	b091      	sub	sp, #68	; 0x44
 800ccb2:	af17      	add	r7, sp, #92	; 0x5c
 800ccb4:	e887 000e 	stmia.w	r7, {r1, r2, r3}
 800ccb8:	2800      	cmp	r0, #0
 800ccba:	d044      	beq.n	800cd46 <rcl_init_options_init+0x9a>
 800ccbc:	6803      	ldr	r3, [r0, #0]
 800ccbe:	4606      	mov	r6, r0
 800ccc0:	b133      	cbz	r3, 800ccd0 <rcl_init_options_init+0x24>
 800ccc2:	2464      	movs	r4, #100	; 0x64
 800ccc4:	4620      	mov	r0, r4
 800ccc6:	b011      	add	sp, #68	; 0x44
 800ccc8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800cccc:	b004      	add	sp, #16
 800ccce:	4770      	bx	lr
 800ccd0:	4638      	mov	r0, r7
 800ccd2:	f7fb f9af 	bl	8008034 <rcutils_allocator_is_valid>
 800ccd6:	2800      	cmp	r0, #0
 800ccd8:	d035      	beq.n	800cd46 <rcl_init_options_init+0x9a>
 800ccda:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ccdc:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800ccde:	2050      	movs	r0, #80	; 0x50
 800cce0:	4798      	blx	r3
 800cce2:	4604      	mov	r4, r0
 800cce4:	6030      	str	r0, [r6, #0]
 800cce6:	2800      	cmp	r0, #0
 800cce8:	d02f      	beq.n	800cd4a <rcl_init_options_init+0x9e>
 800ccea:	46bc      	mov	ip, r7
 800ccec:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ccf0:	4625      	mov	r5, r4
 800ccf2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ccf4:	f8dc 3000 	ldr.w	r3, [ip]
 800ccf8:	602b      	str	r3, [r5, #0]
 800ccfa:	a802      	add	r0, sp, #8
 800ccfc:	ad02      	add	r5, sp, #8
 800ccfe:	f000 ffcd 	bl	800dc9c <rmw_get_zero_initialized_init_options>
 800cd02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cd04:	3418      	adds	r4, #24
 800cd06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cd08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cd0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cd0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cd0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cd10:	e895 0003 	ldmia.w	r5, {r0, r1}
 800cd14:	6833      	ldr	r3, [r6, #0]
 800cd16:	e884 0003 	stmia.w	r4, {r0, r1}
 800cd1a:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 800cd1e:	e88d 0003 	stmia.w	sp, {r0, r1}
 800cd22:	f103 0018 	add.w	r0, r3, #24
 800cd26:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800cd2a:	f001 f8bf 	bl	800deac <rmw_init_options_init>
 800cd2e:	4604      	mov	r4, r0
 800cd30:	2800      	cmp	r0, #0
 800cd32:	d0c7      	beq.n	800ccc4 <rcl_init_options_init+0x18>
 800cd34:	6830      	ldr	r0, [r6, #0]
 800cd36:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800cd38:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800cd3a:	4798      	blx	r3
 800cd3c:	4620      	mov	r0, r4
 800cd3e:	f7ff fcb5 	bl	800c6ac <rcl_convert_rmw_ret_to_rcl_ret>
 800cd42:	4604      	mov	r4, r0
 800cd44:	e7be      	b.n	800ccc4 <rcl_init_options_init+0x18>
 800cd46:	240b      	movs	r4, #11
 800cd48:	e7bc      	b.n	800ccc4 <rcl_init_options_init+0x18>
 800cd4a:	240a      	movs	r4, #10
 800cd4c:	e7ba      	b.n	800ccc4 <rcl_init_options_init+0x18>
 800cd4e:	bf00      	nop

0800cd50 <rcl_init_options_fini>:
 800cd50:	b570      	push	{r4, r5, r6, lr}
 800cd52:	b086      	sub	sp, #24
 800cd54:	b1c0      	cbz	r0, 800cd88 <rcl_init_options_fini+0x38>
 800cd56:	6804      	ldr	r4, [r0, #0]
 800cd58:	4606      	mov	r6, r0
 800cd5a:	b1ac      	cbz	r4, 800cd88 <rcl_init_options_fini+0x38>
 800cd5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cd5e:	ad01      	add	r5, sp, #4
 800cd60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cd62:	6823      	ldr	r3, [r4, #0]
 800cd64:	602b      	str	r3, [r5, #0]
 800cd66:	a801      	add	r0, sp, #4
 800cd68:	f7fb f964 	bl	8008034 <rcutils_allocator_is_valid>
 800cd6c:	b160      	cbz	r0, 800cd88 <rcl_init_options_fini+0x38>
 800cd6e:	6830      	ldr	r0, [r6, #0]
 800cd70:	3018      	adds	r0, #24
 800cd72:	f001 f935 	bl	800dfe0 <rmw_init_options_fini>
 800cd76:	4604      	mov	r4, r0
 800cd78:	b950      	cbnz	r0, 800cd90 <rcl_init_options_fini+0x40>
 800cd7a:	6830      	ldr	r0, [r6, #0]
 800cd7c:	9b02      	ldr	r3, [sp, #8]
 800cd7e:	9905      	ldr	r1, [sp, #20]
 800cd80:	4798      	blx	r3
 800cd82:	4620      	mov	r0, r4
 800cd84:	b006      	add	sp, #24
 800cd86:	bd70      	pop	{r4, r5, r6, pc}
 800cd88:	240b      	movs	r4, #11
 800cd8a:	4620      	mov	r0, r4
 800cd8c:	b006      	add	sp, #24
 800cd8e:	bd70      	pop	{r4, r5, r6, pc}
 800cd90:	f7ff fc8c 	bl	800c6ac <rcl_convert_rmw_ret_to_rcl_ret>
 800cd94:	4604      	mov	r4, r0
 800cd96:	e7f8      	b.n	800cd8a <rcl_init_options_fini+0x3a>

0800cd98 <rcl_init_options_copy>:
 800cd98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd9c:	b096      	sub	sp, #88	; 0x58
 800cd9e:	2800      	cmp	r0, #0
 800cda0:	d063      	beq.n	800ce6a <rcl_init_options_copy+0xd2>
 800cda2:	6806      	ldr	r6, [r0, #0]
 800cda4:	4605      	mov	r5, r0
 800cda6:	2e00      	cmp	r6, #0
 800cda8:	d05f      	beq.n	800ce6a <rcl_init_options_copy+0xd2>
 800cdaa:	460c      	mov	r4, r1
 800cdac:	2900      	cmp	r1, #0
 800cdae:	d05c      	beq.n	800ce6a <rcl_init_options_copy+0xd2>
 800cdb0:	680b      	ldr	r3, [r1, #0]
 800cdb2:	b123      	cbz	r3, 800cdbe <rcl_init_options_copy+0x26>
 800cdb4:	2664      	movs	r6, #100	; 0x64
 800cdb6:	4630      	mov	r0, r6
 800cdb8:	b016      	add	sp, #88	; 0x58
 800cdba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cdbe:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800cdc0:	af11      	add	r7, sp, #68	; 0x44
 800cdc2:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800cdc4:	f10d 0844 	add.w	r8, sp, #68	; 0x44
 800cdc8:	6833      	ldr	r3, [r6, #0]
 800cdca:	603b      	str	r3, [r7, #0]
 800cdcc:	4640      	mov	r0, r8
 800cdce:	f7fb f931 	bl	8008034 <rcutils_allocator_is_valid>
 800cdd2:	2800      	cmp	r0, #0
 800cdd4:	d049      	beq.n	800ce6a <rcl_init_options_copy+0xd2>
 800cdd6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cdd8:	9915      	ldr	r1, [sp, #84]	; 0x54
 800cdda:	2050      	movs	r0, #80	; 0x50
 800cddc:	4798      	blx	r3
 800cdde:	4606      	mov	r6, r0
 800cde0:	6020      	str	r0, [r4, #0]
 800cde2:	2800      	cmp	r0, #0
 800cde4:	d077      	beq.n	800ced6 <rcl_init_options_copy+0x13e>
 800cde6:	46c4      	mov	ip, r8
 800cde8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800cdec:	4637      	mov	r7, r6
 800cdee:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800cdf0:	f8dc 3000 	ldr.w	r3, [ip]
 800cdf4:	603b      	str	r3, [r7, #0]
 800cdf6:	a802      	add	r0, sp, #8
 800cdf8:	af02      	add	r7, sp, #8
 800cdfa:	f000 ff4f 	bl	800dc9c <rmw_get_zero_initialized_init_options>
 800cdfe:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800ce00:	3618      	adds	r6, #24
 800ce02:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800ce04:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800ce06:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800ce08:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800ce0a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800ce0c:	e897 0003 	ldmia.w	r7, {r0, r1}
 800ce10:	ab16      	add	r3, sp, #88	; 0x58
 800ce12:	e886 0003 	stmia.w	r6, {r0, r1}
 800ce16:	e913 0003 	ldmdb	r3, {r0, r1}
 800ce1a:	6823      	ldr	r3, [r4, #0]
 800ce1c:	e88d 0003 	stmia.w	sp, {r0, r1}
 800ce20:	f103 0018 	add.w	r0, r3, #24
 800ce24:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 800ce28:	f001 f840 	bl	800deac <rmw_init_options_init>
 800ce2c:	4606      	mov	r6, r0
 800ce2e:	bb08      	cbnz	r0, 800ce74 <rcl_init_options_copy+0xdc>
 800ce30:	682f      	ldr	r7, [r5, #0]
 800ce32:	f8d4 c000 	ldr.w	ip, [r4]
 800ce36:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800ce38:	4666      	mov	r6, ip
 800ce3a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800ce3c:	683b      	ldr	r3, [r7, #0]
 800ce3e:	6033      	str	r3, [r6, #0]
 800ce40:	f10c 0018 	add.w	r0, ip, #24
 800ce44:	f001 f8cc 	bl	800dfe0 <rmw_init_options_fini>
 800ce48:	4607      	mov	r7, r0
 800ce4a:	b1f0      	cbz	r0, 800ce8a <rcl_init_options_copy+0xf2>
 800ce4c:	f7fb f900 	bl	8008050 <rcutils_get_error_string>
 800ce50:	f7fb f914 	bl	800807c <rcutils_reset_error>
 800ce54:	4620      	mov	r0, r4
 800ce56:	f7ff ff7b 	bl	800cd50 <rcl_init_options_fini>
 800ce5a:	4606      	mov	r6, r0
 800ce5c:	2800      	cmp	r0, #0
 800ce5e:	d1aa      	bne.n	800cdb6 <rcl_init_options_copy+0x1e>
 800ce60:	4638      	mov	r0, r7
 800ce62:	f7ff fc23 	bl	800c6ac <rcl_convert_rmw_ret_to_rcl_ret>
 800ce66:	4606      	mov	r6, r0
 800ce68:	e7a5      	b.n	800cdb6 <rcl_init_options_copy+0x1e>
 800ce6a:	260b      	movs	r6, #11
 800ce6c:	4630      	mov	r0, r6
 800ce6e:	b016      	add	sp, #88	; 0x58
 800ce70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce74:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ce76:	9915      	ldr	r1, [sp, #84]	; 0x54
 800ce78:	6820      	ldr	r0, [r4, #0]
 800ce7a:	4798      	blx	r3
 800ce7c:	4630      	mov	r0, r6
 800ce7e:	f7ff fc15 	bl	800c6ac <rcl_convert_rmw_ret_to_rcl_ret>
 800ce82:	4606      	mov	r6, r0
 800ce84:	2800      	cmp	r0, #0
 800ce86:	d0d3      	beq.n	800ce30 <rcl_init_options_copy+0x98>
 800ce88:	e795      	b.n	800cdb6 <rcl_init_options_copy+0x1e>
 800ce8a:	a802      	add	r0, sp, #8
 800ce8c:	ae02      	add	r6, sp, #8
 800ce8e:	6827      	ldr	r7, [r4, #0]
 800ce90:	f000 ff04 	bl	800dc9c <rmw_get_zero_initialized_init_options>
 800ce94:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800ce96:	3718      	adds	r7, #24
 800ce98:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800ce9a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800ce9c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800ce9e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800cea0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800cea2:	e896 0003 	ldmia.w	r6, {r0, r1}
 800cea6:	682a      	ldr	r2, [r5, #0]
 800cea8:	6823      	ldr	r3, [r4, #0]
 800ceaa:	e887 0003 	stmia.w	r7, {r0, r1}
 800ceae:	f102 0018 	add.w	r0, r2, #24
 800ceb2:	f103 0118 	add.w	r1, r3, #24
 800ceb6:	f001 f851 	bl	800df5c <rmw_init_options_copy>
 800ceba:	4606      	mov	r6, r0
 800cebc:	2800      	cmp	r0, #0
 800cebe:	f43f af7a 	beq.w	800cdb6 <rcl_init_options_copy+0x1e>
 800cec2:	f7fb f8c5 	bl	8008050 <rcutils_get_error_string>
 800cec6:	f7fb f8d9 	bl	800807c <rcutils_reset_error>
 800ceca:	4620      	mov	r0, r4
 800cecc:	f7ff ff40 	bl	800cd50 <rcl_init_options_fini>
 800ced0:	b118      	cbz	r0, 800ceda <rcl_init_options_copy+0x142>
 800ced2:	4606      	mov	r6, r0
 800ced4:	e76f      	b.n	800cdb6 <rcl_init_options_copy+0x1e>
 800ced6:	260a      	movs	r6, #10
 800ced8:	e76d      	b.n	800cdb6 <rcl_init_options_copy+0x1e>
 800ceda:	4630      	mov	r0, r6
 800cedc:	f7ff fbe6 	bl	800c6ac <rcl_convert_rmw_ret_to_rcl_ret>
 800cee0:	4606      	mov	r6, r0
 800cee2:	e768      	b.n	800cdb6 <rcl_init_options_copy+0x1e>

0800cee4 <rcl_get_localhost_only>:
 800cee4:	b510      	push	{r4, lr}
 800cee6:	b082      	sub	sp, #8
 800cee8:	2300      	movs	r3, #0
 800ceea:	9301      	str	r3, [sp, #4]
 800ceec:	b1b8      	cbz	r0, 800cf1e <rcl_get_localhost_only+0x3a>
 800ceee:	4604      	mov	r4, r0
 800cef0:	a901      	add	r1, sp, #4
 800cef2:	480c      	ldr	r0, [pc, #48]	; (800cf24 <rcl_get_localhost_only+0x40>)
 800cef4:	f000 fd4c 	bl	800d990 <rcutils_get_env>
 800cef8:	b110      	cbz	r0, 800cf00 <rcl_get_localhost_only+0x1c>
 800cefa:	2001      	movs	r0, #1
 800cefc:	b002      	add	sp, #8
 800cefe:	bd10      	pop	{r4, pc}
 800cf00:	9b01      	ldr	r3, [sp, #4]
 800cf02:	b113      	cbz	r3, 800cf0a <rcl_get_localhost_only+0x26>
 800cf04:	781a      	ldrb	r2, [r3, #0]
 800cf06:	2a31      	cmp	r2, #49	; 0x31
 800cf08:	d004      	beq.n	800cf14 <rcl_get_localhost_only+0x30>
 800cf0a:	2302      	movs	r3, #2
 800cf0c:	2000      	movs	r0, #0
 800cf0e:	7023      	strb	r3, [r4, #0]
 800cf10:	b002      	add	sp, #8
 800cf12:	bd10      	pop	{r4, pc}
 800cf14:	785b      	ldrb	r3, [r3, #1]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d1f7      	bne.n	800cf0a <rcl_get_localhost_only+0x26>
 800cf1a:	2301      	movs	r3, #1
 800cf1c:	e7f6      	b.n	800cf0c <rcl_get_localhost_only+0x28>
 800cf1e:	200b      	movs	r0, #11
 800cf20:	b002      	add	sp, #8
 800cf22:	bd10      	pop	{r4, pc}
 800cf24:	080120a8 	.word	0x080120a8

0800cf28 <rcl_get_zero_initialized_node>:
 800cf28:	4a03      	ldr	r2, [pc, #12]	; (800cf38 <rcl_get_zero_initialized_node+0x10>)
 800cf2a:	4603      	mov	r3, r0
 800cf2c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cf30:	e883 0003 	stmia.w	r3, {r0, r1}
 800cf34:	4618      	mov	r0, r3
 800cf36:	4770      	bx	lr
 800cf38:	080120c8 	.word	0x080120c8

0800cf3c <rcl_node_init>:
 800cf3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf40:	b09b      	sub	sp, #108	; 0x6c
 800cf42:	4604      	mov	r4, r0
 800cf44:	f8dd 8090 	ldr.w	r8, [sp, #144]	; 0x90
 800cf48:	f04f 0c00 	mov.w	ip, #0
 800cf4c:	a815      	add	r0, sp, #84	; 0x54
 800cf4e:	460e      	mov	r6, r1
 800cf50:	4615      	mov	r5, r2
 800cf52:	461f      	mov	r7, r3
 800cf54:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
 800cf58:	f003 fa02 	bl	8010360 <rcl_guard_condition_get_default_options>
 800cf5c:	f1b8 0f00 	cmp.w	r8, #0
 800cf60:	f000 80fd 	beq.w	800d15e <rcl_node_init+0x222>
 800cf64:	f108 0b04 	add.w	fp, r8, #4
 800cf68:	4658      	mov	r0, fp
 800cf6a:	f7fb f863 	bl	8008034 <rcutils_allocator_is_valid>
 800cf6e:	2800      	cmp	r0, #0
 800cf70:	f000 80f5 	beq.w	800d15e <rcl_node_init+0x222>
 800cf74:	2e00      	cmp	r6, #0
 800cf76:	f000 80f2 	beq.w	800d15e <rcl_node_init+0x222>
 800cf7a:	2d00      	cmp	r5, #0
 800cf7c:	f000 80ef 	beq.w	800d15e <rcl_node_init+0x222>
 800cf80:	2c00      	cmp	r4, #0
 800cf82:	f000 80ec 	beq.w	800d15e <rcl_node_init+0x222>
 800cf86:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800cf8a:	f1b9 0f00 	cmp.w	r9, #0
 800cf8e:	f040 8112 	bne.w	800d1b6 <rcl_node_init+0x27a>
 800cf92:	2f00      	cmp	r7, #0
 800cf94:	f000 80e3 	beq.w	800d15e <rcl_node_init+0x222>
 800cf98:	4638      	mov	r0, r7
 800cf9a:	f7ff fba5 	bl	800c6e8 <rcl_context_is_valid>
 800cf9e:	4682      	mov	sl, r0
 800cfa0:	2800      	cmp	r0, #0
 800cfa2:	f000 80e2 	beq.w	800d16a <rcl_node_init+0x22e>
 800cfa6:	464a      	mov	r2, r9
 800cfa8:	a914      	add	r1, sp, #80	; 0x50
 800cfaa:	4630      	mov	r0, r6
 800cfac:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
 800cfb0:	f000 fef4 	bl	800dd9c <rmw_validate_node_name>
 800cfb4:	4681      	mov	r9, r0
 800cfb6:	2800      	cmp	r0, #0
 800cfb8:	f040 80d3 	bne.w	800d162 <rcl_node_init+0x226>
 800cfbc:	9814      	ldr	r0, [sp, #80]	; 0x50
 800cfbe:	2800      	cmp	r0, #0
 800cfc0:	f040 8105 	bne.w	800d1ce <rcl_node_init+0x292>
 800cfc4:	4628      	mov	r0, r5
 800cfc6:	f7f3 f92d 	bl	8000224 <strlen>
 800cfca:	2800      	cmp	r0, #0
 800cfcc:	f040 80d0 	bne.w	800d170 <rcl_node_init+0x234>
 800cfd0:	4d8e      	ldr	r5, [pc, #568]	; (800d20c <rcl_node_init+0x2d0>)
 800cfd2:	a914      	add	r1, sp, #80	; 0x50
 800cfd4:	2200      	movs	r2, #0
 800cfd6:	4628      	mov	r0, r5
 800cfd8:	f000 fec2 	bl	800dd60 <rmw_validate_namespace>
 800cfdc:	4681      	mov	r9, r0
 800cfde:	2800      	cmp	r0, #0
 800cfe0:	f040 80bf 	bne.w	800d162 <rcl_node_init+0x226>
 800cfe4:	4682      	mov	sl, r0
 800cfe6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	f040 80f5 	bne.w	800d1d8 <rcl_node_init+0x29c>
 800cfee:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800cff2:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800cff6:	9307      	str	r3, [sp, #28]
 800cff8:	2030      	movs	r0, #48	; 0x30
 800cffa:	4790      	blx	r2
 800cffc:	4681      	mov	r9, r0
 800cffe:	6060      	str	r0, [r4, #4]
 800d000:	2800      	cmp	r0, #0
 800d002:	f000 80de 	beq.w	800d1c2 <rcl_node_init+0x286>
 800d006:	9b07      	ldr	r3, [sp, #28]
 800d008:	e9c0 3308 	strd	r3, r3, [r0, #32]
 800d00c:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
 800d010:	a80a      	add	r0, sp, #40	; 0x28
 800d012:	f000 f92b 	bl	800d26c <rcl_node_get_default_options>
 800d016:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 800d01a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d01e:	46cc      	mov	ip, r9
 800d020:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d024:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 800d028:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 800d02c:	6861      	ldr	r1, [r4, #4]
 800d02e:	6027      	str	r7, [r4, #0]
 800d030:	4640      	mov	r0, r8
 800d032:	f000 f937 	bl	800d2a4 <rcl_node_options_copy>
 800d036:	2800      	cmp	r0, #0
 800d038:	d167      	bne.n	800d10a <rcl_node_init+0x1ce>
 800d03a:	4628      	mov	r0, r5
 800d03c:	f7f3 f8f2 	bl	8000224 <strlen>
 800d040:	4428      	add	r0, r5
 800d042:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d046:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 800d04a:	2b2f      	cmp	r3, #47	; 0x2f
 800d04c:	bf08      	it	eq
 800d04e:	4970      	ldreq	r1, [pc, #448]	; (800d210 <rcl_node_init+0x2d4>)
 800d050:	f8db 3010 	ldr.w	r3, [fp, #16]
 800d054:	bf18      	it	ne
 800d056:	496f      	ldrne	r1, [pc, #444]	; (800d214 <rcl_node_init+0x2d8>)
 800d058:	9604      	str	r6, [sp, #16]
 800d05a:	e9cd 1502 	strd	r1, r5, [sp, #8]
 800d05e:	e9cd 3200 	strd	r3, r2, [sp]
 800d062:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 800d066:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800d06a:	f000 fc57 	bl	800d91c <rcutils_format_string_limit>
 800d06e:	f8c9 002c 	str.w	r0, [r9, #44]	; 0x2c
 800d072:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800d076:	f8d9 3000 	ldr.w	r3, [r9]
 800d07a:	9313      	str	r3, [sp, #76]	; 0x4c
 800d07c:	1c59      	adds	r1, r3, #1
 800d07e:	f000 80b7 	beq.w	800d1f0 <rcl_node_init+0x2b4>
 800d082:	683a      	ldr	r2, [r7, #0]
 800d084:	f8c9 301c 	str.w	r3, [r9, #28]
 800d088:	6952      	ldr	r2, [r2, #20]
 800d08a:	6821      	ldr	r1, [r4, #0]
 800d08c:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 800d090:	6808      	ldr	r0, [r1, #0]
 800d092:	f1a2 0201 	sub.w	r2, r2, #1
 800d096:	fab2 f282 	clz	r2, r2
 800d09a:	0952      	lsrs	r2, r2, #5
 800d09c:	9200      	str	r2, [sp, #0]
 800d09e:	4631      	mov	r1, r6
 800d0a0:	3028      	adds	r0, #40	; 0x28
 800d0a2:	462a      	mov	r2, r5
 800d0a4:	f001 fa32 	bl	800e50c <rmw_create_node>
 800d0a8:	6863      	ldr	r3, [r4, #4]
 800d0aa:	f8c9 0020 	str.w	r0, [r9, #32]
 800d0ae:	6a18      	ldr	r0, [r3, #32]
 800d0b0:	b368      	cbz	r0, 800d10e <rcl_node_init+0x1d2>
 800d0b2:	f001 fabf 	bl	800e634 <rmw_node_get_graph_guard_condition>
 800d0b6:	4681      	mov	r9, r0
 800d0b8:	b338      	cbz	r0, 800d10a <rcl_node_init+0x1ce>
 800d0ba:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d0be:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800d0c2:	6866      	ldr	r6, [r4, #4]
 800d0c4:	2008      	movs	r0, #8
 800d0c6:	4798      	blx	r3
 800d0c8:	6863      	ldr	r3, [r4, #4]
 800d0ca:	6270      	str	r0, [r6, #36]	; 0x24
 800d0cc:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 800d0ce:	b1f6      	cbz	r6, 800d10e <rcl_node_init+0x1d2>
 800d0d0:	a808      	add	r0, sp, #32
 800d0d2:	f003 f8bd 	bl	8010250 <rcl_get_zero_initialized_guard_condition>
 800d0d6:	a808      	add	r0, sp, #32
 800d0d8:	c803      	ldmia	r0, {r0, r1}
 800d0da:	e886 0003 	stmia.w	r6, {r0, r1}
 800d0de:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 800d0e2:	ae15      	add	r6, sp, #84	; 0x54
 800d0e4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800d0e6:	f8db 3000 	ldr.w	r3, [fp]
 800d0ea:	6033      	str	r3, [r6, #0]
 800d0ec:	ab1a      	add	r3, sp, #104	; 0x68
 800d0ee:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800d0f2:	6866      	ldr	r6, [r4, #4]
 800d0f4:	6a76      	ldr	r6, [r6, #36]	; 0x24
 800d0f6:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800d0fa:	4649      	mov	r1, r9
 800d0fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d0fe:	4630      	mov	r0, r6
 800d100:	463a      	mov	r2, r7
 800d102:	f003 f8af 	bl	8010264 <rcl_guard_condition_init_from_rmw>
 800d106:	4681      	mov	r9, r0
 800d108:	b328      	cbz	r0, 800d156 <rcl_node_init+0x21a>
 800d10a:	6863      	ldr	r3, [r4, #4]
 800d10c:	b1f3      	cbz	r3, 800d14c <rcl_node_init+0x210>
 800d10e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800d110:	b128      	cbz	r0, 800d11e <rcl_node_init+0x1e2>
 800d112:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d116:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800d11a:	4798      	blx	r3
 800d11c:	6863      	ldr	r3, [r4, #4]
 800d11e:	6a18      	ldr	r0, [r3, #32]
 800d120:	b110      	cbz	r0, 800d128 <rcl_node_init+0x1ec>
 800d122:	f001 fa0b 	bl	800e53c <rmw_destroy_node>
 800d126:	6863      	ldr	r3, [r4, #4]
 800d128:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800d12a:	b148      	cbz	r0, 800d140 <rcl_node_init+0x204>
 800d12c:	f003 f8f2 	bl	8010314 <rcl_guard_condition_fini>
 800d130:	6862      	ldr	r2, [r4, #4]
 800d132:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d136:	6a50      	ldr	r0, [r2, #36]	; 0x24
 800d138:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800d13c:	4798      	blx	r3
 800d13e:	6863      	ldr	r3, [r4, #4]
 800d140:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800d144:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800d148:	4618      	mov	r0, r3
 800d14a:	4790      	blx	r2
 800d14c:	2300      	movs	r3, #0
 800d14e:	e9c4 3300 	strd	r3, r3, [r4]
 800d152:	f04f 0901 	mov.w	r9, #1
 800d156:	f1ba 0f00 	cmp.w	sl, #0
 800d15a:	d125      	bne.n	800d1a8 <rcl_node_init+0x26c>
 800d15c:	e001      	b.n	800d162 <rcl_node_init+0x226>
 800d15e:	f04f 090b 	mov.w	r9, #11
 800d162:	4648      	mov	r0, r9
 800d164:	b01b      	add	sp, #108	; 0x6c
 800d166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d16a:	f04f 0965 	mov.w	r9, #101	; 0x65
 800d16e:	e7f8      	b.n	800d162 <rcl_node_init+0x226>
 800d170:	782b      	ldrb	r3, [r5, #0]
 800d172:	2b2f      	cmp	r3, #47	; 0x2f
 800d174:	f43f af2d 	beq.w	800cfd2 <rcl_node_init+0x96>
 800d178:	4927      	ldr	r1, [pc, #156]	; (800d218 <rcl_node_init+0x2dc>)
 800d17a:	f8db 3010 	ldr.w	r3, [fp, #16]
 800d17e:	9300      	str	r3, [sp, #0]
 800d180:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d184:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800d188:	9503      	str	r5, [sp, #12]
 800d18a:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 800d18e:	f000 fbc5 	bl	800d91c <rcutils_format_string_limit>
 800d192:	4605      	mov	r5, r0
 800d194:	b348      	cbz	r0, 800d1ea <rcl_node_init+0x2ae>
 800d196:	2200      	movs	r2, #0
 800d198:	a914      	add	r1, sp, #80	; 0x50
 800d19a:	9214      	str	r2, [sp, #80]	; 0x50
 800d19c:	f000 fde0 	bl	800dd60 <rmw_validate_namespace>
 800d1a0:	4681      	mov	r9, r0
 800d1a2:	2800      	cmp	r0, #0
 800d1a4:	f43f af1f 	beq.w	800cfe6 <rcl_node_init+0xaa>
 800d1a8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d1ac:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800d1b0:	4628      	mov	r0, r5
 800d1b2:	4798      	blx	r3
 800d1b4:	e7d5      	b.n	800d162 <rcl_node_init+0x226>
 800d1b6:	f04f 0964 	mov.w	r9, #100	; 0x64
 800d1ba:	4648      	mov	r0, r9
 800d1bc:	b01b      	add	sp, #108	; 0x6c
 800d1be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1c2:	f04f 090a 	mov.w	r9, #10
 800d1c6:	f1ba 0f00 	cmp.w	sl, #0
 800d1ca:	d1ed      	bne.n	800d1a8 <rcl_node_init+0x26c>
 800d1cc:	e7c9      	b.n	800d162 <rcl_node_init+0x226>
 800d1ce:	f000 fe37 	bl	800de40 <rmw_node_name_validation_result_string>
 800d1d2:	f04f 09c9 	mov.w	r9, #201	; 0xc9
 800d1d6:	e7c4      	b.n	800d162 <rcl_node_init+0x226>
 800d1d8:	4618      	mov	r0, r3
 800d1da:	f000 fdd3 	bl	800dd84 <rmw_namespace_validation_result_string>
 800d1de:	f04f 09ca 	mov.w	r9, #202	; 0xca
 800d1e2:	f1ba 0f00 	cmp.w	sl, #0
 800d1e6:	d1df      	bne.n	800d1a8 <rcl_node_init+0x26c>
 800d1e8:	e7bb      	b.n	800d162 <rcl_node_init+0x226>
 800d1ea:	f04f 090a 	mov.w	r9, #10
 800d1ee:	e7b8      	b.n	800d162 <rcl_node_init+0x226>
 800d1f0:	a813      	add	r0, sp, #76	; 0x4c
 800d1f2:	f002 fff9 	bl	80101e8 <rcl_get_default_domain_id>
 800d1f6:	2800      	cmp	r0, #0
 800d1f8:	d187      	bne.n	800d10a <rcl_node_init+0x1ce>
 800d1fa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d1fc:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800d200:	1c5a      	adds	r2, r3, #1
 800d202:	bf04      	itt	eq
 800d204:	9013      	streq	r0, [sp, #76]	; 0x4c
 800d206:	4603      	moveq	r3, r0
 800d208:	e73b      	b.n	800d082 <rcl_node_init+0x146>
 800d20a:	bf00      	nop
 800d20c:	080120c0 	.word	0x080120c0
 800d210:	08012050 	.word	0x08012050
 800d214:	08012084 	.word	0x08012084
 800d218:	080120c4 	.word	0x080120c4

0800d21c <rcl_node_is_valid>:
 800d21c:	b130      	cbz	r0, 800d22c <rcl_node_is_valid+0x10>
 800d21e:	6843      	ldr	r3, [r0, #4]
 800d220:	b123      	cbz	r3, 800d22c <rcl_node_is_valid+0x10>
 800d222:	6a1b      	ldr	r3, [r3, #32]
 800d224:	b113      	cbz	r3, 800d22c <rcl_node_is_valid+0x10>
 800d226:	6800      	ldr	r0, [r0, #0]
 800d228:	f7ff ba5e 	b.w	800c6e8 <rcl_context_is_valid>
 800d22c:	2000      	movs	r0, #0
 800d22e:	4770      	bx	lr

0800d230 <rcl_node_get_name>:
 800d230:	b120      	cbz	r0, 800d23c <rcl_node_get_name+0xc>
 800d232:	6840      	ldr	r0, [r0, #4]
 800d234:	b110      	cbz	r0, 800d23c <rcl_node_get_name+0xc>
 800d236:	6a00      	ldr	r0, [r0, #32]
 800d238:	b100      	cbz	r0, 800d23c <rcl_node_get_name+0xc>
 800d23a:	6880      	ldr	r0, [r0, #8]
 800d23c:	4770      	bx	lr
 800d23e:	bf00      	nop

0800d240 <rcl_node_get_namespace>:
 800d240:	b120      	cbz	r0, 800d24c <rcl_node_get_namespace+0xc>
 800d242:	6840      	ldr	r0, [r0, #4]
 800d244:	b110      	cbz	r0, 800d24c <rcl_node_get_namespace+0xc>
 800d246:	6a00      	ldr	r0, [r0, #32]
 800d248:	b100      	cbz	r0, 800d24c <rcl_node_get_namespace+0xc>
 800d24a:	68c0      	ldr	r0, [r0, #12]
 800d24c:	4770      	bx	lr
 800d24e:	bf00      	nop

0800d250 <rcl_node_get_options>:
 800d250:	b128      	cbz	r0, 800d25e <rcl_node_get_options+0xe>
 800d252:	6840      	ldr	r0, [r0, #4]
 800d254:	b118      	cbz	r0, 800d25e <rcl_node_get_options+0xe>
 800d256:	6a03      	ldr	r3, [r0, #32]
 800d258:	2b00      	cmp	r3, #0
 800d25a:	bf08      	it	eq
 800d25c:	2000      	moveq	r0, #0
 800d25e:	4770      	bx	lr

0800d260 <rcl_node_get_rmw_handle>:
 800d260:	b110      	cbz	r0, 800d268 <rcl_node_get_rmw_handle+0x8>
 800d262:	6840      	ldr	r0, [r0, #4]
 800d264:	b100      	cbz	r0, 800d268 <rcl_node_get_rmw_handle+0x8>
 800d266:	6a00      	ldr	r0, [r0, #32]
 800d268:	4770      	bx	lr
 800d26a:	bf00      	nop

0800d26c <rcl_node_get_default_options>:
 800d26c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d26e:	b087      	sub	sp, #28
 800d270:	4607      	mov	r7, r0
 800d272:	466d      	mov	r5, sp
 800d274:	4668      	mov	r0, sp
 800d276:	f7fa fecf 	bl	8008018 <rcutils_get_default_allocator>
 800d27a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d27c:	4c08      	ldr	r4, [pc, #32]	; (800d2a0 <rcl_node_get_default_options+0x34>)
 800d27e:	f8d5 c000 	ldr.w	ip, [r5]
 800d282:	1d26      	adds	r6, r4, #4
 800d284:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800d286:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d288:	463d      	mov	r5, r7
 800d28a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d28c:	f8c6 c000 	str.w	ip, [r6]
 800d290:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800d294:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800d298:	4638      	mov	r0, r7
 800d29a:	b007      	add	sp, #28
 800d29c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d29e:	bf00      	nop
 800d2a0:	20000050 	.word	0x20000050

0800d2a4 <rcl_node_options_copy>:
 800d2a4:	b1c8      	cbz	r0, 800d2da <rcl_node_options_copy+0x36>
 800d2a6:	b4f0      	push	{r4, r5, r6, r7}
 800d2a8:	460f      	mov	r7, r1
 800d2aa:	b199      	cbz	r1, 800d2d4 <rcl_node_options_copy+0x30>
 800d2ac:	4288      	cmp	r0, r1
 800d2ae:	4606      	mov	r6, r0
 800d2b0:	d010      	beq.n	800d2d4 <rcl_node_options_copy+0x30>
 800d2b2:	4605      	mov	r5, r0
 800d2b4:	460c      	mov	r4, r1
 800d2b6:	f855 3b04 	ldr.w	r3, [r5], #4
 800d2ba:	f844 3b04 	str.w	r3, [r4], #4
 800d2be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d2c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d2c2:	7e32      	ldrb	r2, [r6, #24]
 800d2c4:	6829      	ldr	r1, [r5, #0]
 800d2c6:	7e73      	ldrb	r3, [r6, #25]
 800d2c8:	6021      	str	r1, [r4, #0]
 800d2ca:	2000      	movs	r0, #0
 800d2cc:	763a      	strb	r2, [r7, #24]
 800d2ce:	767b      	strb	r3, [r7, #25]
 800d2d0:	bcf0      	pop	{r4, r5, r6, r7}
 800d2d2:	4770      	bx	lr
 800d2d4:	200b      	movs	r0, #11
 800d2d6:	bcf0      	pop	{r4, r5, r6, r7}
 800d2d8:	4770      	bx	lr
 800d2da:	200b      	movs	r0, #11
 800d2dc:	4770      	bx	lr
 800d2de:	bf00      	nop

0800d2e0 <exact_match_lookup>:
 800d2e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d2e2:	f102 0708 	add.w	r7, r2, #8
 800d2e6:	460b      	mov	r3, r1
 800d2e8:	4614      	mov	r4, r2
 800d2ea:	4606      	mov	r6, r0
 800d2ec:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800d2f0:	b085      	sub	sp, #20
 800d2f2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	4918      	ldr	r1, [pc, #96]	; (800d35c <exact_match_lookup+0x7c>)
 800d2fa:	e894 000c 	ldmia.w	r4, {r2, r3}
 800d2fe:	f000 faff 	bl	800d900 <rcutils_join_path>
 800d302:	7833      	ldrb	r3, [r6, #0]
 800d304:	2b2f      	cmp	r3, #47	; 0x2f
 800d306:	4605      	mov	r5, r0
 800d308:	d021      	beq.n	800d34e <exact_match_lookup+0x6e>
 800d30a:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 800d30e:	e88d 0003 	stmia.w	sp, {r0, r1}
 800d312:	1c70      	adds	r0, r6, #1
 800d314:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800d318:	f000 faf8 	bl	800d90c <rcutils_to_native_path>
 800d31c:	4606      	mov	r6, r0
 800d31e:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800d322:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800d326:	4631      	mov	r1, r6
 800d328:	e894 000c 	ldmia.w	r4, {r2, r3}
 800d32c:	4628      	mov	r0, r5
 800d32e:	f000 fae7 	bl	800d900 <rcutils_join_path>
 800d332:	6862      	ldr	r2, [r4, #4]
 800d334:	6921      	ldr	r1, [r4, #16]
 800d336:	4603      	mov	r3, r0
 800d338:	4630      	mov	r0, r6
 800d33a:	461e      	mov	r6, r3
 800d33c:	4790      	blx	r2
 800d33e:	4628      	mov	r0, r5
 800d340:	6863      	ldr	r3, [r4, #4]
 800d342:	6921      	ldr	r1, [r4, #16]
 800d344:	4798      	blx	r3
 800d346:	4635      	mov	r5, r6
 800d348:	4628      	mov	r0, r5
 800d34a:	b005      	add	sp, #20
 800d34c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d34e:	7873      	ldrb	r3, [r6, #1]
 800d350:	2b00      	cmp	r3, #0
 800d352:	d1da      	bne.n	800d30a <exact_match_lookup+0x2a>
 800d354:	4628      	mov	r0, r5
 800d356:	b005      	add	sp, #20
 800d358:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d35a:	bf00      	nop
 800d35c:	0801210c 	.word	0x0801210c

0800d360 <rcl_get_secure_root>:
 800d360:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d364:	b085      	sub	sp, #20
 800d366:	b168      	cbz	r0, 800d384 <rcl_get_secure_root+0x24>
 800d368:	4607      	mov	r7, r0
 800d36a:	4608      	mov	r0, r1
 800d36c:	460c      	mov	r4, r1
 800d36e:	f7fa fe61 	bl	8008034 <rcutils_allocator_is_valid>
 800d372:	b138      	cbz	r0, 800d384 <rcl_get_secure_root+0x24>
 800d374:	2300      	movs	r3, #0
 800d376:	482d      	ldr	r0, [pc, #180]	; (800d42c <rcl_get_secure_root+0xcc>)
 800d378:	9303      	str	r3, [sp, #12]
 800d37a:	a903      	add	r1, sp, #12
 800d37c:	f000 fb08 	bl	800d990 <rcutils_get_env>
 800d380:	4605      	mov	r5, r0
 800d382:	b120      	cbz	r0, 800d38e <rcl_get_secure_root+0x2e>
 800d384:	2500      	movs	r5, #0
 800d386:	4628      	mov	r0, r5
 800d388:	b005      	add	sp, #20
 800d38a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d38e:	9b03      	ldr	r3, [sp, #12]
 800d390:	781a      	ldrb	r2, [r3, #0]
 800d392:	2a00      	cmp	r2, #0
 800d394:	d0f6      	beq.n	800d384 <rcl_get_secure_root+0x24>
 800d396:	f104 090c 	add.w	r9, r4, #12
 800d39a:	e899 0003 	ldmia.w	r9, {r0, r1}
 800d39e:	e88d 0003 	stmia.w	sp, {r0, r1}
 800d3a2:	4618      	mov	r0, r3
 800d3a4:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800d3a8:	f000 fbe2 	bl	800db70 <rcutils_strdup>
 800d3ac:	4680      	mov	r8, r0
 800d3ae:	2800      	cmp	r0, #0
 800d3b0:	d0e8      	beq.n	800d384 <rcl_get_secure_root+0x24>
 800d3b2:	481f      	ldr	r0, [pc, #124]	; (800d430 <rcl_get_secure_root+0xd0>)
 800d3b4:	9503      	str	r5, [sp, #12]
 800d3b6:	a903      	add	r1, sp, #12
 800d3b8:	f000 faea 	bl	800d990 <rcutils_get_env>
 800d3bc:	b160      	cbz	r0, 800d3d8 <rcl_get_secure_root+0x78>
 800d3be:	2600      	movs	r6, #0
 800d3c0:	6863      	ldr	r3, [r4, #4]
 800d3c2:	6921      	ldr	r1, [r4, #16]
 800d3c4:	4630      	mov	r0, r6
 800d3c6:	4798      	blx	r3
 800d3c8:	4640      	mov	r0, r8
 800d3ca:	6863      	ldr	r3, [r4, #4]
 800d3cc:	6921      	ldr	r1, [r4, #16]
 800d3ce:	4798      	blx	r3
 800d3d0:	4628      	mov	r0, r5
 800d3d2:	b005      	add	sp, #20
 800d3d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d3d8:	9b03      	ldr	r3, [sp, #12]
 800d3da:	781e      	ldrb	r6, [r3, #0]
 800d3dc:	b1f6      	cbz	r6, 800d41c <rcl_get_secure_root+0xbc>
 800d3de:	e899 0003 	ldmia.w	r9, {r0, r1}
 800d3e2:	e88d 0003 	stmia.w	sp, {r0, r1}
 800d3e6:	4618      	mov	r0, r3
 800d3e8:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800d3ec:	f000 fbc0 	bl	800db70 <rcutils_strdup>
 800d3f0:	4606      	mov	r6, r0
 800d3f2:	2800      	cmp	r0, #0
 800d3f4:	d0e3      	beq.n	800d3be <rcl_get_secure_root+0x5e>
 800d3f6:	4622      	mov	r2, r4
 800d3f8:	4641      	mov	r1, r8
 800d3fa:	f7ff ff71 	bl	800d2e0 <exact_match_lookup>
 800d3fe:	4605      	mov	r5, r0
 800d400:	2d00      	cmp	r5, #0
 800d402:	d0dd      	beq.n	800d3c0 <rcl_get_secure_root+0x60>
 800d404:	4628      	mov	r0, r5
 800d406:	f000 fa79 	bl	800d8fc <rcutils_is_directory>
 800d40a:	4607      	mov	r7, r0
 800d40c:	2800      	cmp	r0, #0
 800d40e:	d1d7      	bne.n	800d3c0 <rcl_get_secure_root+0x60>
 800d410:	4628      	mov	r0, r5
 800d412:	6863      	ldr	r3, [r4, #4]
 800d414:	6921      	ldr	r1, [r4, #16]
 800d416:	4798      	blx	r3
 800d418:	463d      	mov	r5, r7
 800d41a:	e7d1      	b.n	800d3c0 <rcl_get_secure_root+0x60>
 800d41c:	4638      	mov	r0, r7
 800d41e:	4622      	mov	r2, r4
 800d420:	4641      	mov	r1, r8
 800d422:	f7ff ff5d 	bl	800d2e0 <exact_match_lookup>
 800d426:	4605      	mov	r5, r0
 800d428:	e7ea      	b.n	800d400 <rcl_get_secure_root+0xa0>
 800d42a:	bf00      	nop
 800d42c:	08012118 	.word	0x08012118
 800d430:	08012130 	.word	0x08012130

0800d434 <rcl_get_security_options_from_environment>:
 800d434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d438:	b082      	sub	sp, #8
 800d43a:	4607      	mov	r7, r0
 800d43c:	4688      	mov	r8, r1
 800d43e:	2400      	movs	r4, #0
 800d440:	481d      	ldr	r0, [pc, #116]	; (800d4b8 <rcl_get_security_options_from_environment+0x84>)
 800d442:	9401      	str	r4, [sp, #4]
 800d444:	a901      	add	r1, sp, #4
 800d446:	4616      	mov	r6, r2
 800d448:	f000 faa2 	bl	800d990 <rcutils_get_env>
 800d44c:	b120      	cbz	r0, 800d458 <rcl_get_security_options_from_environment+0x24>
 800d44e:	2501      	movs	r5, #1
 800d450:	4628      	mov	r0, r5
 800d452:	b002      	add	sp, #8
 800d454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d458:	4918      	ldr	r1, [pc, #96]	; (800d4bc <rcl_get_security_options_from_environment+0x88>)
 800d45a:	4604      	mov	r4, r0
 800d45c:	9801      	ldr	r0, [sp, #4]
 800d45e:	f7f2 fed7 	bl	8000210 <strcmp>
 800d462:	4605      	mov	r5, r0
 800d464:	b9c8      	cbnz	r0, 800d49a <rcl_get_security_options_from_environment+0x66>
 800d466:	9001      	str	r0, [sp, #4]
 800d468:	b1ee      	cbz	r6, 800d4a6 <rcl_get_security_options_from_environment+0x72>
 800d46a:	4815      	ldr	r0, [pc, #84]	; (800d4c0 <rcl_get_security_options_from_environment+0x8c>)
 800d46c:	a901      	add	r1, sp, #4
 800d46e:	f000 fa8f 	bl	800d990 <rcutils_get_env>
 800d472:	2800      	cmp	r0, #0
 800d474:	d1eb      	bne.n	800d44e <rcl_get_security_options_from_environment+0x1a>
 800d476:	4913      	ldr	r1, [pc, #76]	; (800d4c4 <rcl_get_security_options_from_environment+0x90>)
 800d478:	9801      	ldr	r0, [sp, #4]
 800d47a:	f7f2 fec9 	bl	8000210 <strcmp>
 800d47e:	fab0 f080 	clz	r0, r0
 800d482:	0940      	lsrs	r0, r0, #5
 800d484:	7030      	strb	r0, [r6, #0]
 800d486:	4641      	mov	r1, r8
 800d488:	4638      	mov	r0, r7
 800d48a:	f7ff ff69 	bl	800d360 <rcl_get_secure_root>
 800d48e:	b160      	cbz	r0, 800d4aa <rcl_get_security_options_from_environment+0x76>
 800d490:	6070      	str	r0, [r6, #4]
 800d492:	4628      	mov	r0, r5
 800d494:	b002      	add	sp, #8
 800d496:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d49a:	4625      	mov	r5, r4
 800d49c:	4628      	mov	r0, r5
 800d49e:	7034      	strb	r4, [r6, #0]
 800d4a0:	b002      	add	sp, #8
 800d4a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4a6:	250b      	movs	r5, #11
 800d4a8:	e7d2      	b.n	800d450 <rcl_get_security_options_from_environment+0x1c>
 800d4aa:	7835      	ldrb	r5, [r6, #0]
 800d4ac:	f1a5 0501 	sub.w	r5, r5, #1
 800d4b0:	fab5 f585 	clz	r5, r5
 800d4b4:	096d      	lsrs	r5, r5, #5
 800d4b6:	e7cb      	b.n	800d450 <rcl_get_security_options_from_environment+0x1c>
 800d4b8:	080120d0 	.word	0x080120d0
 800d4bc:	080120e4 	.word	0x080120e4
 800d4c0:	080120ec 	.word	0x080120ec
 800d4c4:	08012104 	.word	0x08012104

0800d4c8 <rcl_get_system_time>:
 800d4c8:	4608      	mov	r0, r1
 800d4ca:	f000 bb8f 	b.w	800dbec <rcutils_system_time_now>
 800d4ce:	bf00      	nop

0800d4d0 <rcl_get_steady_time>:
 800d4d0:	4608      	mov	r0, r1
 800d4d2:	f000 bbb3 	b.w	800dc3c <rcutils_steady_time_now>
 800d4d6:	bf00      	nop

0800d4d8 <rcl_get_ros_time>:
 800d4d8:	7a03      	ldrb	r3, [r0, #8]
 800d4da:	b510      	push	{r4, lr}
 800d4dc:	460c      	mov	r4, r1
 800d4de:	b133      	cbz	r3, 800d4ee <rcl_get_ros_time+0x16>
 800d4e0:	2105      	movs	r1, #5
 800d4e2:	f000 f9d7 	bl	800d894 <__atomic_load_8>
 800d4e6:	e9c4 0100 	strd	r0, r1, [r4]
 800d4ea:	2000      	movs	r0, #0
 800d4ec:	bd10      	pop	{r4, pc}
 800d4ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d4f2:	4608      	mov	r0, r1
 800d4f4:	f000 bb7a 	b.w	800dbec <rcutils_system_time_now>

0800d4f8 <rcl_clock_init>:
 800d4f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d4fc:	4606      	mov	r6, r0
 800d4fe:	4610      	mov	r0, r2
 800d500:	4614      	mov	r4, r2
 800d502:	460d      	mov	r5, r1
 800d504:	f7fa fd96 	bl	8008034 <rcutils_allocator_is_valid>
 800d508:	b128      	cbz	r0, 800d516 <rcl_clock_init+0x1e>
 800d50a:	2e03      	cmp	r6, #3
 800d50c:	d803      	bhi.n	800d516 <rcl_clock_init+0x1e>
 800d50e:	e8df f006 	tbb	[pc, r6]
 800d512:	2c1b      	.short	0x2c1b
 800d514:	0554      	.short	0x0554
 800d516:	200b      	movs	r0, #11
 800d518:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d51c:	2d00      	cmp	r5, #0
 800d51e:	d0fa      	beq.n	800d516 <rcl_clock_init+0x1e>
 800d520:	2c00      	cmp	r4, #0
 800d522:	d0f8      	beq.n	800d516 <rcl_clock_init+0x1e>
 800d524:	2600      	movs	r6, #0
 800d526:	702e      	strb	r6, [r5, #0]
 800d528:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d52a:	f105 0714 	add.w	r7, r5, #20
 800d52e:	e9c5 6601 	strd	r6, r6, [r5, #4]
 800d532:	612e      	str	r6, [r5, #16]
 800d534:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800d536:	6823      	ldr	r3, [r4, #0]
 800d538:	603b      	str	r3, [r7, #0]
 800d53a:	2303      	movs	r3, #3
 800d53c:	4a2b      	ldr	r2, [pc, #172]	; (800d5ec <rcl_clock_init+0xf4>)
 800d53e:	702b      	strb	r3, [r5, #0]
 800d540:	4630      	mov	r0, r6
 800d542:	60ea      	str	r2, [r5, #12]
 800d544:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d548:	2d00      	cmp	r5, #0
 800d54a:	d0e4      	beq.n	800d516 <rcl_clock_init+0x1e>
 800d54c:	2600      	movs	r6, #0
 800d54e:	702e      	strb	r6, [r5, #0]
 800d550:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d552:	f105 0714 	add.w	r7, r5, #20
 800d556:	e9c5 6601 	strd	r6, r6, [r5, #4]
 800d55a:	e9c5 6603 	strd	r6, r6, [r5, #12]
 800d55e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800d560:	6823      	ldr	r3, [r4, #0]
 800d562:	603b      	str	r3, [r7, #0]
 800d564:	4630      	mov	r0, r6
 800d566:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d56a:	2d00      	cmp	r5, #0
 800d56c:	d0d3      	beq.n	800d516 <rcl_clock_init+0x1e>
 800d56e:	2c00      	cmp	r4, #0
 800d570:	d0d1      	beq.n	800d516 <rcl_clock_init+0x1e>
 800d572:	2600      	movs	r6, #0
 800d574:	702e      	strb	r6, [r5, #0]
 800d576:	46a4      	mov	ip, r4
 800d578:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d57c:	f105 0714 	add.w	r7, r5, #20
 800d580:	e9c5 6601 	strd	r6, r6, [r5, #4]
 800d584:	e9c5 6603 	strd	r6, r6, [r5, #12]
 800d588:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800d58a:	f8dc 3000 	ldr.w	r3, [ip]
 800d58e:	603b      	str	r3, [r7, #0]
 800d590:	6921      	ldr	r1, [r4, #16]
 800d592:	6823      	ldr	r3, [r4, #0]
 800d594:	2010      	movs	r0, #16
 800d596:	4798      	blx	r3
 800d598:	4603      	mov	r3, r0
 800d59a:	6128      	str	r0, [r5, #16]
 800d59c:	b318      	cbz	r0, 800d5e6 <rcl_clock_init+0xee>
 800d59e:	f04f 0800 	mov.w	r8, #0
 800d5a2:	f04f 0900 	mov.w	r9, #0
 800d5a6:	7206      	strb	r6, [r0, #8]
 800d5a8:	e9c3 8900 	strd	r8, r9, [r3]
 800d5ac:	2301      	movs	r3, #1
 800d5ae:	4a10      	ldr	r2, [pc, #64]	; (800d5f0 <rcl_clock_init+0xf8>)
 800d5b0:	702b      	strb	r3, [r5, #0]
 800d5b2:	4630      	mov	r0, r6
 800d5b4:	60ea      	str	r2, [r5, #12]
 800d5b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d5ba:	2d00      	cmp	r5, #0
 800d5bc:	d0ab      	beq.n	800d516 <rcl_clock_init+0x1e>
 800d5be:	2c00      	cmp	r4, #0
 800d5c0:	d0a9      	beq.n	800d516 <rcl_clock_init+0x1e>
 800d5c2:	2600      	movs	r6, #0
 800d5c4:	702e      	strb	r6, [r5, #0]
 800d5c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d5c8:	f105 0714 	add.w	r7, r5, #20
 800d5cc:	e9c5 6601 	strd	r6, r6, [r5, #4]
 800d5d0:	612e      	str	r6, [r5, #16]
 800d5d2:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800d5d4:	6823      	ldr	r3, [r4, #0]
 800d5d6:	603b      	str	r3, [r7, #0]
 800d5d8:	2302      	movs	r3, #2
 800d5da:	4a06      	ldr	r2, [pc, #24]	; (800d5f4 <rcl_clock_init+0xfc>)
 800d5dc:	702b      	strb	r3, [r5, #0]
 800d5de:	4630      	mov	r0, r6
 800d5e0:	60ea      	str	r2, [r5, #12]
 800d5e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d5e6:	200a      	movs	r0, #10
 800d5e8:	e796      	b.n	800d518 <rcl_clock_init+0x20>
 800d5ea:	bf00      	nop
 800d5ec:	0800d4d1 	.word	0x0800d4d1
 800d5f0:	0800d4d9 	.word	0x0800d4d9
 800d5f4:	0800d4c9 	.word	0x0800d4c9

0800d5f8 <rcl_validate_enclave_name_with_size>:
 800d5f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d5fa:	b0c3      	sub	sp, #268	; 0x10c
 800d5fc:	b1d0      	cbz	r0, 800d634 <rcl_validate_enclave_name_with_size+0x3c>
 800d5fe:	4615      	mov	r5, r2
 800d600:	b1c2      	cbz	r2, 800d634 <rcl_validate_enclave_name_with_size+0x3c>
 800d602:	461f      	mov	r7, r3
 800d604:	466a      	mov	r2, sp
 800d606:	ab01      	add	r3, sp, #4
 800d608:	460e      	mov	r6, r1
 800d60a:	f000 fb5b 	bl	800dcc4 <rmw_validate_namespace_with_size>
 800d60e:	4604      	mov	r4, r0
 800d610:	b9e0      	cbnz	r0, 800d64c <rcl_validate_enclave_name_with_size+0x54>
 800d612:	9b00      	ldr	r3, [sp, #0]
 800d614:	b923      	cbnz	r3, 800d620 <rcl_validate_enclave_name_with_size+0x28>
 800d616:	2300      	movs	r3, #0
 800d618:	602b      	str	r3, [r5, #0]
 800d61a:	4620      	mov	r0, r4
 800d61c:	b043      	add	sp, #268	; 0x10c
 800d61e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d620:	2b07      	cmp	r3, #7
 800d622:	d00b      	beq.n	800d63c <rcl_validate_enclave_name_with_size+0x44>
 800d624:	1e5a      	subs	r2, r3, #1
 800d626:	2a05      	cmp	r2, #5
 800d628:	d82e      	bhi.n	800d688 <rcl_validate_enclave_name_with_size+0x90>
 800d62a:	e8df f002 	tbb	[pc, r2]
 800d62e:	211e      	.short	0x211e
 800d630:	152a2724 	.word	0x152a2724
 800d634:	240b      	movs	r4, #11
 800d636:	4620      	mov	r0, r4
 800d638:	b043      	add	sp, #268	; 0x10c
 800d63a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d63c:	2eff      	cmp	r6, #255	; 0xff
 800d63e:	d9ea      	bls.n	800d616 <rcl_validate_enclave_name_with_size+0x1e>
 800d640:	602b      	str	r3, [r5, #0]
 800d642:	2f00      	cmp	r7, #0
 800d644:	d0e9      	beq.n	800d61a <rcl_validate_enclave_name_with_size+0x22>
 800d646:	23fe      	movs	r3, #254	; 0xfe
 800d648:	603b      	str	r3, [r7, #0]
 800d64a:	e7e6      	b.n	800d61a <rcl_validate_enclave_name_with_size+0x22>
 800d64c:	f7ff f82e 	bl	800c6ac <rcl_convert_rmw_ret_to_rcl_ret>
 800d650:	4604      	mov	r4, r0
 800d652:	4620      	mov	r0, r4
 800d654:	b043      	add	sp, #268	; 0x10c
 800d656:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d658:	2306      	movs	r3, #6
 800d65a:	602b      	str	r3, [r5, #0]
 800d65c:	2f00      	cmp	r7, #0
 800d65e:	d0dc      	beq.n	800d61a <rcl_validate_enclave_name_with_size+0x22>
 800d660:	9b01      	ldr	r3, [sp, #4]
 800d662:	603b      	str	r3, [r7, #0]
 800d664:	4620      	mov	r0, r4
 800d666:	b043      	add	sp, #268	; 0x10c
 800d668:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d66a:	2301      	movs	r3, #1
 800d66c:	602b      	str	r3, [r5, #0]
 800d66e:	e7f5      	b.n	800d65c <rcl_validate_enclave_name_with_size+0x64>
 800d670:	2302      	movs	r3, #2
 800d672:	602b      	str	r3, [r5, #0]
 800d674:	e7f2      	b.n	800d65c <rcl_validate_enclave_name_with_size+0x64>
 800d676:	2303      	movs	r3, #3
 800d678:	602b      	str	r3, [r5, #0]
 800d67a:	e7ef      	b.n	800d65c <rcl_validate_enclave_name_with_size+0x64>
 800d67c:	2304      	movs	r3, #4
 800d67e:	602b      	str	r3, [r5, #0]
 800d680:	e7ec      	b.n	800d65c <rcl_validate_enclave_name_with_size+0x64>
 800d682:	2305      	movs	r3, #5
 800d684:	602b      	str	r3, [r5, #0]
 800d686:	e7e9      	b.n	800d65c <rcl_validate_enclave_name_with_size+0x64>
 800d688:	4a03      	ldr	r2, [pc, #12]	; (800d698 <rcl_validate_enclave_name_with_size+0xa0>)
 800d68a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d68e:	a802      	add	r0, sp, #8
 800d690:	f000 fa42 	bl	800db18 <rcutils_snprintf>
 800d694:	2401      	movs	r4, #1
 800d696:	e7c0      	b.n	800d61a <rcl_validate_enclave_name_with_size+0x22>
 800d698:	08012150 	.word	0x08012150

0800d69c <rcl_validate_enclave_name>:
 800d69c:	b168      	cbz	r0, 800d6ba <rcl_validate_enclave_name+0x1e>
 800d69e:	b570      	push	{r4, r5, r6, lr}
 800d6a0:	460d      	mov	r5, r1
 800d6a2:	4616      	mov	r6, r2
 800d6a4:	4604      	mov	r4, r0
 800d6a6:	f7f2 fdbd 	bl	8000224 <strlen>
 800d6aa:	4633      	mov	r3, r6
 800d6ac:	4601      	mov	r1, r0
 800d6ae:	462a      	mov	r2, r5
 800d6b0:	4620      	mov	r0, r4
 800d6b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d6b6:	f7ff bf9f 	b.w	800d5f8 <rcl_validate_enclave_name_with_size>
 800d6ba:	200b      	movs	r0, #11
 800d6bc:	4770      	bx	lr
 800d6be:	bf00      	nop

0800d6c0 <rcl_validate_topic_name>:
 800d6c0:	2800      	cmp	r0, #0
 800d6c2:	f000 808b 	beq.w	800d7dc <rcl_validate_topic_name+0x11c>
 800d6c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d6ca:	460e      	mov	r6, r1
 800d6cc:	2900      	cmp	r1, #0
 800d6ce:	f000 808c 	beq.w	800d7ea <rcl_validate_topic_name+0x12a>
 800d6d2:	4617      	mov	r7, r2
 800d6d4:	4605      	mov	r5, r0
 800d6d6:	f7f2 fda5 	bl	8000224 <strlen>
 800d6da:	b1b0      	cbz	r0, 800d70a <rcl_validate_topic_name+0x4a>
 800d6dc:	f895 9000 	ldrb.w	r9, [r5]
 800d6e0:	f8df c1ac 	ldr.w	ip, [pc, #428]	; 800d890 <rcl_validate_topic_name+0x1d0>
 800d6e4:	f81c 3009 	ldrb.w	r3, [ip, r9]
 800d6e8:	f013 0304 	ands.w	r3, r3, #4
 800d6ec:	d178      	bne.n	800d7e0 <rcl_validate_topic_name+0x120>
 800d6ee:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800d6f2:	f815 2008 	ldrb.w	r2, [r5, r8]
 800d6f6:	2a2f      	cmp	r2, #47	; 0x2f
 800d6f8:	d10e      	bne.n	800d718 <rcl_validate_topic_name+0x58>
 800d6fa:	2202      	movs	r2, #2
 800d6fc:	6032      	str	r2, [r6, #0]
 800d6fe:	b36f      	cbz	r7, 800d75c <rcl_validate_topic_name+0x9c>
 800d700:	f8c7 8000 	str.w	r8, [r7]
 800d704:	4618      	mov	r0, r3
 800d706:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d70a:	2301      	movs	r3, #1
 800d70c:	6033      	str	r3, [r6, #0]
 800d70e:	b32f      	cbz	r7, 800d75c <rcl_validate_topic_name+0x9c>
 800d710:	2000      	movs	r0, #0
 800d712:	6038      	str	r0, [r7, #0]
 800d714:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d718:	461c      	mov	r4, r3
 800d71a:	4619      	mov	r1, r3
 800d71c:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
 800d720:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 800d724:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800d728:	f1be 0f09 	cmp.w	lr, #9
 800d72c:	d946      	bls.n	800d7bc <rcl_validate_topic_name+0xfc>
 800d72e:	f022 0e20 	bic.w	lr, r2, #32
 800d732:	f1ae 0e41 	sub.w	lr, lr, #65	; 0x41
 800d736:	f1be 0f19 	cmp.w	lr, #25
 800d73a:	d93f      	bls.n	800d7bc <rcl_validate_topic_name+0xfc>
 800d73c:	2a5f      	cmp	r2, #95	; 0x5f
 800d73e:	d014      	beq.n	800d76a <rcl_validate_topic_name+0xaa>
 800d740:	2a2f      	cmp	r2, #47	; 0x2f
 800d742:	d05b      	beq.n	800d7fc <rcl_validate_topic_name+0x13c>
 800d744:	2a7e      	cmp	r2, #126	; 0x7e
 800d746:	d052      	beq.n	800d7ee <rcl_validate_topic_name+0x12e>
 800d748:	2a7b      	cmp	r2, #123	; 0x7b
 800d74a:	d00a      	beq.n	800d762 <rcl_validate_topic_name+0xa2>
 800d74c:	2a7d      	cmp	r2, #125	; 0x7d
 800d74e:	d16f      	bne.n	800d830 <rcl_validate_topic_name+0x170>
 800d750:	2c00      	cmp	r4, #0
 800d752:	d15e      	bne.n	800d812 <rcl_validate_topic_name+0x152>
 800d754:	2305      	movs	r3, #5
 800d756:	6033      	str	r3, [r6, #0]
 800d758:	b107      	cbz	r7, 800d75c <rcl_validate_topic_name+0x9c>
 800d75a:	6039      	str	r1, [r7, #0]
 800d75c:	2000      	movs	r0, #0
 800d75e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d762:	2c00      	cmp	r4, #0
 800d764:	d14c      	bne.n	800d800 <rcl_validate_topic_name+0x140>
 800d766:	460b      	mov	r3, r1
 800d768:	2401      	movs	r4, #1
 800d76a:	3101      	adds	r1, #1
 800d76c:	4288      	cmp	r0, r1
 800d76e:	d1d7      	bne.n	800d720 <rcl_validate_topic_name+0x60>
 800d770:	2c00      	cmp	r4, #0
 800d772:	d156      	bne.n	800d822 <rcl_validate_topic_name+0x162>
 800d774:	f1b9 0f7e 	cmp.w	r9, #126	; 0x7e
 800d778:	4620      	mov	r0, r4
 800d77a:	d061      	beq.n	800d840 <rcl_validate_topic_name+0x180>
 800d77c:	f108 0e01 	add.w	lr, r8, #1
 800d780:	e007      	b.n	800d792 <rcl_validate_topic_name+0xd2>
 800d782:	2801      	cmp	r0, #1
 800d784:	d047      	beq.n	800d816 <rcl_validate_topic_name+0x156>
 800d786:	461a      	mov	r2, r3
 800d788:	4291      	cmp	r1, r2
 800d78a:	4618      	mov	r0, r3
 800d78c:	f105 0501 	add.w	r5, r5, #1
 800d790:	d944      	bls.n	800d81c <rcl_validate_topic_name+0x15c>
 800d792:	4580      	cmp	r8, r0
 800d794:	f100 0301 	add.w	r3, r0, #1
 800d798:	d037      	beq.n	800d80a <rcl_validate_topic_name+0x14a>
 800d79a:	782a      	ldrb	r2, [r5, #0]
 800d79c:	2a2f      	cmp	r2, #47	; 0x2f
 800d79e:	d1f0      	bne.n	800d782 <rcl_validate_topic_name+0xc2>
 800d7a0:	786b      	ldrb	r3, [r5, #1]
 800d7a2:	f81c 4003 	ldrb.w	r4, [ip, r3]
 800d7a6:	1c43      	adds	r3, r0, #1
 800d7a8:	0760      	lsls	r0, r4, #29
 800d7aa:	461a      	mov	r2, r3
 800d7ac:	d5ec      	bpl.n	800d788 <rcl_validate_topic_name+0xc8>
 800d7ae:	2304      	movs	r3, #4
 800d7b0:	6033      	str	r3, [r6, #0]
 800d7b2:	2f00      	cmp	r7, #0
 800d7b4:	d0d2      	beq.n	800d75c <rcl_validate_topic_name+0x9c>
 800d7b6:	603a      	str	r2, [r7, #0]
 800d7b8:	2000      	movs	r0, #0
 800d7ba:	e7ab      	b.n	800d714 <rcl_validate_topic_name+0x54>
 800d7bc:	f81c 2002 	ldrb.w	r2, [ip, r2]
 800d7c0:	0752      	lsls	r2, r2, #29
 800d7c2:	d5d2      	bpl.n	800d76a <rcl_validate_topic_name+0xaa>
 800d7c4:	2c00      	cmp	r4, #0
 800d7c6:	d0d0      	beq.n	800d76a <rcl_validate_topic_name+0xaa>
 800d7c8:	2900      	cmp	r1, #0
 800d7ca:	d0ce      	beq.n	800d76a <rcl_validate_topic_name+0xaa>
 800d7cc:	1e4a      	subs	r2, r1, #1
 800d7ce:	429a      	cmp	r2, r3
 800d7d0:	d1cb      	bne.n	800d76a <rcl_validate_topic_name+0xaa>
 800d7d2:	2309      	movs	r3, #9
 800d7d4:	6033      	str	r3, [r6, #0]
 800d7d6:	2f00      	cmp	r7, #0
 800d7d8:	d1bf      	bne.n	800d75a <rcl_validate_topic_name+0x9a>
 800d7da:	e7bf      	b.n	800d75c <rcl_validate_topic_name+0x9c>
 800d7dc:	200b      	movs	r0, #11
 800d7de:	4770      	bx	lr
 800d7e0:	2304      	movs	r3, #4
 800d7e2:	6033      	str	r3, [r6, #0]
 800d7e4:	2f00      	cmp	r7, #0
 800d7e6:	d193      	bne.n	800d710 <rcl_validate_topic_name+0x50>
 800d7e8:	e7b8      	b.n	800d75c <rcl_validate_topic_name+0x9c>
 800d7ea:	200b      	movs	r0, #11
 800d7ec:	e792      	b.n	800d714 <rcl_validate_topic_name+0x54>
 800d7ee:	2900      	cmp	r1, #0
 800d7f0:	d0bb      	beq.n	800d76a <rcl_validate_topic_name+0xaa>
 800d7f2:	2306      	movs	r3, #6
 800d7f4:	6033      	str	r3, [r6, #0]
 800d7f6:	2f00      	cmp	r7, #0
 800d7f8:	d1af      	bne.n	800d75a <rcl_validate_topic_name+0x9a>
 800d7fa:	e7af      	b.n	800d75c <rcl_validate_topic_name+0x9c>
 800d7fc:	2c00      	cmp	r4, #0
 800d7fe:	d0b4      	beq.n	800d76a <rcl_validate_topic_name+0xaa>
 800d800:	2308      	movs	r3, #8
 800d802:	6033      	str	r3, [r6, #0]
 800d804:	2f00      	cmp	r7, #0
 800d806:	d1a8      	bne.n	800d75a <rcl_validate_topic_name+0x9a>
 800d808:	e7a8      	b.n	800d75c <rcl_validate_topic_name+0x9c>
 800d80a:	4672      	mov	r2, lr
 800d80c:	f108 0301 	add.w	r3, r8, #1
 800d810:	e7ba      	b.n	800d788 <rcl_validate_topic_name+0xc8>
 800d812:	2400      	movs	r4, #0
 800d814:	e7a9      	b.n	800d76a <rcl_validate_topic_name+0xaa>
 800d816:	2202      	movs	r2, #2
 800d818:	4613      	mov	r3, r2
 800d81a:	e7b5      	b.n	800d788 <rcl_validate_topic_name+0xc8>
 800d81c:	2000      	movs	r0, #0
 800d81e:	6030      	str	r0, [r6, #0]
 800d820:	e778      	b.n	800d714 <rcl_validate_topic_name+0x54>
 800d822:	2205      	movs	r2, #5
 800d824:	6032      	str	r2, [r6, #0]
 800d826:	2f00      	cmp	r7, #0
 800d828:	d098      	beq.n	800d75c <rcl_validate_topic_name+0x9c>
 800d82a:	603b      	str	r3, [r7, #0]
 800d82c:	2000      	movs	r0, #0
 800d82e:	e771      	b.n	800d714 <rcl_validate_topic_name+0x54>
 800d830:	2c00      	cmp	r4, #0
 800d832:	bf14      	ite	ne
 800d834:	2308      	movne	r3, #8
 800d836:	2303      	moveq	r3, #3
 800d838:	6033      	str	r3, [r6, #0]
 800d83a:	2f00      	cmp	r7, #0
 800d83c:	d18d      	bne.n	800d75a <rcl_validate_topic_name+0x9a>
 800d83e:	e78d      	b.n	800d75c <rcl_validate_topic_name+0x9c>
 800d840:	f108 0401 	add.w	r4, r8, #1
 800d844:	e007      	b.n	800d856 <rcl_validate_topic_name+0x196>
 800d846:	2801      	cmp	r0, #1
 800d848:	d019      	beq.n	800d87e <rcl_validate_topic_name+0x1be>
 800d84a:	461a      	mov	r2, r3
 800d84c:	4291      	cmp	r1, r2
 800d84e:	4618      	mov	r0, r3
 800d850:	f105 0501 	add.w	r5, r5, #1
 800d854:	d9e2      	bls.n	800d81c <rcl_validate_topic_name+0x15c>
 800d856:	4580      	cmp	r8, r0
 800d858:	f100 0301 	add.w	r3, r0, #1
 800d85c:	d00b      	beq.n	800d876 <rcl_validate_topic_name+0x1b6>
 800d85e:	782a      	ldrb	r2, [r5, #0]
 800d860:	2a2f      	cmp	r2, #47	; 0x2f
 800d862:	d1f0      	bne.n	800d846 <rcl_validate_topic_name+0x186>
 800d864:	786b      	ldrb	r3, [r5, #1]
 800d866:	f81c e003 	ldrb.w	lr, [ip, r3]
 800d86a:	1c43      	adds	r3, r0, #1
 800d86c:	f01e 0f04 	tst.w	lr, #4
 800d870:	461a      	mov	r2, r3
 800d872:	d0eb      	beq.n	800d84c <rcl_validate_topic_name+0x18c>
 800d874:	e79b      	b.n	800d7ae <rcl_validate_topic_name+0xee>
 800d876:	4622      	mov	r2, r4
 800d878:	f108 0301 	add.w	r3, r8, #1
 800d87c:	e7e6      	b.n	800d84c <rcl_validate_topic_name+0x18c>
 800d87e:	2307      	movs	r3, #7
 800d880:	6033      	str	r3, [r6, #0]
 800d882:	2f00      	cmp	r7, #0
 800d884:	f43f af6a 	beq.w	800d75c <rcl_validate_topic_name+0x9c>
 800d888:	6038      	str	r0, [r7, #0]
 800d88a:	2000      	movs	r0, #0
 800d88c:	e742      	b.n	800d714 <rcl_validate_topic_name+0x54>
 800d88e:	bf00      	nop
 800d890:	08012735 	.word	0x08012735

0800d894 <__atomic_load_8>:
 800d894:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 800d898:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 800d89c:	4b14      	ldr	r3, [pc, #80]	; (800d8f0 <__atomic_load_8+0x5c>)
 800d89e:	4a15      	ldr	r2, [pc, #84]	; (800d8f4 <__atomic_load_8+0x60>)
 800d8a0:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800d8a4:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 800d8a8:	fb03 f301 	mul.w	r3, r3, r1
 800d8ac:	ea83 33d3 	eor.w	r3, r3, r3, lsr #15
 800d8b0:	fba2 1203 	umull	r1, r2, r2, r3
 800d8b4:	0912      	lsrs	r2, r2, #4
 800d8b6:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 800d8ba:	b430      	push	{r4, r5}
 800d8bc:	ebc2 02c1 	rsb	r2, r2, r1, lsl #3
 800d8c0:	4c0d      	ldr	r4, [pc, #52]	; (800d8f8 <__atomic_load_8+0x64>)
 800d8c2:	1a9b      	subs	r3, r3, r2
 800d8c4:	18e1      	adds	r1, r4, r3
 800d8c6:	f04f 0501 	mov.w	r5, #1
 800d8ca:	e8d1 2f4f 	ldrexb	r2, [r1]
 800d8ce:	e8c1 5f4c 	strexb	ip, r5, [r1]
 800d8d2:	f1bc 0f00 	cmp.w	ip, #0
 800d8d6:	d1f8      	bne.n	800d8ca <__atomic_load_8+0x36>
 800d8d8:	f3bf 8f5b 	dmb	ish
 800d8dc:	b2d2      	uxtb	r2, r2
 800d8de:	2a00      	cmp	r2, #0
 800d8e0:	d1f3      	bne.n	800d8ca <__atomic_load_8+0x36>
 800d8e2:	e9d0 0100 	ldrd	r0, r1, [r0]
 800d8e6:	f3bf 8f5b 	dmb	ish
 800d8ea:	54e2      	strb	r2, [r4, r3]
 800d8ec:	bc30      	pop	{r4, r5}
 800d8ee:	4770      	bx	lr
 800d8f0:	27d4eb2d 	.word	0x27d4eb2d
 800d8f4:	b21642c9 	.word	0xb21642c9
 800d8f8:	2000bfbc 	.word	0x2000bfbc

0800d8fc <rcutils_is_directory>:
 800d8fc:	2000      	movs	r0, #0
 800d8fe:	4770      	bx	lr

0800d900 <rcutils_join_path>:
 800d900:	b082      	sub	sp, #8
 800d902:	e88d 000c 	stmia.w	sp, {r2, r3}
 800d906:	2000      	movs	r0, #0
 800d908:	b002      	add	sp, #8
 800d90a:	4770      	bx	lr

0800d90c <rcutils_to_native_path>:
 800d90c:	b084      	sub	sp, #16
 800d90e:	a801      	add	r0, sp, #4
 800d910:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800d914:	b004      	add	sp, #16
 800d916:	2000      	movs	r0, #0
 800d918:	4770      	bx	lr
 800d91a:	bf00      	nop

0800d91c <rcutils_format_string_limit>:
 800d91c:	b40f      	push	{r0, r1, r2, r3}
 800d91e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d920:	b083      	sub	sp, #12
 800d922:	ac08      	add	r4, sp, #32
 800d924:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800d926:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d92a:	b34e      	cbz	r6, 800d980 <rcutils_format_string_limit+0x64>
 800d92c:	a808      	add	r0, sp, #32
 800d92e:	f7fa fb81 	bl	8008034 <rcutils_allocator_is_valid>
 800d932:	b328      	cbz	r0, 800d980 <rcutils_format_string_limit+0x64>
 800d934:	2100      	movs	r1, #0
 800d936:	ab0f      	add	r3, sp, #60	; 0x3c
 800d938:	4608      	mov	r0, r1
 800d93a:	4632      	mov	r2, r6
 800d93c:	e9cd 3300 	strd	r3, r3, [sp]
 800d940:	f000 f904 	bl	800db4c <rcutils_vsnprintf>
 800d944:	1c43      	adds	r3, r0, #1
 800d946:	4605      	mov	r5, r0
 800d948:	d01a      	beq.n	800d980 <rcutils_format_string_limit+0x64>
 800d94a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d94c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d94e:	1c47      	adds	r7, r0, #1
 800d950:	429f      	cmp	r7, r3
 800d952:	bf84      	itt	hi
 800d954:	461f      	movhi	r7, r3
 800d956:	f103 35ff 	addhi.w	r5, r3, #4294967295	; 0xffffffff
 800d95a:	4638      	mov	r0, r7
 800d95c:	9b08      	ldr	r3, [sp, #32]
 800d95e:	4798      	blx	r3
 800d960:	4604      	mov	r4, r0
 800d962:	b168      	cbz	r0, 800d980 <rcutils_format_string_limit+0x64>
 800d964:	9b01      	ldr	r3, [sp, #4]
 800d966:	4632      	mov	r2, r6
 800d968:	4639      	mov	r1, r7
 800d96a:	f000 f8ef 	bl	800db4c <rcutils_vsnprintf>
 800d96e:	2800      	cmp	r0, #0
 800d970:	db02      	blt.n	800d978 <rcutils_format_string_limit+0x5c>
 800d972:	2300      	movs	r3, #0
 800d974:	5563      	strb	r3, [r4, r5]
 800d976:	e004      	b.n	800d982 <rcutils_format_string_limit+0x66>
 800d978:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d97a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d97c:	4620      	mov	r0, r4
 800d97e:	4798      	blx	r3
 800d980:	2400      	movs	r4, #0
 800d982:	4620      	mov	r0, r4
 800d984:	b003      	add	sp, #12
 800d986:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d98a:	b004      	add	sp, #16
 800d98c:	4770      	bx	lr
 800d98e:	bf00      	nop

0800d990 <rcutils_get_env>:
 800d990:	b168      	cbz	r0, 800d9ae <rcutils_get_env+0x1e>
 800d992:	b510      	push	{r4, lr}
 800d994:	460c      	mov	r4, r1
 800d996:	b129      	cbz	r1, 800d9a4 <rcutils_get_env+0x14>
 800d998:	f002 fe5a 	bl	8010650 <getenv>
 800d99c:	b120      	cbz	r0, 800d9a8 <rcutils_get_env+0x18>
 800d99e:	6020      	str	r0, [r4, #0]
 800d9a0:	2000      	movs	r0, #0
 800d9a2:	bd10      	pop	{r4, pc}
 800d9a4:	4803      	ldr	r0, [pc, #12]	; (800d9b4 <rcutils_get_env+0x24>)
 800d9a6:	bd10      	pop	{r4, pc}
 800d9a8:	4b03      	ldr	r3, [pc, #12]	; (800d9b8 <rcutils_get_env+0x28>)
 800d9aa:	6023      	str	r3, [r4, #0]
 800d9ac:	bd10      	pop	{r4, pc}
 800d9ae:	4803      	ldr	r0, [pc, #12]	; (800d9bc <rcutils_get_env+0x2c>)
 800d9b0:	4770      	bx	lr
 800d9b2:	bf00      	nop
 800d9b4:	080121cc 	.word	0x080121cc
 800d9b8:	080122f0 	.word	0x080122f0
 800d9bc:	080121b0 	.word	0x080121b0

0800d9c0 <rcutils_repl_str>:
 800d9c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9c4:	ed2d 8b02 	vpush	{d8}
 800d9c8:	b087      	sub	sp, #28
 800d9ca:	4680      	mov	r8, r0
 800d9cc:	4608      	mov	r0, r1
 800d9ce:	f8cd 8000 	str.w	r8, [sp]
 800d9d2:	ee08 2a10 	vmov	s16, r2
 800d9d6:	468a      	mov	sl, r1
 800d9d8:	4699      	mov	r9, r3
 800d9da:	f7f2 fc23 	bl	8000224 <strlen>
 800d9de:	2600      	movs	r6, #0
 800d9e0:	4647      	mov	r7, r8
 800d9e2:	9001      	str	r0, [sp, #4]
 800d9e4:	46b3      	mov	fp, r6
 800d9e6:	2510      	movs	r5, #16
 800d9e8:	46b0      	mov	r8, r6
 800d9ea:	e01d      	b.n	800da28 <rcutils_repl_str+0x68>
 800d9ec:	f10b 0b01 	add.w	fp, fp, #1
 800d9f0:	455e      	cmp	r6, fp
 800d9f2:	d211      	bcs.n	800da18 <rcutils_repl_str+0x58>
 800d9f4:	442e      	add	r6, r5
 800d9f6:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800d9fa:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800d9fe:	00b1      	lsls	r1, r6, #2
 800da00:	4798      	blx	r3
 800da02:	2800      	cmp	r0, #0
 800da04:	f000 8084 	beq.w	800db10 <rcutils_repl_str+0x150>
 800da08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800da0c:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 800da10:	bf28      	it	cs
 800da12:	f44f 1580 	movcs.w	r5, #1048576	; 0x100000
 800da16:	4680      	mov	r8, r0
 800da18:	9a00      	ldr	r2, [sp, #0]
 800da1a:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 800da1e:	1aa2      	subs	r2, r4, r2
 800da20:	f843 2c04 	str.w	r2, [r3, #-4]
 800da24:	9b01      	ldr	r3, [sp, #4]
 800da26:	18e7      	adds	r7, r4, r3
 800da28:	4651      	mov	r1, sl
 800da2a:	4638      	mov	r0, r7
 800da2c:	f003 f891 	bl	8010b52 <strstr>
 800da30:	4604      	mov	r4, r0
 800da32:	4640      	mov	r0, r8
 800da34:	2c00      	cmp	r4, #0
 800da36:	d1d9      	bne.n	800d9ec <rcutils_repl_str+0x2c>
 800da38:	46b8      	mov	r8, r7
 800da3a:	4607      	mov	r7, r0
 800da3c:	4640      	mov	r0, r8
 800da3e:	f7f2 fbf1 	bl	8000224 <strlen>
 800da42:	9b00      	ldr	r3, [sp, #0]
 800da44:	eba8 0303 	sub.w	r3, r8, r3
 800da48:	181d      	adds	r5, r3, r0
 800da4a:	9504      	str	r5, [sp, #16]
 800da4c:	f1bb 0f00 	cmp.w	fp, #0
 800da50:	d03d      	beq.n	800dace <rcutils_repl_str+0x10e>
 800da52:	ee18 0a10 	vmov	r0, s16
 800da56:	f7f2 fbe5 	bl	8000224 <strlen>
 800da5a:	9b01      	ldr	r3, [sp, #4]
 800da5c:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800da60:	1ac3      	subs	r3, r0, r3
 800da62:	fb0b 5303 	mla	r3, fp, r3, r5
 800da66:	9305      	str	r3, [sp, #20]
 800da68:	4606      	mov	r6, r0
 800da6a:	1c58      	adds	r0, r3, #1
 800da6c:	f8d9 3000 	ldr.w	r3, [r9]
 800da70:	4798      	blx	r3
 800da72:	9003      	str	r0, [sp, #12]
 800da74:	2800      	cmp	r0, #0
 800da76:	d04c      	beq.n	800db12 <rcutils_repl_str+0x152>
 800da78:	683a      	ldr	r2, [r7, #0]
 800da7a:	9900      	ldr	r1, [sp, #0]
 800da7c:	f002 fe64 	bl	8010748 <memcpy>
 800da80:	9b03      	ldr	r3, [sp, #12]
 800da82:	683d      	ldr	r5, [r7, #0]
 800da84:	ee18 8a10 	vmov	r8, s16
 800da88:	441d      	add	r5, r3
 800da8a:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 800da8e:	9302      	str	r3, [sp, #8]
 800da90:	46ba      	mov	sl, r7
 800da92:	4632      	mov	r2, r6
 800da94:	4641      	mov	r1, r8
 800da96:	4628      	mov	r0, r5
 800da98:	f002 fe56 	bl	8010748 <memcpy>
 800da9c:	9b01      	ldr	r3, [sp, #4]
 800da9e:	f85a 2b04 	ldr.w	r2, [sl], #4
 800daa2:	441a      	add	r2, r3
 800daa4:	9b00      	ldr	r3, [sp, #0]
 800daa6:	1899      	adds	r1, r3, r2
 800daa8:	9b02      	ldr	r3, [sp, #8]
 800daaa:	4435      	add	r5, r6
 800daac:	429c      	cmp	r4, r3
 800daae:	4628      	mov	r0, r5
 800dab0:	d025      	beq.n	800dafe <rcutils_repl_str+0x13e>
 800dab2:	f8da 3000 	ldr.w	r3, [sl]
 800dab6:	3401      	adds	r4, #1
 800dab8:	1a9a      	subs	r2, r3, r2
 800daba:	4415      	add	r5, r2
 800dabc:	f002 fe44 	bl	8010748 <memcpy>
 800dac0:	455c      	cmp	r4, fp
 800dac2:	d3e6      	bcc.n	800da92 <rcutils_repl_str+0xd2>
 800dac4:	9a03      	ldr	r2, [sp, #12]
 800dac6:	9905      	ldr	r1, [sp, #20]
 800dac8:	2300      	movs	r3, #0
 800daca:	5453      	strb	r3, [r2, r1]
 800dacc:	e00b      	b.n	800dae6 <rcutils_repl_str+0x126>
 800dace:	4628      	mov	r0, r5
 800dad0:	f8d9 3000 	ldr.w	r3, [r9]
 800dad4:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800dad8:	3001      	adds	r0, #1
 800dada:	4798      	blx	r3
 800dadc:	9003      	str	r0, [sp, #12]
 800dade:	b110      	cbz	r0, 800dae6 <rcutils_repl_str+0x126>
 800dae0:	9900      	ldr	r1, [sp, #0]
 800dae2:	f003 f81a 	bl	8010b1a <strcpy>
 800dae6:	4638      	mov	r0, r7
 800dae8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800daec:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800daf0:	4798      	blx	r3
 800daf2:	9803      	ldr	r0, [sp, #12]
 800daf4:	b007      	add	sp, #28
 800daf6:	ecbd 8b02 	vpop	{d8}
 800dafa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dafe:	9b04      	ldr	r3, [sp, #16]
 800db00:	3401      	adds	r4, #1
 800db02:	1a9a      	subs	r2, r3, r2
 800db04:	4415      	add	r5, r2
 800db06:	f002 fe1f 	bl	8010748 <memcpy>
 800db0a:	455c      	cmp	r4, fp
 800db0c:	d3c1      	bcc.n	800da92 <rcutils_repl_str+0xd2>
 800db0e:	e7d9      	b.n	800dac4 <rcutils_repl_str+0x104>
 800db10:	4647      	mov	r7, r8
 800db12:	2300      	movs	r3, #0
 800db14:	9303      	str	r3, [sp, #12]
 800db16:	e7e6      	b.n	800dae6 <rcutils_repl_str+0x126>

0800db18 <rcutils_snprintf>:
 800db18:	b40c      	push	{r2, r3}
 800db1a:	b530      	push	{r4, r5, lr}
 800db1c:	b083      	sub	sp, #12
 800db1e:	ab06      	add	r3, sp, #24
 800db20:	f853 2b04 	ldr.w	r2, [r3], #4
 800db24:	9301      	str	r3, [sp, #4]
 800db26:	b152      	cbz	r2, 800db3e <rcutils_snprintf+0x26>
 800db28:	b138      	cbz	r0, 800db3a <rcutils_snprintf+0x22>
 800db2a:	b141      	cbz	r1, 800db3e <rcutils_snprintf+0x26>
 800db2c:	f003 f8d0 	bl	8010cd0 <vsniprintf>
 800db30:	b003      	add	sp, #12
 800db32:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800db36:	b002      	add	sp, #8
 800db38:	4770      	bx	lr
 800db3a:	2900      	cmp	r1, #0
 800db3c:	d0f6      	beq.n	800db2c <rcutils_snprintf+0x14>
 800db3e:	f002 fd81 	bl	8010644 <__errno>
 800db42:	2316      	movs	r3, #22
 800db44:	6003      	str	r3, [r0, #0]
 800db46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800db4a:	e7f1      	b.n	800db30 <rcutils_snprintf+0x18>

0800db4c <rcutils_vsnprintf>:
 800db4c:	b570      	push	{r4, r5, r6, lr}
 800db4e:	b13a      	cbz	r2, 800db60 <rcutils_vsnprintf+0x14>
 800db50:	b120      	cbz	r0, 800db5c <rcutils_vsnprintf+0x10>
 800db52:	b129      	cbz	r1, 800db60 <rcutils_vsnprintf+0x14>
 800db54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800db58:	f003 b8ba 	b.w	8010cd0 <vsniprintf>
 800db5c:	2900      	cmp	r1, #0
 800db5e:	d0f9      	beq.n	800db54 <rcutils_vsnprintf+0x8>
 800db60:	f002 fd70 	bl	8010644 <__errno>
 800db64:	2316      	movs	r3, #22
 800db66:	6003      	str	r3, [r0, #0]
 800db68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800db6c:	bd70      	pop	{r4, r5, r6, pc}
 800db6e:	bf00      	nop

0800db70 <rcutils_strdup>:
 800db70:	b084      	sub	sp, #16
 800db72:	b570      	push	{r4, r5, r6, lr}
 800db74:	b082      	sub	sp, #8
 800db76:	ac07      	add	r4, sp, #28
 800db78:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 800db7c:	4605      	mov	r5, r0
 800db7e:	b1b0      	cbz	r0, 800dbae <rcutils_strdup+0x3e>
 800db80:	f7f2 fb50 	bl	8000224 <strlen>
 800db84:	1c42      	adds	r2, r0, #1
 800db86:	9b07      	ldr	r3, [sp, #28]
 800db88:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800db8a:	9201      	str	r2, [sp, #4]
 800db8c:	4606      	mov	r6, r0
 800db8e:	4610      	mov	r0, r2
 800db90:	4798      	blx	r3
 800db92:	4604      	mov	r4, r0
 800db94:	b128      	cbz	r0, 800dba2 <rcutils_strdup+0x32>
 800db96:	9a01      	ldr	r2, [sp, #4]
 800db98:	4629      	mov	r1, r5
 800db9a:	f002 fdd5 	bl	8010748 <memcpy>
 800db9e:	2300      	movs	r3, #0
 800dba0:	55a3      	strb	r3, [r4, r6]
 800dba2:	4620      	mov	r0, r4
 800dba4:	b002      	add	sp, #8
 800dba6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dbaa:	b004      	add	sp, #16
 800dbac:	4770      	bx	lr
 800dbae:	4604      	mov	r4, r0
 800dbb0:	e7f7      	b.n	800dba2 <rcutils_strdup+0x32>
 800dbb2:	bf00      	nop

0800dbb4 <rcutils_strndup>:
 800dbb4:	b082      	sub	sp, #8
 800dbb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbb8:	460e      	mov	r6, r1
 800dbba:	a906      	add	r1, sp, #24
 800dbbc:	e881 000c 	stmia.w	r1, {r2, r3}
 800dbc0:	4605      	mov	r5, r0
 800dbc2:	b180      	cbz	r0, 800dbe6 <rcutils_strndup+0x32>
 800dbc4:	1c77      	adds	r7, r6, #1
 800dbc6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800dbc8:	4638      	mov	r0, r7
 800dbca:	4790      	blx	r2
 800dbcc:	4604      	mov	r4, r0
 800dbce:	b128      	cbz	r0, 800dbdc <rcutils_strndup+0x28>
 800dbd0:	463a      	mov	r2, r7
 800dbd2:	4629      	mov	r1, r5
 800dbd4:	f002 fdb8 	bl	8010748 <memcpy>
 800dbd8:	2300      	movs	r3, #0
 800dbda:	55a3      	strb	r3, [r4, r6]
 800dbdc:	4620      	mov	r0, r4
 800dbde:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800dbe2:	b002      	add	sp, #8
 800dbe4:	4770      	bx	lr
 800dbe6:	4604      	mov	r4, r0
 800dbe8:	e7f8      	b.n	800dbdc <rcutils_strndup+0x28>
 800dbea:	bf00      	nop

0800dbec <rcutils_system_time_now>:
 800dbec:	b310      	cbz	r0, 800dc34 <rcutils_system_time_now+0x48>
 800dbee:	b570      	push	{r4, r5, r6, lr}
 800dbf0:	b084      	sub	sp, #16
 800dbf2:	4669      	mov	r1, sp
 800dbf4:	4604      	mov	r4, r0
 800dbf6:	2001      	movs	r0, #1
 800dbf8:	f7f3 fa06 	bl	8001008 <clock_gettime>
 800dbfc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dc00:	2800      	cmp	r0, #0
 800dc02:	f171 0300 	sbcs.w	r3, r1, #0
 800dc06:	db12      	blt.n	800dc2e <rcutils_system_time_now+0x42>
 800dc08:	9d02      	ldr	r5, [sp, #8]
 800dc0a:	2d00      	cmp	r5, #0
 800dc0c:	db0c      	blt.n	800dc28 <rcutils_system_time_now+0x3c>
 800dc0e:	4e0a      	ldr	r6, [pc, #40]	; (800dc38 <rcutils_system_time_now+0x4c>)
 800dc10:	fba0 2306 	umull	r2, r3, r0, r6
 800dc14:	1952      	adds	r2, r2, r5
 800dc16:	fb06 3301 	mla	r3, r6, r1, r3
 800dc1a:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
 800dc1e:	2000      	movs	r0, #0
 800dc20:	e9c4 2300 	strd	r2, r3, [r4]
 800dc24:	b004      	add	sp, #16
 800dc26:	bd70      	pop	{r4, r5, r6, pc}
 800dc28:	ea50 0301 	orrs.w	r3, r0, r1
 800dc2c:	d1ef      	bne.n	800dc0e <rcutils_system_time_now+0x22>
 800dc2e:	2002      	movs	r0, #2
 800dc30:	b004      	add	sp, #16
 800dc32:	bd70      	pop	{r4, r5, r6, pc}
 800dc34:	200b      	movs	r0, #11
 800dc36:	4770      	bx	lr
 800dc38:	3b9aca00 	.word	0x3b9aca00

0800dc3c <rcutils_steady_time_now>:
 800dc3c:	b310      	cbz	r0, 800dc84 <rcutils_steady_time_now+0x48>
 800dc3e:	b570      	push	{r4, r5, r6, lr}
 800dc40:	b084      	sub	sp, #16
 800dc42:	4669      	mov	r1, sp
 800dc44:	4604      	mov	r4, r0
 800dc46:	2000      	movs	r0, #0
 800dc48:	f7f3 f9de 	bl	8001008 <clock_gettime>
 800dc4c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dc50:	2800      	cmp	r0, #0
 800dc52:	f171 0300 	sbcs.w	r3, r1, #0
 800dc56:	db12      	blt.n	800dc7e <rcutils_steady_time_now+0x42>
 800dc58:	9d02      	ldr	r5, [sp, #8]
 800dc5a:	2d00      	cmp	r5, #0
 800dc5c:	db0c      	blt.n	800dc78 <rcutils_steady_time_now+0x3c>
 800dc5e:	4e0a      	ldr	r6, [pc, #40]	; (800dc88 <rcutils_steady_time_now+0x4c>)
 800dc60:	fba0 2306 	umull	r2, r3, r0, r6
 800dc64:	1952      	adds	r2, r2, r5
 800dc66:	fb06 3301 	mla	r3, r6, r1, r3
 800dc6a:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
 800dc6e:	2000      	movs	r0, #0
 800dc70:	e9c4 2300 	strd	r2, r3, [r4]
 800dc74:	b004      	add	sp, #16
 800dc76:	bd70      	pop	{r4, r5, r6, pc}
 800dc78:	ea50 0301 	orrs.w	r3, r0, r1
 800dc7c:	d1ef      	bne.n	800dc5e <rcutils_steady_time_now+0x22>
 800dc7e:	2002      	movs	r0, #2
 800dc80:	b004      	add	sp, #16
 800dc82:	bd70      	pop	{r4, r5, r6, pc}
 800dc84:	200b      	movs	r0, #11
 800dc86:	4770      	bx	lr
 800dc88:	3b9aca00 	.word	0x3b9aca00

0800dc8c <rmw_get_zero_initialized_context>:
 800dc8c:	b510      	push	{r4, lr}
 800dc8e:	2250      	movs	r2, #80	; 0x50
 800dc90:	4604      	mov	r4, r0
 800dc92:	2100      	movs	r1, #0
 800dc94:	f002 fd66 	bl	8010764 <memset>
 800dc98:	4620      	mov	r0, r4
 800dc9a:	bd10      	pop	{r4, pc}

0800dc9c <rmw_get_zero_initialized_init_options>:
 800dc9c:	b510      	push	{r4, lr}
 800dc9e:	2238      	movs	r2, #56	; 0x38
 800dca0:	4604      	mov	r4, r0
 800dca2:	2100      	movs	r1, #0
 800dca4:	f002 fd5e 	bl	8010764 <memset>
 800dca8:	f104 0010 	add.w	r0, r4, #16
 800dcac:	f000 f806 	bl	800dcbc <rmw_get_default_security_options>
 800dcb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dcb4:	60e3      	str	r3, [r4, #12]
 800dcb6:	4620      	mov	r0, r4
 800dcb8:	bd10      	pop	{r4, pc}
 800dcba:	bf00      	nop

0800dcbc <rmw_get_default_security_options>:
 800dcbc:	2200      	movs	r2, #0
 800dcbe:	7002      	strb	r2, [r0, #0]
 800dcc0:	6042      	str	r2, [r0, #4]
 800dcc2:	4770      	bx	lr

0800dcc4 <rmw_validate_namespace_with_size>:
 800dcc4:	b340      	cbz	r0, 800dd18 <rmw_validate_namespace_with_size+0x54>
 800dcc6:	b5d0      	push	{r4, r6, r7, lr}
 800dcc8:	4614      	mov	r4, r2
 800dcca:	b0c2      	sub	sp, #264	; 0x108
 800dccc:	b332      	cbz	r2, 800dd1c <rmw_validate_namespace_with_size+0x58>
 800dcce:	2901      	cmp	r1, #1
 800dcd0:	460f      	mov	r7, r1
 800dcd2:	461e      	mov	r6, r3
 800dcd4:	d102      	bne.n	800dcdc <rmw_validate_namespace_with_size+0x18>
 800dcd6:	7803      	ldrb	r3, [r0, #0]
 800dcd8:	2b2f      	cmp	r3, #47	; 0x2f
 800dcda:	d019      	beq.n	800dd10 <rmw_validate_namespace_with_size+0x4c>
 800dcdc:	aa01      	add	r2, sp, #4
 800dcde:	4669      	mov	r1, sp
 800dce0:	f7fa fb16 	bl	8008310 <rmw_validate_full_topic_name>
 800dce4:	b990      	cbnz	r0, 800dd0c <rmw_validate_namespace_with_size+0x48>
 800dce6:	9b00      	ldr	r3, [sp, #0]
 800dce8:	b14b      	cbz	r3, 800dcfe <rmw_validate_namespace_with_size+0x3a>
 800dcea:	2b07      	cmp	r3, #7
 800dcec:	d007      	beq.n	800dcfe <rmw_validate_namespace_with_size+0x3a>
 800dcee:	1e5a      	subs	r2, r3, #1
 800dcf0:	2a05      	cmp	r2, #5
 800dcf2:	d82b      	bhi.n	800dd4c <rmw_validate_namespace_with_size+0x88>
 800dcf4:	e8df f002 	tbb	[pc, r2]
 800dcf8:	24211e1b 	.word	0x24211e1b
 800dcfc:	1427      	.short	0x1427
 800dcfe:	2ff5      	cmp	r7, #245	; 0xf5
 800dd00:	d906      	bls.n	800dd10 <rmw_validate_namespace_with_size+0x4c>
 800dd02:	2307      	movs	r3, #7
 800dd04:	6023      	str	r3, [r4, #0]
 800dd06:	b10e      	cbz	r6, 800dd0c <rmw_validate_namespace_with_size+0x48>
 800dd08:	23f4      	movs	r3, #244	; 0xf4
 800dd0a:	6033      	str	r3, [r6, #0]
 800dd0c:	b042      	add	sp, #264	; 0x108
 800dd0e:	bdd0      	pop	{r4, r6, r7, pc}
 800dd10:	2000      	movs	r0, #0
 800dd12:	6020      	str	r0, [r4, #0]
 800dd14:	b042      	add	sp, #264	; 0x108
 800dd16:	bdd0      	pop	{r4, r6, r7, pc}
 800dd18:	200b      	movs	r0, #11
 800dd1a:	4770      	bx	lr
 800dd1c:	200b      	movs	r0, #11
 800dd1e:	e7f5      	b.n	800dd0c <rmw_validate_namespace_with_size+0x48>
 800dd20:	2306      	movs	r3, #6
 800dd22:	6023      	str	r3, [r4, #0]
 800dd24:	2e00      	cmp	r6, #0
 800dd26:	d0f1      	beq.n	800dd0c <rmw_validate_namespace_with_size+0x48>
 800dd28:	9b01      	ldr	r3, [sp, #4]
 800dd2a:	6033      	str	r3, [r6, #0]
 800dd2c:	e7ee      	b.n	800dd0c <rmw_validate_namespace_with_size+0x48>
 800dd2e:	2301      	movs	r3, #1
 800dd30:	6023      	str	r3, [r4, #0]
 800dd32:	e7f7      	b.n	800dd24 <rmw_validate_namespace_with_size+0x60>
 800dd34:	2302      	movs	r3, #2
 800dd36:	6023      	str	r3, [r4, #0]
 800dd38:	e7f4      	b.n	800dd24 <rmw_validate_namespace_with_size+0x60>
 800dd3a:	2303      	movs	r3, #3
 800dd3c:	6023      	str	r3, [r4, #0]
 800dd3e:	e7f1      	b.n	800dd24 <rmw_validate_namespace_with_size+0x60>
 800dd40:	2304      	movs	r3, #4
 800dd42:	6023      	str	r3, [r4, #0]
 800dd44:	e7ee      	b.n	800dd24 <rmw_validate_namespace_with_size+0x60>
 800dd46:	2305      	movs	r3, #5
 800dd48:	6023      	str	r3, [r4, #0]
 800dd4a:	e7eb      	b.n	800dd24 <rmw_validate_namespace_with_size+0x60>
 800dd4c:	4a03      	ldr	r2, [pc, #12]	; (800dd5c <rmw_validate_namespace_with_size+0x98>)
 800dd4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800dd52:	a802      	add	r0, sp, #8
 800dd54:	f7ff fee0 	bl	800db18 <rcutils_snprintf>
 800dd58:	2001      	movs	r0, #1
 800dd5a:	e7d7      	b.n	800dd0c <rmw_validate_namespace_with_size+0x48>
 800dd5c:	080121e8 	.word	0x080121e8

0800dd60 <rmw_validate_namespace>:
 800dd60:	b168      	cbz	r0, 800dd7e <rmw_validate_namespace+0x1e>
 800dd62:	b570      	push	{r4, r5, r6, lr}
 800dd64:	460d      	mov	r5, r1
 800dd66:	4616      	mov	r6, r2
 800dd68:	4604      	mov	r4, r0
 800dd6a:	f7f2 fa5b 	bl	8000224 <strlen>
 800dd6e:	4633      	mov	r3, r6
 800dd70:	4601      	mov	r1, r0
 800dd72:	462a      	mov	r2, r5
 800dd74:	4620      	mov	r0, r4
 800dd76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dd7a:	f7ff bfa3 	b.w	800dcc4 <rmw_validate_namespace_with_size>
 800dd7e:	200b      	movs	r0, #11
 800dd80:	4770      	bx	lr
 800dd82:	bf00      	nop

0800dd84 <rmw_namespace_validation_result_string>:
 800dd84:	2807      	cmp	r0, #7
 800dd86:	bf9a      	itte	ls
 800dd88:	4b02      	ldrls	r3, [pc, #8]	; (800dd94 <rmw_namespace_validation_result_string+0x10>)
 800dd8a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800dd8e:	4802      	ldrhi	r0, [pc, #8]	; (800dd98 <rmw_namespace_validation_result_string+0x14>)
 800dd90:	4770      	bx	lr
 800dd92:	bf00      	nop
 800dd94:	080123e0 	.word	0x080123e0
 800dd98:	08012238 	.word	0x08012238

0800dd9c <rmw_validate_node_name>:
 800dd9c:	2800      	cmp	r0, #0
 800dd9e:	d03b      	beq.n	800de18 <rmw_validate_node_name+0x7c>
 800dda0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dda4:	460f      	mov	r7, r1
 800dda6:	2900      	cmp	r1, #0
 800dda8:	d038      	beq.n	800de1c <rmw_validate_node_name+0x80>
 800ddaa:	4615      	mov	r5, r2
 800ddac:	4604      	mov	r4, r0
 800ddae:	f7f2 fa39 	bl	8000224 <strlen>
 800ddb2:	b1e0      	cbz	r0, 800ddee <rmw_validate_node_name+0x52>
 800ddb4:	1e63      	subs	r3, r4, #1
 800ddb6:	eb03 0e00 	add.w	lr, r3, r0
 800ddba:	f1c4 0c01 	rsb	ip, r4, #1
 800ddbe:	eb0c 0803 	add.w	r8, ip, r3
 800ddc2:	f813 6f01 	ldrb.w	r6, [r3, #1]!
 800ddc6:	f1a6 0130 	sub.w	r1, r6, #48	; 0x30
 800ddca:	f026 0220 	bic.w	r2, r6, #32
 800ddce:	2909      	cmp	r1, #9
 800ddd0:	f1a2 0241 	sub.w	r2, r2, #65	; 0x41
 800ddd4:	d913      	bls.n	800ddfe <rmw_validate_node_name+0x62>
 800ddd6:	2a19      	cmp	r2, #25
 800ddd8:	d911      	bls.n	800ddfe <rmw_validate_node_name+0x62>
 800ddda:	2e5f      	cmp	r6, #95	; 0x5f
 800dddc:	d00f      	beq.n	800ddfe <rmw_validate_node_name+0x62>
 800ddde:	2302      	movs	r3, #2
 800dde0:	603b      	str	r3, [r7, #0]
 800dde2:	b10d      	cbz	r5, 800dde8 <rmw_validate_node_name+0x4c>
 800dde4:	f8c5 8000 	str.w	r8, [r5]
 800dde8:	2000      	movs	r0, #0
 800ddea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ddee:	2301      	movs	r3, #1
 800ddf0:	603b      	str	r3, [r7, #0]
 800ddf2:	2d00      	cmp	r5, #0
 800ddf4:	d0f8      	beq.n	800dde8 <rmw_validate_node_name+0x4c>
 800ddf6:	2000      	movs	r0, #0
 800ddf8:	6028      	str	r0, [r5, #0]
 800ddfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ddfe:	4573      	cmp	r3, lr
 800de00:	d1dd      	bne.n	800ddbe <rmw_validate_node_name+0x22>
 800de02:	7822      	ldrb	r2, [r4, #0]
 800de04:	4b0d      	ldr	r3, [pc, #52]	; (800de3c <rmw_validate_node_name+0xa0>)
 800de06:	5cd3      	ldrb	r3, [r2, r3]
 800de08:	f013 0304 	ands.w	r3, r3, #4
 800de0c:	d110      	bne.n	800de30 <rmw_validate_node_name+0x94>
 800de0e:	28ff      	cmp	r0, #255	; 0xff
 800de10:	d806      	bhi.n	800de20 <rmw_validate_node_name+0x84>
 800de12:	603b      	str	r3, [r7, #0]
 800de14:	4618      	mov	r0, r3
 800de16:	e7e8      	b.n	800ddea <rmw_validate_node_name+0x4e>
 800de18:	200b      	movs	r0, #11
 800de1a:	4770      	bx	lr
 800de1c:	200b      	movs	r0, #11
 800de1e:	e7e4      	b.n	800ddea <rmw_validate_node_name+0x4e>
 800de20:	2204      	movs	r2, #4
 800de22:	603a      	str	r2, [r7, #0]
 800de24:	2d00      	cmp	r5, #0
 800de26:	d0df      	beq.n	800dde8 <rmw_validate_node_name+0x4c>
 800de28:	22fe      	movs	r2, #254	; 0xfe
 800de2a:	4618      	mov	r0, r3
 800de2c:	602a      	str	r2, [r5, #0]
 800de2e:	e7dc      	b.n	800ddea <rmw_validate_node_name+0x4e>
 800de30:	2303      	movs	r3, #3
 800de32:	603b      	str	r3, [r7, #0]
 800de34:	2d00      	cmp	r5, #0
 800de36:	d1de      	bne.n	800ddf6 <rmw_validate_node_name+0x5a>
 800de38:	e7d6      	b.n	800dde8 <rmw_validate_node_name+0x4c>
 800de3a:	bf00      	nop
 800de3c:	08012735 	.word	0x08012735

0800de40 <rmw_node_name_validation_result_string>:
 800de40:	2804      	cmp	r0, #4
 800de42:	bf9a      	itte	ls
 800de44:	4b02      	ldrls	r3, [pc, #8]	; (800de50 <rmw_node_name_validation_result_string+0x10>)
 800de46:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800de4a:	4802      	ldrhi	r0, [pc, #8]	; (800de54 <rmw_node_name_validation_result_string+0x14>)
 800de4c:	4770      	bx	lr
 800de4e:	bf00      	nop
 800de50:	080124ec 	.word	0x080124ec
 800de54:	08012400 	.word	0x08012400

0800de58 <get_memory>:
 800de58:	4603      	mov	r3, r0
 800de5a:	6840      	ldr	r0, [r0, #4]
 800de5c:	b158      	cbz	r0, 800de76 <get_memory+0x1e>
 800de5e:	6882      	ldr	r2, [r0, #8]
 800de60:	605a      	str	r2, [r3, #4]
 800de62:	b10a      	cbz	r2, 800de68 <get_memory+0x10>
 800de64:	2100      	movs	r1, #0
 800de66:	6051      	str	r1, [r2, #4]
 800de68:	681a      	ldr	r2, [r3, #0]
 800de6a:	6082      	str	r2, [r0, #8]
 800de6c:	b102      	cbz	r2, 800de70 <get_memory+0x18>
 800de6e:	6050      	str	r0, [r2, #4]
 800de70:	2200      	movs	r2, #0
 800de72:	6042      	str	r2, [r0, #4]
 800de74:	6018      	str	r0, [r3, #0]
 800de76:	4770      	bx	lr

0800de78 <put_memory>:
 800de78:	684b      	ldr	r3, [r1, #4]
 800de7a:	b10b      	cbz	r3, 800de80 <put_memory+0x8>
 800de7c:	688a      	ldr	r2, [r1, #8]
 800de7e:	609a      	str	r2, [r3, #8]
 800de80:	688a      	ldr	r2, [r1, #8]
 800de82:	b102      	cbz	r2, 800de86 <put_memory+0xe>
 800de84:	6053      	str	r3, [r2, #4]
 800de86:	6803      	ldr	r3, [r0, #0]
 800de88:	428b      	cmp	r3, r1
 800de8a:	6843      	ldr	r3, [r0, #4]
 800de8c:	bf08      	it	eq
 800de8e:	6002      	streq	r2, [r0, #0]
 800de90:	608b      	str	r3, [r1, #8]
 800de92:	b103      	cbz	r3, 800de96 <put_memory+0x1e>
 800de94:	6059      	str	r1, [r3, #4]
 800de96:	2300      	movs	r3, #0
 800de98:	604b      	str	r3, [r1, #4]
 800de9a:	6041      	str	r1, [r0, #4]
 800de9c:	4770      	bx	lr
 800de9e:	bf00      	nop

0800dea0 <rmw_get_implementation_identifier>:
 800dea0:	4b01      	ldr	r3, [pc, #4]	; (800dea8 <rmw_get_implementation_identifier+0x8>)
 800dea2:	6818      	ldr	r0, [r3, #0]
 800dea4:	4770      	bx	lr
 800dea6:	bf00      	nop
 800dea8:	08012518 	.word	0x08012518

0800deac <rmw_init_options_init>:
 800deac:	b084      	sub	sp, #16
 800deae:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800deb2:	ad09      	add	r5, sp, #36	; 0x24
 800deb4:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800deb8:	b130      	cbz	r0, 800dec8 <rmw_init_options_init+0x1c>
 800deba:	4604      	mov	r4, r0
 800debc:	4628      	mov	r0, r5
 800debe:	f7fa f8b9 	bl	8008034 <rcutils_allocator_is_valid>
 800dec2:	b108      	cbz	r0, 800dec8 <rmw_init_options_init+0x1c>
 800dec4:	68a3      	ldr	r3, [r4, #8]
 800dec6:	b123      	cbz	r3, 800ded2 <rmw_init_options_init+0x26>
 800dec8:	200b      	movs	r0, #11
 800deca:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dece:	b004      	add	sp, #16
 800ded0:	4770      	bx	lr
 800ded2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ded4:	4f1c      	ldr	r7, [pc, #112]	; (800df48 <rmw_init_options_init+0x9c>)
 800ded6:	682e      	ldr	r6, [r5, #0]
 800ded8:	683d      	ldr	r5, [r7, #0]
 800deda:	60a5      	str	r5, [r4, #8]
 800dedc:	f04f 0800 	mov.w	r8, #0
 800dee0:	f04f 0900 	mov.w	r9, #0
 800dee4:	f104 0520 	add.w	r5, r4, #32
 800dee8:	e9c4 8900 	strd	r8, r9, [r4]
 800deec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800deee:	4b17      	ldr	r3, [pc, #92]	; (800df4c <rmw_init_options_init+0xa0>)
 800def0:	4817      	ldr	r0, [pc, #92]	; (800df50 <rmw_init_options_init+0xa4>)
 800def2:	602e      	str	r6, [r5, #0]
 800def4:	4917      	ldr	r1, [pc, #92]	; (800df54 <rmw_init_options_init+0xa8>)
 800def6:	61e3      	str	r3, [r4, #28]
 800def8:	2203      	movs	r2, #3
 800defa:	f7fa fd1b 	bl	8008934 <rmw_uxrce_init_init_options_impl_memory>
 800defe:	4814      	ldr	r0, [pc, #80]	; (800df50 <rmw_init_options_init+0xa4>)
 800df00:	f7ff ffaa 	bl	800de58 <get_memory>
 800df04:	b1e8      	cbz	r0, 800df42 <rmw_init_options_init+0x96>
 800df06:	4a14      	ldr	r2, [pc, #80]	; (800df58 <rmw_init_options_init+0xac>)
 800df08:	68c3      	ldr	r3, [r0, #12]
 800df0a:	6851      	ldr	r1, [r2, #4]
 800df0c:	7810      	ldrb	r0, [r2, #0]
 800df0e:	6363      	str	r3, [r4, #52]	; 0x34
 800df10:	7418      	strb	r0, [r3, #16]
 800df12:	6159      	str	r1, [r3, #20]
 800df14:	e9d2 5002 	ldrd	r5, r0, [r2, #8]
 800df18:	e9d2 1204 	ldrd	r1, r2, [r2, #16]
 800df1c:	e9c3 5006 	strd	r5, r0, [r3, #24]
 800df20:	e9c3 1208 	strd	r1, r2, [r3, #32]
 800df24:	f7fd fac6 	bl	800b4b4 <uxr_nanos>
 800df28:	f002 fd32 	bl	8010990 <srand>
 800df2c:	f002 fd5e 	bl	80109ec <rand>
 800df30:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800df32:	6298      	str	r0, [r3, #40]	; 0x28
 800df34:	2800      	cmp	r0, #0
 800df36:	d0f9      	beq.n	800df2c <rmw_init_options_init+0x80>
 800df38:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df3c:	2000      	movs	r0, #0
 800df3e:	b004      	add	sp, #16
 800df40:	4770      	bx	lr
 800df42:	2001      	movs	r0, #1
 800df44:	e7c1      	b.n	800deca <rmw_init_options_init+0x1e>
 800df46:	bf00      	nop
 800df48:	08012518 	.word	0x08012518
 800df4c:	080120c0 	.word	0x080120c0
 800df50:	2000f40c 	.word	0x2000f40c
 800df54:	2000f060 	.word	0x2000f060
 800df58:	2000c0f0 	.word	0x2000c0f0

0800df5c <rmw_init_options_copy>:
 800df5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df5e:	b158      	cbz	r0, 800df78 <rmw_init_options_copy+0x1c>
 800df60:	460e      	mov	r6, r1
 800df62:	b149      	cbz	r1, 800df78 <rmw_init_options_copy+0x1c>
 800df64:	4604      	mov	r4, r0
 800df66:	6880      	ldr	r0, [r0, #8]
 800df68:	b120      	cbz	r0, 800df74 <rmw_init_options_copy+0x18>
 800df6a:	4b1b      	ldr	r3, [pc, #108]	; (800dfd8 <rmw_init_options_copy+0x7c>)
 800df6c:	6819      	ldr	r1, [r3, #0]
 800df6e:	f7f2 f94f 	bl	8000210 <strcmp>
 800df72:	bb60      	cbnz	r0, 800dfce <rmw_init_options_copy+0x72>
 800df74:	68b3      	ldr	r3, [r6, #8]
 800df76:	b113      	cbz	r3, 800df7e <rmw_init_options_copy+0x22>
 800df78:	230b      	movs	r3, #11
 800df7a:	4618      	mov	r0, r3
 800df7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df7e:	4623      	mov	r3, r4
 800df80:	4632      	mov	r2, r6
 800df82:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 800df86:	681d      	ldr	r5, [r3, #0]
 800df88:	6858      	ldr	r0, [r3, #4]
 800df8a:	6899      	ldr	r1, [r3, #8]
 800df8c:	68df      	ldr	r7, [r3, #12]
 800df8e:	60d7      	str	r7, [r2, #12]
 800df90:	3310      	adds	r3, #16
 800df92:	4563      	cmp	r3, ip
 800df94:	6015      	str	r5, [r2, #0]
 800df96:	6050      	str	r0, [r2, #4]
 800df98:	6091      	str	r1, [r2, #8]
 800df9a:	f102 0210 	add.w	r2, r2, #16
 800df9e:	d1f2      	bne.n	800df86 <rmw_init_options_copy+0x2a>
 800dfa0:	6819      	ldr	r1, [r3, #0]
 800dfa2:	685b      	ldr	r3, [r3, #4]
 800dfa4:	480d      	ldr	r0, [pc, #52]	; (800dfdc <rmw_init_options_copy+0x80>)
 800dfa6:	6053      	str	r3, [r2, #4]
 800dfa8:	6011      	str	r1, [r2, #0]
 800dfaa:	f7ff ff55 	bl	800de58 <get_memory>
 800dfae:	b188      	cbz	r0, 800dfd4 <rmw_init_options_copy+0x78>
 800dfb0:	68c5      	ldr	r5, [r0, #12]
 800dfb2:	6375      	str	r5, [r6, #52]	; 0x34
 800dfb4:	6b66      	ldr	r6, [r4, #52]	; 0x34
 800dfb6:	3610      	adds	r6, #16
 800dfb8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800dfba:	f105 0410 	add.w	r4, r5, #16
 800dfbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dfc0:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800dfc4:	2300      	movs	r3, #0
 800dfc6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800dfca:	4618      	mov	r0, r3
 800dfcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dfce:	230c      	movs	r3, #12
 800dfd0:	4618      	mov	r0, r3
 800dfd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dfd4:	2301      	movs	r3, #1
 800dfd6:	e7d0      	b.n	800df7a <rmw_init_options_copy+0x1e>
 800dfd8:	08012518 	.word	0x08012518
 800dfdc:	2000f40c 	.word	0x2000f40c

0800dfe0 <rmw_init_options_fini>:
 800dfe0:	2800      	cmp	r0, #0
 800dfe2:	d036      	beq.n	800e052 <rmw_init_options_fini+0x72>
 800dfe4:	b530      	push	{r4, r5, lr}
 800dfe6:	4604      	mov	r4, r0
 800dfe8:	b08f      	sub	sp, #60	; 0x3c
 800dfea:	3020      	adds	r0, #32
 800dfec:	f7fa f822 	bl	8008034 <rcutils_allocator_is_valid>
 800dff0:	b328      	cbz	r0, 800e03e <rmw_init_options_fini+0x5e>
 800dff2:	68a0      	ldr	r0, [r4, #8]
 800dff4:	b120      	cbz	r0, 800e000 <rmw_init_options_fini+0x20>
 800dff6:	4b18      	ldr	r3, [pc, #96]	; (800e058 <rmw_init_options_fini+0x78>)
 800dff8:	6819      	ldr	r1, [r3, #0]
 800dffa:	f7f2 f909 	bl	8000210 <strcmp>
 800dffe:	bb30      	cbnz	r0, 800e04e <rmw_init_options_fini+0x6e>
 800e000:	4b16      	ldr	r3, [pc, #88]	; (800e05c <rmw_init_options_fini+0x7c>)
 800e002:	6819      	ldr	r1, [r3, #0]
 800e004:	b1f9      	cbz	r1, 800e046 <rmw_init_options_fini+0x66>
 800e006:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800e008:	e001      	b.n	800e00e <rmw_init_options_fini+0x2e>
 800e00a:	6889      	ldr	r1, [r1, #8]
 800e00c:	b1d9      	cbz	r1, 800e046 <rmw_init_options_fini+0x66>
 800e00e:	68cb      	ldr	r3, [r1, #12]
 800e010:	429a      	cmp	r2, r3
 800e012:	d1fa      	bne.n	800e00a <rmw_init_options_fini+0x2a>
 800e014:	4811      	ldr	r0, [pc, #68]	; (800e05c <rmw_init_options_fini+0x7c>)
 800e016:	f7ff ff2f 	bl	800de78 <put_memory>
 800e01a:	466d      	mov	r5, sp
 800e01c:	4668      	mov	r0, sp
 800e01e:	f7ff fe3d 	bl	800dc9c <rmw_get_zero_initialized_init_options>
 800e022:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e024:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e026:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e028:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e02a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e02c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e02e:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e032:	e884 0003 	stmia.w	r4, {r0, r1}
 800e036:	2300      	movs	r3, #0
 800e038:	4618      	mov	r0, r3
 800e03a:	b00f      	add	sp, #60	; 0x3c
 800e03c:	bd30      	pop	{r4, r5, pc}
 800e03e:	230b      	movs	r3, #11
 800e040:	4618      	mov	r0, r3
 800e042:	b00f      	add	sp, #60	; 0x3c
 800e044:	bd30      	pop	{r4, r5, pc}
 800e046:	2301      	movs	r3, #1
 800e048:	4618      	mov	r0, r3
 800e04a:	b00f      	add	sp, #60	; 0x3c
 800e04c:	bd30      	pop	{r4, r5, pc}
 800e04e:	230c      	movs	r3, #12
 800e050:	e7f2      	b.n	800e038 <rmw_init_options_fini+0x58>
 800e052:	230b      	movs	r3, #11
 800e054:	4618      	mov	r0, r3
 800e056:	4770      	bx	lr
 800e058:	08012518 	.word	0x08012518
 800e05c:	2000f40c 	.word	0x2000f40c

0800e060 <rmw_init>:
 800e060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e064:	b082      	sub	sp, #8
 800e066:	2800      	cmp	r0, #0
 800e068:	f000 80d6 	beq.w	800e218 <rmw_init+0x1b8>
 800e06c:	460e      	mov	r6, r1
 800e06e:	2900      	cmp	r1, #0
 800e070:	f000 80d2 	beq.w	800e218 <rmw_init+0x1b8>
 800e074:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e076:	4605      	mov	r5, r0
 800e078:	2b00      	cmp	r3, #0
 800e07a:	f000 80cd 	beq.w	800e218 <rmw_init+0x1b8>
 800e07e:	4b79      	ldr	r3, [pc, #484]	; (800e264 <rmw_init+0x204>)
 800e080:	6880      	ldr	r0, [r0, #8]
 800e082:	f8d3 9000 	ldr.w	r9, [r3]
 800e086:	b128      	cbz	r0, 800e094 <rmw_init+0x34>
 800e088:	4649      	mov	r1, r9
 800e08a:	f7f2 f8c1 	bl	8000210 <strcmp>
 800e08e:	2800      	cmp	r0, #0
 800e090:	f040 80cc 	bne.w	800e22c <rmw_init+0x1cc>
 800e094:	e9d5 0100 	ldrd	r0, r1, [r5]
 800e098:	68eb      	ldr	r3, [r5, #12]
 800e09a:	61f3      	str	r3, [r6, #28]
 800e09c:	e9c6 0100 	strd	r0, r1, [r6]
 800e0a0:	2201      	movs	r2, #1
 800e0a2:	4971      	ldr	r1, [pc, #452]	; (800e268 <rmw_init+0x208>)
 800e0a4:	4871      	ldr	r0, [pc, #452]	; (800e26c <rmw_init+0x20c>)
 800e0a6:	f8c6 9008 	str.w	r9, [r6, #8]
 800e0aa:	f7fa fbeb 	bl	8008884 <rmw_uxrce_init_session_memory>
 800e0ae:	4870      	ldr	r0, [pc, #448]	; (800e270 <rmw_init+0x210>)
 800e0b0:	4970      	ldr	r1, [pc, #448]	; (800e274 <rmw_init+0x214>)
 800e0b2:	2204      	movs	r2, #4
 800e0b4:	f7fa fc20 	bl	80088f8 <rmw_uxrce_init_static_input_buffer_memory>
 800e0b8:	486c      	ldr	r0, [pc, #432]	; (800e26c <rmw_init+0x20c>)
 800e0ba:	f7ff fecd 	bl	800de58 <get_memory>
 800e0be:	2800      	cmp	r0, #0
 800e0c0:	f000 80af 	beq.w	800e222 <rmw_init+0x1c2>
 800e0c4:	6b6f      	ldr	r7, [r5, #52]	; 0x34
 800e0c6:	68c4      	ldr	r4, [r0, #12]
 800e0c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e0ca:	7c39      	ldrb	r1, [r7, #16]
 800e0cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e0d0:	9001      	str	r0, [sp, #4]
 800e0d2:	6a38      	ldr	r0, [r7, #32]
 800e0d4:	9000      	str	r0, [sp, #0]
 800e0d6:	f104 0a10 	add.w	sl, r4, #16
 800e0da:	4650      	mov	r0, sl
 800e0dc:	f000 fd90 	bl	800ec00 <uxr_set_custom_transport_callbacks>
 800e0e0:	f241 5294 	movw	r2, #5524	; 0x1594
 800e0e4:	f241 5398 	movw	r3, #5528	; 0x1598
 800e0e8:	f04f 0800 	mov.w	r8, #0
 800e0ec:	f241 509c 	movw	r0, #5532	; 0x159c
 800e0f0:	f504 51ad 	add.w	r1, r4, #5536	; 0x15a0
 800e0f4:	f844 8002 	str.w	r8, [r4, r2]
 800e0f8:	f844 8003 	str.w	r8, [r4, r3]
 800e0fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e100:	f504 735e 	add.w	r3, r4, #888	; 0x378
 800e104:	f844 8000 	str.w	r8, [r4, r0]
 800e108:	e9c4 33e1 	strd	r3, r3, [r4, #900]	; 0x384
 800e10c:	e9c4 22e3 	strd	r2, r2, [r4, #908]	; 0x38c
 800e110:	4859      	ldr	r0, [pc, #356]	; (800e278 <rmw_init+0x218>)
 800e112:	f8c1 8000 	str.w	r8, [r1]
 800e116:	2201      	movs	r2, #1
 800e118:	e9c4 98da 	strd	r9, r8, [r4, #872]	; 0x368
 800e11c:	4957      	ldr	r1, [pc, #348]	; (800e27c <rmw_init+0x21c>)
 800e11e:	64b4      	str	r4, [r6, #72]	; 0x48
 800e120:	f7fa fb96 	bl	8008850 <rmw_uxrce_init_node_memory>
 800e124:	4956      	ldr	r1, [pc, #344]	; (800e280 <rmw_init+0x220>)
 800e126:	4857      	ldr	r0, [pc, #348]	; (800e284 <rmw_init+0x224>)
 800e128:	2205      	movs	r2, #5
 800e12a:	f7fa fb77 	bl	800881c <rmw_uxrce_init_subscription_memory>
 800e12e:	4956      	ldr	r1, [pc, #344]	; (800e288 <rmw_init+0x228>)
 800e130:	4856      	ldr	r0, [pc, #344]	; (800e28c <rmw_init+0x22c>)
 800e132:	220a      	movs	r2, #10
 800e134:	f7fa fb58 	bl	80087e8 <rmw_uxrce_init_publisher_memory>
 800e138:	4955      	ldr	r1, [pc, #340]	; (800e290 <rmw_init+0x230>)
 800e13a:	4856      	ldr	r0, [pc, #344]	; (800e294 <rmw_init+0x234>)
 800e13c:	2201      	movs	r2, #1
 800e13e:	f7fa fb1f 	bl	8008780 <rmw_uxrce_init_service_memory>
 800e142:	4955      	ldr	r1, [pc, #340]	; (800e298 <rmw_init+0x238>)
 800e144:	4855      	ldr	r0, [pc, #340]	; (800e29c <rmw_init+0x23c>)
 800e146:	2201      	movs	r2, #1
 800e148:	f7fa fb34 	bl	80087b4 <rmw_uxrce_init_client_memory>
 800e14c:	4954      	ldr	r1, [pc, #336]	; (800e2a0 <rmw_init+0x240>)
 800e14e:	4855      	ldr	r0, [pc, #340]	; (800e2a4 <rmw_init+0x244>)
 800e150:	220f      	movs	r2, #15
 800e152:	f7fa fbb5 	bl	80088c0 <rmw_uxrce_init_topic_memory>
 800e156:	4954      	ldr	r1, [pc, #336]	; (800e2a8 <rmw_init+0x248>)
 800e158:	4854      	ldr	r0, [pc, #336]	; (800e2ac <rmw_init+0x24c>)
 800e15a:	2203      	movs	r2, #3
 800e15c:	f7fa fbea 	bl	8008934 <rmw_uxrce_init_init_options_impl_memory>
 800e160:	4953      	ldr	r1, [pc, #332]	; (800e2b0 <rmw_init+0x250>)
 800e162:	4854      	ldr	r0, [pc, #336]	; (800e2b4 <rmw_init+0x254>)
 800e164:	2204      	movs	r2, #4
 800e166:	f7fa fbff 	bl	8008968 <rmw_uxrce_init_wait_set_memory>
 800e16a:	4953      	ldr	r1, [pc, #332]	; (800e2b8 <rmw_init+0x258>)
 800e16c:	4853      	ldr	r0, [pc, #332]	; (800e2bc <rmw_init+0x25c>)
 800e16e:	2204      	movs	r2, #4
 800e170:	f7fa fc16 	bl	80089a0 <rmw_uxrce_init_guard_condition_memory>
 800e174:	6b69      	ldr	r1, [r5, #52]	; 0x34
 800e176:	6cb0      	ldr	r0, [r6, #72]	; 0x48
 800e178:	4642      	mov	r2, r8
 800e17a:	f000 fb03 	bl	800e784 <rmw_uxrce_transport_init>
 800e17e:	4607      	mov	r7, r0
 800e180:	2800      	cmp	r0, #0
 800e182:	d158      	bne.n	800e236 <rmw_init+0x1d6>
 800e184:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800e186:	f504 7528 	add.w	r5, r4, #672	; 0x2a0
 800e18a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e18c:	4628      	mov	r0, r5
 800e18e:	f504 7122 	add.w	r1, r4, #648	; 0x288
 800e192:	f7fc f815 	bl	800a1c0 <uxr_init_session>
 800e196:	494a      	ldr	r1, [pc, #296]	; (800e2c0 <rmw_init+0x260>)
 800e198:	4622      	mov	r2, r4
 800e19a:	4628      	mov	r0, r5
 800e19c:	f7fc f832 	bl	800a204 <uxr_set_topic_callback>
 800e1a0:	4948      	ldr	r1, [pc, #288]	; (800e2c4 <rmw_init+0x264>)
 800e1a2:	463a      	mov	r2, r7
 800e1a4:	4628      	mov	r0, r5
 800e1a6:	f7fc f829 	bl	800a1fc <uxr_set_status_callback>
 800e1aa:	4947      	ldr	r1, [pc, #284]	; (800e2c8 <rmw_init+0x268>)
 800e1ac:	463a      	mov	r2, r7
 800e1ae:	4628      	mov	r0, r5
 800e1b0:	f7fc f82c 	bl	800a20c <uxr_set_request_callback>
 800e1b4:	4945      	ldr	r1, [pc, #276]	; (800e2cc <rmw_init+0x26c>)
 800e1b6:	463a      	mov	r2, r7
 800e1b8:	4628      	mov	r0, r5
 800e1ba:	f7fc f82b 	bl	800a214 <uxr_set_reply_callback>
 800e1be:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 800e1c2:	2304      	movs	r3, #4
 800e1c4:	0092      	lsls	r2, r2, #2
 800e1c6:	f504 7165 	add.w	r1, r4, #916	; 0x394
 800e1ca:	4628      	mov	r0, r5
 800e1cc:	f7fc f862 	bl	800a294 <uxr_create_input_reliable_stream>
 800e1d0:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 800e1d4:	f8c4 0374 	str.w	r0, [r4, #884]	; 0x374
 800e1d8:	0092      	lsls	r2, r2, #2
 800e1da:	2304      	movs	r3, #4
 800e1dc:	f604 3194 	addw	r1, r4, #2964	; 0xb94
 800e1e0:	4628      	mov	r0, r5
 800e1e2:	f7fc f82d 	bl	800a240 <uxr_create_output_reliable_stream>
 800e1e6:	f8c4 0378 	str.w	r0, [r4, #888]	; 0x378
 800e1ea:	4628      	mov	r0, r5
 800e1ec:	f7fc f84c 	bl	800a288 <uxr_create_input_best_effort_stream>
 800e1f0:	f504 519c 	add.w	r1, r4, #4992	; 0x1380
 800e1f4:	f8c4 0380 	str.w	r0, [r4, #896]	; 0x380
 800e1f8:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 800e1fc:	4628      	mov	r0, r5
 800e1fe:	3114      	adds	r1, #20
 800e200:	f7fc f80c 	bl	800a21c <uxr_create_output_best_effort_stream>
 800e204:	f8c4 037c 	str.w	r0, [r4, #892]	; 0x37c
 800e208:	4628      	mov	r0, r5
 800e20a:	f7fc fc63 	bl	800aad4 <uxr_create_session>
 800e20e:	b1f8      	cbz	r0, 800e250 <rmw_init+0x1f0>
 800e210:	4638      	mov	r0, r7
 800e212:	b002      	add	sp, #8
 800e214:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e218:	270b      	movs	r7, #11
 800e21a:	4638      	mov	r0, r7
 800e21c:	b002      	add	sp, #8
 800e21e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e222:	2701      	movs	r7, #1
 800e224:	4638      	mov	r0, r7
 800e226:	b002      	add	sp, #8
 800e228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e22c:	270c      	movs	r7, #12
 800e22e:	4638      	mov	r0, r7
 800e230:	b002      	add	sp, #8
 800e232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e236:	4650      	mov	r0, sl
 800e238:	f000 fd22 	bl	800ec80 <uxr_close_custom_transport>
 800e23c:	480b      	ldr	r0, [pc, #44]	; (800e26c <rmw_init+0x20c>)
 800e23e:	4621      	mov	r1, r4
 800e240:	f7ff fe1a 	bl	800de78 <put_memory>
 800e244:	4638      	mov	r0, r7
 800e246:	f8c6 8048 	str.w	r8, [r6, #72]	; 0x48
 800e24a:	b002      	add	sp, #8
 800e24c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e250:	4650      	mov	r0, sl
 800e252:	f000 fd15 	bl	800ec80 <uxr_close_custom_transport>
 800e256:	4805      	ldr	r0, [pc, #20]	; (800e26c <rmw_init+0x20c>)
 800e258:	4621      	mov	r1, r4
 800e25a:	f7ff fe0d 	bl	800de78 <put_memory>
 800e25e:	64b7      	str	r7, [r6, #72]	; 0x48
 800e260:	2701      	movs	r7, #1
 800e262:	e7d5      	b.n	800e210 <rmw_init+0x1b0>
 800e264:	08012518 	.word	0x08012518
 800e268:	2000f4e8 	.word	0x2000f4e8
 800e26c:	2000f2b8 	.word	0x2000f2b8
 800e270:	2000c110 	.word	0x2000c110
 800e274:	2000cef0 	.word	0x2000cef0
 800e278:	2000f0e4 	.word	0x2000f0e4
 800e27c:	2000f2c8 	.word	0x2000f2c8
 800e280:	2000ca18 	.word	0x2000ca18
 800e284:	2000f37c 	.word	0x2000f37c
 800e288:	2000c130 	.word	0x2000c130
 800e28c:	2000c120 	.word	0x2000c120
 800e290:	2000f420 	.word	0x2000f420
 800e294:	2000f36c 	.word	0x2000f36c
 800e298:	2000ce28 	.word	0x2000ce28
 800e29c:	2000c9a0 	.word	0x2000c9a0
 800e2a0:	2000f0f4 	.word	0x2000f0f4
 800e2a4:	2000f2a8 	.word	0x2000f2a8
 800e2a8:	2000f060 	.word	0x2000f060
 800e2ac:	2000f40c 	.word	0x2000f40c
 800e2b0:	2000eff0 	.word	0x2000eff0
 800e2b4:	20010a90 	.word	0x20010a90
 800e2b8:	2000f38c 	.word	0x2000f38c
 800e2bc:	2000f298 	.word	0x2000f298
 800e2c0:	0801039d 	.word	0x0801039d
 800e2c4:	08010395 	.word	0x08010395
 800e2c8:	08010431 	.word	0x08010431
 800e2cc:	080104c9 	.word	0x080104c9

0800e2d0 <rmw_context_fini>:
 800e2d0:	4b17      	ldr	r3, [pc, #92]	; (800e330 <rmw_context_fini+0x60>)
 800e2d2:	b570      	push	{r4, r5, r6, lr}
 800e2d4:	681c      	ldr	r4, [r3, #0]
 800e2d6:	4605      	mov	r5, r0
 800e2d8:	6c80      	ldr	r0, [r0, #72]	; 0x48
 800e2da:	b33c      	cbz	r4, 800e32c <rmw_context_fini+0x5c>
 800e2dc:	2600      	movs	r6, #0
 800e2de:	e9d4 4302 	ldrd	r4, r3, [r4, #8]
 800e2e2:	691a      	ldr	r2, [r3, #16]
 800e2e4:	4282      	cmp	r2, r0
 800e2e6:	d018      	beq.n	800e31a <rmw_context_fini+0x4a>
 800e2e8:	2c00      	cmp	r4, #0
 800e2ea:	d1f8      	bne.n	800e2de <rmw_context_fini+0xe>
 800e2ec:	b188      	cbz	r0, 800e312 <rmw_context_fini+0x42>
 800e2ee:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800e2f2:	789b      	ldrb	r3, [r3, #2]
 800e2f4:	2b01      	cmp	r3, #1
 800e2f6:	bf14      	ite	ne
 800e2f8:	210a      	movne	r1, #10
 800e2fa:	2100      	moveq	r1, #0
 800e2fc:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e300:	f7fc fdaa 	bl	800ae58 <uxr_delete_session_retries>
 800e304:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 800e306:	f7fa fb65 	bl	80089d4 <rmw_uxrce_fini_session_memory>
 800e30a:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 800e30c:	3010      	adds	r0, #16
 800e30e:	f000 fcb7 	bl	800ec80 <uxr_close_custom_transport>
 800e312:	2300      	movs	r3, #0
 800e314:	4630      	mov	r0, r6
 800e316:	64ab      	str	r3, [r5, #72]	; 0x48
 800e318:	bd70      	pop	{r4, r5, r6, pc}
 800e31a:	f103 0018 	add.w	r0, r3, #24
 800e31e:	f000 f90d 	bl	800e53c <rmw_destroy_node>
 800e322:	4606      	mov	r6, r0
 800e324:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 800e326:	2c00      	cmp	r4, #0
 800e328:	d1d9      	bne.n	800e2de <rmw_context_fini+0xe>
 800e32a:	e7df      	b.n	800e2ec <rmw_context_fini+0x1c>
 800e32c:	4626      	mov	r6, r4
 800e32e:	e7dd      	b.n	800e2ec <rmw_context_fini+0x1c>
 800e330:	2000f0e4 	.word	0x2000f0e4

0800e334 <create_topic>:
 800e334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e338:	4607      	mov	r7, r0
 800e33a:	b084      	sub	sp, #16
 800e33c:	4822      	ldr	r0, [pc, #136]	; (800e3c8 <create_topic+0x94>)
 800e33e:	4689      	mov	r9, r1
 800e340:	4690      	mov	r8, r2
 800e342:	f7ff fd89 	bl	800de58 <get_memory>
 800e346:	4604      	mov	r4, r0
 800e348:	2800      	cmp	r0, #0
 800e34a:	d038      	beq.n	800e3be <create_topic+0x8a>
 800e34c:	693e      	ldr	r6, [r7, #16]
 800e34e:	68c4      	ldr	r4, [r0, #12]
 800e350:	f8df a07c 	ldr.w	sl, [pc, #124]	; 800e3d0 <create_topic+0x9c>
 800e354:	61a7      	str	r7, [r4, #24]
 800e356:	f241 5596 	movw	r5, #5526	; 0x1596
 800e35a:	f8c4 8014 	str.w	r8, [r4, #20]
 800e35e:	5b70      	ldrh	r0, [r6, r5]
 800e360:	1c42      	adds	r2, r0, #1
 800e362:	5372      	strh	r2, [r6, r5]
 800e364:	2102      	movs	r1, #2
 800e366:	f7fb fe6f 	bl	800a048 <uxr_object_id>
 800e36a:	4651      	mov	r1, sl
 800e36c:	6120      	str	r0, [r4, #16]
 800e36e:	223c      	movs	r2, #60	; 0x3c
 800e370:	4648      	mov	r0, r9
 800e372:	f7fa fc63 	bl	8008c3c <generate_topic_name>
 800e376:	b1f0      	cbz	r0, 800e3b6 <create_topic+0x82>
 800e378:	4d14      	ldr	r5, [pc, #80]	; (800e3cc <create_topic+0x98>)
 800e37a:	4640      	mov	r0, r8
 800e37c:	4629      	mov	r1, r5
 800e37e:	2264      	movs	r2, #100	; 0x64
 800e380:	f7fa fc2c 	bl	8008bdc <generate_type_name>
 800e384:	b1b8      	cbz	r0, 800e3b6 <create_topic+0x82>
 800e386:	e9d7 0304 	ldrd	r0, r3, [r7, #16]
 800e38a:	2106      	movs	r1, #6
 800e38c:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 800e390:	9501      	str	r5, [sp, #4]
 800e392:	f8cd a000 	str.w	sl, [sp]
 800e396:	9102      	str	r1, [sp, #8]
 800e398:	6811      	ldr	r1, [r2, #0]
 800e39a:	6922      	ldr	r2, [r4, #16]
 800e39c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e3a0:	f7fb fd78 	bl	8009e94 <uxr_buffer_create_topic_bin>
 800e3a4:	4602      	mov	r2, r0
 800e3a6:	6938      	ldr	r0, [r7, #16]
 800e3a8:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800e3ac:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800e3b0:	f7fa fbde 	bl	8008b70 <run_xrce_session>
 800e3b4:	b918      	cbnz	r0, 800e3be <create_topic+0x8a>
 800e3b6:	4620      	mov	r0, r4
 800e3b8:	f7fa fb82 	bl	8008ac0 <rmw_uxrce_fini_topic_memory>
 800e3bc:	2400      	movs	r4, #0
 800e3be:	4620      	mov	r0, r4
 800e3c0:	b004      	add	sp, #16
 800e3c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e3c6:	bf00      	nop
 800e3c8:	2000f2a8 	.word	0x2000f2a8
 800e3cc:	2000c010 	.word	0x2000c010
 800e3d0:	2000bfd4 	.word	0x2000bfd4

0800e3d4 <destroy_topic>:
 800e3d4:	b538      	push	{r3, r4, r5, lr}
 800e3d6:	6985      	ldr	r5, [r0, #24]
 800e3d8:	b1d5      	cbz	r5, 800e410 <destroy_topic+0x3c>
 800e3da:	4604      	mov	r4, r0
 800e3dc:	6928      	ldr	r0, [r5, #16]
 800e3de:	6922      	ldr	r2, [r4, #16]
 800e3e0:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800e3e4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e3e8:	6819      	ldr	r1, [r3, #0]
 800e3ea:	f7fb fcd5 	bl	8009d98 <uxr_buffer_delete_entity>
 800e3ee:	4602      	mov	r2, r0
 800e3f0:	6928      	ldr	r0, [r5, #16]
 800e3f2:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800e3f6:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800e3fa:	f7fa fbb9 	bl	8008b70 <run_xrce_session>
 800e3fe:	2800      	cmp	r0, #0
 800e400:	4620      	mov	r0, r4
 800e402:	bf14      	ite	ne
 800e404:	2400      	movne	r4, #0
 800e406:	2402      	moveq	r4, #2
 800e408:	f7fa fb5a 	bl	8008ac0 <rmw_uxrce_fini_topic_memory>
 800e40c:	4620      	mov	r0, r4
 800e40e:	bd38      	pop	{r3, r4, r5, pc}
 800e410:	2401      	movs	r4, #1
 800e412:	4620      	mov	r0, r4
 800e414:	bd38      	pop	{r3, r4, r5, pc}
 800e416:	bf00      	nop

0800e418 <create_node>:
 800e418:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e41c:	b083      	sub	sp, #12
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d05f      	beq.n	800e4e2 <create_node+0xca>
 800e422:	4606      	mov	r6, r0
 800e424:	4835      	ldr	r0, [pc, #212]	; (800e4fc <create_node+0xe4>)
 800e426:	460f      	mov	r7, r1
 800e428:	4690      	mov	r8, r2
 800e42a:	461d      	mov	r5, r3
 800e42c:	f7ff fd14 	bl	800de58 <get_memory>
 800e430:	2800      	cmp	r0, #0
 800e432:	d056      	beq.n	800e4e2 <create_node+0xca>
 800e434:	68c4      	ldr	r4, [r0, #12]
 800e436:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800e438:	6123      	str	r3, [r4, #16]
 800e43a:	f7ff fd31 	bl	800dea0 <rmw_get_implementation_identifier>
 800e43e:	f104 092c 	add.w	r9, r4, #44	; 0x2c
 800e442:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800e446:	f8c4 9020 	str.w	r9, [r4, #32]
 800e44a:	4630      	mov	r0, r6
 800e44c:	f7f1 feea 	bl	8000224 <strlen>
 800e450:	1c42      	adds	r2, r0, #1
 800e452:	2a3c      	cmp	r2, #60	; 0x3c
 800e454:	f104 0518 	add.w	r5, r4, #24
 800e458:	d840      	bhi.n	800e4dc <create_node+0xc4>
 800e45a:	4648      	mov	r0, r9
 800e45c:	4631      	mov	r1, r6
 800e45e:	f104 0968 	add.w	r9, r4, #104	; 0x68
 800e462:	f002 f971 	bl	8010748 <memcpy>
 800e466:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 800e46a:	4638      	mov	r0, r7
 800e46c:	f7f1 feda 	bl	8000224 <strlen>
 800e470:	1c42      	adds	r2, r0, #1
 800e472:	2a3c      	cmp	r2, #60	; 0x3c
 800e474:	d832      	bhi.n	800e4dc <create_node+0xc4>
 800e476:	4639      	mov	r1, r7
 800e478:	4648      	mov	r0, r9
 800e47a:	f002 f965 	bl	8010748 <memcpy>
 800e47e:	f241 5394 	movw	r3, #5524	; 0x1594
 800e482:	6922      	ldr	r2, [r4, #16]
 800e484:	5ad0      	ldrh	r0, [r2, r3]
 800e486:	2101      	movs	r1, #1
 800e488:	eb00 0c01 	add.w	ip, r0, r1
 800e48c:	f822 c003 	strh.w	ip, [r2, r3]
 800e490:	f7fb fdda 	bl	800a048 <uxr_object_id>
 800e494:	6160      	str	r0, [r4, #20]
 800e496:	783b      	ldrb	r3, [r7, #0]
 800e498:	2b2f      	cmp	r3, #47	; 0x2f
 800e49a:	d127      	bne.n	800e4ec <create_node+0xd4>
 800e49c:	787b      	ldrb	r3, [r7, #1]
 800e49e:	bb2b      	cbnz	r3, 800e4ec <create_node+0xd4>
 800e4a0:	4a17      	ldr	r2, [pc, #92]	; (800e500 <create_node+0xe8>)
 800e4a2:	4818      	ldr	r0, [pc, #96]	; (800e504 <create_node+0xec>)
 800e4a4:	4633      	mov	r3, r6
 800e4a6:	213c      	movs	r1, #60	; 0x3c
 800e4a8:	f002 faf6 	bl	8010a98 <sniprintf>
 800e4ac:	6920      	ldr	r0, [r4, #16]
 800e4ae:	4b15      	ldr	r3, [pc, #84]	; (800e504 <create_node+0xec>)
 800e4b0:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 800e4b4:	9300      	str	r3, [sp, #0]
 800e4b6:	2306      	movs	r3, #6
 800e4b8:	9301      	str	r3, [sp, #4]
 800e4ba:	6811      	ldr	r1, [r2, #0]
 800e4bc:	6962      	ldr	r2, [r4, #20]
 800e4be:	fa1f f388 	uxth.w	r3, r8
 800e4c2:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e4c6:	f7fb fcb3 	bl	8009e30 <uxr_buffer_create_participant_bin>
 800e4ca:	4602      	mov	r2, r0
 800e4cc:	6920      	ldr	r0, [r4, #16]
 800e4ce:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800e4d2:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800e4d6:	f7fa fb4b 	bl	8008b70 <run_xrce_session>
 800e4da:	b918      	cbnz	r0, 800e4e4 <create_node+0xcc>
 800e4dc:	4628      	mov	r0, r5
 800e4de:	f7fa fa7f 	bl	80089e0 <rmw_uxrce_fini_node_memory>
 800e4e2:	2500      	movs	r5, #0
 800e4e4:	4628      	mov	r0, r5
 800e4e6:	b003      	add	sp, #12
 800e4e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e4ec:	4a06      	ldr	r2, [pc, #24]	; (800e508 <create_node+0xf0>)
 800e4ee:	9600      	str	r6, [sp, #0]
 800e4f0:	463b      	mov	r3, r7
 800e4f2:	213c      	movs	r1, #60	; 0x3c
 800e4f4:	4803      	ldr	r0, [pc, #12]	; (800e504 <create_node+0xec>)
 800e4f6:	f002 facf 	bl	8010a98 <sniprintf>
 800e4fa:	e7d7      	b.n	800e4ac <create_node+0x94>
 800e4fc:	2000f0e4 	.word	0x2000f0e4
 800e500:	08012044 	.word	0x08012044
 800e504:	2000c074 	.word	0x2000c074
 800e508:	08012084 	.word	0x08012084

0800e50c <rmw_create_node>:
 800e50c:	b199      	cbz	r1, 800e536 <rmw_create_node+0x2a>
 800e50e:	b430      	push	{r4, r5}
 800e510:	4615      	mov	r5, r2
 800e512:	461a      	mov	r2, r3
 800e514:	780b      	ldrb	r3, [r1, #0]
 800e516:	460c      	mov	r4, r1
 800e518:	b153      	cbz	r3, 800e530 <rmw_create_node+0x24>
 800e51a:	b14d      	cbz	r5, 800e530 <rmw_create_node+0x24>
 800e51c:	782b      	ldrb	r3, [r5, #0]
 800e51e:	b13b      	cbz	r3, 800e530 <rmw_create_node+0x24>
 800e520:	b902      	cbnz	r2, 800e524 <rmw_create_node+0x18>
 800e522:	69c2      	ldr	r2, [r0, #28]
 800e524:	4603      	mov	r3, r0
 800e526:	4629      	mov	r1, r5
 800e528:	4620      	mov	r0, r4
 800e52a:	bc30      	pop	{r4, r5}
 800e52c:	f7ff bf74 	b.w	800e418 <create_node>
 800e530:	2000      	movs	r0, #0
 800e532:	bc30      	pop	{r4, r5}
 800e534:	4770      	bx	lr
 800e536:	2000      	movs	r0, #0
 800e538:	4770      	bx	lr
 800e53a:	bf00      	nop

0800e53c <rmw_destroy_node>:
 800e53c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e53e:	b328      	cbz	r0, 800e58c <rmw_destroy_node+0x50>
 800e540:	4607      	mov	r7, r0
 800e542:	6800      	ldr	r0, [r0, #0]
 800e544:	b120      	cbz	r0, 800e550 <rmw_destroy_node+0x14>
 800e546:	4b36      	ldr	r3, [pc, #216]	; (800e620 <rmw_destroy_node+0xe4>)
 800e548:	6819      	ldr	r1, [r3, #0]
 800e54a:	f7f1 fe61 	bl	8000210 <strcmp>
 800e54e:	b9e8      	cbnz	r0, 800e58c <rmw_destroy_node+0x50>
 800e550:	687d      	ldr	r5, [r7, #4]
 800e552:	b1dd      	cbz	r5, 800e58c <rmw_destroy_node+0x50>
 800e554:	4b33      	ldr	r3, [pc, #204]	; (800e624 <rmw_destroy_node+0xe8>)
 800e556:	681c      	ldr	r4, [r3, #0]
 800e558:	2c00      	cmp	r4, #0
 800e55a:	d05f      	beq.n	800e61c <rmw_destroy_node+0xe0>
 800e55c:	2600      	movs	r6, #0
 800e55e:	e9d4 4102 	ldrd	r4, r1, [r4, #8]
 800e562:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 800e566:	429d      	cmp	r5, r3
 800e568:	d013      	beq.n	800e592 <rmw_destroy_node+0x56>
 800e56a:	2c00      	cmp	r4, #0
 800e56c:	d1f7      	bne.n	800e55e <rmw_destroy_node+0x22>
 800e56e:	4b2e      	ldr	r3, [pc, #184]	; (800e628 <rmw_destroy_node+0xec>)
 800e570:	681c      	ldr	r4, [r3, #0]
 800e572:	b1c4      	cbz	r4, 800e5a6 <rmw_destroy_node+0x6a>
 800e574:	e9d4 4102 	ldrd	r4, r1, [r4, #8]
 800e578:	6a0b      	ldr	r3, [r1, #32]
 800e57a:	429d      	cmp	r5, r3
 800e57c:	d1f9      	bne.n	800e572 <rmw_destroy_node+0x36>
 800e57e:	317c      	adds	r1, #124	; 0x7c
 800e580:	4638      	mov	r0, r7
 800e582:	f000 f8a1 	bl	800e6c8 <rmw_destroy_subscription>
 800e586:	2801      	cmp	r0, #1
 800e588:	4606      	mov	r6, r0
 800e58a:	d1f2      	bne.n	800e572 <rmw_destroy_node+0x36>
 800e58c:	2601      	movs	r6, #1
 800e58e:	4630      	mov	r0, r6
 800e590:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e592:	3184      	adds	r1, #132	; 0x84
 800e594:	4638      	mov	r0, r7
 800e596:	f7fa f8a3 	bl	80086e0 <rmw_destroy_publisher>
 800e59a:	2801      	cmp	r0, #1
 800e59c:	4606      	mov	r6, r0
 800e59e:	d0f5      	beq.n	800e58c <rmw_destroy_node+0x50>
 800e5a0:	2c00      	cmp	r4, #0
 800e5a2:	d1dc      	bne.n	800e55e <rmw_destroy_node+0x22>
 800e5a4:	e7e3      	b.n	800e56e <rmw_destroy_node+0x32>
 800e5a6:	4b21      	ldr	r3, [pc, #132]	; (800e62c <rmw_destroy_node+0xf0>)
 800e5a8:	681c      	ldr	r4, [r3, #0]
 800e5aa:	b16c      	cbz	r4, 800e5c8 <rmw_destroy_node+0x8c>
 800e5ac:	e9d4 4102 	ldrd	r4, r1, [r4, #8]
 800e5b0:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 800e5b2:	429d      	cmp	r5, r3
 800e5b4:	d1f9      	bne.n	800e5aa <rmw_destroy_node+0x6e>
 800e5b6:	317c      	adds	r1, #124	; 0x7c
 800e5b8:	4638      	mov	r0, r7
 800e5ba:	f000 f841 	bl	800e640 <rmw_destroy_service>
 800e5be:	2801      	cmp	r0, #1
 800e5c0:	4606      	mov	r6, r0
 800e5c2:	d0e3      	beq.n	800e58c <rmw_destroy_node+0x50>
 800e5c4:	2c00      	cmp	r4, #0
 800e5c6:	d1f1      	bne.n	800e5ac <rmw_destroy_node+0x70>
 800e5c8:	4b19      	ldr	r3, [pc, #100]	; (800e630 <rmw_destroy_node+0xf4>)
 800e5ca:	681c      	ldr	r4, [r3, #0]
 800e5cc:	b16c      	cbz	r4, 800e5ea <rmw_destroy_node+0xae>
 800e5ce:	e9d4 4102 	ldrd	r4, r1, [r4, #8]
 800e5d2:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 800e5d4:	429d      	cmp	r5, r3
 800e5d6:	d1f9      	bne.n	800e5cc <rmw_destroy_node+0x90>
 800e5d8:	317c      	adds	r1, #124	; 0x7c
 800e5da:	4638      	mov	r0, r7
 800e5dc:	f001 ffbe 	bl	801055c <rmw_destroy_client>
 800e5e0:	2801      	cmp	r0, #1
 800e5e2:	4606      	mov	r6, r0
 800e5e4:	d0d2      	beq.n	800e58c <rmw_destroy_node+0x50>
 800e5e6:	2c00      	cmp	r4, #0
 800e5e8:	d1f1      	bne.n	800e5ce <rmw_destroy_node+0x92>
 800e5ea:	e9d5 0204 	ldrd	r0, r2, [r5, #16]
 800e5ee:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800e5f2:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e5f6:	6819      	ldr	r1, [r3, #0]
 800e5f8:	f7fb fbce 	bl	8009d98 <uxr_buffer_delete_entity>
 800e5fc:	4602      	mov	r2, r0
 800e5fe:	6928      	ldr	r0, [r5, #16]
 800e600:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800e604:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800e608:	f7fa fab2 	bl	8008b70 <run_xrce_session>
 800e60c:	2800      	cmp	r0, #0
 800e60e:	bf08      	it	eq
 800e610:	2602      	moveq	r6, #2
 800e612:	4638      	mov	r0, r7
 800e614:	f7fa f9e4 	bl	80089e0 <rmw_uxrce_fini_node_memory>
 800e618:	4630      	mov	r0, r6
 800e61a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e61c:	4626      	mov	r6, r4
 800e61e:	e7a6      	b.n	800e56e <rmw_destroy_node+0x32>
 800e620:	08012518 	.word	0x08012518
 800e624:	2000c120 	.word	0x2000c120
 800e628:	2000f37c 	.word	0x2000f37c
 800e62c:	2000f36c 	.word	0x2000f36c
 800e630:	2000c9a0 	.word	0x2000c9a0

0800e634 <rmw_node_get_graph_guard_condition>:
 800e634:	6843      	ldr	r3, [r0, #4]
 800e636:	6918      	ldr	r0, [r3, #16]
 800e638:	f500 705a 	add.w	r0, r0, #872	; 0x368
 800e63c:	4770      	bx	lr
 800e63e:	bf00      	nop

0800e640 <rmw_destroy_service>:
 800e640:	b570      	push	{r4, r5, r6, lr}
 800e642:	b128      	cbz	r0, 800e650 <rmw_destroy_service+0x10>
 800e644:	4604      	mov	r4, r0
 800e646:	6800      	ldr	r0, [r0, #0]
 800e648:	460d      	mov	r5, r1
 800e64a:	f7fa fb11 	bl	8008c70 <is_uxrce_rmw_identifier_valid>
 800e64e:	b910      	cbnz	r0, 800e656 <rmw_destroy_service+0x16>
 800e650:	2401      	movs	r4, #1
 800e652:	4620      	mov	r0, r4
 800e654:	bd70      	pop	{r4, r5, r6, pc}
 800e656:	6863      	ldr	r3, [r4, #4]
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d0f9      	beq.n	800e650 <rmw_destroy_service+0x10>
 800e65c:	2d00      	cmp	r5, #0
 800e65e:	d0f7      	beq.n	800e650 <rmw_destroy_service+0x10>
 800e660:	6828      	ldr	r0, [r5, #0]
 800e662:	f7fa fb05 	bl	8008c70 <is_uxrce_rmw_identifier_valid>
 800e666:	2800      	cmp	r0, #0
 800e668:	d0f2      	beq.n	800e650 <rmw_destroy_service+0x10>
 800e66a:	686e      	ldr	r6, [r5, #4]
 800e66c:	2e00      	cmp	r6, #0
 800e66e:	d0ef      	beq.n	800e650 <rmw_destroy_service+0x10>
 800e670:	6864      	ldr	r4, [r4, #4]
 800e672:	6932      	ldr	r2, [r6, #16]
 800e674:	6920      	ldr	r0, [r4, #16]
 800e676:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800e67a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e67e:	6819      	ldr	r1, [r3, #0]
 800e680:	f001 f828 	bl	800f6d4 <uxr_buffer_cancel_data>
 800e684:	4602      	mov	r2, r0
 800e686:	6920      	ldr	r0, [r4, #16]
 800e688:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800e68c:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800e690:	f7fa fa6e 	bl	8008b70 <run_xrce_session>
 800e694:	6920      	ldr	r0, [r4, #16]
 800e696:	6932      	ldr	r2, [r6, #16]
 800e698:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800e69c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e6a0:	6819      	ldr	r1, [r3, #0]
 800e6a2:	f7fb fb79 	bl	8009d98 <uxr_buffer_delete_entity>
 800e6a6:	4602      	mov	r2, r0
 800e6a8:	6920      	ldr	r0, [r4, #16]
 800e6aa:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800e6ae:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800e6b2:	f7fa fa5d 	bl	8008b70 <run_xrce_session>
 800e6b6:	2800      	cmp	r0, #0
 800e6b8:	4628      	mov	r0, r5
 800e6ba:	bf14      	ite	ne
 800e6bc:	2400      	movne	r4, #0
 800e6be:	2402      	moveq	r4, #2
 800e6c0:	f7fa f9d2 	bl	8008a68 <rmw_uxrce_fini_service_memory>
 800e6c4:	e7c5      	b.n	800e652 <rmw_destroy_service+0x12>
 800e6c6:	bf00      	nop

0800e6c8 <rmw_destroy_subscription>:
 800e6c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6ca:	b128      	cbz	r0, 800e6d8 <rmw_destroy_subscription+0x10>
 800e6cc:	4604      	mov	r4, r0
 800e6ce:	6800      	ldr	r0, [r0, #0]
 800e6d0:	460d      	mov	r5, r1
 800e6d2:	f7fa facd 	bl	8008c70 <is_uxrce_rmw_identifier_valid>
 800e6d6:	b910      	cbnz	r0, 800e6de <rmw_destroy_subscription+0x16>
 800e6d8:	2401      	movs	r4, #1
 800e6da:	4620      	mov	r0, r4
 800e6dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e6de:	6863      	ldr	r3, [r4, #4]
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d0f9      	beq.n	800e6d8 <rmw_destroy_subscription+0x10>
 800e6e4:	2d00      	cmp	r5, #0
 800e6e6:	d0f7      	beq.n	800e6d8 <rmw_destroy_subscription+0x10>
 800e6e8:	6828      	ldr	r0, [r5, #0]
 800e6ea:	f7fa fac1 	bl	8008c70 <is_uxrce_rmw_identifier_valid>
 800e6ee:	2800      	cmp	r0, #0
 800e6f0:	d0f2      	beq.n	800e6d8 <rmw_destroy_subscription+0x10>
 800e6f2:	686c      	ldr	r4, [r5, #4]
 800e6f4:	2c00      	cmp	r4, #0
 800e6f6:	d0ef      	beq.n	800e6d8 <rmw_destroy_subscription+0x10>
 800e6f8:	6a26      	ldr	r6, [r4, #32]
 800e6fa:	6962      	ldr	r2, [r4, #20]
 800e6fc:	6930      	ldr	r0, [r6, #16]
 800e6fe:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800e702:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e706:	6819      	ldr	r1, [r3, #0]
 800e708:	f000 ffe4 	bl	800f6d4 <uxr_buffer_cancel_data>
 800e70c:	4602      	mov	r2, r0
 800e70e:	6930      	ldr	r0, [r6, #16]
 800e710:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800e714:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800e718:	f7fa fa2a 	bl	8008b70 <run_xrce_session>
 800e71c:	69e0      	ldr	r0, [r4, #28]
 800e71e:	f7ff fe59 	bl	800e3d4 <destroy_topic>
 800e722:	6a23      	ldr	r3, [r4, #32]
 800e724:	6962      	ldr	r2, [r4, #20]
 800e726:	6918      	ldr	r0, [r3, #16]
 800e728:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800e72c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e730:	6819      	ldr	r1, [r3, #0]
 800e732:	f7fb fb31 	bl	8009d98 <uxr_buffer_delete_entity>
 800e736:	6a21      	ldr	r1, [r4, #32]
 800e738:	6922      	ldr	r2, [r4, #16]
 800e73a:	4603      	mov	r3, r0
 800e73c:	6908      	ldr	r0, [r1, #16]
 800e73e:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800e742:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e746:	6809      	ldr	r1, [r1, #0]
 800e748:	461c      	mov	r4, r3
 800e74a:	f7fb fb25 	bl	8009d98 <uxr_buffer_delete_entity>
 800e74e:	4607      	mov	r7, r0
 800e750:	6930      	ldr	r0, [r6, #16]
 800e752:	4622      	mov	r2, r4
 800e754:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800e758:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800e75c:	f7fa fa08 	bl	8008b70 <run_xrce_session>
 800e760:	4604      	mov	r4, r0
 800e762:	6930      	ldr	r0, [r6, #16]
 800e764:	463a      	mov	r2, r7
 800e766:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800e76a:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800e76e:	f7fa f9ff 	bl	8008b70 <run_xrce_session>
 800e772:	b12c      	cbz	r4, 800e780 <rmw_destroy_subscription+0xb8>
 800e774:	b120      	cbz	r0, 800e780 <rmw_destroy_subscription+0xb8>
 800e776:	2400      	movs	r4, #0
 800e778:	4628      	mov	r0, r5
 800e77a:	f7fa f95f 	bl	8008a3c <rmw_uxrce_fini_subscription_memory>
 800e77e:	e7ac      	b.n	800e6da <rmw_destroy_subscription+0x12>
 800e780:	2402      	movs	r4, #2
 800e782:	e7f9      	b.n	800e778 <rmw_destroy_subscription+0xb0>

0800e784 <rmw_uxrce_transport_init>:
 800e784:	b508      	push	{r3, lr}
 800e786:	b108      	cbz	r0, 800e78c <rmw_uxrce_transport_init+0x8>
 800e788:	f100 0210 	add.w	r2, r0, #16
 800e78c:	b139      	cbz	r1, 800e79e <rmw_uxrce_transport_init+0x1a>
 800e78e:	6949      	ldr	r1, [r1, #20]
 800e790:	4610      	mov	r0, r2
 800e792:	f000 fa41 	bl	800ec18 <uxr_init_custom_transport>
 800e796:	f080 0001 	eor.w	r0, r0, #1
 800e79a:	b2c0      	uxtb	r0, r0
 800e79c:	bd08      	pop	{r3, pc}
 800e79e:	4b04      	ldr	r3, [pc, #16]	; (800e7b0 <rmw_uxrce_transport_init+0x2c>)
 800e7a0:	4610      	mov	r0, r2
 800e7a2:	6859      	ldr	r1, [r3, #4]
 800e7a4:	f000 fa38 	bl	800ec18 <uxr_init_custom_transport>
 800e7a8:	f080 0001 	eor.w	r0, r0, #1
 800e7ac:	b2c0      	uxtb	r0, r0
 800e7ae:	bd08      	pop	{r3, pc}
 800e7b0:	2000c0f0 	.word	0x2000c0f0

0800e7b4 <rmw_uros_epoch_nanos>:
 800e7b4:	4b05      	ldr	r3, [pc, #20]	; (800e7cc <rmw_uros_epoch_nanos+0x18>)
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	b123      	cbz	r3, 800e7c4 <rmw_uros_epoch_nanos+0x10>
 800e7ba:	68d8      	ldr	r0, [r3, #12]
 800e7bc:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e7c0:	f7fb bd84 	b.w	800a2cc <uxr_epoch_nanos>
 800e7c4:	2000      	movs	r0, #0
 800e7c6:	2100      	movs	r1, #0
 800e7c8:	4770      	bx	lr
 800e7ca:	bf00      	nop
 800e7cc:	2000f2b8 	.word	0x2000f2b8

0800e7d0 <ucdr_serialize_endian_array_char>:
 800e7d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7d4:	4619      	mov	r1, r3
 800e7d6:	461e      	mov	r6, r3
 800e7d8:	4690      	mov	r8, r2
 800e7da:	4604      	mov	r4, r0
 800e7dc:	f7fb fa1a 	bl	8009c14 <ucdr_check_buffer_available_for>
 800e7e0:	b9e0      	cbnz	r0, 800e81c <ucdr_serialize_endian_array_char+0x4c>
 800e7e2:	4637      	mov	r7, r6
 800e7e4:	e009      	b.n	800e7fa <ucdr_serialize_endian_array_char+0x2a>
 800e7e6:	68a0      	ldr	r0, [r4, #8]
 800e7e8:	f001 ffae 	bl	8010748 <memcpy>
 800e7ec:	68a2      	ldr	r2, [r4, #8]
 800e7ee:	6923      	ldr	r3, [r4, #16]
 800e7f0:	442a      	add	r2, r5
 800e7f2:	442b      	add	r3, r5
 800e7f4:	1b7f      	subs	r7, r7, r5
 800e7f6:	60a2      	str	r2, [r4, #8]
 800e7f8:	6123      	str	r3, [r4, #16]
 800e7fa:	2201      	movs	r2, #1
 800e7fc:	4639      	mov	r1, r7
 800e7fe:	4620      	mov	r0, r4
 800e800:	f7fb fa8e 	bl	8009d20 <ucdr_check_final_buffer_behavior_array>
 800e804:	1bf1      	subs	r1, r6, r7
 800e806:	4441      	add	r1, r8
 800e808:	4605      	mov	r5, r0
 800e80a:	4602      	mov	r2, r0
 800e80c:	2800      	cmp	r0, #0
 800e80e:	d1ea      	bne.n	800e7e6 <ucdr_serialize_endian_array_char+0x16>
 800e810:	2301      	movs	r3, #1
 800e812:	7da0      	ldrb	r0, [r4, #22]
 800e814:	7563      	strb	r3, [r4, #21]
 800e816:	4058      	eors	r0, r3
 800e818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e81c:	4632      	mov	r2, r6
 800e81e:	68a0      	ldr	r0, [r4, #8]
 800e820:	4641      	mov	r1, r8
 800e822:	f001 ff91 	bl	8010748 <memcpy>
 800e826:	68a2      	ldr	r2, [r4, #8]
 800e828:	6923      	ldr	r3, [r4, #16]
 800e82a:	4432      	add	r2, r6
 800e82c:	4433      	add	r3, r6
 800e82e:	60a2      	str	r2, [r4, #8]
 800e830:	6123      	str	r3, [r4, #16]
 800e832:	e7ed      	b.n	800e810 <ucdr_serialize_endian_array_char+0x40>

0800e834 <ucdr_deserialize_endian_array_char>:
 800e834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e838:	4619      	mov	r1, r3
 800e83a:	461e      	mov	r6, r3
 800e83c:	4690      	mov	r8, r2
 800e83e:	4604      	mov	r4, r0
 800e840:	f7fb f9e8 	bl	8009c14 <ucdr_check_buffer_available_for>
 800e844:	b9e0      	cbnz	r0, 800e880 <ucdr_deserialize_endian_array_char+0x4c>
 800e846:	4637      	mov	r7, r6
 800e848:	e009      	b.n	800e85e <ucdr_deserialize_endian_array_char+0x2a>
 800e84a:	68a1      	ldr	r1, [r4, #8]
 800e84c:	f001 ff7c 	bl	8010748 <memcpy>
 800e850:	68a2      	ldr	r2, [r4, #8]
 800e852:	6923      	ldr	r3, [r4, #16]
 800e854:	442a      	add	r2, r5
 800e856:	442b      	add	r3, r5
 800e858:	1b7f      	subs	r7, r7, r5
 800e85a:	60a2      	str	r2, [r4, #8]
 800e85c:	6123      	str	r3, [r4, #16]
 800e85e:	2201      	movs	r2, #1
 800e860:	4639      	mov	r1, r7
 800e862:	4620      	mov	r0, r4
 800e864:	f7fb fa5c 	bl	8009d20 <ucdr_check_final_buffer_behavior_array>
 800e868:	4605      	mov	r5, r0
 800e86a:	1bf0      	subs	r0, r6, r7
 800e86c:	4440      	add	r0, r8
 800e86e:	462a      	mov	r2, r5
 800e870:	2d00      	cmp	r5, #0
 800e872:	d1ea      	bne.n	800e84a <ucdr_deserialize_endian_array_char+0x16>
 800e874:	2301      	movs	r3, #1
 800e876:	7da0      	ldrb	r0, [r4, #22]
 800e878:	7563      	strb	r3, [r4, #21]
 800e87a:	4058      	eors	r0, r3
 800e87c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e880:	4632      	mov	r2, r6
 800e882:	68a1      	ldr	r1, [r4, #8]
 800e884:	4640      	mov	r0, r8
 800e886:	f001 ff5f 	bl	8010748 <memcpy>
 800e88a:	68a2      	ldr	r2, [r4, #8]
 800e88c:	6923      	ldr	r3, [r4, #16]
 800e88e:	4432      	add	r2, r6
 800e890:	4433      	add	r3, r6
 800e892:	60a2      	str	r2, [r4, #8]
 800e894:	6123      	str	r3, [r4, #16]
 800e896:	e7ed      	b.n	800e874 <ucdr_deserialize_endian_array_char+0x40>

0800e898 <ucdr_serialize_array_uint8_t>:
 800e898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e89c:	4688      	mov	r8, r1
 800e89e:	4611      	mov	r1, r2
 800e8a0:	4616      	mov	r6, r2
 800e8a2:	4604      	mov	r4, r0
 800e8a4:	f7fb f9b6 	bl	8009c14 <ucdr_check_buffer_available_for>
 800e8a8:	b9e0      	cbnz	r0, 800e8e4 <ucdr_serialize_array_uint8_t+0x4c>
 800e8aa:	4637      	mov	r7, r6
 800e8ac:	e009      	b.n	800e8c2 <ucdr_serialize_array_uint8_t+0x2a>
 800e8ae:	68a0      	ldr	r0, [r4, #8]
 800e8b0:	f001 ff4a 	bl	8010748 <memcpy>
 800e8b4:	68a2      	ldr	r2, [r4, #8]
 800e8b6:	6923      	ldr	r3, [r4, #16]
 800e8b8:	442a      	add	r2, r5
 800e8ba:	442b      	add	r3, r5
 800e8bc:	1b7f      	subs	r7, r7, r5
 800e8be:	60a2      	str	r2, [r4, #8]
 800e8c0:	6123      	str	r3, [r4, #16]
 800e8c2:	2201      	movs	r2, #1
 800e8c4:	4639      	mov	r1, r7
 800e8c6:	4620      	mov	r0, r4
 800e8c8:	f7fb fa2a 	bl	8009d20 <ucdr_check_final_buffer_behavior_array>
 800e8cc:	1bf1      	subs	r1, r6, r7
 800e8ce:	4441      	add	r1, r8
 800e8d0:	4605      	mov	r5, r0
 800e8d2:	4602      	mov	r2, r0
 800e8d4:	2800      	cmp	r0, #0
 800e8d6:	d1ea      	bne.n	800e8ae <ucdr_serialize_array_uint8_t+0x16>
 800e8d8:	2301      	movs	r3, #1
 800e8da:	7da0      	ldrb	r0, [r4, #22]
 800e8dc:	7563      	strb	r3, [r4, #21]
 800e8de:	4058      	eors	r0, r3
 800e8e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8e4:	4632      	mov	r2, r6
 800e8e6:	68a0      	ldr	r0, [r4, #8]
 800e8e8:	4641      	mov	r1, r8
 800e8ea:	f001 ff2d 	bl	8010748 <memcpy>
 800e8ee:	68a3      	ldr	r3, [r4, #8]
 800e8f0:	6922      	ldr	r2, [r4, #16]
 800e8f2:	4433      	add	r3, r6
 800e8f4:	4432      	add	r2, r6
 800e8f6:	60a3      	str	r3, [r4, #8]
 800e8f8:	6122      	str	r2, [r4, #16]
 800e8fa:	e7ed      	b.n	800e8d8 <ucdr_serialize_array_uint8_t+0x40>

0800e8fc <ucdr_serialize_endian_array_uint8_t>:
 800e8fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e900:	4619      	mov	r1, r3
 800e902:	461e      	mov	r6, r3
 800e904:	4690      	mov	r8, r2
 800e906:	4604      	mov	r4, r0
 800e908:	f7fb f984 	bl	8009c14 <ucdr_check_buffer_available_for>
 800e90c:	b9e0      	cbnz	r0, 800e948 <ucdr_serialize_endian_array_uint8_t+0x4c>
 800e90e:	4637      	mov	r7, r6
 800e910:	e009      	b.n	800e926 <ucdr_serialize_endian_array_uint8_t+0x2a>
 800e912:	68a0      	ldr	r0, [r4, #8]
 800e914:	f001 ff18 	bl	8010748 <memcpy>
 800e918:	68a2      	ldr	r2, [r4, #8]
 800e91a:	6923      	ldr	r3, [r4, #16]
 800e91c:	442a      	add	r2, r5
 800e91e:	442b      	add	r3, r5
 800e920:	1b7f      	subs	r7, r7, r5
 800e922:	60a2      	str	r2, [r4, #8]
 800e924:	6123      	str	r3, [r4, #16]
 800e926:	2201      	movs	r2, #1
 800e928:	4639      	mov	r1, r7
 800e92a:	4620      	mov	r0, r4
 800e92c:	f7fb f9f8 	bl	8009d20 <ucdr_check_final_buffer_behavior_array>
 800e930:	1bf1      	subs	r1, r6, r7
 800e932:	4441      	add	r1, r8
 800e934:	4605      	mov	r5, r0
 800e936:	4602      	mov	r2, r0
 800e938:	2800      	cmp	r0, #0
 800e93a:	d1ea      	bne.n	800e912 <ucdr_serialize_endian_array_uint8_t+0x16>
 800e93c:	2301      	movs	r3, #1
 800e93e:	7da0      	ldrb	r0, [r4, #22]
 800e940:	7563      	strb	r3, [r4, #21]
 800e942:	4058      	eors	r0, r3
 800e944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e948:	4632      	mov	r2, r6
 800e94a:	68a0      	ldr	r0, [r4, #8]
 800e94c:	4641      	mov	r1, r8
 800e94e:	f001 fefb 	bl	8010748 <memcpy>
 800e952:	68a2      	ldr	r2, [r4, #8]
 800e954:	6923      	ldr	r3, [r4, #16]
 800e956:	4432      	add	r2, r6
 800e958:	4433      	add	r3, r6
 800e95a:	60a2      	str	r2, [r4, #8]
 800e95c:	6123      	str	r3, [r4, #16]
 800e95e:	e7ed      	b.n	800e93c <ucdr_serialize_endian_array_uint8_t+0x40>

0800e960 <ucdr_deserialize_array_uint8_t>:
 800e960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e964:	4688      	mov	r8, r1
 800e966:	4611      	mov	r1, r2
 800e968:	4616      	mov	r6, r2
 800e96a:	4604      	mov	r4, r0
 800e96c:	f7fb f952 	bl	8009c14 <ucdr_check_buffer_available_for>
 800e970:	b9e0      	cbnz	r0, 800e9ac <ucdr_deserialize_array_uint8_t+0x4c>
 800e972:	4637      	mov	r7, r6
 800e974:	e009      	b.n	800e98a <ucdr_deserialize_array_uint8_t+0x2a>
 800e976:	68a1      	ldr	r1, [r4, #8]
 800e978:	f001 fee6 	bl	8010748 <memcpy>
 800e97c:	68a2      	ldr	r2, [r4, #8]
 800e97e:	6923      	ldr	r3, [r4, #16]
 800e980:	442a      	add	r2, r5
 800e982:	442b      	add	r3, r5
 800e984:	1b7f      	subs	r7, r7, r5
 800e986:	60a2      	str	r2, [r4, #8]
 800e988:	6123      	str	r3, [r4, #16]
 800e98a:	2201      	movs	r2, #1
 800e98c:	4639      	mov	r1, r7
 800e98e:	4620      	mov	r0, r4
 800e990:	f7fb f9c6 	bl	8009d20 <ucdr_check_final_buffer_behavior_array>
 800e994:	4605      	mov	r5, r0
 800e996:	1bf0      	subs	r0, r6, r7
 800e998:	4440      	add	r0, r8
 800e99a:	462a      	mov	r2, r5
 800e99c:	2d00      	cmp	r5, #0
 800e99e:	d1ea      	bne.n	800e976 <ucdr_deserialize_array_uint8_t+0x16>
 800e9a0:	2301      	movs	r3, #1
 800e9a2:	7da0      	ldrb	r0, [r4, #22]
 800e9a4:	7563      	strb	r3, [r4, #21]
 800e9a6:	4058      	eors	r0, r3
 800e9a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9ac:	4632      	mov	r2, r6
 800e9ae:	68a1      	ldr	r1, [r4, #8]
 800e9b0:	4640      	mov	r0, r8
 800e9b2:	f001 fec9 	bl	8010748 <memcpy>
 800e9b6:	68a3      	ldr	r3, [r4, #8]
 800e9b8:	6922      	ldr	r2, [r4, #16]
 800e9ba:	4433      	add	r3, r6
 800e9bc:	4432      	add	r2, r6
 800e9be:	60a3      	str	r3, [r4, #8]
 800e9c0:	6122      	str	r2, [r4, #16]
 800e9c2:	e7ed      	b.n	800e9a0 <ucdr_deserialize_array_uint8_t+0x40>

0800e9c4 <ucdr_deserialize_endian_array_uint8_t>:
 800e9c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9c8:	4619      	mov	r1, r3
 800e9ca:	461e      	mov	r6, r3
 800e9cc:	4690      	mov	r8, r2
 800e9ce:	4604      	mov	r4, r0
 800e9d0:	f7fb f920 	bl	8009c14 <ucdr_check_buffer_available_for>
 800e9d4:	b9e0      	cbnz	r0, 800ea10 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 800e9d6:	4637      	mov	r7, r6
 800e9d8:	e009      	b.n	800e9ee <ucdr_deserialize_endian_array_uint8_t+0x2a>
 800e9da:	68a1      	ldr	r1, [r4, #8]
 800e9dc:	f001 feb4 	bl	8010748 <memcpy>
 800e9e0:	68a2      	ldr	r2, [r4, #8]
 800e9e2:	6923      	ldr	r3, [r4, #16]
 800e9e4:	442a      	add	r2, r5
 800e9e6:	442b      	add	r3, r5
 800e9e8:	1b7f      	subs	r7, r7, r5
 800e9ea:	60a2      	str	r2, [r4, #8]
 800e9ec:	6123      	str	r3, [r4, #16]
 800e9ee:	2201      	movs	r2, #1
 800e9f0:	4639      	mov	r1, r7
 800e9f2:	4620      	mov	r0, r4
 800e9f4:	f7fb f994 	bl	8009d20 <ucdr_check_final_buffer_behavior_array>
 800e9f8:	4605      	mov	r5, r0
 800e9fa:	1bf0      	subs	r0, r6, r7
 800e9fc:	4440      	add	r0, r8
 800e9fe:	462a      	mov	r2, r5
 800ea00:	2d00      	cmp	r5, #0
 800ea02:	d1ea      	bne.n	800e9da <ucdr_deserialize_endian_array_uint8_t+0x16>
 800ea04:	2301      	movs	r3, #1
 800ea06:	7da0      	ldrb	r0, [r4, #22]
 800ea08:	7563      	strb	r3, [r4, #21]
 800ea0a:	4058      	eors	r0, r3
 800ea0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea10:	4632      	mov	r2, r6
 800ea12:	68a1      	ldr	r1, [r4, #8]
 800ea14:	4640      	mov	r0, r8
 800ea16:	f001 fe97 	bl	8010748 <memcpy>
 800ea1a:	68a2      	ldr	r2, [r4, #8]
 800ea1c:	6923      	ldr	r3, [r4, #16]
 800ea1e:	4432      	add	r2, r6
 800ea20:	4433      	add	r3, r6
 800ea22:	60a2      	str	r2, [r4, #8]
 800ea24:	6123      	str	r3, [r4, #16]
 800ea26:	e7ed      	b.n	800ea04 <ucdr_deserialize_endian_array_uint8_t+0x40>

0800ea28 <ucdr_serialize_sequence_char>:
 800ea28:	b570      	push	{r4, r5, r6, lr}
 800ea2a:	460e      	mov	r6, r1
 800ea2c:	4615      	mov	r5, r2
 800ea2e:	7d01      	ldrb	r1, [r0, #20]
 800ea30:	4604      	mov	r4, r0
 800ea32:	f7fa fc45 	bl	80092c0 <ucdr_serialize_endian_uint32_t>
 800ea36:	b90d      	cbnz	r5, 800ea3c <ucdr_serialize_sequence_char+0x14>
 800ea38:	2001      	movs	r0, #1
 800ea3a:	bd70      	pop	{r4, r5, r6, pc}
 800ea3c:	7d21      	ldrb	r1, [r4, #20]
 800ea3e:	462b      	mov	r3, r5
 800ea40:	4632      	mov	r2, r6
 800ea42:	4620      	mov	r0, r4
 800ea44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ea48:	f7ff bec2 	b.w	800e7d0 <ucdr_serialize_endian_array_char>

0800ea4c <ucdr_deserialize_sequence_char>:
 800ea4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea50:	461d      	mov	r5, r3
 800ea52:	4616      	mov	r6, r2
 800ea54:	460f      	mov	r7, r1
 800ea56:	461a      	mov	r2, r3
 800ea58:	7d01      	ldrb	r1, [r0, #20]
 800ea5a:	4604      	mov	r4, r0
 800ea5c:	f7fa fd58 	bl	8009510 <ucdr_deserialize_endian_uint32_t>
 800ea60:	682b      	ldr	r3, [r5, #0]
 800ea62:	429e      	cmp	r6, r3
 800ea64:	bf3c      	itt	cc
 800ea66:	2201      	movcc	r2, #1
 800ea68:	75a2      	strbcc	r2, [r4, #22]
 800ea6a:	b913      	cbnz	r3, 800ea72 <ucdr_deserialize_sequence_char+0x26>
 800ea6c:	2001      	movs	r0, #1
 800ea6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea72:	7d21      	ldrb	r1, [r4, #20]
 800ea74:	463a      	mov	r2, r7
 800ea76:	4620      	mov	r0, r4
 800ea78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ea7c:	f7ff beda 	b.w	800e834 <ucdr_deserialize_endian_array_char>

0800ea80 <ucdr_serialize_sequence_uint8_t>:
 800ea80:	b570      	push	{r4, r5, r6, lr}
 800ea82:	460e      	mov	r6, r1
 800ea84:	4615      	mov	r5, r2
 800ea86:	7d01      	ldrb	r1, [r0, #20]
 800ea88:	4604      	mov	r4, r0
 800ea8a:	f7fa fc19 	bl	80092c0 <ucdr_serialize_endian_uint32_t>
 800ea8e:	b90d      	cbnz	r5, 800ea94 <ucdr_serialize_sequence_uint8_t+0x14>
 800ea90:	2001      	movs	r0, #1
 800ea92:	bd70      	pop	{r4, r5, r6, pc}
 800ea94:	7d21      	ldrb	r1, [r4, #20]
 800ea96:	462b      	mov	r3, r5
 800ea98:	4632      	mov	r2, r6
 800ea9a:	4620      	mov	r0, r4
 800ea9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800eaa0:	f7ff bf2c 	b.w	800e8fc <ucdr_serialize_endian_array_uint8_t>

0800eaa4 <ucdr_deserialize_sequence_uint8_t>:
 800eaa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eaa8:	461d      	mov	r5, r3
 800eaaa:	4616      	mov	r6, r2
 800eaac:	460f      	mov	r7, r1
 800eaae:	461a      	mov	r2, r3
 800eab0:	7d01      	ldrb	r1, [r0, #20]
 800eab2:	4604      	mov	r4, r0
 800eab4:	f7fa fd2c 	bl	8009510 <ucdr_deserialize_endian_uint32_t>
 800eab8:	682b      	ldr	r3, [r5, #0]
 800eaba:	429e      	cmp	r6, r3
 800eabc:	bf3c      	itt	cc
 800eabe:	2201      	movcc	r2, #1
 800eac0:	75a2      	strbcc	r2, [r4, #22]
 800eac2:	b913      	cbnz	r3, 800eaca <ucdr_deserialize_sequence_uint8_t+0x26>
 800eac4:	2001      	movs	r0, #1
 800eac6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eaca:	7d21      	ldrb	r1, [r4, #20]
 800eacc:	463a      	mov	r2, r7
 800eace:	4620      	mov	r0, r4
 800ead0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ead4:	f7ff bf76 	b.w	800e9c4 <ucdr_deserialize_endian_array_uint8_t>

0800ead8 <ucdr_serialize_string>:
 800ead8:	b510      	push	{r4, lr}
 800eada:	b082      	sub	sp, #8
 800eadc:	4604      	mov	r4, r0
 800eade:	4608      	mov	r0, r1
 800eae0:	9101      	str	r1, [sp, #4]
 800eae2:	f7f1 fb9f 	bl	8000224 <strlen>
 800eae6:	9901      	ldr	r1, [sp, #4]
 800eae8:	4602      	mov	r2, r0
 800eaea:	3201      	adds	r2, #1
 800eaec:	4620      	mov	r0, r4
 800eaee:	b002      	add	sp, #8
 800eaf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eaf4:	f7ff bf98 	b.w	800ea28 <ucdr_serialize_sequence_char>

0800eaf8 <ucdr_deserialize_string>:
 800eaf8:	b500      	push	{lr}
 800eafa:	b083      	sub	sp, #12
 800eafc:	ab01      	add	r3, sp, #4
 800eafe:	f7ff ffa5 	bl	800ea4c <ucdr_deserialize_sequence_char>
 800eb02:	b003      	add	sp, #12
 800eb04:	f85d fb04 	ldr.w	pc, [sp], #4

0800eb08 <get_custom_error>:
 800eb08:	4b01      	ldr	r3, [pc, #4]	; (800eb10 <get_custom_error+0x8>)
 800eb0a:	7818      	ldrb	r0, [r3, #0]
 800eb0c:	4770      	bx	lr
 800eb0e:	bf00      	nop
 800eb10:	2000c0b0 	.word	0x2000c0b0

0800eb14 <recv_custom_msg>:
 800eb14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb18:	f890 5200 	ldrb.w	r5, [r0, #512]	; 0x200
 800eb1c:	b089      	sub	sp, #36	; 0x24
 800eb1e:	2600      	movs	r6, #0
 800eb20:	4604      	mov	r4, r0
 800eb22:	9305      	str	r3, [sp, #20]
 800eb24:	468a      	mov	sl, r1
 800eb26:	4693      	mov	fp, r2
 800eb28:	f88d 601e 	strb.w	r6, [sp, #30]
 800eb2c:	b325      	cbz	r5, 800eb78 <recv_custom_msg+0x64>
 800eb2e:	f200 2902 	addw	r9, r0, #514	; 0x202
 800eb32:	f10d 081f 	add.w	r8, sp, #31
 800eb36:	af05      	add	r7, sp, #20
 800eb38:	f10d 061e 	add.w	r6, sp, #30
 800eb3c:	f44f 7500 	mov.w	r5, #512	; 0x200
 800eb40:	e002      	b.n	800eb48 <recv_custom_msg+0x34>
 800eb42:	9b05      	ldr	r3, [sp, #20]
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	dd0f      	ble.n	800eb68 <recv_custom_msg+0x54>
 800eb48:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800eb4c:	e9cd 5600 	strd	r5, r6, [sp]
 800eb50:	4623      	mov	r3, r4
 800eb52:	f8d4 1274 	ldr.w	r1, [r4, #628]	; 0x274
 800eb56:	4622      	mov	r2, r4
 800eb58:	4648      	mov	r0, r9
 800eb5a:	f001 f8b5 	bl	800fcc8 <uxr_read_framed_msg>
 800eb5e:	2800      	cmp	r0, #0
 800eb60:	d0ef      	beq.n	800eb42 <recv_custom_msg+0x2e>
 800eb62:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800eb66:	b1b3      	cbz	r3, 800eb96 <recv_custom_msg+0x82>
 800eb68:	4b0f      	ldr	r3, [pc, #60]	; (800eba8 <recv_custom_msg+0x94>)
 800eb6a:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800eb6e:	701a      	strb	r2, [r3, #0]
 800eb70:	2000      	movs	r0, #0
 800eb72:	b009      	add	sp, #36	; 0x24
 800eb74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb78:	f10d 021f 	add.w	r2, sp, #31
 800eb7c:	9200      	str	r2, [sp, #0]
 800eb7e:	f8d0 5274 	ldr.w	r5, [r0, #628]	; 0x274
 800eb82:	f44f 7200 	mov.w	r2, #512	; 0x200
 800eb86:	4601      	mov	r1, r0
 800eb88:	47a8      	blx	r5
 800eb8a:	2800      	cmp	r0, #0
 800eb8c:	d0ec      	beq.n	800eb68 <recv_custom_msg+0x54>
 800eb8e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d1e8      	bne.n	800eb68 <recv_custom_msg+0x54>
 800eb96:	f8cb 0000 	str.w	r0, [fp]
 800eb9a:	2001      	movs	r0, #1
 800eb9c:	f8ca 4000 	str.w	r4, [sl]
 800eba0:	b009      	add	sp, #36	; 0x24
 800eba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eba6:	bf00      	nop
 800eba8:	2000c0b0 	.word	0x2000c0b0

0800ebac <send_custom_msg>:
 800ebac:	b570      	push	{r4, r5, r6, lr}
 800ebae:	f890 5200 	ldrb.w	r5, [r0, #512]	; 0x200
 800ebb2:	b086      	sub	sp, #24
 800ebb4:	4616      	mov	r6, r2
 800ebb6:	b975      	cbnz	r5, 800ebd6 <send_custom_msg+0x2a>
 800ebb8:	f8d0 4270 	ldr.w	r4, [r0, #624]	; 0x270
 800ebbc:	f10d 0317 	add.w	r3, sp, #23
 800ebc0:	47a0      	blx	r4
 800ebc2:	b108      	cbz	r0, 800ebc8 <send_custom_msg+0x1c>
 800ebc4:	42b0      	cmp	r0, r6
 800ebc6:	d015      	beq.n	800ebf4 <send_custom_msg+0x48>
 800ebc8:	4b0c      	ldr	r3, [pc, #48]	; (800ebfc <send_custom_msg+0x50>)
 800ebca:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800ebce:	701a      	strb	r2, [r3, #0]
 800ebd0:	2000      	movs	r0, #0
 800ebd2:	b006      	add	sp, #24
 800ebd4:	bd70      	pop	{r4, r5, r6, pc}
 800ebd6:	460b      	mov	r3, r1
 800ebd8:	2200      	movs	r2, #0
 800ebda:	f10d 0117 	add.w	r1, sp, #23
 800ebde:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800ebe2:	9600      	str	r6, [sp, #0]
 800ebe4:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
 800ebe8:	4602      	mov	r2, r0
 800ebea:	f200 2002 	addw	r0, r0, #514	; 0x202
 800ebee:	f000 fe83 	bl	800f8f8 <uxr_write_framed_msg>
 800ebf2:	e7e6      	b.n	800ebc2 <send_custom_msg+0x16>
 800ebf4:	2001      	movs	r0, #1
 800ebf6:	b006      	add	sp, #24
 800ebf8:	bd70      	pop	{r4, r5, r6, pc}
 800ebfa:	bf00      	nop
 800ebfc:	2000c0b0 	.word	0x2000c0b0

0800ec00 <uxr_set_custom_transport_callbacks>:
 800ec00:	b430      	push	{r4, r5}
 800ec02:	e9dd 5402 	ldrd	r5, r4, [sp, #8]
 800ec06:	e9c0 239a 	strd	r2, r3, [r0, #616]	; 0x268
 800ec0a:	e9c0 549c 	strd	r5, r4, [r0, #624]	; 0x270
 800ec0e:	f880 1200 	strb.w	r1, [r0, #512]	; 0x200
 800ec12:	bc30      	pop	{r4, r5}
 800ec14:	4770      	bx	lr
 800ec16:	bf00      	nop

0800ec18 <uxr_init_custom_transport>:
 800ec18:	b538      	push	{r3, r4, r5, lr}
 800ec1a:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
 800ec1e:	b303      	cbz	r3, 800ec62 <uxr_init_custom_transport+0x4a>
 800ec20:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 800ec24:	4604      	mov	r4, r0
 800ec26:	b1e2      	cbz	r2, 800ec62 <uxr_init_custom_transport+0x4a>
 800ec28:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 800ec2c:	b1ca      	cbz	r2, 800ec62 <uxr_init_custom_transport+0x4a>
 800ec2e:	f8d0 2274 	ldr.w	r2, [r0, #628]	; 0x274
 800ec32:	b1b2      	cbz	r2, 800ec62 <uxr_init_custom_transport+0x4a>
 800ec34:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
 800ec38:	4798      	blx	r3
 800ec3a:	4605      	mov	r5, r0
 800ec3c:	b188      	cbz	r0, 800ec62 <uxr_init_custom_transport+0x4a>
 800ec3e:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 800ec42:	b98b      	cbnz	r3, 800ec68 <uxr_init_custom_transport+0x50>
 800ec44:	480b      	ldr	r0, [pc, #44]	; (800ec74 <uxr_init_custom_transport+0x5c>)
 800ec46:	490c      	ldr	r1, [pc, #48]	; (800ec78 <uxr_init_custom_transport+0x60>)
 800ec48:	4a0c      	ldr	r2, [pc, #48]	; (800ec7c <uxr_init_custom_transport+0x64>)
 800ec4a:	f8c4 4278 	str.w	r4, [r4, #632]	; 0x278
 800ec4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ec52:	e9c4 019f 	strd	r0, r1, [r4, #636]	; 0x27c
 800ec56:	f8c4 2284 	str.w	r2, [r4, #644]	; 0x284
 800ec5a:	f8a4 3288 	strh.w	r3, [r4, #648]	; 0x288
 800ec5e:	4628      	mov	r0, r5
 800ec60:	bd38      	pop	{r3, r4, r5, pc}
 800ec62:	2500      	movs	r5, #0
 800ec64:	4628      	mov	r0, r5
 800ec66:	bd38      	pop	{r3, r4, r5, pc}
 800ec68:	2100      	movs	r1, #0
 800ec6a:	f204 2002 	addw	r0, r4, #514	; 0x202
 800ec6e:	f000 fe3d 	bl	800f8ec <uxr_init_framing_io>
 800ec72:	e7e7      	b.n	800ec44 <uxr_init_custom_transport+0x2c>
 800ec74:	0800ebad 	.word	0x0800ebad
 800ec78:	0800eb15 	.word	0x0800eb15
 800ec7c:	0800eb09 	.word	0x0800eb09

0800ec80 <uxr_close_custom_transport>:
 800ec80:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 800ec84:	4718      	bx	r3
 800ec86:	bf00      	nop

0800ec88 <uxr_init_input_best_effort_stream>:
 800ec88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ec8c:	8003      	strh	r3, [r0, #0]
 800ec8e:	4770      	bx	lr

0800ec90 <uxr_reset_input_best_effort_stream>:
 800ec90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ec94:	8003      	strh	r3, [r0, #0]
 800ec96:	4770      	bx	lr

0800ec98 <uxr_receive_best_effort_message>:
 800ec98:	b538      	push	{r3, r4, r5, lr}
 800ec9a:	4604      	mov	r4, r0
 800ec9c:	8800      	ldrh	r0, [r0, #0]
 800ec9e:	460d      	mov	r5, r1
 800eca0:	f000 fe0c 	bl	800f8bc <uxr_seq_num_cmp>
 800eca4:	4603      	mov	r3, r0
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 800ecac:	bfb8      	it	lt
 800ecae:	8025      	strhlt	r5, [r4, #0]
 800ecb0:	bd38      	pop	{r3, r4, r5, pc}
 800ecb2:	bf00      	nop

0800ecb4 <on_full_input_buffer>:
 800ecb4:	b570      	push	{r4, r5, r6, lr}
 800ecb6:	6802      	ldr	r2, [r0, #0]
 800ecb8:	460d      	mov	r5, r1
 800ecba:	6809      	ldr	r1, [r1, #0]
 800ecbc:	686c      	ldr	r4, [r5, #4]
 800ecbe:	1a53      	subs	r3, r2, r1
 800ecc0:	4606      	mov	r6, r0
 800ecc2:	8928      	ldrh	r0, [r5, #8]
 800ecc4:	fbb4 f4f0 	udiv	r4, r4, r0
 800ecc8:	fbb3 f3f4 	udiv	r3, r3, r4
 800eccc:	3301      	adds	r3, #1
 800ecce:	b29b      	uxth	r3, r3
 800ecd0:	fbb3 f2f0 	udiv	r2, r3, r0
 800ecd4:	fb00 3312 	mls	r3, r0, r2, r3
 800ecd8:	b29b      	uxth	r3, r3
 800ecda:	fb04 f403 	mul.w	r4, r4, r3
 800ecde:	1d23      	adds	r3, r4, #4
 800ece0:	440b      	add	r3, r1
 800ece2:	7d28      	ldrb	r0, [r5, #20]
 800ece4:	f853 2c04 	ldr.w	r2, [r3, #-4]
 800ece8:	b110      	cbz	r0, 800ecf0 <on_full_input_buffer+0x3c>
 800ecea:	2000      	movs	r0, #0
 800ecec:	f843 0c04 	str.w	r0, [r3, #-4]
 800ecf0:	2a03      	cmp	r2, #3
 800ecf2:	d801      	bhi.n	800ecf8 <on_full_input_buffer+0x44>
 800ecf4:	2001      	movs	r0, #1
 800ecf6:	bd70      	pop	{r4, r5, r6, pc}
 800ecf8:	3408      	adds	r4, #8
 800ecfa:	6933      	ldr	r3, [r6, #16]
 800ecfc:	4421      	add	r1, r4
 800ecfe:	4630      	mov	r0, r6
 800ed00:	3a04      	subs	r2, #4
 800ed02:	f7fa ffd1 	bl	8009ca8 <ucdr_init_buffer_origin>
 800ed06:	4630      	mov	r0, r6
 800ed08:	4902      	ldr	r1, [pc, #8]	; (800ed14 <on_full_input_buffer+0x60>)
 800ed0a:	462a      	mov	r2, r5
 800ed0c:	f7fa ffaa 	bl	8009c64 <ucdr_set_on_full_buffer_callback>
 800ed10:	2000      	movs	r0, #0
 800ed12:	bd70      	pop	{r4, r5, r6, pc}
 800ed14:	0800ecb5 	.word	0x0800ecb5

0800ed18 <uxr_init_input_reliable_stream>:
 800ed18:	b470      	push	{r4, r5, r6}
 800ed1a:	9c03      	ldr	r4, [sp, #12]
 800ed1c:	6001      	str	r1, [r0, #0]
 800ed1e:	2600      	movs	r6, #0
 800ed20:	8103      	strh	r3, [r0, #8]
 800ed22:	6042      	str	r2, [r0, #4]
 800ed24:	6104      	str	r4, [r0, #16]
 800ed26:	7506      	strb	r6, [r0, #20]
 800ed28:	b1ab      	cbz	r3, 800ed56 <uxr_init_input_reliable_stream+0x3e>
 800ed2a:	600e      	str	r6, [r1, #0]
 800ed2c:	8901      	ldrh	r1, [r0, #8]
 800ed2e:	2901      	cmp	r1, #1
 800ed30:	d911      	bls.n	800ed56 <uxr_init_input_reliable_stream+0x3e>
 800ed32:	2201      	movs	r2, #1
 800ed34:	e9d0 5400 	ldrd	r5, r4, [r0]
 800ed38:	fbb2 f3f1 	udiv	r3, r2, r1
 800ed3c:	fb01 2313 	mls	r3, r1, r3, r2
 800ed40:	b29b      	uxth	r3, r3
 800ed42:	fbb4 f1f1 	udiv	r1, r4, r1
 800ed46:	fb03 f301 	mul.w	r3, r3, r1
 800ed4a:	3201      	adds	r2, #1
 800ed4c:	50ee      	str	r6, [r5, r3]
 800ed4e:	8901      	ldrh	r1, [r0, #8]
 800ed50:	b292      	uxth	r2, r2
 800ed52:	4291      	cmp	r1, r2
 800ed54:	d8ee      	bhi.n	800ed34 <uxr_init_input_reliable_stream+0x1c>
 800ed56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ed5a:	bc70      	pop	{r4, r5, r6}
 800ed5c:	60c3      	str	r3, [r0, #12]
 800ed5e:	4770      	bx	lr

0800ed60 <uxr_reset_input_reliable_stream>:
 800ed60:	8902      	ldrh	r2, [r0, #8]
 800ed62:	b1ca      	cbz	r2, 800ed98 <uxr_reset_input_reliable_stream+0x38>
 800ed64:	b470      	push	{r4, r5, r6}
 800ed66:	2400      	movs	r4, #0
 800ed68:	4621      	mov	r1, r4
 800ed6a:	4626      	mov	r6, r4
 800ed6c:	fbb1 f3f2 	udiv	r3, r1, r2
 800ed70:	fb02 1313 	mls	r3, r2, r3, r1
 800ed74:	e9d0 5100 	ldrd	r5, r1, [r0]
 800ed78:	b29b      	uxth	r3, r3
 800ed7a:	fbb1 f2f2 	udiv	r2, r1, r2
 800ed7e:	fb03 f302 	mul.w	r3, r3, r2
 800ed82:	3401      	adds	r4, #1
 800ed84:	50ee      	str	r6, [r5, r3]
 800ed86:	8902      	ldrh	r2, [r0, #8]
 800ed88:	b2a1      	uxth	r1, r4
 800ed8a:	428a      	cmp	r2, r1
 800ed8c:	d8ee      	bhi.n	800ed6c <uxr_reset_input_reliable_stream+0xc>
 800ed8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ed92:	bc70      	pop	{r4, r5, r6}
 800ed94:	60c3      	str	r3, [r0, #12]
 800ed96:	4770      	bx	lr
 800ed98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ed9c:	60c3      	str	r3, [r0, #12]
 800ed9e:	4770      	bx	lr

0800eda0 <uxr_receive_reliable_message>:
 800eda0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eda4:	4604      	mov	r4, r0
 800eda6:	460d      	mov	r5, r1
 800eda8:	8901      	ldrh	r1, [r0, #8]
 800edaa:	8980      	ldrh	r0, [r0, #12]
 800edac:	4690      	mov	r8, r2
 800edae:	461f      	mov	r7, r3
 800edb0:	f000 fd7c 	bl	800f8ac <uxr_seq_num_add>
 800edb4:	4629      	mov	r1, r5
 800edb6:	4606      	mov	r6, r0
 800edb8:	89a0      	ldrh	r0, [r4, #12]
 800edba:	f000 fd7f 	bl	800f8bc <uxr_seq_num_cmp>
 800edbe:	2800      	cmp	r0, #0
 800edc0:	db0a      	blt.n	800edd8 <uxr_receive_reliable_message+0x38>
 800edc2:	2600      	movs	r6, #0
 800edc4:	89e0      	ldrh	r0, [r4, #14]
 800edc6:	4629      	mov	r1, r5
 800edc8:	f000 fd78 	bl	800f8bc <uxr_seq_num_cmp>
 800edcc:	2800      	cmp	r0, #0
 800edce:	bfb8      	it	lt
 800edd0:	81e5      	strhlt	r5, [r4, #14]
 800edd2:	4630      	mov	r0, r6
 800edd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800edd8:	4630      	mov	r0, r6
 800edda:	4629      	mov	r1, r5
 800eddc:	f000 fd6e 	bl	800f8bc <uxr_seq_num_cmp>
 800ede0:	2800      	cmp	r0, #0
 800ede2:	dbee      	blt.n	800edc2 <uxr_receive_reliable_message+0x22>
 800ede4:	6923      	ldr	r3, [r4, #16]
 800ede6:	4640      	mov	r0, r8
 800ede8:	4798      	blx	r3
 800edea:	2101      	movs	r1, #1
 800edec:	4681      	mov	r9, r0
 800edee:	89a0      	ldrh	r0, [r4, #12]
 800edf0:	f000 fd5c 	bl	800f8ac <uxr_seq_num_add>
 800edf4:	f1b9 0f00 	cmp.w	r9, #0
 800edf8:	d101      	bne.n	800edfe <uxr_receive_reliable_message+0x5e>
 800edfa:	4285      	cmp	r5, r0
 800edfc:	d049      	beq.n	800ee92 <uxr_receive_reliable_message+0xf2>
 800edfe:	8921      	ldrh	r1, [r4, #8]
 800ee00:	fbb5 f3f1 	udiv	r3, r5, r1
 800ee04:	fb01 5313 	mls	r3, r1, r3, r5
 800ee08:	b29b      	uxth	r3, r3
 800ee0a:	6862      	ldr	r2, [r4, #4]
 800ee0c:	6820      	ldr	r0, [r4, #0]
 800ee0e:	fbb2 f2f1 	udiv	r2, r2, r1
 800ee12:	fb03 f302 	mul.w	r3, r3, r2
 800ee16:	3304      	adds	r3, #4
 800ee18:	4418      	add	r0, r3
 800ee1a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d1cf      	bne.n	800edc2 <uxr_receive_reliable_message+0x22>
 800ee22:	4641      	mov	r1, r8
 800ee24:	463a      	mov	r2, r7
 800ee26:	f001 fc8f 	bl	8010748 <memcpy>
 800ee2a:	8921      	ldrh	r1, [r4, #8]
 800ee2c:	fbb5 f3f1 	udiv	r3, r5, r1
 800ee30:	fb01 5313 	mls	r3, r1, r3, r5
 800ee34:	b29b      	uxth	r3, r3
 800ee36:	6862      	ldr	r2, [r4, #4]
 800ee38:	fbb2 f2f1 	udiv	r2, r2, r1
 800ee3c:	6821      	ldr	r1, [r4, #0]
 800ee3e:	fb03 f302 	mul.w	r3, r3, r2
 800ee42:	2201      	movs	r2, #1
 800ee44:	50cf      	str	r7, [r1, r3]
 800ee46:	9b08      	ldr	r3, [sp, #32]
 800ee48:	701a      	strb	r2, [r3, #0]
 800ee4a:	f1b9 0f00 	cmp.w	r9, #0
 800ee4e:	d0b8      	beq.n	800edc2 <uxr_receive_reliable_message+0x22>
 800ee50:	89a6      	ldrh	r6, [r4, #12]
 800ee52:	e001      	b.n	800ee58 <uxr_receive_reliable_message+0xb8>
 800ee54:	2801      	cmp	r0, #1
 800ee56:	d1b4      	bne.n	800edc2 <uxr_receive_reliable_message+0x22>
 800ee58:	4630      	mov	r0, r6
 800ee5a:	2101      	movs	r1, #1
 800ee5c:	f000 fd26 	bl	800f8ac <uxr_seq_num_add>
 800ee60:	8921      	ldrh	r1, [r4, #8]
 800ee62:	fbb0 f3f1 	udiv	r3, r0, r1
 800ee66:	fb01 0313 	mls	r3, r1, r3, r0
 800ee6a:	b29b      	uxth	r3, r3
 800ee6c:	6862      	ldr	r2, [r4, #4]
 800ee6e:	fbb2 f2f1 	udiv	r2, r2, r1
 800ee72:	4606      	mov	r6, r0
 800ee74:	fb03 f302 	mul.w	r3, r3, r2
 800ee78:	6820      	ldr	r0, [r4, #0]
 800ee7a:	3304      	adds	r3, #4
 800ee7c:	4418      	add	r0, r3
 800ee7e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d09d      	beq.n	800edc2 <uxr_receive_reliable_message+0x22>
 800ee86:	6923      	ldr	r3, [r4, #16]
 800ee88:	4798      	blx	r3
 800ee8a:	2802      	cmp	r0, #2
 800ee8c:	d1e2      	bne.n	800ee54 <uxr_receive_reliable_message+0xb4>
 800ee8e:	2601      	movs	r6, #1
 800ee90:	e798      	b.n	800edc4 <uxr_receive_reliable_message+0x24>
 800ee92:	9b08      	ldr	r3, [sp, #32]
 800ee94:	81a5      	strh	r5, [r4, #12]
 800ee96:	2601      	movs	r6, #1
 800ee98:	f883 9000 	strb.w	r9, [r3]
 800ee9c:	e792      	b.n	800edc4 <uxr_receive_reliable_message+0x24>
 800ee9e:	bf00      	nop

0800eea0 <uxr_next_input_reliable_buffer_available>:
 800eea0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eea4:	4604      	mov	r4, r0
 800eea6:	460e      	mov	r6, r1
 800eea8:	8980      	ldrh	r0, [r0, #12]
 800eeaa:	2101      	movs	r1, #1
 800eeac:	4617      	mov	r7, r2
 800eeae:	f000 fcfd 	bl	800f8ac <uxr_seq_num_add>
 800eeb2:	8921      	ldrh	r1, [r4, #8]
 800eeb4:	fbb0 f3f1 	udiv	r3, r0, r1
 800eeb8:	fb01 0313 	mls	r3, r1, r3, r0
 800eebc:	b29b      	uxth	r3, r3
 800eebe:	6862      	ldr	r2, [r4, #4]
 800eec0:	fbb2 f2f1 	udiv	r2, r2, r1
 800eec4:	fb03 f302 	mul.w	r3, r3, r2
 800eec8:	6822      	ldr	r2, [r4, #0]
 800eeca:	3304      	adds	r3, #4
 800eecc:	eb02 0803 	add.w	r8, r2, r3
 800eed0:	f858 9c04 	ldr.w	r9, [r8, #-4]
 800eed4:	f1b9 0f00 	cmp.w	r9, #0
 800eed8:	d025      	beq.n	800ef26 <uxr_next_input_reliable_buffer_available+0x86>
 800eeda:	6923      	ldr	r3, [r4, #16]
 800eedc:	4605      	mov	r5, r0
 800eede:	4640      	mov	r0, r8
 800eee0:	4798      	blx	r3
 800eee2:	4682      	mov	sl, r0
 800eee4:	b310      	cbz	r0, 800ef2c <uxr_next_input_reliable_buffer_available+0x8c>
 800eee6:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 800eeea:	e005      	b.n	800eef8 <uxr_next_input_reliable_buffer_available+0x58>
 800eeec:	6923      	ldr	r3, [r4, #16]
 800eeee:	4798      	blx	r3
 800eef0:	2802      	cmp	r0, #2
 800eef2:	d032      	beq.n	800ef5a <uxr_next_input_reliable_buffer_available+0xba>
 800eef4:	2801      	cmp	r0, #1
 800eef6:	d116      	bne.n	800ef26 <uxr_next_input_reliable_buffer_available+0x86>
 800eef8:	4650      	mov	r0, sl
 800eefa:	2101      	movs	r1, #1
 800eefc:	f000 fcd6 	bl	800f8ac <uxr_seq_num_add>
 800ef00:	8921      	ldrh	r1, [r4, #8]
 800ef02:	fbb0 f3f1 	udiv	r3, r0, r1
 800ef06:	fb01 0313 	mls	r3, r1, r3, r0
 800ef0a:	b29b      	uxth	r3, r3
 800ef0c:	6862      	ldr	r2, [r4, #4]
 800ef0e:	fbb2 f2f1 	udiv	r2, r2, r1
 800ef12:	4682      	mov	sl, r0
 800ef14:	fb03 f302 	mul.w	r3, r3, r2
 800ef18:	6820      	ldr	r0, [r4, #0]
 800ef1a:	3304      	adds	r3, #4
 800ef1c:	4418      	add	r0, r3
 800ef1e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d1e2      	bne.n	800eeec <uxr_next_input_reliable_buffer_available+0x4c>
 800ef26:	2000      	movs	r0, #0
 800ef28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef2c:	464a      	mov	r2, r9
 800ef2e:	4641      	mov	r1, r8
 800ef30:	4630      	mov	r0, r6
 800ef32:	f7fa fec1 	bl	8009cb8 <ucdr_init_buffer>
 800ef36:	8921      	ldrh	r1, [r4, #8]
 800ef38:	fbb5 f3f1 	udiv	r3, r5, r1
 800ef3c:	fb01 5313 	mls	r3, r1, r3, r5
 800ef40:	b29b      	uxth	r3, r3
 800ef42:	6862      	ldr	r2, [r4, #4]
 800ef44:	fbb2 f2f1 	udiv	r2, r2, r1
 800ef48:	6821      	ldr	r1, [r4, #0]
 800ef4a:	fb03 f302 	mul.w	r3, r3, r2
 800ef4e:	2001      	movs	r0, #1
 800ef50:	f841 a003 	str.w	sl, [r1, r3]
 800ef54:	81a5      	strh	r5, [r4, #12]
 800ef56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef5a:	8922      	ldrh	r2, [r4, #8]
 800ef5c:	fbb5 f0f2 	udiv	r0, r5, r2
 800ef60:	fb02 5510 	mls	r5, r2, r0, r5
 800ef64:	b2ad      	uxth	r5, r5
 800ef66:	6863      	ldr	r3, [r4, #4]
 800ef68:	fbb3 f3f2 	udiv	r3, r3, r2
 800ef6c:	fb05 f503 	mul.w	r5, r5, r3
 800ef70:	6823      	ldr	r3, [r4, #0]
 800ef72:	2000      	movs	r0, #0
 800ef74:	5158      	str	r0, [r3, r5]
 800ef76:	eba9 0207 	sub.w	r2, r9, r7
 800ef7a:	eb08 0107 	add.w	r1, r8, r7
 800ef7e:	4630      	mov	r0, r6
 800ef80:	f7fa fe9a 	bl	8009cb8 <ucdr_init_buffer>
 800ef84:	4630      	mov	r0, r6
 800ef86:	4904      	ldr	r1, [pc, #16]	; (800ef98 <uxr_next_input_reliable_buffer_available+0xf8>)
 800ef88:	4622      	mov	r2, r4
 800ef8a:	f7fa fe6b 	bl	8009c64 <ucdr_set_on_full_buffer_callback>
 800ef8e:	f8a4 a00c 	strh.w	sl, [r4, #12]
 800ef92:	2001      	movs	r0, #1
 800ef94:	e7c8      	b.n	800ef28 <uxr_next_input_reliable_buffer_available+0x88>
 800ef96:	bf00      	nop
 800ef98:	0800ecb5 	.word	0x0800ecb5

0800ef9c <uxr_process_heartbeat>:
 800ef9c:	b538      	push	{r3, r4, r5, lr}
 800ef9e:	4611      	mov	r1, r2
 800efa0:	4604      	mov	r4, r0
 800efa2:	89c0      	ldrh	r0, [r0, #14]
 800efa4:	4615      	mov	r5, r2
 800efa6:	f000 fc89 	bl	800f8bc <uxr_seq_num_cmp>
 800efaa:	2800      	cmp	r0, #0
 800efac:	bfb8      	it	lt
 800efae:	81e5      	strhlt	r5, [r4, #14]
 800efb0:	bd38      	pop	{r3, r4, r5, pc}
 800efb2:	bf00      	nop

0800efb4 <uxr_compute_acknack>:
 800efb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800efb8:	8903      	ldrh	r3, [r0, #8]
 800efba:	8986      	ldrh	r6, [r0, #12]
 800efbc:	4604      	mov	r4, r0
 800efbe:	460d      	mov	r5, r1
 800efc0:	b1d3      	cbz	r3, 800eff8 <uxr_compute_acknack+0x44>
 800efc2:	4630      	mov	r0, r6
 800efc4:	2701      	movs	r7, #1
 800efc6:	e003      	b.n	800efd0 <uxr_compute_acknack+0x1c>
 800efc8:	4567      	cmp	r7, ip
 800efca:	d215      	bcs.n	800eff8 <uxr_compute_acknack+0x44>
 800efcc:	89a0      	ldrh	r0, [r4, #12]
 800efce:	3701      	adds	r7, #1
 800efd0:	b2b9      	uxth	r1, r7
 800efd2:	f000 fc6b 	bl	800f8ac <uxr_seq_num_add>
 800efd6:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 800efda:	fbb0 f2fc 	udiv	r2, r0, ip
 800efde:	e9d4 1300 	ldrd	r1, r3, [r4]
 800efe2:	fb0c 0212 	mls	r2, ip, r2, r0
 800efe6:	b292      	uxth	r2, r2
 800efe8:	fbb3 f3fc 	udiv	r3, r3, ip
 800efec:	fb02 1303 	mla	r3, r2, r3, r1
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d1e8      	bne.n	800efc8 <uxr_compute_acknack+0x14>
 800eff6:	4606      	mov	r6, r0
 800eff8:	802e      	strh	r6, [r5, #0]
 800effa:	4630      	mov	r0, r6
 800effc:	2101      	movs	r1, #1
 800effe:	89e6      	ldrh	r6, [r4, #14]
 800f000:	f000 fc58 	bl	800f8b4 <uxr_seq_num_sub>
 800f004:	4601      	mov	r1, r0
 800f006:	4630      	mov	r0, r6
 800f008:	f000 fc54 	bl	800f8b4 <uxr_seq_num_sub>
 800f00c:	4606      	mov	r6, r0
 800f00e:	b318      	cbz	r0, 800f058 <uxr_compute_acknack+0xa4>
 800f010:	f04f 0900 	mov.w	r9, #0
 800f014:	464f      	mov	r7, r9
 800f016:	f04f 0801 	mov.w	r8, #1
 800f01a:	fa1f f189 	uxth.w	r1, r9
 800f01e:	8828      	ldrh	r0, [r5, #0]
 800f020:	f000 fc44 	bl	800f8ac <uxr_seq_num_add>
 800f024:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 800f028:	6822      	ldr	r2, [r4, #0]
 800f02a:	fbb0 f1fc 	udiv	r1, r0, ip
 800f02e:	fb01 011c 	mls	r1, r1, ip, r0
 800f032:	b289      	uxth	r1, r1
 800f034:	6863      	ldr	r3, [r4, #4]
 800f036:	fbb3 f3fc 	udiv	r3, r3, ip
 800f03a:	fb01 2303 	mla	r3, r1, r3, r2
 800f03e:	fa08 f209 	lsl.w	r2, r8, r9
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	f109 0901 	add.w	r9, r9, #1
 800f048:	b90b      	cbnz	r3, 800f04e <uxr_compute_acknack+0x9a>
 800f04a:	4317      	orrs	r7, r2
 800f04c:	b2bf      	uxth	r7, r7
 800f04e:	454e      	cmp	r6, r9
 800f050:	d1e3      	bne.n	800f01a <uxr_compute_acknack+0x66>
 800f052:	4638      	mov	r0, r7
 800f054:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f058:	4607      	mov	r7, r0
 800f05a:	4638      	mov	r0, r7
 800f05c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800f060 <uxr_init_output_best_effort_stream>:
 800f060:	b410      	push	{r4}
 800f062:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800f066:	81c4      	strh	r4, [r0, #14]
 800f068:	e9c0 1300 	strd	r1, r3, [r0]
 800f06c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f070:	7303      	strb	r3, [r0, #12]
 800f072:	6082      	str	r2, [r0, #8]
 800f074:	4770      	bx	lr
 800f076:	bf00      	nop

0800f078 <uxr_reset_output_best_effort_stream>:
 800f078:	7b02      	ldrb	r2, [r0, #12]
 800f07a:	6042      	str	r2, [r0, #4]
 800f07c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f080:	81c3      	strh	r3, [r0, #14]
 800f082:	4770      	bx	lr

0800f084 <uxr_prepare_best_effort_buffer_to_write>:
 800f084:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f086:	4604      	mov	r4, r0
 800f088:	b083      	sub	sp, #12
 800f08a:	6840      	ldr	r0, [r0, #4]
 800f08c:	460d      	mov	r5, r1
 800f08e:	4616      	mov	r6, r2
 800f090:	f7fc f9ee 	bl	800b470 <uxr_submessage_padding>
 800f094:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 800f098:	4410      	add	r0, r2
 800f09a:	1942      	adds	r2, r0, r5
 800f09c:	4293      	cmp	r3, r2
 800f09e:	bf2c      	ite	cs
 800f0a0:	2701      	movcs	r7, #1
 800f0a2:	2700      	movcc	r7, #0
 800f0a4:	d202      	bcs.n	800f0ac <uxr_prepare_best_effort_buffer_to_write+0x28>
 800f0a6:	4638      	mov	r0, r7
 800f0a8:	b003      	add	sp, #12
 800f0aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f0ac:	9000      	str	r0, [sp, #0]
 800f0ae:	6821      	ldr	r1, [r4, #0]
 800f0b0:	4630      	mov	r0, r6
 800f0b2:	2300      	movs	r3, #0
 800f0b4:	f7fa fdee 	bl	8009c94 <ucdr_init_buffer_origin_offset>
 800f0b8:	6861      	ldr	r1, [r4, #4]
 800f0ba:	4638      	mov	r0, r7
 800f0bc:	4429      	add	r1, r5
 800f0be:	6061      	str	r1, [r4, #4]
 800f0c0:	b003      	add	sp, #12
 800f0c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f0c4 <uxr_prepare_best_effort_buffer_to_send>:
 800f0c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0c8:	6845      	ldr	r5, [r0, #4]
 800f0ca:	4604      	mov	r4, r0
 800f0cc:	7b00      	ldrb	r0, [r0, #12]
 800f0ce:	4285      	cmp	r5, r0
 800f0d0:	bf8c      	ite	hi
 800f0d2:	2701      	movhi	r7, #1
 800f0d4:	2700      	movls	r7, #0
 800f0d6:	d802      	bhi.n	800f0de <uxr_prepare_best_effort_buffer_to_send+0x1a>
 800f0d8:	4638      	mov	r0, r7
 800f0da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0de:	4688      	mov	r8, r1
 800f0e0:	89e0      	ldrh	r0, [r4, #14]
 800f0e2:	2101      	movs	r1, #1
 800f0e4:	4615      	mov	r5, r2
 800f0e6:	461e      	mov	r6, r3
 800f0e8:	f000 fbe0 	bl	800f8ac <uxr_seq_num_add>
 800f0ec:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f0f0:	81e0      	strh	r0, [r4, #14]
 800f0f2:	8030      	strh	r0, [r6, #0]
 800f0f4:	f8c8 2000 	str.w	r2, [r8]
 800f0f8:	602b      	str	r3, [r5, #0]
 800f0fa:	7b23      	ldrb	r3, [r4, #12]
 800f0fc:	6063      	str	r3, [r4, #4]
 800f0fe:	4638      	mov	r0, r7
 800f100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f104 <on_full_output_buffer>:
 800f104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f106:	6802      	ldr	r2, [r0, #0]
 800f108:	460d      	mov	r5, r1
 800f10a:	6809      	ldr	r1, [r1, #0]
 800f10c:	892f      	ldrh	r7, [r5, #8]
 800f10e:	686c      	ldr	r4, [r5, #4]
 800f110:	fbb4 f4f7 	udiv	r4, r4, r7
 800f114:	1a53      	subs	r3, r2, r1
 800f116:	fbb3 f3f4 	udiv	r3, r3, r4
 800f11a:	3301      	adds	r3, #1
 800f11c:	b29b      	uxth	r3, r3
 800f11e:	fbb3 f2f7 	udiv	r2, r3, r7
 800f122:	fb07 3312 	mls	r3, r7, r2, r3
 800f126:	b29b      	uxth	r3, r3
 800f128:	fb04 f403 	mul.w	r4, r4, r3
 800f12c:	7b2f      	ldrb	r7, [r5, #12]
 800f12e:	590a      	ldr	r2, [r1, r4]
 800f130:	6903      	ldr	r3, [r0, #16]
 800f132:	443c      	add	r4, r7
 800f134:	3408      	adds	r4, #8
 800f136:	1bd2      	subs	r2, r2, r7
 800f138:	4606      	mov	r6, r0
 800f13a:	4421      	add	r1, r4
 800f13c:	3a04      	subs	r2, #4
 800f13e:	f7fa fdb3 	bl	8009ca8 <ucdr_init_buffer_origin>
 800f142:	4630      	mov	r0, r6
 800f144:	4902      	ldr	r1, [pc, #8]	; (800f150 <on_full_output_buffer+0x4c>)
 800f146:	462a      	mov	r2, r5
 800f148:	f7fa fd8c 	bl	8009c64 <ucdr_set_on_full_buffer_callback>
 800f14c:	2000      	movs	r0, #0
 800f14e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f150:	0800f105 	.word	0x0800f105

0800f154 <uxr_init_output_reliable_stream>:
 800f154:	b430      	push	{r4, r5}
 800f156:	f89d 4008 	ldrb.w	r4, [sp, #8]
 800f15a:	6001      	str	r1, [r0, #0]
 800f15c:	8103      	strh	r3, [r0, #8]
 800f15e:	6042      	str	r2, [r0, #4]
 800f160:	7304      	strb	r4, [r0, #12]
 800f162:	b1b3      	cbz	r3, 800f192 <uxr_init_output_reliable_stream+0x3e>
 800f164:	600c      	str	r4, [r1, #0]
 800f166:	8901      	ldrh	r1, [r0, #8]
 800f168:	2901      	cmp	r1, #1
 800f16a:	d912      	bls.n	800f192 <uxr_init_output_reliable_stream+0x3e>
 800f16c:	2201      	movs	r2, #1
 800f16e:	e9d0 5400 	ldrd	r5, r4, [r0]
 800f172:	fbb2 f3f1 	udiv	r3, r2, r1
 800f176:	fb01 2313 	mls	r3, r1, r3, r2
 800f17a:	b29b      	uxth	r3, r3
 800f17c:	fbb4 f1f1 	udiv	r1, r4, r1
 800f180:	fb03 f301 	mul.w	r3, r3, r1
 800f184:	7b01      	ldrb	r1, [r0, #12]
 800f186:	50e9      	str	r1, [r5, r3]
 800f188:	3201      	adds	r2, #1
 800f18a:	8901      	ldrh	r1, [r0, #8]
 800f18c:	b292      	uxth	r2, r2
 800f18e:	4291      	cmp	r1, r2
 800f190:	d8ed      	bhi.n	800f16e <uxr_init_output_reliable_stream+0x1a>
 800f192:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f196:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800f19a:	e9c0 2306 	strd	r2, r3, [r0, #24]
 800f19e:	4b05      	ldr	r3, [pc, #20]	; (800f1b4 <uxr_init_output_reliable_stream+0x60>)
 800f1a0:	f8c0 300e 	str.w	r3, [r0, #14]
 800f1a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f1a8:	2300      	movs	r3, #0
 800f1aa:	bc30      	pop	{r4, r5}
 800f1ac:	8242      	strh	r2, [r0, #18]
 800f1ae:	8403      	strh	r3, [r0, #32]
 800f1b0:	4770      	bx	lr
 800f1b2:	bf00      	nop
 800f1b4:	ffff0000 	.word	0xffff0000

0800f1b8 <uxr_reset_output_reliable_stream>:
 800f1b8:	8902      	ldrh	r2, [r0, #8]
 800f1ba:	b430      	push	{r4, r5}
 800f1bc:	b19a      	cbz	r2, 800f1e6 <uxr_reset_output_reliable_stream+0x2e>
 800f1be:	2400      	movs	r4, #0
 800f1c0:	4621      	mov	r1, r4
 800f1c2:	fbb1 f3f2 	udiv	r3, r1, r2
 800f1c6:	fb02 1313 	mls	r3, r2, r3, r1
 800f1ca:	e9d0 5100 	ldrd	r5, r1, [r0]
 800f1ce:	b29b      	uxth	r3, r3
 800f1d0:	fbb1 f2f2 	udiv	r2, r1, r2
 800f1d4:	fb03 f302 	mul.w	r3, r3, r2
 800f1d8:	7b02      	ldrb	r2, [r0, #12]
 800f1da:	50ea      	str	r2, [r5, r3]
 800f1dc:	3401      	adds	r4, #1
 800f1de:	8902      	ldrh	r2, [r0, #8]
 800f1e0:	b2a1      	uxth	r1, r4
 800f1e2:	428a      	cmp	r2, r1
 800f1e4:	d8ed      	bhi.n	800f1c2 <uxr_reset_output_reliable_stream+0xa>
 800f1e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f1ea:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800f1ee:	e9c0 2306 	strd	r2, r3, [r0, #24]
 800f1f2:	4b05      	ldr	r3, [pc, #20]	; (800f208 <uxr_reset_output_reliable_stream+0x50>)
 800f1f4:	f8c0 300e 	str.w	r3, [r0, #14]
 800f1f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f1fc:	2300      	movs	r3, #0
 800f1fe:	bc30      	pop	{r4, r5}
 800f200:	8242      	strh	r2, [r0, #18]
 800f202:	8403      	strh	r3, [r0, #32]
 800f204:	4770      	bx	lr
 800f206:	bf00      	nop
 800f208:	ffff0000 	.word	0xffff0000

0800f20c <uxr_prepare_reliable_buffer_to_write>:
 800f20c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f210:	89c5      	ldrh	r5, [r0, #14]
 800f212:	4604      	mov	r4, r0
 800f214:	8900      	ldrh	r0, [r0, #8]
 800f216:	fbb5 f3f0 	udiv	r3, r5, r0
 800f21a:	4688      	mov	r8, r1
 800f21c:	e9d4 1600 	ldrd	r1, r6, [r4]
 800f220:	fb00 5313 	mls	r3, r0, r3, r5
 800f224:	b29b      	uxth	r3, r3
 800f226:	fbb6 f0f0 	udiv	r0, r6, r0
 800f22a:	fb00 f303 	mul.w	r3, r0, r3
 800f22e:	3304      	adds	r3, #4
 800f230:	18cb      	adds	r3, r1, r3
 800f232:	b091      	sub	sp, #68	; 0x44
 800f234:	f853 6c04 	ldr.w	r6, [r3, #-4]
 800f238:	9004      	str	r0, [sp, #16]
 800f23a:	2104      	movs	r1, #4
 800f23c:	4630      	mov	r0, r6
 800f23e:	9305      	str	r3, [sp, #20]
 800f240:	9206      	str	r2, [sp, #24]
 800f242:	f7fa fd3d 	bl	8009cc0 <ucdr_alignment>
 800f246:	1833      	adds	r3, r6, r0
 800f248:	9804      	ldr	r0, [sp, #16]
 800f24a:	9303      	str	r3, [sp, #12]
 800f24c:	eb03 0708 	add.w	r7, r3, r8
 800f250:	1f06      	subs	r6, r0, #4
 800f252:	42b7      	cmp	r7, r6
 800f254:	f240 80dc 	bls.w	800f410 <uxr_prepare_reliable_buffer_to_write+0x204>
 800f258:	f894 e00c 	ldrb.w	lr, [r4, #12]
 800f25c:	eb0e 0308 	add.w	r3, lr, r8
 800f260:	42b3      	cmp	r3, r6
 800f262:	f240 80c2 	bls.w	800f3ea <uxr_prepare_reliable_buffer_to_write+0x1de>
 800f266:	9b03      	ldr	r3, [sp, #12]
 800f268:	3304      	adds	r3, #4
 800f26a:	42b3      	cmp	r3, r6
 800f26c:	f080 8112 	bcs.w	800f494 <uxr_prepare_reliable_buffer_to_write+0x288>
 800f270:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 800f274:	f1bc 0f00 	cmp.w	ip, #0
 800f278:	f000 8127 	beq.w	800f4ca <uxr_prepare_reliable_buffer_to_write+0x2be>
 800f27c:	e9d4 7300 	ldrd	r7, r3, [r4]
 800f280:	2100      	movs	r1, #0
 800f282:	4608      	mov	r0, r1
 800f284:	460a      	mov	r2, r1
 800f286:	fbb3 f9fc 	udiv	r9, r3, ip
 800f28a:	fbb2 f3fc 	udiv	r3, r2, ip
 800f28e:	fb0c 2313 	mls	r3, ip, r3, r2
 800f292:	b29b      	uxth	r3, r3
 800f294:	fb09 7303 	mla	r3, r9, r3, r7
 800f298:	3101      	adds	r1, #1
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	459e      	cmp	lr, r3
 800f29e:	bf08      	it	eq
 800f2a0:	3001      	addeq	r0, #1
 800f2a2:	b28a      	uxth	r2, r1
 800f2a4:	bf08      	it	eq
 800f2a6:	b280      	uxtheq	r0, r0
 800f2a8:	4562      	cmp	r2, ip
 800f2aa:	d3ee      	bcc.n	800f28a <uxr_prepare_reliable_buffer_to_write+0x7e>
 800f2ac:	9b03      	ldr	r3, [sp, #12]
 800f2ae:	1f37      	subs	r7, r6, #4
 800f2b0:	b2bf      	uxth	r7, r7
 800f2b2:	eba7 0903 	sub.w	r9, r7, r3
 800f2b6:	fa1f f989 	uxth.w	r9, r9
 800f2ba:	eba7 070e 	sub.w	r7, r7, lr
 800f2be:	b2bf      	uxth	r7, r7
 800f2c0:	eba8 0809 	sub.w	r8, r8, r9
 800f2c4:	fbb8 faf7 	udiv	sl, r8, r7
 800f2c8:	fb07 831a 	mls	r3, r7, sl, r8
 800f2cc:	9707      	str	r7, [sp, #28]
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	f040 80bf 	bne.w	800f452 <uxr_prepare_reliable_buffer_to_write+0x246>
 800f2d4:	fa1f fa8a 	uxth.w	sl, sl
 800f2d8:	4582      	cmp	sl, r0
 800f2da:	f200 8095 	bhi.w	800f408 <uxr_prepare_reliable_buffer_to_write+0x1fc>
 800f2de:	f10d 0b20 	add.w	fp, sp, #32
 800f2e2:	f1ba 0f00 	cmp.w	sl, #0
 800f2e6:	d03a      	beq.n	800f35e <uxr_prepare_reliable_buffer_to_write+0x152>
 800f2e8:	f04f 0800 	mov.w	r8, #0
 800f2ec:	f10d 0b20 	add.w	fp, sp, #32
 800f2f0:	e000      	b.n	800f2f4 <uxr_prepare_reliable_buffer_to_write+0xe8>
 800f2f2:	46b9      	mov	r9, r7
 800f2f4:	e9d4 3200 	ldrd	r3, r2, [r4]
 800f2f8:	fbb5 f1fc 	udiv	r1, r5, ip
 800f2fc:	fb0c 5111 	mls	r1, ip, r1, r5
 800f300:	b289      	uxth	r1, r1
 800f302:	fbb2 f2fc 	udiv	r2, r2, ip
 800f306:	fb01 f102 	mul.w	r1, r1, r2
 800f30a:	3104      	adds	r1, #4
 800f30c:	4419      	add	r1, r3
 800f30e:	4632      	mov	r2, r6
 800f310:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f314:	9300      	str	r3, [sp, #0]
 800f316:	4658      	mov	r0, fp
 800f318:	2300      	movs	r3, #0
 800f31a:	f7fa fcbb 	bl	8009c94 <ucdr_init_buffer_origin_offset>
 800f31e:	464a      	mov	r2, r9
 800f320:	2300      	movs	r3, #0
 800f322:	210d      	movs	r1, #13
 800f324:	4658      	mov	r0, fp
 800f326:	f7fc f863 	bl	800b3f0 <uxr_buffer_submessage_header>
 800f32a:	8920      	ldrh	r0, [r4, #8]
 800f32c:	fbb5 f3f0 	udiv	r3, r5, r0
 800f330:	e9d4 2100 	ldrd	r2, r1, [r4]
 800f334:	fb00 5313 	mls	r3, r0, r3, r5
 800f338:	b29b      	uxth	r3, r3
 800f33a:	fbb1 f1f0 	udiv	r1, r1, r0
 800f33e:	fb03 f301 	mul.w	r3, r3, r1
 800f342:	4628      	mov	r0, r5
 800f344:	50d6      	str	r6, [r2, r3]
 800f346:	2101      	movs	r1, #1
 800f348:	f000 fab0 	bl	800f8ac <uxr_seq_num_add>
 800f34c:	f108 0801 	add.w	r8, r8, #1
 800f350:	fa1f f388 	uxth.w	r3, r8
 800f354:	459a      	cmp	sl, r3
 800f356:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 800f35a:	4605      	mov	r5, r0
 800f35c:	d8c9      	bhi.n	800f2f2 <uxr_prepare_reliable_buffer_to_write+0xe6>
 800f35e:	fbb5 f1fc 	udiv	r1, r5, ip
 800f362:	fb0c 5111 	mls	r1, ip, r1, r5
 800f366:	b289      	uxth	r1, r1
 800f368:	6863      	ldr	r3, [r4, #4]
 800f36a:	fbb3 fcfc 	udiv	ip, r3, ip
 800f36e:	6823      	ldr	r3, [r4, #0]
 800f370:	fb01 f10c 	mul.w	r1, r1, ip
 800f374:	3104      	adds	r1, #4
 800f376:	4419      	add	r1, r3
 800f378:	4632      	mov	r2, r6
 800f37a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f37e:	9300      	str	r3, [sp, #0]
 800f380:	4658      	mov	r0, fp
 800f382:	2300      	movs	r3, #0
 800f384:	f7fa fc86 	bl	8009c94 <ucdr_init_buffer_origin_offset>
 800f388:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800f38c:	4658      	mov	r0, fp
 800f38e:	fa1f f288 	uxth.w	r2, r8
 800f392:	2302      	movs	r3, #2
 800f394:	210d      	movs	r1, #13
 800f396:	f7fc f82b 	bl	800b3f0 <uxr_buffer_submessage_header>
 800f39a:	e9d4 3200 	ldrd	r3, r2, [r4]
 800f39e:	8921      	ldrh	r1, [r4, #8]
 800f3a0:	9f03      	ldr	r7, [sp, #12]
 800f3a2:	9307      	str	r3, [sp, #28]
 800f3a4:	9b05      	ldr	r3, [sp, #20]
 800f3a6:	7b26      	ldrb	r6, [r4, #12]
 800f3a8:	fbb5 f0f1 	udiv	r0, r5, r1
 800f3ac:	fbb2 f2f1 	udiv	r2, r2, r1
 800f3b0:	fb01 5010 	mls	r0, r1, r0, r5
 800f3b4:	1d39      	adds	r1, r7, #4
 800f3b6:	440b      	add	r3, r1
 800f3b8:	b280      	uxth	r0, r0
 800f3ba:	fb00 f002 	mul.w	r0, r0, r2
 800f3be:	4619      	mov	r1, r3
 800f3c0:	3604      	adds	r6, #4
 800f3c2:	9b07      	ldr	r3, [sp, #28]
 800f3c4:	9a04      	ldr	r2, [sp, #16]
 800f3c6:	4446      	add	r6, r8
 800f3c8:	501e      	str	r6, [r3, r0]
 800f3ca:	9e06      	ldr	r6, [sp, #24]
 800f3cc:	3a08      	subs	r2, #8
 800f3ce:	1bd2      	subs	r2, r2, r7
 800f3d0:	4630      	mov	r0, r6
 800f3d2:	f7fa fc71 	bl	8009cb8 <ucdr_init_buffer>
 800f3d6:	4630      	mov	r0, r6
 800f3d8:	493d      	ldr	r1, [pc, #244]	; (800f4d0 <uxr_prepare_reliable_buffer_to_write+0x2c4>)
 800f3da:	4622      	mov	r2, r4
 800f3dc:	f7fa fc42 	bl	8009c64 <ucdr_set_on_full_buffer_callback>
 800f3e0:	2001      	movs	r0, #1
 800f3e2:	81e5      	strh	r5, [r4, #14]
 800f3e4:	b011      	add	sp, #68	; 0x44
 800f3e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3ea:	2101      	movs	r1, #1
 800f3ec:	89e0      	ldrh	r0, [r4, #14]
 800f3ee:	f000 fa5d 	bl	800f8ac <uxr_seq_num_add>
 800f3f2:	8921      	ldrh	r1, [r4, #8]
 800f3f4:	4605      	mov	r5, r0
 800f3f6:	8a60      	ldrh	r0, [r4, #18]
 800f3f8:	f000 fa58 	bl	800f8ac <uxr_seq_num_add>
 800f3fc:	4601      	mov	r1, r0
 800f3fe:	4628      	mov	r0, r5
 800f400:	f000 fa5c 	bl	800f8bc <uxr_seq_num_cmp>
 800f404:	2800      	cmp	r0, #0
 800f406:	dd2a      	ble.n	800f45e <uxr_prepare_reliable_buffer_to_write+0x252>
 800f408:	2000      	movs	r0, #0
 800f40a:	b011      	add	sp, #68	; 0x44
 800f40c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f410:	8921      	ldrh	r1, [r4, #8]
 800f412:	8a60      	ldrh	r0, [r4, #18]
 800f414:	f000 fa4a 	bl	800f8ac <uxr_seq_num_add>
 800f418:	4601      	mov	r1, r0
 800f41a:	4628      	mov	r0, r5
 800f41c:	f000 fa4e 	bl	800f8bc <uxr_seq_num_cmp>
 800f420:	2800      	cmp	r0, #0
 800f422:	dcf1      	bgt.n	800f408 <uxr_prepare_reliable_buffer_to_write+0x1fc>
 800f424:	8921      	ldrh	r1, [r4, #8]
 800f426:	fbb5 f3f1 	udiv	r3, r5, r1
 800f42a:	e9d4 4200 	ldrd	r4, r2, [r4]
 800f42e:	fb01 5313 	mls	r3, r1, r3, r5
 800f432:	b29b      	uxth	r3, r3
 800f434:	fbb2 f2f1 	udiv	r2, r2, r1
 800f438:	fb03 f302 	mul.w	r3, r3, r2
 800f43c:	e9dd 1005 	ldrd	r1, r0, [sp, #20]
 800f440:	50e7      	str	r7, [r4, r3]
 800f442:	9b03      	ldr	r3, [sp, #12]
 800f444:	9300      	str	r3, [sp, #0]
 800f446:	463a      	mov	r2, r7
 800f448:	2300      	movs	r3, #0
 800f44a:	f7fa fc23 	bl	8009c94 <ucdr_init_buffer_origin_offset>
 800f44e:	2001      	movs	r0, #1
 800f450:	e7db      	b.n	800f40a <uxr_prepare_reliable_buffer_to_write+0x1fe>
 800f452:	f10a 0a01 	add.w	sl, sl, #1
 800f456:	fa1f fa8a 	uxth.w	sl, sl
 800f45a:	9307      	str	r3, [sp, #28]
 800f45c:	e73c      	b.n	800f2d8 <uxr_prepare_reliable_buffer_to_write+0xcc>
 800f45e:	8920      	ldrh	r0, [r4, #8]
 800f460:	fbb5 f3f0 	udiv	r3, r5, r0
 800f464:	fb00 5313 	mls	r3, r0, r3, r5
 800f468:	b29b      	uxth	r3, r3
 800f46a:	6862      	ldr	r2, [r4, #4]
 800f46c:	6821      	ldr	r1, [r4, #0]
 800f46e:	fbb2 f0f0 	udiv	r0, r2, r0
 800f472:	fb03 f300 	mul.w	r3, r3, r0
 800f476:	7b22      	ldrb	r2, [r4, #12]
 800f478:	9806      	ldr	r0, [sp, #24]
 800f47a:	3304      	adds	r3, #4
 800f47c:	4419      	add	r1, r3
 800f47e:	4442      	add	r2, r8
 800f480:	f841 2c04 	str.w	r2, [r1, #-4]
 800f484:	7b23      	ldrb	r3, [r4, #12]
 800f486:	9300      	str	r3, [sp, #0]
 800f488:	2300      	movs	r3, #0
 800f48a:	f7fa fc03 	bl	8009c94 <ucdr_init_buffer_origin_offset>
 800f48e:	81e5      	strh	r5, [r4, #14]
 800f490:	2001      	movs	r0, #1
 800f492:	e7ba      	b.n	800f40a <uxr_prepare_reliable_buffer_to_write+0x1fe>
 800f494:	4628      	mov	r0, r5
 800f496:	2101      	movs	r1, #1
 800f498:	f000 fa08 	bl	800f8ac <uxr_seq_num_add>
 800f49c:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f4a0:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 800f4a4:	fbb3 f1fc 	udiv	r1, r3, ip
 800f4a8:	fbb0 f3fc 	udiv	r3, r0, ip
 800f4ac:	fb0c 0313 	mls	r3, ip, r3, r0
 800f4b0:	b29b      	uxth	r3, r3
 800f4b2:	fb03 f301 	mul.w	r3, r3, r1
 800f4b6:	3304      	adds	r3, #4
 800f4b8:	18d3      	adds	r3, r2, r3
 800f4ba:	9305      	str	r3, [sp, #20]
 800f4bc:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800f4c0:	f894 e00c 	ldrb.w	lr, [r4, #12]
 800f4c4:	9303      	str	r3, [sp, #12]
 800f4c6:	4605      	mov	r5, r0
 800f4c8:	e6d4      	b.n	800f274 <uxr_prepare_reliable_buffer_to_write+0x68>
 800f4ca:	4660      	mov	r0, ip
 800f4cc:	e6ee      	b.n	800f2ac <uxr_prepare_reliable_buffer_to_write+0xa0>
 800f4ce:	bf00      	nop
 800f4d0:	0800f105 	.word	0x0800f105

0800f4d4 <uxr_prepare_next_reliable_buffer_to_send>:
 800f4d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f4d8:	4605      	mov	r5, r0
 800f4da:	4688      	mov	r8, r1
 800f4dc:	8a00      	ldrh	r0, [r0, #16]
 800f4de:	2101      	movs	r1, #1
 800f4e0:	4617      	mov	r7, r2
 800f4e2:	461e      	mov	r6, r3
 800f4e4:	f000 f9e2 	bl	800f8ac <uxr_seq_num_add>
 800f4e8:	8030      	strh	r0, [r6, #0]
 800f4ea:	892a      	ldrh	r2, [r5, #8]
 800f4ec:	fbb0 f3f2 	udiv	r3, r0, r2
 800f4f0:	fb02 0413 	mls	r4, r2, r3, r0
 800f4f4:	b2a4      	uxth	r4, r4
 800f4f6:	686b      	ldr	r3, [r5, #4]
 800f4f8:	fbb3 f2f2 	udiv	r2, r3, r2
 800f4fc:	682b      	ldr	r3, [r5, #0]
 800f4fe:	89e9      	ldrh	r1, [r5, #14]
 800f500:	fb04 f402 	mul.w	r4, r4, r2
 800f504:	3404      	adds	r4, #4
 800f506:	4423      	add	r3, r4
 800f508:	f8c8 3000 	str.w	r3, [r8]
 800f50c:	682b      	ldr	r3, [r5, #0]
 800f50e:	441c      	add	r4, r3
 800f510:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800f514:	603b      	str	r3, [r7, #0]
 800f516:	f000 f9d1 	bl	800f8bc <uxr_seq_num_cmp>
 800f51a:	2800      	cmp	r0, #0
 800f51c:	dd02      	ble.n	800f524 <uxr_prepare_next_reliable_buffer_to_send+0x50>
 800f51e:	2000      	movs	r0, #0
 800f520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f524:	683a      	ldr	r2, [r7, #0]
 800f526:	7b2b      	ldrb	r3, [r5, #12]
 800f528:	429a      	cmp	r2, r3
 800f52a:	d9f8      	bls.n	800f51e <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 800f52c:	8a69      	ldrh	r1, [r5, #18]
 800f52e:	8a28      	ldrh	r0, [r5, #16]
 800f530:	f000 f9c0 	bl	800f8b4 <uxr_seq_num_sub>
 800f534:	892b      	ldrh	r3, [r5, #8]
 800f536:	4283      	cmp	r3, r0
 800f538:	d0f1      	beq.n	800f51e <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 800f53a:	8830      	ldrh	r0, [r6, #0]
 800f53c:	89eb      	ldrh	r3, [r5, #14]
 800f53e:	8228      	strh	r0, [r5, #16]
 800f540:	4298      	cmp	r0, r3
 800f542:	d002      	beq.n	800f54a <uxr_prepare_next_reliable_buffer_to_send+0x76>
 800f544:	2001      	movs	r0, #1
 800f546:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f54a:	2101      	movs	r1, #1
 800f54c:	f000 f9ae 	bl	800f8ac <uxr_seq_num_add>
 800f550:	81e8      	strh	r0, [r5, #14]
 800f552:	2001      	movs	r0, #1
 800f554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f558 <uxr_update_output_stream_heartbeat_timestamp>:
 800f558:	b5d0      	push	{r4, r6, r7, lr}
 800f55a:	8a01      	ldrh	r1, [r0, #16]
 800f55c:	4604      	mov	r4, r0
 800f55e:	8a40      	ldrh	r0, [r0, #18]
 800f560:	4616      	mov	r6, r2
 800f562:	461f      	mov	r7, r3
 800f564:	f000 f9aa 	bl	800f8bc <uxr_seq_num_cmp>
 800f568:	2800      	cmp	r0, #0
 800f56a:	db07      	blt.n	800f57c <uxr_update_output_stream_heartbeat_timestamp+0x24>
 800f56c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f570:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800f574:	e9c4 2306 	strd	r2, r3, [r4, #24]
 800f578:	2000      	movs	r0, #0
 800f57a:	bdd0      	pop	{r4, r6, r7, pc}
 800f57c:	f894 0020 	ldrb.w	r0, [r4, #32]
 800f580:	b948      	cbnz	r0, 800f596 <uxr_update_output_stream_heartbeat_timestamp+0x3e>
 800f582:	2301      	movs	r3, #1
 800f584:	f884 3020 	strb.w	r3, [r4, #32]
 800f588:	f116 0364 	adds.w	r3, r6, #100	; 0x64
 800f58c:	f147 0200 	adc.w	r2, r7, #0
 800f590:	e9c4 3206 	strd	r3, r2, [r4, #24]
 800f594:	bdd0      	pop	{r4, r6, r7, pc}
 800f596:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 800f59a:	4296      	cmp	r6, r2
 800f59c:	eb77 0303 	sbcs.w	r3, r7, r3
 800f5a0:	bfa5      	ittet	ge
 800f5a2:	3001      	addge	r0, #1
 800f5a4:	f884 0020 	strbge.w	r0, [r4, #32]
 800f5a8:	2000      	movlt	r0, #0
 800f5aa:	2001      	movge	r0, #1
 800f5ac:	e7ec      	b.n	800f588 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 800f5ae:	bf00      	nop

0800f5b0 <uxr_begin_output_nack_buffer_it>:
 800f5b0:	8a40      	ldrh	r0, [r0, #18]
 800f5b2:	4770      	bx	lr

0800f5b4 <uxr_next_reliable_nack_buffer_to_send>:
 800f5b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f5b8:	f890 9021 	ldrb.w	r9, [r0, #33]	; 0x21
 800f5bc:	f1b9 0f00 	cmp.w	r9, #0
 800f5c0:	d011      	beq.n	800f5e6 <uxr_next_reliable_nack_buffer_to_send+0x32>
 800f5c2:	4605      	mov	r5, r0
 800f5c4:	8818      	ldrh	r0, [r3, #0]
 800f5c6:	460f      	mov	r7, r1
 800f5c8:	4690      	mov	r8, r2
 800f5ca:	461e      	mov	r6, r3
 800f5cc:	2101      	movs	r1, #1
 800f5ce:	f000 f96d 	bl	800f8ac <uxr_seq_num_add>
 800f5d2:	8030      	strh	r0, [r6, #0]
 800f5d4:	8a29      	ldrh	r1, [r5, #16]
 800f5d6:	f000 f971 	bl	800f8bc <uxr_seq_num_cmp>
 800f5da:	2800      	cmp	r0, #0
 800f5dc:	dd06      	ble.n	800f5ec <uxr_next_reliable_nack_buffer_to_send+0x38>
 800f5de:	f04f 0900 	mov.w	r9, #0
 800f5e2:	f885 9021 	strb.w	r9, [r5, #33]	; 0x21
 800f5e6:	4648      	mov	r0, r9
 800f5e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f5ec:	892a      	ldrh	r2, [r5, #8]
 800f5ee:	8830      	ldrh	r0, [r6, #0]
 800f5f0:	fbb0 f4f2 	udiv	r4, r0, r2
 800f5f4:	fb02 0414 	mls	r4, r2, r4, r0
 800f5f8:	b2a4      	uxth	r4, r4
 800f5fa:	686b      	ldr	r3, [r5, #4]
 800f5fc:	fbb3 f2f2 	udiv	r2, r3, r2
 800f600:	682b      	ldr	r3, [r5, #0]
 800f602:	fb04 f402 	mul.w	r4, r4, r2
 800f606:	3404      	adds	r4, #4
 800f608:	4423      	add	r3, r4
 800f60a:	603b      	str	r3, [r7, #0]
 800f60c:	682b      	ldr	r3, [r5, #0]
 800f60e:	441c      	add	r4, r3
 800f610:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800f614:	f8c8 3000 	str.w	r3, [r8]
 800f618:	7b2a      	ldrb	r2, [r5, #12]
 800f61a:	429a      	cmp	r2, r3
 800f61c:	d0d6      	beq.n	800f5cc <uxr_next_reliable_nack_buffer_to_send+0x18>
 800f61e:	4648      	mov	r0, r9
 800f620:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800f624 <uxr_process_acknack>:
 800f624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f626:	4604      	mov	r4, r0
 800f628:	460e      	mov	r6, r1
 800f62a:	4610      	mov	r0, r2
 800f62c:	2101      	movs	r1, #1
 800f62e:	f000 f941 	bl	800f8b4 <uxr_seq_num_sub>
 800f632:	8a61      	ldrh	r1, [r4, #18]
 800f634:	f000 f93e 	bl	800f8b4 <uxr_seq_num_sub>
 800f638:	b1c0      	cbz	r0, 800f66c <uxr_process_acknack+0x48>
 800f63a:	4605      	mov	r5, r0
 800f63c:	2700      	movs	r7, #0
 800f63e:	2101      	movs	r1, #1
 800f640:	8a60      	ldrh	r0, [r4, #18]
 800f642:	f000 f933 	bl	800f8ac <uxr_seq_num_add>
 800f646:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 800f64a:	fbb0 f3fc 	udiv	r3, r0, ip
 800f64e:	e9d4 2100 	ldrd	r2, r1, [r4]
 800f652:	fb0c 0313 	mls	r3, ip, r3, r0
 800f656:	b29b      	uxth	r3, r3
 800f658:	fbb1 f1fc 	udiv	r1, r1, ip
 800f65c:	3701      	adds	r7, #1
 800f65e:	fb03 f301 	mul.w	r3, r3, r1
 800f662:	42bd      	cmp	r5, r7
 800f664:	7b21      	ldrb	r1, [r4, #12]
 800f666:	8260      	strh	r0, [r4, #18]
 800f668:	50d1      	str	r1, [r2, r3]
 800f66a:	d1e8      	bne.n	800f63e <uxr_process_acknack+0x1a>
 800f66c:	3e00      	subs	r6, #0
 800f66e:	f04f 0300 	mov.w	r3, #0
 800f672:	bf18      	it	ne
 800f674:	2601      	movne	r6, #1
 800f676:	f884 3020 	strb.w	r3, [r4, #32]
 800f67a:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
 800f67e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f680 <uxr_is_output_up_to_date>:
 800f680:	8a01      	ldrh	r1, [r0, #16]
 800f682:	8a40      	ldrh	r0, [r0, #18]
 800f684:	b508      	push	{r3, lr}
 800f686:	f000 f919 	bl	800f8bc <uxr_seq_num_cmp>
 800f68a:	fab0 f080 	clz	r0, r0
 800f68e:	0940      	lsrs	r0, r0, #5
 800f690:	bd08      	pop	{r3, pc}
 800f692:	bf00      	nop

0800f694 <get_available_free_slots>:
 800f694:	8901      	ldrh	r1, [r0, #8]
 800f696:	b1d9      	cbz	r1, 800f6d0 <get_available_free_slots+0x3c>
 800f698:	b4f0      	push	{r4, r5, r6, r7}
 800f69a:	2400      	movs	r4, #0
 800f69c:	6845      	ldr	r5, [r0, #4]
 800f69e:	6807      	ldr	r7, [r0, #0]
 800f6a0:	7b06      	ldrb	r6, [r0, #12]
 800f6a2:	fbb5 f5f1 	udiv	r5, r5, r1
 800f6a6:	4620      	mov	r0, r4
 800f6a8:	4622      	mov	r2, r4
 800f6aa:	fbb2 f3f1 	udiv	r3, r2, r1
 800f6ae:	fb01 2313 	mls	r3, r1, r3, r2
 800f6b2:	b29b      	uxth	r3, r3
 800f6b4:	fb05 7303 	mla	r3, r5, r3, r7
 800f6b8:	3401      	adds	r4, #1
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	429e      	cmp	r6, r3
 800f6be:	bf08      	it	eq
 800f6c0:	3001      	addeq	r0, #1
 800f6c2:	b2a2      	uxth	r2, r4
 800f6c4:	bf08      	it	eq
 800f6c6:	b280      	uxtheq	r0, r0
 800f6c8:	428a      	cmp	r2, r1
 800f6ca:	d3ee      	bcc.n	800f6aa <get_available_free_slots+0x16>
 800f6cc:	bcf0      	pop	{r4, r5, r6, r7}
 800f6ce:	4770      	bx	lr
 800f6d0:	4608      	mov	r0, r1
 800f6d2:	4770      	bx	lr

0800f6d4 <uxr_buffer_cancel_data>:
 800f6d4:	b530      	push	{r4, r5, lr}
 800f6d6:	b095      	sub	sp, #84	; 0x54
 800f6d8:	2400      	movs	r4, #0
 800f6da:	2308      	movs	r3, #8
 800f6dc:	e9cd 4201 	strd	r4, r2, [sp, #4]
 800f6e0:	9300      	str	r3, [sp, #0]
 800f6e2:	9205      	str	r2, [sp, #20]
 800f6e4:	2501      	movs	r5, #1
 800f6e6:	ab0c      	add	r3, sp, #48	; 0x30
 800f6e8:	2210      	movs	r2, #16
 800f6ea:	f8ad 401c 	strh.w	r4, [sp, #28]
 800f6ee:	f88d 401e 	strb.w	r4, [sp, #30]
 800f6f2:	f8cd 4026 	str.w	r4, [sp, #38]	; 0x26
 800f6f6:	f8cd 402a 	str.w	r4, [sp, #42]	; 0x2a
 800f6fa:	9103      	str	r1, [sp, #12]
 800f6fc:	4604      	mov	r4, r0
 800f6fe:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 800f702:	f7fb fbd1 	bl	800aea8 <uxr_prepare_stream_to_write_submessage>
 800f706:	b918      	cbnz	r0, 800f710 <uxr_buffer_cancel_data+0x3c>
 800f708:	4604      	mov	r4, r0
 800f70a:	4620      	mov	r0, r4
 800f70c:	b015      	add	sp, #84	; 0x54
 800f70e:	bd30      	pop	{r4, r5, pc}
 800f710:	9905      	ldr	r1, [sp, #20]
 800f712:	aa06      	add	r2, sp, #24
 800f714:	4620      	mov	r0, r4
 800f716:	f7fb fd01 	bl	800b11c <uxr_init_base_object_request>
 800f71a:	a906      	add	r1, sp, #24
 800f71c:	4604      	mov	r4, r0
 800f71e:	a80c      	add	r0, sp, #48	; 0x30
 800f720:	f7fc fefa 	bl	800c518 <uxr_serialize_READ_DATA_Payload>
 800f724:	4620      	mov	r0, r4
 800f726:	b015      	add	sp, #84	; 0x54
 800f728:	bd30      	pop	{r4, r5, pc}
 800f72a:	bf00      	nop

0800f72c <read_submessage_format>:
 800f72c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f730:	b095      	sub	sp, #84	; 0x54
 800f732:	f8bd 9078 	ldrh.w	r9, [sp, #120]	; 0x78
 800f736:	b113      	cbz	r3, 800f73e <read_submessage_format+0x12>
 800f738:	b015      	add	sp, #84	; 0x54
 800f73a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f73e:	460c      	mov	r4, r1
 800f740:	4616      	mov	r6, r2
 800f742:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800f746:	461d      	mov	r5, r3
 800f748:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800f74a:	9304      	str	r3, [sp, #16]
 800f74c:	1a52      	subs	r2, r2, r1
 800f74e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f750:	9305      	str	r3, [sp, #20]
 800f752:	4607      	mov	r7, r0
 800f754:	a80c      	add	r0, sp, #48	; 0x30
 800f756:	f89d 8076 	ldrb.w	r8, [sp, #118]	; 0x76
 800f75a:	f7fa faad 	bl	8009cb8 <ucdr_init_buffer>
 800f75e:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800f762:	a80c      	add	r0, sp, #48	; 0x30
 800f764:	f7fa fa7e 	bl	8009c64 <ucdr_set_on_full_buffer_callback>
 800f768:	69e3      	ldr	r3, [r4, #28]
 800f76a:	b193      	cbz	r3, 800f792 <read_submessage_format+0x66>
 800f76c:	f1b8 0f07 	cmp.w	r8, #7
 800f770:	751d      	strb	r5, [r3, #20]
 800f772:	d03e      	beq.n	800f7f2 <read_submessage_format+0xc6>
 800f774:	f1b8 0f08 	cmp.w	r8, #8
 800f778:	d02c      	beq.n	800f7d4 <read_submessage_format+0xa8>
 800f77a:	f1b8 0f06 	cmp.w	r8, #6
 800f77e:	d011      	beq.n	800f7a4 <read_submessage_format+0x78>
 800f780:	2201      	movs	r2, #1
 800f782:	751a      	strb	r2, [r3, #20]
 800f784:	4631      	mov	r1, r6
 800f786:	4620      	mov	r0, r4
 800f788:	f7fa fae6 	bl	8009d58 <ucdr_advance_buffer>
 800f78c:	b015      	add	sp, #84	; 0x54
 800f78e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f792:	f1b8 0f07 	cmp.w	r8, #7
 800f796:	d02c      	beq.n	800f7f2 <read_submessage_format+0xc6>
 800f798:	f1b8 0f08 	cmp.w	r8, #8
 800f79c:	d01a      	beq.n	800f7d4 <read_submessage_format+0xa8>
 800f79e:	f1b8 0f06 	cmp.w	r8, #6
 800f7a2:	d1ef      	bne.n	800f784 <read_submessage_format+0x58>
 800f7a4:	f8d7 5088 	ldr.w	r5, [r7, #136]	; 0x88
 800f7a8:	b18d      	cbz	r5, 800f7ce <read_submessage_format+0xa2>
 800f7aa:	2306      	movs	r3, #6
 800f7ac:	f88d 3016 	strb.w	r3, [sp, #22]
 800f7b0:	aa0c      	add	r2, sp, #48	; 0x30
 800f7b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f7b6:	9302      	str	r3, [sp, #8]
 800f7b8:	9200      	str	r2, [sp, #0]
 800f7ba:	9b04      	ldr	r3, [sp, #16]
 800f7bc:	9905      	ldr	r1, [sp, #20]
 800f7be:	9601      	str	r6, [sp, #4]
 800f7c0:	464a      	mov	r2, r9
 800f7c2:	4638      	mov	r0, r7
 800f7c4:	47a8      	blx	r5
 800f7c6:	2301      	movs	r3, #1
 800f7c8:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 800f7cc:	69e3      	ldr	r3, [r4, #28]
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d1d6      	bne.n	800f780 <read_submessage_format+0x54>
 800f7d2:	e7d7      	b.n	800f784 <read_submessage_format+0x58>
 800f7d4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800f7d8:	2a00      	cmp	r2, #0
 800f7da:	d0f8      	beq.n	800f7ce <read_submessage_format+0xa2>
 800f7dc:	a906      	add	r1, sp, #24
 800f7de:	a80c      	add	r0, sp, #48	; 0x30
 800f7e0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800f7e2:	f7fc ff39 	bl	800c658 <uxr_deserialize_SampleIdentity>
 800f7e6:	2800      	cmp	r0, #0
 800f7e8:	d13c      	bne.n	800f864 <read_submessage_format+0x138>
 800f7ea:	69e3      	ldr	r3, [r4, #28]
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d1c7      	bne.n	800f780 <read_submessage_format+0x54>
 800f7f0:	e7c8      	b.n	800f784 <read_submessage_format+0x58>
 800f7f2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800f7f6:	b132      	cbz	r2, 800f806 <read_submessage_format+0xda>
 800f7f8:	a906      	add	r1, sp, #24
 800f7fa:	a80c      	add	r0, sp, #48	; 0x30
 800f7fc:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800f7fe:	f7fc fc0f 	bl	800c020 <uxr_deserialize_BaseObjectRequest>
 800f802:	b930      	cbnz	r0, 800f812 <read_submessage_format+0xe6>
 800f804:	69e3      	ldr	r3, [r4, #28]
 800f806:	68a2      	ldr	r2, [r4, #8]
 800f808:	4432      	add	r2, r6
 800f80a:	60a2      	str	r2, [r4, #8]
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d1b7      	bne.n	800f780 <read_submessage_format+0x54>
 800f810:	e7b8      	b.n	800f784 <read_submessage_format+0x58>
 800f812:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 800f816:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f818:	1a52      	subs	r2, r2, r1
 800f81a:	a80c      	add	r0, sp, #48	; 0x30
 800f81c:	1aed      	subs	r5, r5, r3
 800f81e:	f7fa fa4b 	bl	8009cb8 <ucdr_init_buffer>
 800f822:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800f826:	a80c      	add	r0, sp, #48	; 0x30
 800f828:	f7fa fa1c 	bl	8009c64 <ucdr_set_on_full_buffer_callback>
 800f82c:	4435      	add	r5, r6
 800f82e:	f89d 1018 	ldrb.w	r1, [sp, #24]
 800f832:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800f836:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 800f83a:	9002      	str	r0, [sp, #8]
 800f83c:	2207      	movs	r2, #7
 800f83e:	f88d 2016 	strb.w	r2, [sp, #22]
 800f842:	b2ad      	uxth	r5, r5
 800f844:	aa0c      	add	r2, sp, #48	; 0x30
 800f846:	9200      	str	r2, [sp, #0]
 800f848:	9501      	str	r5, [sp, #4]
 800f84a:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800f84e:	b29b      	uxth	r3, r3
 800f850:	9905      	ldr	r1, [sp, #20]
 800f852:	f8d7 50ac 	ldr.w	r5, [r7, #172]	; 0xac
 800f856:	464a      	mov	r2, r9
 800f858:	4638      	mov	r0, r7
 800f85a:	47a8      	blx	r5
 800f85c:	2301      	movs	r3, #1
 800f85e:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 800f862:	e7cf      	b.n	800f804 <read_submessage_format+0xd8>
 800f864:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 800f868:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f86a:	1a52      	subs	r2, r2, r1
 800f86c:	a80c      	add	r0, sp, #48	; 0x30
 800f86e:	1aed      	subs	r5, r5, r3
 800f870:	f7fa fa22 	bl	8009cb8 <ucdr_init_buffer>
 800f874:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800f878:	a80c      	add	r0, sp, #48	; 0x30
 800f87a:	f7fa f9f3 	bl	8009c64 <ucdr_set_on_full_buffer_callback>
 800f87e:	4435      	add	r5, r6
 800f880:	2308      	movs	r3, #8
 800f882:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800f886:	f88d 3016 	strb.w	r3, [sp, #22]
 800f88a:	b2ad      	uxth	r5, r5
 800f88c:	ab0c      	add	r3, sp, #48	; 0x30
 800f88e:	9300      	str	r3, [sp, #0]
 800f890:	9002      	str	r0, [sp, #8]
 800f892:	9501      	str	r5, [sp, #4]
 800f894:	ab06      	add	r3, sp, #24
 800f896:	9905      	ldr	r1, [sp, #20]
 800f898:	f8d7 50a4 	ldr.w	r5, [r7, #164]	; 0xa4
 800f89c:	464a      	mov	r2, r9
 800f89e:	4638      	mov	r0, r7
 800f8a0:	47a8      	blx	r5
 800f8a2:	2301      	movs	r3, #1
 800f8a4:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 800f8a8:	e79f      	b.n	800f7ea <read_submessage_format+0xbe>
 800f8aa:	bf00      	nop

0800f8ac <uxr_seq_num_add>:
 800f8ac:	4408      	add	r0, r1
 800f8ae:	b280      	uxth	r0, r0
 800f8b0:	4770      	bx	lr
 800f8b2:	bf00      	nop

0800f8b4 <uxr_seq_num_sub>:
 800f8b4:	1a40      	subs	r0, r0, r1
 800f8b6:	b280      	uxth	r0, r0
 800f8b8:	4770      	bx	lr
 800f8ba:	bf00      	nop

0800f8bc <uxr_seq_num_cmp>:
 800f8bc:	4288      	cmp	r0, r1
 800f8be:	d011      	beq.n	800f8e4 <uxr_seq_num_cmp+0x28>
 800f8c0:	d309      	bcc.n	800f8d6 <uxr_seq_num_cmp+0x1a>
 800f8c2:	4288      	cmp	r0, r1
 800f8c4:	d910      	bls.n	800f8e8 <uxr_seq_num_cmp+0x2c>
 800f8c6:	1a40      	subs	r0, r0, r1
 800f8c8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800f8cc:	bfd4      	ite	le
 800f8ce:	2001      	movle	r0, #1
 800f8d0:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
 800f8d4:	4770      	bx	lr
 800f8d6:	1a0b      	subs	r3, r1, r0
 800f8d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f8dc:	daf1      	bge.n	800f8c2 <uxr_seq_num_cmp+0x6>
 800f8de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f8e2:	4770      	bx	lr
 800f8e4:	2000      	movs	r0, #0
 800f8e6:	4770      	bx	lr
 800f8e8:	2001      	movs	r0, #1
 800f8ea:	4770      	bx	lr

0800f8ec <uxr_init_framing_io>:
 800f8ec:	2300      	movs	r3, #0
 800f8ee:	7041      	strb	r1, [r0, #1]
 800f8f0:	7003      	strb	r3, [r0, #0]
 800f8f2:	8583      	strh	r3, [r0, #44]	; 0x2c
 800f8f4:	4770      	bx	lr
 800f8f6:	bf00      	nop

0800f8f8 <uxr_write_framed_msg>:
 800f8f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8fc:	7845      	ldrb	r5, [r0, #1]
 800f8fe:	b085      	sub	sp, #20
 800f900:	4604      	mov	r4, r0
 800f902:	f1a5 0c7d 	sub.w	ip, r5, #125	; 0x7d
 800f906:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
 800f90a:	f1bc 0f01 	cmp.w	ip, #1
 800f90e:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 800f912:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 800f916:	f884 e038 	strb.w	lr, [r4, #56]	; 0x38
 800f91a:	460e      	mov	r6, r1
 800f91c:	4617      	mov	r7, r2
 800f91e:	469b      	mov	fp, r3
 800f920:	f240 8116 	bls.w	800fb50 <uxr_write_framed_msg+0x258>
 800f924:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 800f928:	2302      	movs	r3, #2
 800f92a:	2a01      	cmp	r2, #1
 800f92c:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
 800f930:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 800f934:	f240 8091 	bls.w	800fa5a <uxr_write_framed_msg+0x162>
 800f938:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f93a:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
 800f93e:	b2d9      	uxtb	r1, r3
 800f940:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 800f944:	2203      	movs	r2, #3
 800f946:	2b01      	cmp	r3, #1
 800f948:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 800f94c:	f240 809a 	bls.w	800fa84 <uxr_write_framed_msg+0x18c>
 800f950:	18a3      	adds	r3, r4, r2
 800f952:	3201      	adds	r2, #1
 800f954:	f883 1038 	strb.w	r1, [r3, #56]	; 0x38
 800f958:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 800f95c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f95e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800f962:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 800f966:	2901      	cmp	r1, #1
 800f968:	eb04 0102 	add.w	r1, r4, r2
 800f96c:	f240 8101 	bls.w	800fb72 <uxr_write_framed_msg+0x27a>
 800f970:	f881 3038 	strb.w	r3, [r1, #56]	; 0x38
 800f974:	3201      	adds	r2, #1
 800f976:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f978:	b2d2      	uxtb	r2, r2
 800f97a:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 800f97e:	2b00      	cmp	r3, #0
 800f980:	f000 8106 	beq.w	800fb90 <uxr_write_framed_msg+0x298>
 800f984:	f04f 0a00 	mov.w	sl, #0
 800f988:	46d1      	mov	r9, sl
 800f98a:	f81b 3009 	ldrb.w	r3, [fp, r9]
 800f98e:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 800f992:	2901      	cmp	r1, #1
 800f994:	f240 80a3 	bls.w	800fade <uxr_write_framed_msg+0x1e6>
 800f998:	2a29      	cmp	r2, #41	; 0x29
 800f99a:	d87f      	bhi.n	800fa9c <uxr_write_framed_msg+0x1a4>
 800f99c:	18a1      	adds	r1, r4, r2
 800f99e:	3201      	adds	r2, #1
 800f9a0:	b2d2      	uxtb	r2, r2
 800f9a2:	f881 3038 	strb.w	r3, [r1, #56]	; 0x38
 800f9a6:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 800f9aa:	ea8a 0303 	eor.w	r3, sl, r3
 800f9ae:	4984      	ldr	r1, [pc, #528]	; (800fbc0 <uxr_write_framed_msg+0x2c8>)
 800f9b0:	b2db      	uxtb	r3, r3
 800f9b2:	f109 0901 	add.w	r9, r9, #1
 800f9b6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800f9ba:	ea83 2a1a 	eor.w	sl, r3, sl, lsr #8
 800f9be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f9c0:	454b      	cmp	r3, r9
 800f9c2:	d8e2      	bhi.n	800f98a <uxr_write_framed_msg+0x92>
 800f9c4:	ea4f 231a 	mov.w	r3, sl, lsr #8
 800f9c8:	fa5f f98a 	uxtb.w	r9, sl
 800f9cc:	9301      	str	r3, [sp, #4]
 800f9ce:	f04f 0b00 	mov.w	fp, #0
 800f9d2:	f88d 900c 	strb.w	r9, [sp, #12]
 800f9d6:	f88d 300d 	strb.w	r3, [sp, #13]
 800f9da:	f1a9 0a7d 	sub.w	sl, r9, #125	; 0x7d
 800f9de:	fa5f f18a 	uxtb.w	r1, sl
 800f9e2:	2901      	cmp	r1, #1
 800f9e4:	d920      	bls.n	800fa28 <uxr_write_framed_msg+0x130>
 800f9e6:	2a29      	cmp	r2, #41	; 0x29
 800f9e8:	f240 808b 	bls.w	800fb02 <uxr_write_framed_msg+0x20a>
 800f9ec:	2500      	movs	r5, #0
 800f9ee:	e000      	b.n	800f9f2 <uxr_write_framed_msg+0xfa>
 800f9f0:	b160      	cbz	r0, 800fa0c <uxr_write_framed_msg+0x114>
 800f9f2:	f105 0138 	add.w	r1, r5, #56	; 0x38
 800f9f6:	1b52      	subs	r2, r2, r5
 800f9f8:	4421      	add	r1, r4
 800f9fa:	4643      	mov	r3, r8
 800f9fc:	4638      	mov	r0, r7
 800f9fe:	47b0      	blx	r6
 800fa00:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 800fa04:	4405      	add	r5, r0
 800fa06:	4295      	cmp	r5, r2
 800fa08:	d3f2      	bcc.n	800f9f0 <uxr_write_framed_msg+0xf8>
 800fa0a:	d003      	beq.n	800fa14 <uxr_write_framed_msg+0x11c>
 800fa0c:	2000      	movs	r0, #0
 800fa0e:	b005      	add	sp, #20
 800fa10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa14:	fa5f f18a 	uxtb.w	r1, sl
 800fa18:	f04f 0300 	mov.w	r3, #0
 800fa1c:	2901      	cmp	r1, #1
 800fa1e:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 800fa22:	f04f 0200 	mov.w	r2, #0
 800fa26:	d86c      	bhi.n	800fb02 <uxr_write_framed_msg+0x20a>
 800fa28:	1c51      	adds	r1, r2, #1
 800fa2a:	b2c9      	uxtb	r1, r1
 800fa2c:	2929      	cmp	r1, #41	; 0x29
 800fa2e:	d8dd      	bhi.n	800f9ec <uxr_write_framed_msg+0xf4>
 800fa30:	18a0      	adds	r0, r4, r2
 800fa32:	3202      	adds	r2, #2
 800fa34:	f089 0920 	eor.w	r9, r9, #32
 800fa38:	b2d2      	uxtb	r2, r2
 800fa3a:	4659      	mov	r1, fp
 800fa3c:	f04f 037d 	mov.w	r3, #125	; 0x7d
 800fa40:	f880 9039 	strb.w	r9, [r0, #57]	; 0x39
 800fa44:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 800fa48:	f04f 0b01 	mov.w	fp, #1
 800fa4c:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 800fa50:	2900      	cmp	r1, #0
 800fa52:	d162      	bne.n	800fb1a <uxr_write_framed_msg+0x222>
 800fa54:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800fa58:	e7bf      	b.n	800f9da <uxr_write_framed_msg+0xe2>
 800fa5a:	2204      	movs	r2, #4
 800fa5c:	2503      	movs	r5, #3
 800fa5e:	990e      	ldr	r1, [sp, #56]	; 0x38
 800fa60:	4423      	add	r3, r4
 800fa62:	b2c9      	uxtb	r1, r1
 800fa64:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 800fa68:	f883 c038 	strb.w	ip, [r3, #56]	; 0x38
 800fa6c:	4425      	add	r5, r4
 800fa6e:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 800fa72:	f080 0020 	eor.w	r0, r0, #32
 800fa76:	2b01      	cmp	r3, #1
 800fa78:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
 800fa7c:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 800fa80:	f63f af66 	bhi.w	800f950 <uxr_write_framed_msg+0x58>
 800fa84:	18a3      	adds	r3, r4, r2
 800fa86:	f081 0120 	eor.w	r1, r1, #32
 800fa8a:	3202      	adds	r2, #2
 800fa8c:	207d      	movs	r0, #125	; 0x7d
 800fa8e:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
 800fa92:	f883 0038 	strb.w	r0, [r3, #56]	; 0x38
 800fa96:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 800fa9a:	e75f      	b.n	800f95c <uxr_write_framed_msg+0x64>
 800fa9c:	2500      	movs	r5, #0
 800fa9e:	e001      	b.n	800faa4 <uxr_write_framed_msg+0x1ac>
 800faa0:	2800      	cmp	r0, #0
 800faa2:	d0b3      	beq.n	800fa0c <uxr_write_framed_msg+0x114>
 800faa4:	f105 0138 	add.w	r1, r5, #56	; 0x38
 800faa8:	1b52      	subs	r2, r2, r5
 800faaa:	4421      	add	r1, r4
 800faac:	4643      	mov	r3, r8
 800faae:	4638      	mov	r0, r7
 800fab0:	47b0      	blx	r6
 800fab2:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 800fab6:	4405      	add	r5, r0
 800fab8:	4295      	cmp	r5, r2
 800faba:	d3f1      	bcc.n	800faa0 <uxr_write_framed_msg+0x1a8>
 800fabc:	d1a6      	bne.n	800fa0c <uxr_write_framed_msg+0x114>
 800fabe:	f04f 0300 	mov.w	r3, #0
 800fac2:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 800fac6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fac8:	454b      	cmp	r3, r9
 800faca:	d971      	bls.n	800fbb0 <uxr_write_framed_msg+0x2b8>
 800facc:	f81b 3009 	ldrb.w	r3, [fp, r9]
 800fad0:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 800fad4:	2901      	cmp	r1, #1
 800fad6:	f04f 0200 	mov.w	r2, #0
 800fada:	f63f af5d 	bhi.w	800f998 <uxr_write_framed_msg+0xa0>
 800fade:	1c51      	adds	r1, r2, #1
 800fae0:	b2c9      	uxtb	r1, r1
 800fae2:	2929      	cmp	r1, #41	; 0x29
 800fae4:	d8da      	bhi.n	800fa9c <uxr_write_framed_msg+0x1a4>
 800fae6:	18a0      	adds	r0, r4, r2
 800fae8:	3202      	adds	r2, #2
 800faea:	b2d2      	uxtb	r2, r2
 800faec:	f083 0120 	eor.w	r1, r3, #32
 800faf0:	f04f 057d 	mov.w	r5, #125	; 0x7d
 800faf4:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
 800faf8:	f880 1039 	strb.w	r1, [r0, #57]	; 0x39
 800fafc:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 800fb00:	e753      	b.n	800f9aa <uxr_write_framed_msg+0xb2>
 800fb02:	18a0      	adds	r0, r4, r2
 800fb04:	3201      	adds	r2, #1
 800fb06:	b2d2      	uxtb	r2, r2
 800fb08:	4659      	mov	r1, fp
 800fb0a:	f880 9038 	strb.w	r9, [r0, #56]	; 0x38
 800fb0e:	f04f 0b01 	mov.w	fp, #1
 800fb12:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 800fb16:	2900      	cmp	r1, #0
 800fb18:	d09c      	beq.n	800fa54 <uxr_write_framed_msg+0x15c>
 800fb1a:	2500      	movs	r5, #0
 800fb1c:	e002      	b.n	800fb24 <uxr_write_framed_msg+0x22c>
 800fb1e:	2800      	cmp	r0, #0
 800fb20:	f43f af74 	beq.w	800fa0c <uxr_write_framed_msg+0x114>
 800fb24:	f105 0138 	add.w	r1, r5, #56	; 0x38
 800fb28:	1b52      	subs	r2, r2, r5
 800fb2a:	4421      	add	r1, r4
 800fb2c:	4643      	mov	r3, r8
 800fb2e:	4638      	mov	r0, r7
 800fb30:	47b0      	blx	r6
 800fb32:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 800fb36:	4405      	add	r5, r0
 800fb38:	4295      	cmp	r5, r2
 800fb3a:	d3f0      	bcc.n	800fb1e <uxr_write_framed_msg+0x226>
 800fb3c:	f47f af66 	bne.w	800fa0c <uxr_write_framed_msg+0x114>
 800fb40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fb42:	2300      	movs	r3, #0
 800fb44:	b290      	uxth	r0, r2
 800fb46:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 800fb4a:	b005      	add	sp, #20
 800fb4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb50:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 800fb54:	f085 0520 	eor.w	r5, r5, #32
 800fb58:	2303      	movs	r3, #3
 800fb5a:	217d      	movs	r1, #125	; 0x7d
 800fb5c:	2a01      	cmp	r2, #1
 800fb5e:	f884 503a 	strb.w	r5, [r4, #58]	; 0x3a
 800fb62:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 800fb66:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
 800fb6a:	d814      	bhi.n	800fb96 <uxr_write_framed_msg+0x29e>
 800fb6c:	2205      	movs	r2, #5
 800fb6e:	2504      	movs	r5, #4
 800fb70:	e775      	b.n	800fa5e <uxr_write_framed_msg+0x166>
 800fb72:	f083 0320 	eor.w	r3, r3, #32
 800fb76:	f881 3039 	strb.w	r3, [r1, #57]	; 0x39
 800fb7a:	3202      	adds	r2, #2
 800fb7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fb7e:	b2d2      	uxtb	r2, r2
 800fb80:	207d      	movs	r0, #125	; 0x7d
 800fb82:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
 800fb86:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	f47f aefa 	bne.w	800f984 <uxr_write_framed_msg+0x8c>
 800fb90:	9301      	str	r3, [sp, #4]
 800fb92:	4699      	mov	r9, r3
 800fb94:	e71b      	b.n	800f9ce <uxr_write_framed_msg+0xd6>
 800fb96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fb98:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
 800fb9c:	b2d9      	uxtb	r1, r3
 800fb9e:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 800fba2:	2204      	movs	r2, #4
 800fba4:	2b01      	cmp	r3, #1
 800fba6:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 800fbaa:	f63f aed1 	bhi.w	800f950 <uxr_write_framed_msg+0x58>
 800fbae:	e769      	b.n	800fa84 <uxr_write_framed_msg+0x18c>
 800fbb0:	ea4f 231a 	mov.w	r3, sl, lsr #8
 800fbb4:	fa5f f98a 	uxtb.w	r9, sl
 800fbb8:	9301      	str	r3, [sp, #4]
 800fbba:	2200      	movs	r2, #0
 800fbbc:	e707      	b.n	800f9ce <uxr_write_framed_msg+0xd6>
 800fbbe:	bf00      	nop
 800fbc0:	0801251c 	.word	0x0801251c

0800fbc4 <uxr_framing_read_transport>:
 800fbc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbc8:	4604      	mov	r4, r0
 800fbca:	b083      	sub	sp, #12
 800fbcc:	461f      	mov	r7, r3
 800fbce:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 800fbd2:	4689      	mov	r9, r1
 800fbd4:	4692      	mov	sl, r2
 800fbd6:	f7fb fc51 	bl	800b47c <uxr_millis>
 800fbda:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800fbde:	f894 602d 	ldrb.w	r6, [r4, #45]	; 0x2d
 800fbe2:	42b3      	cmp	r3, r6
 800fbe4:	4680      	mov	r8, r0
 800fbe6:	d05f      	beq.n	800fca8 <uxr_framing_read_transport+0xe4>
 800fbe8:	d81b      	bhi.n	800fc22 <uxr_framing_read_transport+0x5e>
 800fbea:	1e75      	subs	r5, r6, #1
 800fbec:	1aed      	subs	r5, r5, r3
 800fbee:	b2ed      	uxtb	r5, r5
 800fbf0:	2600      	movs	r6, #0
 800fbf2:	455d      	cmp	r5, fp
 800fbf4:	d81e      	bhi.n	800fc34 <uxr_framing_read_transport+0x70>
 800fbf6:	19ab      	adds	r3, r5, r6
 800fbf8:	455b      	cmp	r3, fp
 800fbfa:	bf84      	itt	hi
 800fbfc:	ebab 0605 	subhi.w	r6, fp, r5
 800fc00:	b2f6      	uxtbhi	r6, r6
 800fc02:	b9e5      	cbnz	r5, 800fc3e <uxr_framing_read_transport+0x7a>
 800fc04:	f04f 0b00 	mov.w	fp, #0
 800fc08:	f7fb fc38 	bl	800b47c <uxr_millis>
 800fc0c:	683b      	ldr	r3, [r7, #0]
 800fc0e:	eba0 0008 	sub.w	r0, r0, r8
 800fc12:	1a1b      	subs	r3, r3, r0
 800fc14:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800fc18:	4658      	mov	r0, fp
 800fc1a:	603b      	str	r3, [r7, #0]
 800fc1c:	b003      	add	sp, #12
 800fc1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc22:	2e00      	cmp	r6, #0
 800fc24:	d048      	beq.n	800fcb8 <uxr_framing_read_transport+0xf4>
 800fc26:	f1c3 052a 	rsb	r5, r3, #42	; 0x2a
 800fc2a:	b2ed      	uxtb	r5, r5
 800fc2c:	3e01      	subs	r6, #1
 800fc2e:	455d      	cmp	r5, fp
 800fc30:	b2f6      	uxtb	r6, r6
 800fc32:	d9e0      	bls.n	800fbf6 <uxr_framing_read_transport+0x32>
 800fc34:	fa5f f58b 	uxtb.w	r5, fp
 800fc38:	2600      	movs	r6, #0
 800fc3a:	2d00      	cmp	r5, #0
 800fc3c:	d0e2      	beq.n	800fc04 <uxr_framing_read_transport+0x40>
 800fc3e:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 800fc42:	3102      	adds	r1, #2
 800fc44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fc46:	9300      	str	r3, [sp, #0]
 800fc48:	683b      	ldr	r3, [r7, #0]
 800fc4a:	4421      	add	r1, r4
 800fc4c:	462a      	mov	r2, r5
 800fc4e:	4650      	mov	r0, sl
 800fc50:	47c8      	blx	r9
 800fc52:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800fc56:	4a1b      	ldr	r2, [pc, #108]	; (800fcc4 <uxr_framing_read_transport+0x100>)
 800fc58:	4403      	add	r3, r0
 800fc5a:	0859      	lsrs	r1, r3, #1
 800fc5c:	fba2 2101 	umull	r2, r1, r2, r1
 800fc60:	0889      	lsrs	r1, r1, #2
 800fc62:	222a      	movs	r2, #42	; 0x2a
 800fc64:	fb02 3111 	mls	r1, r2, r1, r3
 800fc68:	4683      	mov	fp, r0
 800fc6a:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
 800fc6e:	2800      	cmp	r0, #0
 800fc70:	d0c8      	beq.n	800fc04 <uxr_framing_read_transport+0x40>
 800fc72:	42a8      	cmp	r0, r5
 800fc74:	d1c8      	bne.n	800fc08 <uxr_framing_read_transport+0x44>
 800fc76:	b31e      	cbz	r6, 800fcc0 <uxr_framing_read_transport+0xfc>
 800fc78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fc7a:	9300      	str	r3, [sp, #0]
 800fc7c:	3102      	adds	r1, #2
 800fc7e:	4421      	add	r1, r4
 800fc80:	4632      	mov	r2, r6
 800fc82:	2300      	movs	r3, #0
 800fc84:	4650      	mov	r0, sl
 800fc86:	47c8      	blx	r9
 800fc88:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800fc8c:	490d      	ldr	r1, [pc, #52]	; (800fcc4 <uxr_framing_read_transport+0x100>)
 800fc8e:	181a      	adds	r2, r3, r0
 800fc90:	0853      	lsrs	r3, r2, #1
 800fc92:	fba1 1303 	umull	r1, r3, r1, r3
 800fc96:	089b      	lsrs	r3, r3, #2
 800fc98:	212a      	movs	r1, #42	; 0x2a
 800fc9a:	fb01 2313 	mls	r3, r1, r3, r2
 800fc9e:	eb00 0b05 	add.w	fp, r0, r5
 800fca2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 800fca6:	e7af      	b.n	800fc08 <uxr_framing_read_transport+0x44>
 800fca8:	2600      	movs	r6, #0
 800fcaa:	f1bb 0f28 	cmp.w	fp, #40	; 0x28
 800fcae:	85a6      	strh	r6, [r4, #44]	; 0x2c
 800fcb0:	d9c0      	bls.n	800fc34 <uxr_framing_read_transport+0x70>
 800fcb2:	2102      	movs	r1, #2
 800fcb4:	2529      	movs	r5, #41	; 0x29
 800fcb6:	e7c5      	b.n	800fc44 <uxr_framing_read_transport+0x80>
 800fcb8:	f1c3 0529 	rsb	r5, r3, #41	; 0x29
 800fcbc:	b2ed      	uxtb	r5, r5
 800fcbe:	e798      	b.n	800fbf2 <uxr_framing_read_transport+0x2e>
 800fcc0:	46ab      	mov	fp, r5
 800fcc2:	e7a1      	b.n	800fc08 <uxr_framing_read_transport+0x44>
 800fcc4:	30c30c31 	.word	0x30c30c31

0800fcc8 <uxr_read_framed_msg>:
 800fcc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fccc:	f890 602c 	ldrb.w	r6, [r0, #44]	; 0x2c
 800fcd0:	f890 502d 	ldrb.w	r5, [r0, #45]	; 0x2d
 800fcd4:	42ae      	cmp	r6, r5
 800fcd6:	b083      	sub	sp, #12
 800fcd8:	4604      	mov	r4, r0
 800fcda:	461f      	mov	r7, r3
 800fcdc:	4689      	mov	r9, r1
 800fcde:	4692      	mov	sl, r2
 800fce0:	f000 817d 	beq.w	800ffde <uxr_read_framed_msg+0x316>
 800fce4:	7823      	ldrb	r3, [r4, #0]
 800fce6:	4ecc      	ldr	r6, [pc, #816]	; (8010018 <uxr_read_framed_msg+0x350>)
 800fce8:	f8df 8330 	ldr.w	r8, [pc, #816]	; 801001c <uxr_read_framed_msg+0x354>
 800fcec:	2b07      	cmp	r3, #7
 800fcee:	d8fd      	bhi.n	800fcec <uxr_read_framed_msg+0x24>
 800fcf0:	e8df f013 	tbh	[pc, r3, lsl #1]
 800fcf4:	00f40113 	.word	0x00f40113
 800fcf8:	00b700d4 	.word	0x00b700d4
 800fcfc:	004d008e 	.word	0x004d008e
 800fd00:	00080030 	.word	0x00080030
 800fd04:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 800fd08:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 800fd0c:	4298      	cmp	r0, r3
 800fd0e:	f000 8141 	beq.w	800ff94 <uxr_read_framed_msg+0x2cc>
 800fd12:	18e2      	adds	r2, r4, r3
 800fd14:	7891      	ldrb	r1, [r2, #2]
 800fd16:	297d      	cmp	r1, #125	; 0x7d
 800fd18:	f000 81a2 	beq.w	8010060 <uxr_read_framed_msg+0x398>
 800fd1c:	3301      	adds	r3, #1
 800fd1e:	085a      	lsrs	r2, r3, #1
 800fd20:	fba6 0202 	umull	r0, r2, r6, r2
 800fd24:	0892      	lsrs	r2, r2, #2
 800fd26:	202a      	movs	r0, #42	; 0x2a
 800fd28:	fb00 3312 	mls	r3, r0, r2, r3
 800fd2c:	297e      	cmp	r1, #126	; 0x7e
 800fd2e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 800fd32:	f000 8251 	beq.w	80101d8 <uxr_read_framed_msg+0x510>
 800fd36:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 800fd38:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800fd3a:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800fd3e:	b29b      	uxth	r3, r3
 800fd40:	2100      	movs	r1, #0
 800fd42:	429a      	cmp	r2, r3
 800fd44:	86a3      	strh	r3, [r4, #52]	; 0x34
 800fd46:	7021      	strb	r1, [r4, #0]
 800fd48:	f000 8182 	beq.w	8010050 <uxr_read_framed_msg+0x388>
 800fd4c:	2000      	movs	r0, #0
 800fd4e:	b003      	add	sp, #12
 800fd50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd54:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 800fd58:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 800fd5c:	4298      	cmp	r0, r3
 800fd5e:	f000 8128 	beq.w	800ffb2 <uxr_read_framed_msg+0x2ea>
 800fd62:	18e2      	adds	r2, r4, r3
 800fd64:	7891      	ldrb	r1, [r2, #2]
 800fd66:	297d      	cmp	r1, #125	; 0x7d
 800fd68:	f000 8196 	beq.w	8010098 <uxr_read_framed_msg+0x3d0>
 800fd6c:	3301      	adds	r3, #1
 800fd6e:	085a      	lsrs	r2, r3, #1
 800fd70:	fba6 0202 	umull	r0, r2, r6, r2
 800fd74:	0892      	lsrs	r2, r2, #2
 800fd76:	202a      	movs	r0, #42	; 0x2a
 800fd78:	fb00 3312 	mls	r3, r0, r2, r3
 800fd7c:	297e      	cmp	r1, #126	; 0x7e
 800fd7e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 800fd82:	f000 8219 	beq.w	80101b8 <uxr_read_framed_msg+0x4f0>
 800fd86:	2307      	movs	r3, #7
 800fd88:	86a1      	strh	r1, [r4, #52]	; 0x34
 800fd8a:	7023      	strb	r3, [r4, #0]
 800fd8c:	e7ae      	b.n	800fcec <uxr_read_framed_msg+0x24>
 800fd8e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800fd90:	8e25      	ldrh	r5, [r4, #48]	; 0x30
 800fd92:	429d      	cmp	r5, r3
 800fd94:	d937      	bls.n	800fe06 <uxr_read_framed_msg+0x13e>
 800fd96:	ee07 9a90 	vmov	s15, r9
 800fd9a:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 800fd9e:	e01e      	b.n	800fdde <uxr_read_framed_msg+0x116>
 800fda0:	f89e e002 	ldrb.w	lr, [lr, #2]
 800fda4:	f1be 0f7d 	cmp.w	lr, #125	; 0x7d
 800fda8:	f000 80d2 	beq.w	800ff50 <uxr_read_framed_msg+0x288>
 800fdac:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 800fdb0:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 800fdb4:	f000 8214 	beq.w	80101e0 <uxr_read_framed_msg+0x518>
 800fdb8:	f807 e003 	strb.w	lr, [r7, r3]
 800fdbc:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 800fdbe:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800fdc0:	8e25      	ldrh	r5, [r4, #48]	; 0x30
 800fdc2:	ea80 010e 	eor.w	r1, r0, lr
 800fdc6:	b2c9      	uxtb	r1, r1
 800fdc8:	3301      	adds	r3, #1
 800fdca:	f838 2011 	ldrh.w	r2, [r8, r1, lsl #1]
 800fdce:	b29b      	uxth	r3, r3
 800fdd0:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 800fdd4:	42ab      	cmp	r3, r5
 800fdd6:	86e2      	strh	r2, [r4, #54]	; 0x36
 800fdd8:	8663      	strh	r3, [r4, #50]	; 0x32
 800fdda:	f080 8121 	bcs.w	8010020 <uxr_read_framed_msg+0x358>
 800fdde:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
 800fde2:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 800fde6:	f101 0b01 	add.w	fp, r1, #1
 800fdea:	ea4f 025b 	mov.w	r2, fp, lsr #1
 800fdee:	fba6 9202 	umull	r9, r2, r6, r2
 800fdf2:	0892      	lsrs	r2, r2, #2
 800fdf4:	4288      	cmp	r0, r1
 800fdf6:	eb04 0e01 	add.w	lr, r4, r1
 800fdfa:	fb0c b212 	mls	r2, ip, r2, fp
 800fdfe:	d1cf      	bne.n	800fda0 <uxr_read_framed_msg+0xd8>
 800fe00:	ee17 9a90 	vmov	r9, s15
 800fe04:	429d      	cmp	r5, r3
 800fe06:	f040 8112 	bne.w	801002e <uxr_read_framed_msg+0x366>
 800fe0a:	2306      	movs	r3, #6
 800fe0c:	7023      	strb	r3, [r4, #0]
 800fe0e:	e76d      	b.n	800fcec <uxr_read_framed_msg+0x24>
 800fe10:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 800fe14:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 800fe18:	4298      	cmp	r0, r3
 800fe1a:	f000 80bb 	beq.w	800ff94 <uxr_read_framed_msg+0x2cc>
 800fe1e:	18e2      	adds	r2, r4, r3
 800fe20:	7891      	ldrb	r1, [r2, #2]
 800fe22:	297d      	cmp	r1, #125	; 0x7d
 800fe24:	f000 8153 	beq.w	80100ce <uxr_read_framed_msg+0x406>
 800fe28:	3301      	adds	r3, #1
 800fe2a:	085a      	lsrs	r2, r3, #1
 800fe2c:	fba6 0202 	umull	r0, r2, r6, r2
 800fe30:	0892      	lsrs	r2, r2, #2
 800fe32:	202a      	movs	r0, #42	; 0x2a
 800fe34:	fb00 3212 	mls	r2, r0, r2, r3
 800fe38:	297e      	cmp	r1, #126	; 0x7e
 800fe3a:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 800fe3e:	f000 81cb 	beq.w	80101d8 <uxr_read_framed_msg+0x510>
 800fe42:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800fe44:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800fe48:	990c      	ldr	r1, [sp, #48]	; 0x30
 800fe4a:	b29b      	uxth	r3, r3
 800fe4c:	2000      	movs	r0, #0
 800fe4e:	428b      	cmp	r3, r1
 800fe50:	8623      	strh	r3, [r4, #48]	; 0x30
 800fe52:	8660      	strh	r0, [r4, #50]	; 0x32
 800fe54:	86e0      	strh	r0, [r4, #54]	; 0x36
 800fe56:	f240 80db 	bls.w	8010010 <uxr_read_framed_msg+0x348>
 800fe5a:	7020      	strb	r0, [r4, #0]
 800fe5c:	b003      	add	sp, #12
 800fe5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe62:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 800fe66:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 800fe6a:	4298      	cmp	r0, r3
 800fe6c:	f000 80a1 	beq.w	800ffb2 <uxr_read_framed_msg+0x2ea>
 800fe70:	18e2      	adds	r2, r4, r3
 800fe72:	7891      	ldrb	r1, [r2, #2]
 800fe74:	297d      	cmp	r1, #125	; 0x7d
 800fe76:	f000 8167 	beq.w	8010148 <uxr_read_framed_msg+0x480>
 800fe7a:	3301      	adds	r3, #1
 800fe7c:	085a      	lsrs	r2, r3, #1
 800fe7e:	fba6 0202 	umull	r0, r2, r6, r2
 800fe82:	0892      	lsrs	r2, r2, #2
 800fe84:	202a      	movs	r0, #42	; 0x2a
 800fe86:	fb00 3312 	mls	r3, r0, r2, r3
 800fe8a:	297e      	cmp	r1, #126	; 0x7e
 800fe8c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 800fe90:	f000 8192 	beq.w	80101b8 <uxr_read_framed_msg+0x4f0>
 800fe94:	2304      	movs	r3, #4
 800fe96:	8621      	strh	r1, [r4, #48]	; 0x30
 800fe98:	7023      	strb	r3, [r4, #0]
 800fe9a:	e727      	b.n	800fcec <uxr_read_framed_msg+0x24>
 800fe9c:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 800fea0:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 800fea4:	4290      	cmp	r0, r2
 800fea6:	f000 80b1 	beq.w	801000c <uxr_read_framed_msg+0x344>
 800feaa:	18a3      	adds	r3, r4, r2
 800feac:	7899      	ldrb	r1, [r3, #2]
 800feae:	297d      	cmp	r1, #125	; 0x7d
 800feb0:	f000 8166 	beq.w	8010180 <uxr_read_framed_msg+0x4b8>
 800feb4:	3201      	adds	r2, #1
 800feb6:	0850      	lsrs	r0, r2, #1
 800feb8:	fba6 3000 	umull	r3, r0, r6, r0
 800febc:	0880      	lsrs	r0, r0, #2
 800febe:	232a      	movs	r3, #42	; 0x2a
 800fec0:	fb03 2210 	mls	r2, r3, r0, r2
 800fec4:	297e      	cmp	r1, #126	; 0x7e
 800fec6:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 800feca:	f000 8187 	beq.w	80101dc <uxr_read_framed_msg+0x514>
 800fece:	7863      	ldrb	r3, [r4, #1]
 800fed0:	428b      	cmp	r3, r1
 800fed2:	bf0c      	ite	eq
 800fed4:	2303      	moveq	r3, #3
 800fed6:	2300      	movne	r3, #0
 800fed8:	7023      	strb	r3, [r4, #0]
 800feda:	e707      	b.n	800fcec <uxr_read_framed_msg+0x24>
 800fedc:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 800fee0:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 800fee4:	2200      	movs	r2, #0
 800fee6:	4299      	cmp	r1, r3
 800fee8:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
 800feec:	d063      	beq.n	800ffb6 <uxr_read_framed_msg+0x2ee>
 800feee:	18e2      	adds	r2, r4, r3
 800fef0:	7892      	ldrb	r2, [r2, #2]
 800fef2:	2a7d      	cmp	r2, #125	; 0x7d
 800fef4:	f000 8107 	beq.w	8010106 <uxr_read_framed_msg+0x43e>
 800fef8:	1c59      	adds	r1, r3, #1
 800fefa:	084b      	lsrs	r3, r1, #1
 800fefc:	fba6 0303 	umull	r0, r3, r6, r3
 800ff00:	089b      	lsrs	r3, r3, #2
 800ff02:	202a      	movs	r0, #42	; 0x2a
 800ff04:	fb00 1313 	mls	r3, r0, r3, r1
 800ff08:	2a7e      	cmp	r2, #126	; 0x7e
 800ff0a:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
 800ff0e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 800ff12:	d050      	beq.n	800ffb6 <uxr_read_framed_msg+0x2ee>
 800ff14:	2302      	movs	r3, #2
 800ff16:	7023      	strb	r3, [r4, #0]
 800ff18:	e6e8      	b.n	800fcec <uxr_read_framed_msg+0x24>
 800ff1a:	f894 e02c 	ldrb.w	lr, [r4, #44]	; 0x2c
 800ff1e:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 800ff22:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 800ff26:	1c51      	adds	r1, r2, #1
 800ff28:	084b      	lsrs	r3, r1, #1
 800ff2a:	fba6 5303 	umull	r5, r3, r6, r3
 800ff2e:	089b      	lsrs	r3, r3, #2
 800ff30:	fb0c 1313 	mls	r3, ip, r3, r1
 800ff34:	4596      	cmp	lr, r2
 800ff36:	eb04 0002 	add.w	r0, r4, r2
 800ff3a:	b2da      	uxtb	r2, r3
 800ff3c:	f43f af06 	beq.w	800fd4c <uxr_read_framed_msg+0x84>
 800ff40:	7883      	ldrb	r3, [r0, #2]
 800ff42:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 800ff46:	2b7e      	cmp	r3, #126	; 0x7e
 800ff48:	d1ed      	bne.n	800ff26 <uxr_read_framed_msg+0x25e>
 800ff4a:	2301      	movs	r3, #1
 800ff4c:	7023      	strb	r3, [r4, #0]
 800ff4e:	e6cd      	b.n	800fcec <uxr_read_framed_msg+0x24>
 800ff50:	f101 0b01 	add.w	fp, r1, #1
 800ff54:	ea4f 025b 	mov.w	r2, fp, lsr #1
 800ff58:	fba6 e202 	umull	lr, r2, r6, r2
 800ff5c:	3102      	adds	r1, #2
 800ff5e:	0892      	lsrs	r2, r2, #2
 800ff60:	ea4f 0e51 	mov.w	lr, r1, lsr #1
 800ff64:	fb0c b212 	mls	r2, ip, r2, fp
 800ff68:	fba6 9e0e 	umull	r9, lr, r6, lr
 800ff6c:	eb04 0b02 	add.w	fp, r4, r2
 800ff70:	b2d2      	uxtb	r2, r2
 800ff72:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
 800ff76:	4290      	cmp	r0, r2
 800ff78:	fb0c 111e 	mls	r1, ip, lr, r1
 800ff7c:	f43f af40 	beq.w	800fe00 <uxr_read_framed_msg+0x138>
 800ff80:	f89b e002 	ldrb.w	lr, [fp, #2]
 800ff84:	f884 102d 	strb.w	r1, [r4, #45]	; 0x2d
 800ff88:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 800ff8c:	d036      	beq.n	800fffc <uxr_read_framed_msg+0x334>
 800ff8e:	f08e 0e20 	eor.w	lr, lr, #32
 800ff92:	e711      	b.n	800fdb8 <uxr_read_framed_msg+0xf0>
 800ff94:	2301      	movs	r3, #1
 800ff96:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ff98:	4649      	mov	r1, r9
 800ff9a:	e9cd 2300 	strd	r2, r3, [sp]
 800ff9e:	4620      	mov	r0, r4
 800ffa0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ffa2:	4652      	mov	r2, sl
 800ffa4:	f7ff fe0e 	bl	800fbc4 <uxr_framing_read_transport>
 800ffa8:	2800      	cmp	r0, #0
 800ffaa:	f43f aecf 	beq.w	800fd4c <uxr_read_framed_msg+0x84>
 800ffae:	7823      	ldrb	r3, [r4, #0]
 800ffb0:	e69c      	b.n	800fcec <uxr_read_framed_msg+0x24>
 800ffb2:	2302      	movs	r3, #2
 800ffb4:	e7ef      	b.n	800ff96 <uxr_read_framed_msg+0x2ce>
 800ffb6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ffb8:	2304      	movs	r3, #4
 800ffba:	e9cd 2300 	strd	r2, r3, [sp]
 800ffbe:	4649      	mov	r1, r9
 800ffc0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ffc2:	4652      	mov	r2, sl
 800ffc4:	4620      	mov	r0, r4
 800ffc6:	f7ff fdfd 	bl	800fbc4 <uxr_framing_read_transport>
 800ffca:	2800      	cmp	r0, #0
 800ffcc:	d1ef      	bne.n	800ffae <uxr_read_framed_msg+0x2e6>
 800ffce:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
 800ffd2:	387e      	subs	r0, #126	; 0x7e
 800ffd4:	bf18      	it	ne
 800ffd6:	2001      	movne	r0, #1
 800ffd8:	2800      	cmp	r0, #0
 800ffda:	d0e8      	beq.n	800ffae <uxr_read_framed_msg+0x2e6>
 800ffdc:	e6b6      	b.n	800fd4c <uxr_read_framed_msg+0x84>
 800ffde:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ffe0:	2305      	movs	r3, #5
 800ffe2:	e9cd 5300 	strd	r5, r3, [sp]
 800ffe6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ffe8:	f7ff fdec 	bl	800fbc4 <uxr_framing_read_transport>
 800ffec:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 800fff0:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800fff4:	429a      	cmp	r2, r3
 800fff6:	f43f aea9 	beq.w	800fd4c <uxr_read_framed_msg+0x84>
 800fffa:	e673      	b.n	800fce4 <uxr_read_framed_msg+0x1c>
 800fffc:	429d      	cmp	r5, r3
 800fffe:	ee17 9a90 	vmov	r9, s15
 8010002:	f43f af02 	beq.w	800fe0a <uxr_read_framed_msg+0x142>
 8010006:	2301      	movs	r3, #1
 8010008:	7023      	strb	r3, [r4, #0]
 801000a:	e66f      	b.n	800fcec <uxr_read_framed_msg+0x24>
 801000c:	2303      	movs	r3, #3
 801000e:	e7c2      	b.n	800ff96 <uxr_read_framed_msg+0x2ce>
 8010010:	2305      	movs	r3, #5
 8010012:	7023      	strb	r3, [r4, #0]
 8010014:	e66a      	b.n	800fcec <uxr_read_framed_msg+0x24>
 8010016:	bf00      	nop
 8010018:	30c30c31 	.word	0x30c30c31
 801001c:	0801251c 	.word	0x0801251c
 8010020:	ee17 9a90 	vmov	r9, s15
 8010024:	f43f aef1 	beq.w	800fe0a <uxr_read_framed_msg+0x142>
 8010028:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 801002c:	d08d      	beq.n	800ff4a <uxr_read_framed_msg+0x282>
 801002e:	1aeb      	subs	r3, r5, r3
 8010030:	3302      	adds	r3, #2
 8010032:	9301      	str	r3, [sp, #4]
 8010034:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010036:	9300      	str	r3, [sp, #0]
 8010038:	4652      	mov	r2, sl
 801003a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801003c:	4649      	mov	r1, r9
 801003e:	4620      	mov	r0, r4
 8010040:	f7ff fdc0 	bl	800fbc4 <uxr_framing_read_transport>
 8010044:	fab0 f080 	clz	r0, r0
 8010048:	0940      	lsrs	r0, r0, #5
 801004a:	2800      	cmp	r0, #0
 801004c:	d0af      	beq.n	800ffae <uxr_read_framed_msg+0x2e6>
 801004e:	e67d      	b.n	800fd4c <uxr_read_framed_msg+0x84>
 8010050:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010052:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8010056:	7013      	strb	r3, [r2, #0]
 8010058:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 801005a:	b003      	add	sp, #12
 801005c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010060:	1c59      	adds	r1, r3, #1
 8010062:	084a      	lsrs	r2, r1, #1
 8010064:	fba6 5202 	umull	r5, r2, r6, r2
 8010068:	0892      	lsrs	r2, r2, #2
 801006a:	252a      	movs	r5, #42	; 0x2a
 801006c:	fb05 1212 	mls	r2, r5, r2, r1
 8010070:	b2d1      	uxtb	r1, r2
 8010072:	4288      	cmp	r0, r1
 8010074:	d08e      	beq.n	800ff94 <uxr_read_framed_msg+0x2cc>
 8010076:	3302      	adds	r3, #2
 8010078:	4422      	add	r2, r4
 801007a:	0858      	lsrs	r0, r3, #1
 801007c:	fba6 1000 	umull	r1, r0, r6, r0
 8010080:	7891      	ldrb	r1, [r2, #2]
 8010082:	0882      	lsrs	r2, r0, #2
 8010084:	fb05 3312 	mls	r3, r5, r2, r3
 8010088:	297e      	cmp	r1, #126	; 0x7e
 801008a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801008e:	f000 80a3 	beq.w	80101d8 <uxr_read_framed_msg+0x510>
 8010092:	f081 0120 	eor.w	r1, r1, #32
 8010096:	e64e      	b.n	800fd36 <uxr_read_framed_msg+0x6e>
 8010098:	1c59      	adds	r1, r3, #1
 801009a:	084a      	lsrs	r2, r1, #1
 801009c:	fba6 5202 	umull	r5, r2, r6, r2
 80100a0:	0892      	lsrs	r2, r2, #2
 80100a2:	252a      	movs	r5, #42	; 0x2a
 80100a4:	fb05 1212 	mls	r2, r5, r2, r1
 80100a8:	b2d1      	uxtb	r1, r2
 80100aa:	4288      	cmp	r0, r1
 80100ac:	d081      	beq.n	800ffb2 <uxr_read_framed_msg+0x2ea>
 80100ae:	3302      	adds	r3, #2
 80100b0:	4422      	add	r2, r4
 80100b2:	0858      	lsrs	r0, r3, #1
 80100b4:	fba6 1000 	umull	r1, r0, r6, r0
 80100b8:	7891      	ldrb	r1, [r2, #2]
 80100ba:	0882      	lsrs	r2, r0, #2
 80100bc:	fb05 3312 	mls	r3, r5, r2, r3
 80100c0:	297e      	cmp	r1, #126	; 0x7e
 80100c2:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80100c6:	d077      	beq.n	80101b8 <uxr_read_framed_msg+0x4f0>
 80100c8:	f081 0120 	eor.w	r1, r1, #32
 80100cc:	e65b      	b.n	800fd86 <uxr_read_framed_msg+0xbe>
 80100ce:	1c59      	adds	r1, r3, #1
 80100d0:	084a      	lsrs	r2, r1, #1
 80100d2:	fba6 5202 	umull	r5, r2, r6, r2
 80100d6:	0892      	lsrs	r2, r2, #2
 80100d8:	252a      	movs	r5, #42	; 0x2a
 80100da:	fb05 1212 	mls	r2, r5, r2, r1
 80100de:	b2d1      	uxtb	r1, r2
 80100e0:	4288      	cmp	r0, r1
 80100e2:	f43f af57 	beq.w	800ff94 <uxr_read_framed_msg+0x2cc>
 80100e6:	3302      	adds	r3, #2
 80100e8:	4422      	add	r2, r4
 80100ea:	0858      	lsrs	r0, r3, #1
 80100ec:	fba6 1000 	umull	r1, r0, r6, r0
 80100f0:	7891      	ldrb	r1, [r2, #2]
 80100f2:	0882      	lsrs	r2, r0, #2
 80100f4:	fb05 3312 	mls	r3, r5, r2, r3
 80100f8:	297e      	cmp	r1, #126	; 0x7e
 80100fa:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80100fe:	d06b      	beq.n	80101d8 <uxr_read_framed_msg+0x510>
 8010100:	f081 0120 	eor.w	r1, r1, #32
 8010104:	e69d      	b.n	800fe42 <uxr_read_framed_msg+0x17a>
 8010106:	1c5d      	adds	r5, r3, #1
 8010108:	086a      	lsrs	r2, r5, #1
 801010a:	fba6 0202 	umull	r0, r2, r6, r2
 801010e:	0892      	lsrs	r2, r2, #2
 8010110:	202a      	movs	r0, #42	; 0x2a
 8010112:	fb00 5212 	mls	r2, r0, r2, r5
 8010116:	b2d5      	uxtb	r5, r2
 8010118:	42a9      	cmp	r1, r5
 801011a:	f43f af4c 	beq.w	800ffb6 <uxr_read_framed_msg+0x2ee>
 801011e:	3302      	adds	r3, #2
 8010120:	4422      	add	r2, r4
 8010122:	0859      	lsrs	r1, r3, #1
 8010124:	fba6 5101 	umull	r5, r1, r6, r1
 8010128:	7895      	ldrb	r5, [r2, #2]
 801012a:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
 801012e:	088a      	lsrs	r2, r1, #2
 8010130:	fb00 3312 	mls	r3, r0, r2, r3
 8010134:	2d7e      	cmp	r5, #126	; 0x7e
 8010136:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801013a:	f43f af3c 	beq.w	800ffb6 <uxr_read_framed_msg+0x2ee>
 801013e:	f085 0520 	eor.w	r5, r5, #32
 8010142:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
 8010146:	e6e5      	b.n	800ff14 <uxr_read_framed_msg+0x24c>
 8010148:	1c59      	adds	r1, r3, #1
 801014a:	084a      	lsrs	r2, r1, #1
 801014c:	fba6 5202 	umull	r5, r2, r6, r2
 8010150:	0892      	lsrs	r2, r2, #2
 8010152:	252a      	movs	r5, #42	; 0x2a
 8010154:	fb05 1212 	mls	r2, r5, r2, r1
 8010158:	b2d1      	uxtb	r1, r2
 801015a:	4288      	cmp	r0, r1
 801015c:	f43f af29 	beq.w	800ffb2 <uxr_read_framed_msg+0x2ea>
 8010160:	3302      	adds	r3, #2
 8010162:	4422      	add	r2, r4
 8010164:	0858      	lsrs	r0, r3, #1
 8010166:	fba6 1000 	umull	r1, r0, r6, r0
 801016a:	7891      	ldrb	r1, [r2, #2]
 801016c:	0882      	lsrs	r2, r0, #2
 801016e:	fb05 3312 	mls	r3, r5, r2, r3
 8010172:	297e      	cmp	r1, #126	; 0x7e
 8010174:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8010178:	d01e      	beq.n	80101b8 <uxr_read_framed_msg+0x4f0>
 801017a:	f081 0120 	eor.w	r1, r1, #32
 801017e:	e689      	b.n	800fe94 <uxr_read_framed_msg+0x1cc>
 8010180:	1c51      	adds	r1, r2, #1
 8010182:	084b      	lsrs	r3, r1, #1
 8010184:	fba6 5303 	umull	r5, r3, r6, r3
 8010188:	089b      	lsrs	r3, r3, #2
 801018a:	252a      	movs	r5, #42	; 0x2a
 801018c:	fb05 1313 	mls	r3, r5, r3, r1
 8010190:	b2d9      	uxtb	r1, r3
 8010192:	4288      	cmp	r0, r1
 8010194:	f43f af3a 	beq.w	801000c <uxr_read_framed_msg+0x344>
 8010198:	3202      	adds	r2, #2
 801019a:	4423      	add	r3, r4
 801019c:	0850      	lsrs	r0, r2, #1
 801019e:	789b      	ldrb	r3, [r3, #2]
 80101a0:	fba6 1000 	umull	r1, r0, r6, r0
 80101a4:	0880      	lsrs	r0, r0, #2
 80101a6:	fb05 2210 	mls	r2, r5, r0, r2
 80101aa:	2b7e      	cmp	r3, #126	; 0x7e
 80101ac:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 80101b0:	d014      	beq.n	80101dc <uxr_read_framed_msg+0x514>
 80101b2:	f083 0120 	eor.w	r1, r3, #32
 80101b6:	e68a      	b.n	800fece <uxr_read_framed_msg+0x206>
 80101b8:	2302      	movs	r3, #2
 80101ba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80101bc:	4649      	mov	r1, r9
 80101be:	e9cd 2300 	strd	r2, r3, [sp]
 80101c2:	4620      	mov	r0, r4
 80101c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80101c6:	4652      	mov	r2, sl
 80101c8:	f7ff fcfc 	bl	800fbc4 <uxr_framing_read_transport>
 80101cc:	2800      	cmp	r0, #0
 80101ce:	f47f aeee 	bne.w	800ffae <uxr_read_framed_msg+0x2e6>
 80101d2:	2301      	movs	r3, #1
 80101d4:	7023      	strb	r3, [r4, #0]
 80101d6:	e589      	b.n	800fcec <uxr_read_framed_msg+0x24>
 80101d8:	2301      	movs	r3, #1
 80101da:	e7ee      	b.n	80101ba <uxr_read_framed_msg+0x4f2>
 80101dc:	2303      	movs	r3, #3
 80101de:	e7ec      	b.n	80101ba <uxr_read_framed_msg+0x4f2>
 80101e0:	ee17 9a90 	vmov	r9, s15
 80101e4:	e6b1      	b.n	800ff4a <uxr_read_framed_msg+0x282>
 80101e6:	bf00      	nop

080101e8 <rcl_get_default_domain_id>:
 80101e8:	b530      	push	{r4, r5, lr}
 80101ea:	b083      	sub	sp, #12
 80101ec:	2300      	movs	r3, #0
 80101ee:	9300      	str	r3, [sp, #0]
 80101f0:	b1d0      	cbz	r0, 8010228 <rcl_get_default_domain_id+0x40>
 80101f2:	4604      	mov	r4, r0
 80101f4:	4669      	mov	r1, sp
 80101f6:	4815      	ldr	r0, [pc, #84]	; (801024c <rcl_get_default_domain_id+0x64>)
 80101f8:	f7fd fbca 	bl	800d990 <rcutils_get_env>
 80101fc:	4602      	mov	r2, r0
 80101fe:	b110      	cbz	r0, 8010206 <rcl_get_default_domain_id+0x1e>
 8010200:	2001      	movs	r0, #1
 8010202:	b003      	add	sp, #12
 8010204:	bd30      	pop	{r4, r5, pc}
 8010206:	9b00      	ldr	r3, [sp, #0]
 8010208:	b18b      	cbz	r3, 801022e <rcl_get_default_domain_id+0x46>
 801020a:	7818      	ldrb	r0, [r3, #0]
 801020c:	2800      	cmp	r0, #0
 801020e:	d0f8      	beq.n	8010202 <rcl_get_default_domain_id+0x1a>
 8010210:	4618      	mov	r0, r3
 8010212:	a901      	add	r1, sp, #4
 8010214:	9201      	str	r2, [sp, #4]
 8010216:	f000 fd25 	bl	8010c64 <strtoul>
 801021a:	4605      	mov	r5, r0
 801021c:	b150      	cbz	r0, 8010234 <rcl_get_default_domain_id+0x4c>
 801021e:	1c43      	adds	r3, r0, #1
 8010220:	d00d      	beq.n	801023e <rcl_get_default_domain_id+0x56>
 8010222:	6025      	str	r5, [r4, #0]
 8010224:	2000      	movs	r0, #0
 8010226:	e7ec      	b.n	8010202 <rcl_get_default_domain_id+0x1a>
 8010228:	200b      	movs	r0, #11
 801022a:	b003      	add	sp, #12
 801022c:	bd30      	pop	{r4, r5, pc}
 801022e:	4618      	mov	r0, r3
 8010230:	b003      	add	sp, #12
 8010232:	bd30      	pop	{r4, r5, pc}
 8010234:	9b01      	ldr	r3, [sp, #4]
 8010236:	781b      	ldrb	r3, [r3, #0]
 8010238:	2b00      	cmp	r3, #0
 801023a:	d0f2      	beq.n	8010222 <rcl_get_default_domain_id+0x3a>
 801023c:	e7e0      	b.n	8010200 <rcl_get_default_domain_id+0x18>
 801023e:	f000 fa01 	bl	8010644 <__errno>
 8010242:	6803      	ldr	r3, [r0, #0]
 8010244:	2b22      	cmp	r3, #34	; 0x22
 8010246:	d1ec      	bne.n	8010222 <rcl_get_default_domain_id+0x3a>
 8010248:	e7da      	b.n	8010200 <rcl_get_default_domain_id+0x18>
 801024a:	bf00      	nop
 801024c:	0801271c 	.word	0x0801271c

08010250 <rcl_get_zero_initialized_guard_condition>:
 8010250:	4a03      	ldr	r2, [pc, #12]	; (8010260 <rcl_get_zero_initialized_guard_condition+0x10>)
 8010252:	4603      	mov	r3, r0
 8010254:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010258:	e883 0003 	stmia.w	r3, {r0, r1}
 801025c:	4618      	mov	r0, r3
 801025e:	4770      	bx	lr
 8010260:	0801272c 	.word	0x0801272c

08010264 <rcl_guard_condition_init_from_rmw>:
 8010264:	b082      	sub	sp, #8
 8010266:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801026a:	b086      	sub	sp, #24
 801026c:	ac0c      	add	r4, sp, #48	; 0x30
 801026e:	4684      	mov	ip, r0
 8010270:	f844 3f04 	str.w	r3, [r4, #4]!
 8010274:	460f      	mov	r7, r1
 8010276:	4690      	mov	r8, r2
 8010278:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801027a:	ad01      	add	r5, sp, #4
 801027c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801027e:	6823      	ldr	r3, [r4, #0]
 8010280:	602b      	str	r3, [r5, #0]
 8010282:	a801      	add	r0, sp, #4
 8010284:	4664      	mov	r4, ip
 8010286:	f7f7 fed5 	bl	8008034 <rcutils_allocator_is_valid>
 801028a:	b328      	cbz	r0, 80102d8 <rcl_guard_condition_init_from_rmw+0x74>
 801028c:	b324      	cbz	r4, 80102d8 <rcl_guard_condition_init_from_rmw+0x74>
 801028e:	6866      	ldr	r6, [r4, #4]
 8010290:	b9e6      	cbnz	r6, 80102cc <rcl_guard_condition_init_from_rmw+0x68>
 8010292:	f1b8 0f00 	cmp.w	r8, #0
 8010296:	d01f      	beq.n	80102d8 <rcl_guard_condition_init_from_rmw+0x74>
 8010298:	4640      	mov	r0, r8
 801029a:	f7fc fa25 	bl	800c6e8 <rcl_context_is_valid>
 801029e:	b308      	cbz	r0, 80102e4 <rcl_guard_condition_init_from_rmw+0x80>
 80102a0:	9b01      	ldr	r3, [sp, #4]
 80102a2:	9905      	ldr	r1, [sp, #20]
 80102a4:	201c      	movs	r0, #28
 80102a6:	4798      	blx	r3
 80102a8:	4605      	mov	r5, r0
 80102aa:	6060      	str	r0, [r4, #4]
 80102ac:	b340      	cbz	r0, 8010300 <rcl_guard_condition_init_from_rmw+0x9c>
 80102ae:	b1df      	cbz	r7, 80102e8 <rcl_guard_condition_init_from_rmw+0x84>
 80102b0:	6007      	str	r7, [r0, #0]
 80102b2:	7106      	strb	r6, [r0, #4]
 80102b4:	ac01      	add	r4, sp, #4
 80102b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80102b8:	3508      	adds	r5, #8
 80102ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80102bc:	6823      	ldr	r3, [r4, #0]
 80102be:	602b      	str	r3, [r5, #0]
 80102c0:	2000      	movs	r0, #0
 80102c2:	b006      	add	sp, #24
 80102c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80102c8:	b002      	add	sp, #8
 80102ca:	4770      	bx	lr
 80102cc:	2064      	movs	r0, #100	; 0x64
 80102ce:	b006      	add	sp, #24
 80102d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80102d4:	b002      	add	sp, #8
 80102d6:	4770      	bx	lr
 80102d8:	200b      	movs	r0, #11
 80102da:	b006      	add	sp, #24
 80102dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80102e0:	b002      	add	sp, #8
 80102e2:	4770      	bx	lr
 80102e4:	2065      	movs	r0, #101	; 0x65
 80102e6:	e7f2      	b.n	80102ce <rcl_guard_condition_init_from_rmw+0x6a>
 80102e8:	f8d8 0000 	ldr.w	r0, [r8]
 80102ec:	3028      	adds	r0, #40	; 0x28
 80102ee:	f000 f979 	bl	80105e4 <rmw_create_guard_condition>
 80102f2:	6028      	str	r0, [r5, #0]
 80102f4:	6865      	ldr	r5, [r4, #4]
 80102f6:	682e      	ldr	r6, [r5, #0]
 80102f8:	b126      	cbz	r6, 8010304 <rcl_guard_condition_init_from_rmw+0xa0>
 80102fa:	2301      	movs	r3, #1
 80102fc:	712b      	strb	r3, [r5, #4]
 80102fe:	e7d9      	b.n	80102b4 <rcl_guard_condition_init_from_rmw+0x50>
 8010300:	200a      	movs	r0, #10
 8010302:	e7e4      	b.n	80102ce <rcl_guard_condition_init_from_rmw+0x6a>
 8010304:	4628      	mov	r0, r5
 8010306:	9b02      	ldr	r3, [sp, #8]
 8010308:	9905      	ldr	r1, [sp, #20]
 801030a:	4798      	blx	r3
 801030c:	6066      	str	r6, [r4, #4]
 801030e:	2001      	movs	r0, #1
 8010310:	e7dd      	b.n	80102ce <rcl_guard_condition_init_from_rmw+0x6a>
 8010312:	bf00      	nop

08010314 <rcl_guard_condition_fini>:
 8010314:	b570      	push	{r4, r5, r6, lr}
 8010316:	b082      	sub	sp, #8
 8010318:	b1f0      	cbz	r0, 8010358 <rcl_guard_condition_fini+0x44>
 801031a:	4604      	mov	r4, r0
 801031c:	6840      	ldr	r0, [r0, #4]
 801031e:	b158      	cbz	r0, 8010338 <rcl_guard_condition_fini+0x24>
 8010320:	6803      	ldr	r3, [r0, #0]
 8010322:	68c6      	ldr	r6, [r0, #12]
 8010324:	6981      	ldr	r1, [r0, #24]
 8010326:	b15b      	cbz	r3, 8010340 <rcl_guard_condition_fini+0x2c>
 8010328:	7905      	ldrb	r5, [r0, #4]
 801032a:	b95d      	cbnz	r5, 8010344 <rcl_guard_condition_fini+0x30>
 801032c:	47b0      	blx	r6
 801032e:	2300      	movs	r3, #0
 8010330:	4628      	mov	r0, r5
 8010332:	6063      	str	r3, [r4, #4]
 8010334:	b002      	add	sp, #8
 8010336:	bd70      	pop	{r4, r5, r6, pc}
 8010338:	4605      	mov	r5, r0
 801033a:	4628      	mov	r0, r5
 801033c:	b002      	add	sp, #8
 801033e:	bd70      	pop	{r4, r5, r6, pc}
 8010340:	461d      	mov	r5, r3
 8010342:	e7f3      	b.n	801032c <rcl_guard_condition_fini+0x18>
 8010344:	4618      	mov	r0, r3
 8010346:	9101      	str	r1, [sp, #4]
 8010348:	f000 f960 	bl	801060c <rmw_destroy_guard_condition>
 801034c:	1e05      	subs	r5, r0, #0
 801034e:	9901      	ldr	r1, [sp, #4]
 8010350:	6860      	ldr	r0, [r4, #4]
 8010352:	bf18      	it	ne
 8010354:	2501      	movne	r5, #1
 8010356:	e7e9      	b.n	801032c <rcl_guard_condition_fini+0x18>
 8010358:	250b      	movs	r5, #11
 801035a:	4628      	mov	r0, r5
 801035c:	b002      	add	sp, #8
 801035e:	bd70      	pop	{r4, r5, r6, pc}

08010360 <rcl_guard_condition_get_default_options>:
 8010360:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010362:	b087      	sub	sp, #28
 8010364:	4607      	mov	r7, r0
 8010366:	466c      	mov	r4, sp
 8010368:	4668      	mov	r0, sp
 801036a:	f7f7 fe55 	bl	8008018 <rcutils_get_default_allocator>
 801036e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010370:	4d07      	ldr	r5, [pc, #28]	; (8010390 <rcl_guard_condition_get_default_options+0x30>)
 8010372:	f8d4 c000 	ldr.w	ip, [r4]
 8010376:	462e      	mov	r6, r5
 8010378:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801037a:	462c      	mov	r4, r5
 801037c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801037e:	463c      	mov	r4, r7
 8010380:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010382:	4638      	mov	r0, r7
 8010384:	f8c6 c000 	str.w	ip, [r6]
 8010388:	f8c4 c000 	str.w	ip, [r4]
 801038c:	b007      	add	sp, #28
 801038e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010390:	2000c0b4 	.word	0x2000c0b4

08010394 <on_status>:
 8010394:	b082      	sub	sp, #8
 8010396:	b002      	add	sp, #8
 8010398:	4770      	bx	lr
 801039a:	bf00      	nop

0801039c <on_topic>:
 801039c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103a0:	4a21      	ldr	r2, [pc, #132]	; (8010428 <on_topic+0x8c>)
 80103a2:	b094      	sub	sp, #80	; 0x50
 80103a4:	6812      	ldr	r2, [r2, #0]
 80103a6:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 80103a8:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
 80103ac:	9113      	str	r1, [sp, #76]	; 0x4c
 80103ae:	9312      	str	r3, [sp, #72]	; 0x48
 80103b0:	b3ba      	cbz	r2, 8010422 <on_topic+0x86>
 80103b2:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 80103b6:	f89d 004e 	ldrb.w	r0, [sp, #78]	; 0x4e
 80103ba:	e001      	b.n	80103c0 <on_topic+0x24>
 80103bc:	6892      	ldr	r2, [r2, #8]
 80103be:	b382      	cbz	r2, 8010422 <on_topic+0x86>
 80103c0:	68d4      	ldr	r4, [r2, #12]
 80103c2:	8aa3      	ldrh	r3, [r4, #20]
 80103c4:	428b      	cmp	r3, r1
 80103c6:	d1f9      	bne.n	80103bc <on_topic+0x20>
 80103c8:	7da3      	ldrb	r3, [r4, #22]
 80103ca:	4283      	cmp	r3, r0
 80103cc:	d1f6      	bne.n	80103bc <on_topic+0x20>
 80103ce:	2248      	movs	r2, #72	; 0x48
 80103d0:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80103d4:	4668      	mov	r0, sp
 80103d6:	f000 f9b7 	bl	8010748 <memcpy>
 80103da:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 80103de:	4620      	mov	r0, r4
 80103e0:	f7f8 fb7a 	bl	8008ad8 <rmw_uxrce_get_static_input_buffer_for_entity>
 80103e4:	4607      	mov	r7, r0
 80103e6:	b1e0      	cbz	r0, 8010422 <on_topic+0x86>
 80103e8:	f8d0 800c 	ldr.w	r8, [r0, #12]
 80103ec:	462a      	mov	r2, r5
 80103ee:	4630      	mov	r0, r6
 80103f0:	f108 0110 	add.w	r1, r8, #16
 80103f4:	f7fe fab4 	bl	800e960 <ucdr_deserialize_array_uint8_t>
 80103f8:	b930      	cbnz	r0, 8010408 <on_topic+0x6c>
 80103fa:	480c      	ldr	r0, [pc, #48]	; (801042c <on_topic+0x90>)
 80103fc:	4639      	mov	r1, r7
 80103fe:	b014      	add	sp, #80	; 0x50
 8010400:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010404:	f7fd bd38 	b.w	800de78 <put_memory>
 8010408:	f8c8 4814 	str.w	r4, [r8, #2068]	; 0x814
 801040c:	f8c8 5810 	str.w	r5, [r8, #2064]	; 0x810
 8010410:	f7fe f9d0 	bl	800e7b4 <rmw_uros_epoch_nanos>
 8010414:	f608 0218 	addw	r2, r8, #2072	; 0x818
 8010418:	2305      	movs	r3, #5
 801041a:	e9c2 0100 	strd	r0, r1, [r2]
 801041e:	f888 3820 	strb.w	r3, [r8, #2080]	; 0x820
 8010422:	b014      	add	sp, #80	; 0x50
 8010424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010428:	2000f37c 	.word	0x2000f37c
 801042c:	2000c110 	.word	0x2000c110

08010430 <on_request>:
 8010430:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010434:	4822      	ldr	r0, [pc, #136]	; (80104c0 <on_request+0x90>)
 8010436:	b095      	sub	sp, #84	; 0x54
 8010438:	9113      	str	r1, [sp, #76]	; 0x4c
 801043a:	6801      	ldr	r1, [r0, #0]
 801043c:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 801043e:	f8bd 6074 	ldrh.w	r6, [sp, #116]	; 0x74
 8010442:	2900      	cmp	r1, #0
 8010444:	d039      	beq.n	80104ba <on_request+0x8a>
 8010446:	461d      	mov	r5, r3
 8010448:	e001      	b.n	801044e <on_request+0x1e>
 801044a:	6889      	ldr	r1, [r1, #8]
 801044c:	b3a9      	cbz	r1, 80104ba <on_request+0x8a>
 801044e:	68cc      	ldr	r4, [r1, #12]
 8010450:	8b20      	ldrh	r0, [r4, #24]
 8010452:	4290      	cmp	r0, r2
 8010454:	d1f9      	bne.n	801044a <on_request+0x1a>
 8010456:	2248      	movs	r2, #72	; 0x48
 8010458:	f104 0128 	add.w	r1, r4, #40	; 0x28
 801045c:	4668      	mov	r0, sp
 801045e:	f000 f973 	bl	8010748 <memcpy>
 8010462:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 8010466:	4620      	mov	r0, r4
 8010468:	f7f8 fb36 	bl	8008ad8 <rmw_uxrce_get_static_input_buffer_for_entity>
 801046c:	4680      	mov	r8, r0
 801046e:	b320      	cbz	r0, 80104ba <on_request+0x8a>
 8010470:	f8d0 900c 	ldr.w	r9, [r0, #12]
 8010474:	4632      	mov	r2, r6
 8010476:	4638      	mov	r0, r7
 8010478:	f109 0110 	add.w	r1, r9, #16
 801047c:	f7fe fa70 	bl	800e960 <ucdr_deserialize_array_uint8_t>
 8010480:	b930      	cbnz	r0, 8010490 <on_request+0x60>
 8010482:	4810      	ldr	r0, [pc, #64]	; (80104c4 <on_request+0x94>)
 8010484:	4641      	mov	r1, r8
 8010486:	b015      	add	sp, #84	; 0x54
 8010488:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801048c:	f7fd bcf4 	b.w	800de78 <put_memory>
 8010490:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010492:	f8c9 4814 	str.w	r4, [r9, #2068]	; 0x814
 8010496:	f609 0428 	addw	r4, r9, #2088	; 0x828
 801049a:	f8c9 6810 	str.w	r6, [r9, #2064]	; 0x810
 801049e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80104a0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80104a4:	e884 0003 	stmia.w	r4, {r0, r1}
 80104a8:	f7fe f984 	bl	800e7b4 <rmw_uros_epoch_nanos>
 80104ac:	f609 0218 	addw	r2, r9, #2072	; 0x818
 80104b0:	2303      	movs	r3, #3
 80104b2:	e9c2 0100 	strd	r0, r1, [r2]
 80104b6:	f889 3820 	strb.w	r3, [r9, #2080]	; 0x820
 80104ba:	b015      	add	sp, #84	; 0x54
 80104bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80104c0:	2000f36c 	.word	0x2000f36c
 80104c4:	2000c110 	.word	0x2000c110

080104c8 <on_reply>:
 80104c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80104cc:	4821      	ldr	r0, [pc, #132]	; (8010554 <on_reply+0x8c>)
 80104ce:	b095      	sub	sp, #84	; 0x54
 80104d0:	9113      	str	r1, [sp, #76]	; 0x4c
 80104d2:	6801      	ldr	r1, [r0, #0]
 80104d4:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 80104d6:	f8bd 6074 	ldrh.w	r6, [sp, #116]	; 0x74
 80104da:	b3b9      	cbz	r1, 801054c <on_reply+0x84>
 80104dc:	461d      	mov	r5, r3
 80104de:	e001      	b.n	80104e4 <on_reply+0x1c>
 80104e0:	6889      	ldr	r1, [r1, #8]
 80104e2:	b399      	cbz	r1, 801054c <on_reply+0x84>
 80104e4:	68cc      	ldr	r4, [r1, #12]
 80104e6:	8b20      	ldrh	r0, [r4, #24]
 80104e8:	4290      	cmp	r0, r2
 80104ea:	d1f9      	bne.n	80104e0 <on_reply+0x18>
 80104ec:	2248      	movs	r2, #72	; 0x48
 80104ee:	f104 0128 	add.w	r1, r4, #40	; 0x28
 80104f2:	4668      	mov	r0, sp
 80104f4:	f000 f928 	bl	8010748 <memcpy>
 80104f8:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 80104fc:	4620      	mov	r0, r4
 80104fe:	f7f8 faeb 	bl	8008ad8 <rmw_uxrce_get_static_input_buffer_for_entity>
 8010502:	4680      	mov	r8, r0
 8010504:	b310      	cbz	r0, 801054c <on_reply+0x84>
 8010506:	f8d0 900c 	ldr.w	r9, [r0, #12]
 801050a:	4632      	mov	r2, r6
 801050c:	4638      	mov	r0, r7
 801050e:	f109 0110 	add.w	r1, r9, #16
 8010512:	f7fe fa25 	bl	800e960 <ucdr_deserialize_array_uint8_t>
 8010516:	b930      	cbnz	r0, 8010526 <on_reply+0x5e>
 8010518:	480f      	ldr	r0, [pc, #60]	; (8010558 <on_reply+0x90>)
 801051a:	4641      	mov	r1, r8
 801051c:	b015      	add	sp, #84	; 0x54
 801051e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010522:	f7fd bca9 	b.w	800de78 <put_memory>
 8010526:	b2aa      	uxth	r2, r5
 8010528:	2300      	movs	r3, #0
 801052a:	f609 0128 	addw	r1, r9, #2088	; 0x828
 801052e:	f8c9 4814 	str.w	r4, [r9, #2068]	; 0x814
 8010532:	f8c9 6810 	str.w	r6, [r9, #2064]	; 0x810
 8010536:	e9c1 2300 	strd	r2, r3, [r1]
 801053a:	f7fe f93b 	bl	800e7b4 <rmw_uros_epoch_nanos>
 801053e:	f609 0218 	addw	r2, r9, #2072	; 0x818
 8010542:	2304      	movs	r3, #4
 8010544:	e9c2 0100 	strd	r0, r1, [r2]
 8010548:	f889 3820 	strb.w	r3, [r9, #2080]	; 0x820
 801054c:	b015      	add	sp, #84	; 0x54
 801054e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010552:	bf00      	nop
 8010554:	2000c9a0 	.word	0x2000c9a0
 8010558:	2000c110 	.word	0x2000c110

0801055c <rmw_destroy_client>:
 801055c:	b570      	push	{r4, r5, r6, lr}
 801055e:	b128      	cbz	r0, 801056c <rmw_destroy_client+0x10>
 8010560:	4604      	mov	r4, r0
 8010562:	6800      	ldr	r0, [r0, #0]
 8010564:	460d      	mov	r5, r1
 8010566:	f7f8 fb83 	bl	8008c70 <is_uxrce_rmw_identifier_valid>
 801056a:	b910      	cbnz	r0, 8010572 <rmw_destroy_client+0x16>
 801056c:	2401      	movs	r4, #1
 801056e:	4620      	mov	r0, r4
 8010570:	bd70      	pop	{r4, r5, r6, pc}
 8010572:	6863      	ldr	r3, [r4, #4]
 8010574:	2b00      	cmp	r3, #0
 8010576:	d0f9      	beq.n	801056c <rmw_destroy_client+0x10>
 8010578:	2d00      	cmp	r5, #0
 801057a:	d0f7      	beq.n	801056c <rmw_destroy_client+0x10>
 801057c:	6828      	ldr	r0, [r5, #0]
 801057e:	f7f8 fb77 	bl	8008c70 <is_uxrce_rmw_identifier_valid>
 8010582:	2800      	cmp	r0, #0
 8010584:	d0f2      	beq.n	801056c <rmw_destroy_client+0x10>
 8010586:	686e      	ldr	r6, [r5, #4]
 8010588:	2e00      	cmp	r6, #0
 801058a:	d0ef      	beq.n	801056c <rmw_destroy_client+0x10>
 801058c:	6864      	ldr	r4, [r4, #4]
 801058e:	6932      	ldr	r2, [r6, #16]
 8010590:	6920      	ldr	r0, [r4, #16]
 8010592:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8010596:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801059a:	6819      	ldr	r1, [r3, #0]
 801059c:	f7ff f89a 	bl	800f6d4 <uxr_buffer_cancel_data>
 80105a0:	4602      	mov	r2, r0
 80105a2:	6920      	ldr	r0, [r4, #16]
 80105a4:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80105a8:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80105ac:	f7f8 fae0 	bl	8008b70 <run_xrce_session>
 80105b0:	6920      	ldr	r0, [r4, #16]
 80105b2:	6932      	ldr	r2, [r6, #16]
 80105b4:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80105b8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80105bc:	6819      	ldr	r1, [r3, #0]
 80105be:	f7f9 fbeb 	bl	8009d98 <uxr_buffer_delete_entity>
 80105c2:	4602      	mov	r2, r0
 80105c4:	6920      	ldr	r0, [r4, #16]
 80105c6:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80105ca:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80105ce:	f7f8 facf 	bl	8008b70 <run_xrce_session>
 80105d2:	2800      	cmp	r0, #0
 80105d4:	4628      	mov	r0, r5
 80105d6:	bf14      	ite	ne
 80105d8:	2400      	movne	r4, #0
 80105da:	2402      	moveq	r4, #2
 80105dc:	f7f8 fa5a 	bl	8008a94 <rmw_uxrce_fini_client_memory>
 80105e0:	e7c5      	b.n	801056e <rmw_destroy_client+0x12>
 80105e2:	bf00      	nop

080105e4 <rmw_create_guard_condition>:
 80105e4:	b538      	push	{r3, r4, r5, lr}
 80105e6:	4605      	mov	r5, r0
 80105e8:	4807      	ldr	r0, [pc, #28]	; (8010608 <rmw_create_guard_condition+0x24>)
 80105ea:	f7fd fc35 	bl	800de58 <get_memory>
 80105ee:	b148      	cbz	r0, 8010604 <rmw_create_guard_condition+0x20>
 80105f0:	68c4      	ldr	r4, [r0, #12]
 80105f2:	2300      	movs	r3, #0
 80105f4:	61e5      	str	r5, [r4, #28]
 80105f6:	7423      	strb	r3, [r4, #16]
 80105f8:	f7fd fc52 	bl	800dea0 <rmw_get_implementation_identifier>
 80105fc:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8010600:	f104 0014 	add.w	r0, r4, #20
 8010604:	bd38      	pop	{r3, r4, r5, pc}
 8010606:	bf00      	nop
 8010608:	2000f298 	.word	0x2000f298

0801060c <rmw_destroy_guard_condition>:
 801060c:	b508      	push	{r3, lr}
 801060e:	4b08      	ldr	r3, [pc, #32]	; (8010630 <rmw_destroy_guard_condition+0x24>)
 8010610:	6819      	ldr	r1, [r3, #0]
 8010612:	b911      	cbnz	r1, 801061a <rmw_destroy_guard_condition+0xe>
 8010614:	e00a      	b.n	801062c <rmw_destroy_guard_condition+0x20>
 8010616:	6889      	ldr	r1, [r1, #8]
 8010618:	b141      	cbz	r1, 801062c <rmw_destroy_guard_condition+0x20>
 801061a:	68cb      	ldr	r3, [r1, #12]
 801061c:	3314      	adds	r3, #20
 801061e:	4298      	cmp	r0, r3
 8010620:	d1f9      	bne.n	8010616 <rmw_destroy_guard_condition+0xa>
 8010622:	4803      	ldr	r0, [pc, #12]	; (8010630 <rmw_destroy_guard_condition+0x24>)
 8010624:	f7fd fc28 	bl	800de78 <put_memory>
 8010628:	2000      	movs	r0, #0
 801062a:	bd08      	pop	{r3, pc}
 801062c:	2001      	movs	r0, #1
 801062e:	bd08      	pop	{r3, pc}
 8010630:	2000f298 	.word	0x2000f298

08010634 <calloc>:
 8010634:	4b02      	ldr	r3, [pc, #8]	; (8010640 <calloc+0xc>)
 8010636:	460a      	mov	r2, r1
 8010638:	4601      	mov	r1, r0
 801063a:	6818      	ldr	r0, [r3, #0]
 801063c:	f000 b89a 	b.w	8010774 <_calloc_r>
 8010640:	2000006c 	.word	0x2000006c

08010644 <__errno>:
 8010644:	4b01      	ldr	r3, [pc, #4]	; (801064c <__errno+0x8>)
 8010646:	6818      	ldr	r0, [r3, #0]
 8010648:	4770      	bx	lr
 801064a:	bf00      	nop
 801064c:	2000006c 	.word	0x2000006c

08010650 <getenv>:
 8010650:	b507      	push	{r0, r1, r2, lr}
 8010652:	4b04      	ldr	r3, [pc, #16]	; (8010664 <getenv+0x14>)
 8010654:	4601      	mov	r1, r0
 8010656:	aa01      	add	r2, sp, #4
 8010658:	6818      	ldr	r0, [r3, #0]
 801065a:	f000 f805 	bl	8010668 <_findenv_r>
 801065e:	b003      	add	sp, #12
 8010660:	f85d fb04 	ldr.w	pc, [sp], #4
 8010664:	2000006c 	.word	0x2000006c

08010668 <_findenv_r>:
 8010668:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801066c:	f8df a06c 	ldr.w	sl, [pc, #108]	; 80106dc <_findenv_r+0x74>
 8010670:	4607      	mov	r7, r0
 8010672:	4689      	mov	r9, r1
 8010674:	4616      	mov	r6, r2
 8010676:	f000 fb57 	bl	8010d28 <__env_lock>
 801067a:	f8da 4000 	ldr.w	r4, [sl]
 801067e:	b134      	cbz	r4, 801068e <_findenv_r+0x26>
 8010680:	464b      	mov	r3, r9
 8010682:	4698      	mov	r8, r3
 8010684:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010688:	b13a      	cbz	r2, 801069a <_findenv_r+0x32>
 801068a:	2a3d      	cmp	r2, #61	; 0x3d
 801068c:	d1f9      	bne.n	8010682 <_findenv_r+0x1a>
 801068e:	4638      	mov	r0, r7
 8010690:	f000 fb50 	bl	8010d34 <__env_unlock>
 8010694:	2000      	movs	r0, #0
 8010696:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801069a:	eba8 0809 	sub.w	r8, r8, r9
 801069e:	46a3      	mov	fp, r4
 80106a0:	f854 0b04 	ldr.w	r0, [r4], #4
 80106a4:	2800      	cmp	r0, #0
 80106a6:	d0f2      	beq.n	801068e <_findenv_r+0x26>
 80106a8:	4642      	mov	r2, r8
 80106aa:	4649      	mov	r1, r9
 80106ac:	f000 fa3d 	bl	8010b2a <strncmp>
 80106b0:	2800      	cmp	r0, #0
 80106b2:	d1f4      	bne.n	801069e <_findenv_r+0x36>
 80106b4:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80106b8:	eb03 0508 	add.w	r5, r3, r8
 80106bc:	f813 3008 	ldrb.w	r3, [r3, r8]
 80106c0:	2b3d      	cmp	r3, #61	; 0x3d
 80106c2:	d1ec      	bne.n	801069e <_findenv_r+0x36>
 80106c4:	f8da 3000 	ldr.w	r3, [sl]
 80106c8:	ebab 0303 	sub.w	r3, fp, r3
 80106cc:	109b      	asrs	r3, r3, #2
 80106ce:	4638      	mov	r0, r7
 80106d0:	6033      	str	r3, [r6, #0]
 80106d2:	f000 fb2f 	bl	8010d34 <__env_unlock>
 80106d6:	1c68      	adds	r0, r5, #1
 80106d8:	e7dd      	b.n	8010696 <_findenv_r+0x2e>
 80106da:	bf00      	nop
 80106dc:	20000000 	.word	0x20000000

080106e0 <__libc_init_array>:
 80106e0:	b570      	push	{r4, r5, r6, lr}
 80106e2:	4d0d      	ldr	r5, [pc, #52]	; (8010718 <__libc_init_array+0x38>)
 80106e4:	4c0d      	ldr	r4, [pc, #52]	; (801071c <__libc_init_array+0x3c>)
 80106e6:	1b64      	subs	r4, r4, r5
 80106e8:	10a4      	asrs	r4, r4, #2
 80106ea:	2600      	movs	r6, #0
 80106ec:	42a6      	cmp	r6, r4
 80106ee:	d109      	bne.n	8010704 <__libc_init_array+0x24>
 80106f0:	4d0b      	ldr	r5, [pc, #44]	; (8010720 <__libc_init_array+0x40>)
 80106f2:	4c0c      	ldr	r4, [pc, #48]	; (8010724 <__libc_init_array+0x44>)
 80106f4:	f001 fbb4 	bl	8011e60 <_init>
 80106f8:	1b64      	subs	r4, r4, r5
 80106fa:	10a4      	asrs	r4, r4, #2
 80106fc:	2600      	movs	r6, #0
 80106fe:	42a6      	cmp	r6, r4
 8010700:	d105      	bne.n	801070e <__libc_init_array+0x2e>
 8010702:	bd70      	pop	{r4, r5, r6, pc}
 8010704:	f855 3b04 	ldr.w	r3, [r5], #4
 8010708:	4798      	blx	r3
 801070a:	3601      	adds	r6, #1
 801070c:	e7ee      	b.n	80106ec <__libc_init_array+0xc>
 801070e:	f855 3b04 	ldr.w	r3, [r5], #4
 8010712:	4798      	blx	r3
 8010714:	3601      	adds	r6, #1
 8010716:	e7f2      	b.n	80106fe <__libc_init_array+0x1e>
 8010718:	08012988 	.word	0x08012988
 801071c:	08012988 	.word	0x08012988
 8010720:	08012988 	.word	0x08012988
 8010724:	0801298c 	.word	0x0801298c

08010728 <malloc>:
 8010728:	4b02      	ldr	r3, [pc, #8]	; (8010734 <malloc+0xc>)
 801072a:	4601      	mov	r1, r0
 801072c:	6818      	ldr	r0, [r3, #0]
 801072e:	f000 b8a3 	b.w	8010878 <_malloc_r>
 8010732:	bf00      	nop
 8010734:	2000006c 	.word	0x2000006c

08010738 <free>:
 8010738:	4b02      	ldr	r3, [pc, #8]	; (8010744 <free+0xc>)
 801073a:	4601      	mov	r1, r0
 801073c:	6818      	ldr	r0, [r3, #0]
 801073e:	f000 b82f 	b.w	80107a0 <_free_r>
 8010742:	bf00      	nop
 8010744:	2000006c 	.word	0x2000006c

08010748 <memcpy>:
 8010748:	440a      	add	r2, r1
 801074a:	4291      	cmp	r1, r2
 801074c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8010750:	d100      	bne.n	8010754 <memcpy+0xc>
 8010752:	4770      	bx	lr
 8010754:	b510      	push	{r4, lr}
 8010756:	f811 4b01 	ldrb.w	r4, [r1], #1
 801075a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801075e:	4291      	cmp	r1, r2
 8010760:	d1f9      	bne.n	8010756 <memcpy+0xe>
 8010762:	bd10      	pop	{r4, pc}

08010764 <memset>:
 8010764:	4402      	add	r2, r0
 8010766:	4603      	mov	r3, r0
 8010768:	4293      	cmp	r3, r2
 801076a:	d100      	bne.n	801076e <memset+0xa>
 801076c:	4770      	bx	lr
 801076e:	f803 1b01 	strb.w	r1, [r3], #1
 8010772:	e7f9      	b.n	8010768 <memset+0x4>

08010774 <_calloc_r>:
 8010774:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010776:	fba1 2402 	umull	r2, r4, r1, r2
 801077a:	b94c      	cbnz	r4, 8010790 <_calloc_r+0x1c>
 801077c:	4611      	mov	r1, r2
 801077e:	9201      	str	r2, [sp, #4]
 8010780:	f000 f87a 	bl	8010878 <_malloc_r>
 8010784:	9a01      	ldr	r2, [sp, #4]
 8010786:	4605      	mov	r5, r0
 8010788:	b930      	cbnz	r0, 8010798 <_calloc_r+0x24>
 801078a:	4628      	mov	r0, r5
 801078c:	b003      	add	sp, #12
 801078e:	bd30      	pop	{r4, r5, pc}
 8010790:	220c      	movs	r2, #12
 8010792:	6002      	str	r2, [r0, #0]
 8010794:	2500      	movs	r5, #0
 8010796:	e7f8      	b.n	801078a <_calloc_r+0x16>
 8010798:	4621      	mov	r1, r4
 801079a:	f7ff ffe3 	bl	8010764 <memset>
 801079e:	e7f4      	b.n	801078a <_calloc_r+0x16>

080107a0 <_free_r>:
 80107a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80107a2:	2900      	cmp	r1, #0
 80107a4:	d044      	beq.n	8010830 <_free_r+0x90>
 80107a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80107aa:	9001      	str	r0, [sp, #4]
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	f1a1 0404 	sub.w	r4, r1, #4
 80107b2:	bfb8      	it	lt
 80107b4:	18e4      	addlt	r4, r4, r3
 80107b6:	f000 fbcd 	bl	8010f54 <__malloc_lock>
 80107ba:	4a1e      	ldr	r2, [pc, #120]	; (8010834 <_free_r+0x94>)
 80107bc:	9801      	ldr	r0, [sp, #4]
 80107be:	6813      	ldr	r3, [r2, #0]
 80107c0:	b933      	cbnz	r3, 80107d0 <_free_r+0x30>
 80107c2:	6063      	str	r3, [r4, #4]
 80107c4:	6014      	str	r4, [r2, #0]
 80107c6:	b003      	add	sp, #12
 80107c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80107cc:	f000 bbc8 	b.w	8010f60 <__malloc_unlock>
 80107d0:	42a3      	cmp	r3, r4
 80107d2:	d908      	bls.n	80107e6 <_free_r+0x46>
 80107d4:	6825      	ldr	r5, [r4, #0]
 80107d6:	1961      	adds	r1, r4, r5
 80107d8:	428b      	cmp	r3, r1
 80107da:	bf01      	itttt	eq
 80107dc:	6819      	ldreq	r1, [r3, #0]
 80107de:	685b      	ldreq	r3, [r3, #4]
 80107e0:	1949      	addeq	r1, r1, r5
 80107e2:	6021      	streq	r1, [r4, #0]
 80107e4:	e7ed      	b.n	80107c2 <_free_r+0x22>
 80107e6:	461a      	mov	r2, r3
 80107e8:	685b      	ldr	r3, [r3, #4]
 80107ea:	b10b      	cbz	r3, 80107f0 <_free_r+0x50>
 80107ec:	42a3      	cmp	r3, r4
 80107ee:	d9fa      	bls.n	80107e6 <_free_r+0x46>
 80107f0:	6811      	ldr	r1, [r2, #0]
 80107f2:	1855      	adds	r5, r2, r1
 80107f4:	42a5      	cmp	r5, r4
 80107f6:	d10b      	bne.n	8010810 <_free_r+0x70>
 80107f8:	6824      	ldr	r4, [r4, #0]
 80107fa:	4421      	add	r1, r4
 80107fc:	1854      	adds	r4, r2, r1
 80107fe:	42a3      	cmp	r3, r4
 8010800:	6011      	str	r1, [r2, #0]
 8010802:	d1e0      	bne.n	80107c6 <_free_r+0x26>
 8010804:	681c      	ldr	r4, [r3, #0]
 8010806:	685b      	ldr	r3, [r3, #4]
 8010808:	6053      	str	r3, [r2, #4]
 801080a:	4421      	add	r1, r4
 801080c:	6011      	str	r1, [r2, #0]
 801080e:	e7da      	b.n	80107c6 <_free_r+0x26>
 8010810:	d902      	bls.n	8010818 <_free_r+0x78>
 8010812:	230c      	movs	r3, #12
 8010814:	6003      	str	r3, [r0, #0]
 8010816:	e7d6      	b.n	80107c6 <_free_r+0x26>
 8010818:	6825      	ldr	r5, [r4, #0]
 801081a:	1961      	adds	r1, r4, r5
 801081c:	428b      	cmp	r3, r1
 801081e:	bf04      	itt	eq
 8010820:	6819      	ldreq	r1, [r3, #0]
 8010822:	685b      	ldreq	r3, [r3, #4]
 8010824:	6063      	str	r3, [r4, #4]
 8010826:	bf04      	itt	eq
 8010828:	1949      	addeq	r1, r1, r5
 801082a:	6021      	streq	r1, [r4, #0]
 801082c:	6054      	str	r4, [r2, #4]
 801082e:	e7ca      	b.n	80107c6 <_free_r+0x26>
 8010830:	b003      	add	sp, #12
 8010832:	bd30      	pop	{r4, r5, pc}
 8010834:	2000c0c8 	.word	0x2000c0c8

08010838 <sbrk_aligned>:
 8010838:	b570      	push	{r4, r5, r6, lr}
 801083a:	4e0e      	ldr	r6, [pc, #56]	; (8010874 <sbrk_aligned+0x3c>)
 801083c:	460c      	mov	r4, r1
 801083e:	6831      	ldr	r1, [r6, #0]
 8010840:	4605      	mov	r5, r0
 8010842:	b911      	cbnz	r1, 801084a <sbrk_aligned+0x12>
 8010844:	f000 f918 	bl	8010a78 <_sbrk_r>
 8010848:	6030      	str	r0, [r6, #0]
 801084a:	4621      	mov	r1, r4
 801084c:	4628      	mov	r0, r5
 801084e:	f000 f913 	bl	8010a78 <_sbrk_r>
 8010852:	1c43      	adds	r3, r0, #1
 8010854:	d00a      	beq.n	801086c <sbrk_aligned+0x34>
 8010856:	1cc4      	adds	r4, r0, #3
 8010858:	f024 0403 	bic.w	r4, r4, #3
 801085c:	42a0      	cmp	r0, r4
 801085e:	d007      	beq.n	8010870 <sbrk_aligned+0x38>
 8010860:	1a21      	subs	r1, r4, r0
 8010862:	4628      	mov	r0, r5
 8010864:	f000 f908 	bl	8010a78 <_sbrk_r>
 8010868:	3001      	adds	r0, #1
 801086a:	d101      	bne.n	8010870 <sbrk_aligned+0x38>
 801086c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8010870:	4620      	mov	r0, r4
 8010872:	bd70      	pop	{r4, r5, r6, pc}
 8010874:	2000c0cc 	.word	0x2000c0cc

08010878 <_malloc_r>:
 8010878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801087c:	1ccd      	adds	r5, r1, #3
 801087e:	f025 0503 	bic.w	r5, r5, #3
 8010882:	3508      	adds	r5, #8
 8010884:	2d0c      	cmp	r5, #12
 8010886:	bf38      	it	cc
 8010888:	250c      	movcc	r5, #12
 801088a:	2d00      	cmp	r5, #0
 801088c:	4607      	mov	r7, r0
 801088e:	db01      	blt.n	8010894 <_malloc_r+0x1c>
 8010890:	42a9      	cmp	r1, r5
 8010892:	d905      	bls.n	80108a0 <_malloc_r+0x28>
 8010894:	230c      	movs	r3, #12
 8010896:	603b      	str	r3, [r7, #0]
 8010898:	2600      	movs	r6, #0
 801089a:	4630      	mov	r0, r6
 801089c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80108a0:	4e2e      	ldr	r6, [pc, #184]	; (801095c <_malloc_r+0xe4>)
 80108a2:	f000 fb57 	bl	8010f54 <__malloc_lock>
 80108a6:	6833      	ldr	r3, [r6, #0]
 80108a8:	461c      	mov	r4, r3
 80108aa:	bb34      	cbnz	r4, 80108fa <_malloc_r+0x82>
 80108ac:	4629      	mov	r1, r5
 80108ae:	4638      	mov	r0, r7
 80108b0:	f7ff ffc2 	bl	8010838 <sbrk_aligned>
 80108b4:	1c43      	adds	r3, r0, #1
 80108b6:	4604      	mov	r4, r0
 80108b8:	d14d      	bne.n	8010956 <_malloc_r+0xde>
 80108ba:	6834      	ldr	r4, [r6, #0]
 80108bc:	4626      	mov	r6, r4
 80108be:	2e00      	cmp	r6, #0
 80108c0:	d140      	bne.n	8010944 <_malloc_r+0xcc>
 80108c2:	6823      	ldr	r3, [r4, #0]
 80108c4:	4631      	mov	r1, r6
 80108c6:	4638      	mov	r0, r7
 80108c8:	eb04 0803 	add.w	r8, r4, r3
 80108cc:	f000 f8d4 	bl	8010a78 <_sbrk_r>
 80108d0:	4580      	cmp	r8, r0
 80108d2:	d13a      	bne.n	801094a <_malloc_r+0xd2>
 80108d4:	6821      	ldr	r1, [r4, #0]
 80108d6:	3503      	adds	r5, #3
 80108d8:	1a6d      	subs	r5, r5, r1
 80108da:	f025 0503 	bic.w	r5, r5, #3
 80108de:	3508      	adds	r5, #8
 80108e0:	2d0c      	cmp	r5, #12
 80108e2:	bf38      	it	cc
 80108e4:	250c      	movcc	r5, #12
 80108e6:	4629      	mov	r1, r5
 80108e8:	4638      	mov	r0, r7
 80108ea:	f7ff ffa5 	bl	8010838 <sbrk_aligned>
 80108ee:	3001      	adds	r0, #1
 80108f0:	d02b      	beq.n	801094a <_malloc_r+0xd2>
 80108f2:	6823      	ldr	r3, [r4, #0]
 80108f4:	442b      	add	r3, r5
 80108f6:	6023      	str	r3, [r4, #0]
 80108f8:	e00e      	b.n	8010918 <_malloc_r+0xa0>
 80108fa:	6822      	ldr	r2, [r4, #0]
 80108fc:	1b52      	subs	r2, r2, r5
 80108fe:	d41e      	bmi.n	801093e <_malloc_r+0xc6>
 8010900:	2a0b      	cmp	r2, #11
 8010902:	d916      	bls.n	8010932 <_malloc_r+0xba>
 8010904:	1961      	adds	r1, r4, r5
 8010906:	42a3      	cmp	r3, r4
 8010908:	6025      	str	r5, [r4, #0]
 801090a:	bf18      	it	ne
 801090c:	6059      	strne	r1, [r3, #4]
 801090e:	6863      	ldr	r3, [r4, #4]
 8010910:	bf08      	it	eq
 8010912:	6031      	streq	r1, [r6, #0]
 8010914:	5162      	str	r2, [r4, r5]
 8010916:	604b      	str	r3, [r1, #4]
 8010918:	4638      	mov	r0, r7
 801091a:	f104 060b 	add.w	r6, r4, #11
 801091e:	f000 fb1f 	bl	8010f60 <__malloc_unlock>
 8010922:	f026 0607 	bic.w	r6, r6, #7
 8010926:	1d23      	adds	r3, r4, #4
 8010928:	1af2      	subs	r2, r6, r3
 801092a:	d0b6      	beq.n	801089a <_malloc_r+0x22>
 801092c:	1b9b      	subs	r3, r3, r6
 801092e:	50a3      	str	r3, [r4, r2]
 8010930:	e7b3      	b.n	801089a <_malloc_r+0x22>
 8010932:	6862      	ldr	r2, [r4, #4]
 8010934:	42a3      	cmp	r3, r4
 8010936:	bf0c      	ite	eq
 8010938:	6032      	streq	r2, [r6, #0]
 801093a:	605a      	strne	r2, [r3, #4]
 801093c:	e7ec      	b.n	8010918 <_malloc_r+0xa0>
 801093e:	4623      	mov	r3, r4
 8010940:	6864      	ldr	r4, [r4, #4]
 8010942:	e7b2      	b.n	80108aa <_malloc_r+0x32>
 8010944:	4634      	mov	r4, r6
 8010946:	6876      	ldr	r6, [r6, #4]
 8010948:	e7b9      	b.n	80108be <_malloc_r+0x46>
 801094a:	230c      	movs	r3, #12
 801094c:	603b      	str	r3, [r7, #0]
 801094e:	4638      	mov	r0, r7
 8010950:	f000 fb06 	bl	8010f60 <__malloc_unlock>
 8010954:	e7a1      	b.n	801089a <_malloc_r+0x22>
 8010956:	6025      	str	r5, [r4, #0]
 8010958:	e7de      	b.n	8010918 <_malloc_r+0xa0>
 801095a:	bf00      	nop
 801095c:	2000c0c8 	.word	0x2000c0c8

08010960 <iprintf>:
 8010960:	b40f      	push	{r0, r1, r2, r3}
 8010962:	4b0a      	ldr	r3, [pc, #40]	; (801098c <iprintf+0x2c>)
 8010964:	b513      	push	{r0, r1, r4, lr}
 8010966:	681c      	ldr	r4, [r3, #0]
 8010968:	b124      	cbz	r4, 8010974 <iprintf+0x14>
 801096a:	69a3      	ldr	r3, [r4, #24]
 801096c:	b913      	cbnz	r3, 8010974 <iprintf+0x14>
 801096e:	4620      	mov	r0, r4
 8010970:	f000 fa3e 	bl	8010df0 <__sinit>
 8010974:	ab05      	add	r3, sp, #20
 8010976:	9a04      	ldr	r2, [sp, #16]
 8010978:	68a1      	ldr	r1, [r4, #8]
 801097a:	9301      	str	r3, [sp, #4]
 801097c:	4620      	mov	r0, r4
 801097e:	f000 fca9 	bl	80112d4 <_vfiprintf_r>
 8010982:	b002      	add	sp, #8
 8010984:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010988:	b004      	add	sp, #16
 801098a:	4770      	bx	lr
 801098c:	2000006c 	.word	0x2000006c

08010990 <srand>:
 8010990:	b538      	push	{r3, r4, r5, lr}
 8010992:	4b10      	ldr	r3, [pc, #64]	; (80109d4 <srand+0x44>)
 8010994:	681d      	ldr	r5, [r3, #0]
 8010996:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8010998:	4604      	mov	r4, r0
 801099a:	b9b3      	cbnz	r3, 80109ca <srand+0x3a>
 801099c:	2018      	movs	r0, #24
 801099e:	f7ff fec3 	bl	8010728 <malloc>
 80109a2:	4602      	mov	r2, r0
 80109a4:	63a8      	str	r0, [r5, #56]	; 0x38
 80109a6:	b920      	cbnz	r0, 80109b2 <srand+0x22>
 80109a8:	4b0b      	ldr	r3, [pc, #44]	; (80109d8 <srand+0x48>)
 80109aa:	480c      	ldr	r0, [pc, #48]	; (80109dc <srand+0x4c>)
 80109ac:	2142      	movs	r1, #66	; 0x42
 80109ae:	f000 f99d 	bl	8010cec <__assert_func>
 80109b2:	490b      	ldr	r1, [pc, #44]	; (80109e0 <srand+0x50>)
 80109b4:	4b0b      	ldr	r3, [pc, #44]	; (80109e4 <srand+0x54>)
 80109b6:	e9c0 1300 	strd	r1, r3, [r0]
 80109ba:	4b0b      	ldr	r3, [pc, #44]	; (80109e8 <srand+0x58>)
 80109bc:	6083      	str	r3, [r0, #8]
 80109be:	230b      	movs	r3, #11
 80109c0:	8183      	strh	r3, [r0, #12]
 80109c2:	2100      	movs	r1, #0
 80109c4:	2001      	movs	r0, #1
 80109c6:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80109ca:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80109cc:	2200      	movs	r2, #0
 80109ce:	611c      	str	r4, [r3, #16]
 80109d0:	615a      	str	r2, [r3, #20]
 80109d2:	bd38      	pop	{r3, r4, r5, pc}
 80109d4:	2000006c 	.word	0x2000006c
 80109d8:	0801283c 	.word	0x0801283c
 80109dc:	08012853 	.word	0x08012853
 80109e0:	abcd330e 	.word	0xabcd330e
 80109e4:	e66d1234 	.word	0xe66d1234
 80109e8:	0005deec 	.word	0x0005deec

080109ec <rand>:
 80109ec:	4b16      	ldr	r3, [pc, #88]	; (8010a48 <rand+0x5c>)
 80109ee:	b510      	push	{r4, lr}
 80109f0:	681c      	ldr	r4, [r3, #0]
 80109f2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80109f4:	b9b3      	cbnz	r3, 8010a24 <rand+0x38>
 80109f6:	2018      	movs	r0, #24
 80109f8:	f7ff fe96 	bl	8010728 <malloc>
 80109fc:	63a0      	str	r0, [r4, #56]	; 0x38
 80109fe:	b928      	cbnz	r0, 8010a0c <rand+0x20>
 8010a00:	4602      	mov	r2, r0
 8010a02:	4b12      	ldr	r3, [pc, #72]	; (8010a4c <rand+0x60>)
 8010a04:	4812      	ldr	r0, [pc, #72]	; (8010a50 <rand+0x64>)
 8010a06:	214e      	movs	r1, #78	; 0x4e
 8010a08:	f000 f970 	bl	8010cec <__assert_func>
 8010a0c:	4a11      	ldr	r2, [pc, #68]	; (8010a54 <rand+0x68>)
 8010a0e:	4b12      	ldr	r3, [pc, #72]	; (8010a58 <rand+0x6c>)
 8010a10:	e9c0 2300 	strd	r2, r3, [r0]
 8010a14:	4b11      	ldr	r3, [pc, #68]	; (8010a5c <rand+0x70>)
 8010a16:	6083      	str	r3, [r0, #8]
 8010a18:	230b      	movs	r3, #11
 8010a1a:	8183      	strh	r3, [r0, #12]
 8010a1c:	2201      	movs	r2, #1
 8010a1e:	2300      	movs	r3, #0
 8010a20:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8010a24:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8010a26:	4a0e      	ldr	r2, [pc, #56]	; (8010a60 <rand+0x74>)
 8010a28:	6920      	ldr	r0, [r4, #16]
 8010a2a:	6963      	ldr	r3, [r4, #20]
 8010a2c:	490d      	ldr	r1, [pc, #52]	; (8010a64 <rand+0x78>)
 8010a2e:	4342      	muls	r2, r0
 8010a30:	fb01 2203 	mla	r2, r1, r3, r2
 8010a34:	fba0 0101 	umull	r0, r1, r0, r1
 8010a38:	1c43      	adds	r3, r0, #1
 8010a3a:	eb42 0001 	adc.w	r0, r2, r1
 8010a3e:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8010a42:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8010a46:	bd10      	pop	{r4, pc}
 8010a48:	2000006c 	.word	0x2000006c
 8010a4c:	0801283c 	.word	0x0801283c
 8010a50:	08012853 	.word	0x08012853
 8010a54:	abcd330e 	.word	0xabcd330e
 8010a58:	e66d1234 	.word	0xe66d1234
 8010a5c:	0005deec 	.word	0x0005deec
 8010a60:	5851f42d 	.word	0x5851f42d
 8010a64:	4c957f2d 	.word	0x4c957f2d

08010a68 <realloc>:
 8010a68:	4b02      	ldr	r3, [pc, #8]	; (8010a74 <realloc+0xc>)
 8010a6a:	460a      	mov	r2, r1
 8010a6c:	4601      	mov	r1, r0
 8010a6e:	6818      	ldr	r0, [r3, #0]
 8010a70:	f000 ba7c 	b.w	8010f6c <_realloc_r>
 8010a74:	2000006c 	.word	0x2000006c

08010a78 <_sbrk_r>:
 8010a78:	b538      	push	{r3, r4, r5, lr}
 8010a7a:	4d06      	ldr	r5, [pc, #24]	; (8010a94 <_sbrk_r+0x1c>)
 8010a7c:	2300      	movs	r3, #0
 8010a7e:	4604      	mov	r4, r0
 8010a80:	4608      	mov	r0, r1
 8010a82:	602b      	str	r3, [r5, #0]
 8010a84:	f7f0 fca6 	bl	80013d4 <_sbrk>
 8010a88:	1c43      	adds	r3, r0, #1
 8010a8a:	d102      	bne.n	8010a92 <_sbrk_r+0x1a>
 8010a8c:	682b      	ldr	r3, [r5, #0]
 8010a8e:	b103      	cbz	r3, 8010a92 <_sbrk_r+0x1a>
 8010a90:	6023      	str	r3, [r4, #0]
 8010a92:	bd38      	pop	{r3, r4, r5, pc}
 8010a94:	2000c0d4 	.word	0x2000c0d4

08010a98 <sniprintf>:
 8010a98:	b40c      	push	{r2, r3}
 8010a9a:	b530      	push	{r4, r5, lr}
 8010a9c:	4b17      	ldr	r3, [pc, #92]	; (8010afc <sniprintf+0x64>)
 8010a9e:	1e0c      	subs	r4, r1, #0
 8010aa0:	681d      	ldr	r5, [r3, #0]
 8010aa2:	b09d      	sub	sp, #116	; 0x74
 8010aa4:	da08      	bge.n	8010ab8 <sniprintf+0x20>
 8010aa6:	238b      	movs	r3, #139	; 0x8b
 8010aa8:	602b      	str	r3, [r5, #0]
 8010aaa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010aae:	b01d      	add	sp, #116	; 0x74
 8010ab0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010ab4:	b002      	add	sp, #8
 8010ab6:	4770      	bx	lr
 8010ab8:	f44f 7302 	mov.w	r3, #520	; 0x208
 8010abc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8010ac0:	bf14      	ite	ne
 8010ac2:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8010ac6:	4623      	moveq	r3, r4
 8010ac8:	9304      	str	r3, [sp, #16]
 8010aca:	9307      	str	r3, [sp, #28]
 8010acc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010ad0:	9002      	str	r0, [sp, #8]
 8010ad2:	9006      	str	r0, [sp, #24]
 8010ad4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010ad8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8010ada:	ab21      	add	r3, sp, #132	; 0x84
 8010adc:	a902      	add	r1, sp, #8
 8010ade:	4628      	mov	r0, r5
 8010ae0:	9301      	str	r3, [sp, #4]
 8010ae2:	f000 facd 	bl	8011080 <_svfiprintf_r>
 8010ae6:	1c43      	adds	r3, r0, #1
 8010ae8:	bfbc      	itt	lt
 8010aea:	238b      	movlt	r3, #139	; 0x8b
 8010aec:	602b      	strlt	r3, [r5, #0]
 8010aee:	2c00      	cmp	r4, #0
 8010af0:	d0dd      	beq.n	8010aae <sniprintf+0x16>
 8010af2:	9b02      	ldr	r3, [sp, #8]
 8010af4:	2200      	movs	r2, #0
 8010af6:	701a      	strb	r2, [r3, #0]
 8010af8:	e7d9      	b.n	8010aae <sniprintf+0x16>
 8010afa:	bf00      	nop
 8010afc:	2000006c 	.word	0x2000006c

08010b00 <strchr>:
 8010b00:	b2c9      	uxtb	r1, r1
 8010b02:	4603      	mov	r3, r0
 8010b04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010b08:	b11a      	cbz	r2, 8010b12 <strchr+0x12>
 8010b0a:	428a      	cmp	r2, r1
 8010b0c:	d1f9      	bne.n	8010b02 <strchr+0x2>
 8010b0e:	4618      	mov	r0, r3
 8010b10:	4770      	bx	lr
 8010b12:	2900      	cmp	r1, #0
 8010b14:	bf18      	it	ne
 8010b16:	2300      	movne	r3, #0
 8010b18:	e7f9      	b.n	8010b0e <strchr+0xe>

08010b1a <strcpy>:
 8010b1a:	4603      	mov	r3, r0
 8010b1c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010b20:	f803 2b01 	strb.w	r2, [r3], #1
 8010b24:	2a00      	cmp	r2, #0
 8010b26:	d1f9      	bne.n	8010b1c <strcpy+0x2>
 8010b28:	4770      	bx	lr

08010b2a <strncmp>:
 8010b2a:	b510      	push	{r4, lr}
 8010b2c:	b17a      	cbz	r2, 8010b4e <strncmp+0x24>
 8010b2e:	4603      	mov	r3, r0
 8010b30:	3901      	subs	r1, #1
 8010b32:	1884      	adds	r4, r0, r2
 8010b34:	f813 0b01 	ldrb.w	r0, [r3], #1
 8010b38:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8010b3c:	4290      	cmp	r0, r2
 8010b3e:	d101      	bne.n	8010b44 <strncmp+0x1a>
 8010b40:	42a3      	cmp	r3, r4
 8010b42:	d101      	bne.n	8010b48 <strncmp+0x1e>
 8010b44:	1a80      	subs	r0, r0, r2
 8010b46:	bd10      	pop	{r4, pc}
 8010b48:	2800      	cmp	r0, #0
 8010b4a:	d1f3      	bne.n	8010b34 <strncmp+0xa>
 8010b4c:	e7fa      	b.n	8010b44 <strncmp+0x1a>
 8010b4e:	4610      	mov	r0, r2
 8010b50:	e7f9      	b.n	8010b46 <strncmp+0x1c>

08010b52 <strstr>:
 8010b52:	780a      	ldrb	r2, [r1, #0]
 8010b54:	b570      	push	{r4, r5, r6, lr}
 8010b56:	b96a      	cbnz	r2, 8010b74 <strstr+0x22>
 8010b58:	bd70      	pop	{r4, r5, r6, pc}
 8010b5a:	429a      	cmp	r2, r3
 8010b5c:	d109      	bne.n	8010b72 <strstr+0x20>
 8010b5e:	460c      	mov	r4, r1
 8010b60:	4605      	mov	r5, r0
 8010b62:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	d0f6      	beq.n	8010b58 <strstr+0x6>
 8010b6a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8010b6e:	429e      	cmp	r6, r3
 8010b70:	d0f7      	beq.n	8010b62 <strstr+0x10>
 8010b72:	3001      	adds	r0, #1
 8010b74:	7803      	ldrb	r3, [r0, #0]
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d1ef      	bne.n	8010b5a <strstr+0x8>
 8010b7a:	4618      	mov	r0, r3
 8010b7c:	e7ec      	b.n	8010b58 <strstr+0x6>
	...

08010b80 <_strtoul_l.constprop.0>:
 8010b80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010b84:	4f36      	ldr	r7, [pc, #216]	; (8010c60 <_strtoul_l.constprop.0+0xe0>)
 8010b86:	4686      	mov	lr, r0
 8010b88:	460d      	mov	r5, r1
 8010b8a:	4628      	mov	r0, r5
 8010b8c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010b90:	5de6      	ldrb	r6, [r4, r7]
 8010b92:	f016 0608 	ands.w	r6, r6, #8
 8010b96:	d1f8      	bne.n	8010b8a <_strtoul_l.constprop.0+0xa>
 8010b98:	2c2d      	cmp	r4, #45	; 0x2d
 8010b9a:	d12f      	bne.n	8010bfc <_strtoul_l.constprop.0+0x7c>
 8010b9c:	782c      	ldrb	r4, [r5, #0]
 8010b9e:	2601      	movs	r6, #1
 8010ba0:	1c85      	adds	r5, r0, #2
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	d057      	beq.n	8010c56 <_strtoul_l.constprop.0+0xd6>
 8010ba6:	2b10      	cmp	r3, #16
 8010ba8:	d109      	bne.n	8010bbe <_strtoul_l.constprop.0+0x3e>
 8010baa:	2c30      	cmp	r4, #48	; 0x30
 8010bac:	d107      	bne.n	8010bbe <_strtoul_l.constprop.0+0x3e>
 8010bae:	7828      	ldrb	r0, [r5, #0]
 8010bb0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8010bb4:	2858      	cmp	r0, #88	; 0x58
 8010bb6:	d149      	bne.n	8010c4c <_strtoul_l.constprop.0+0xcc>
 8010bb8:	786c      	ldrb	r4, [r5, #1]
 8010bba:	2310      	movs	r3, #16
 8010bbc:	3502      	adds	r5, #2
 8010bbe:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8010bc2:	2700      	movs	r7, #0
 8010bc4:	fbb8 f8f3 	udiv	r8, r8, r3
 8010bc8:	fb03 f908 	mul.w	r9, r3, r8
 8010bcc:	ea6f 0909 	mvn.w	r9, r9
 8010bd0:	4638      	mov	r0, r7
 8010bd2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8010bd6:	f1bc 0f09 	cmp.w	ip, #9
 8010bda:	d814      	bhi.n	8010c06 <_strtoul_l.constprop.0+0x86>
 8010bdc:	4664      	mov	r4, ip
 8010bde:	42a3      	cmp	r3, r4
 8010be0:	dd22      	ble.n	8010c28 <_strtoul_l.constprop.0+0xa8>
 8010be2:	2f00      	cmp	r7, #0
 8010be4:	db1d      	blt.n	8010c22 <_strtoul_l.constprop.0+0xa2>
 8010be6:	4580      	cmp	r8, r0
 8010be8:	d31b      	bcc.n	8010c22 <_strtoul_l.constprop.0+0xa2>
 8010bea:	d101      	bne.n	8010bf0 <_strtoul_l.constprop.0+0x70>
 8010bec:	45a1      	cmp	r9, r4
 8010bee:	db18      	blt.n	8010c22 <_strtoul_l.constprop.0+0xa2>
 8010bf0:	fb00 4003 	mla	r0, r0, r3, r4
 8010bf4:	2701      	movs	r7, #1
 8010bf6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010bfa:	e7ea      	b.n	8010bd2 <_strtoul_l.constprop.0+0x52>
 8010bfc:	2c2b      	cmp	r4, #43	; 0x2b
 8010bfe:	bf04      	itt	eq
 8010c00:	782c      	ldrbeq	r4, [r5, #0]
 8010c02:	1c85      	addeq	r5, r0, #2
 8010c04:	e7cd      	b.n	8010ba2 <_strtoul_l.constprop.0+0x22>
 8010c06:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8010c0a:	f1bc 0f19 	cmp.w	ip, #25
 8010c0e:	d801      	bhi.n	8010c14 <_strtoul_l.constprop.0+0x94>
 8010c10:	3c37      	subs	r4, #55	; 0x37
 8010c12:	e7e4      	b.n	8010bde <_strtoul_l.constprop.0+0x5e>
 8010c14:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8010c18:	f1bc 0f19 	cmp.w	ip, #25
 8010c1c:	d804      	bhi.n	8010c28 <_strtoul_l.constprop.0+0xa8>
 8010c1e:	3c57      	subs	r4, #87	; 0x57
 8010c20:	e7dd      	b.n	8010bde <_strtoul_l.constprop.0+0x5e>
 8010c22:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8010c26:	e7e6      	b.n	8010bf6 <_strtoul_l.constprop.0+0x76>
 8010c28:	2f00      	cmp	r7, #0
 8010c2a:	da07      	bge.n	8010c3c <_strtoul_l.constprop.0+0xbc>
 8010c2c:	2322      	movs	r3, #34	; 0x22
 8010c2e:	f8ce 3000 	str.w	r3, [lr]
 8010c32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010c36:	b932      	cbnz	r2, 8010c46 <_strtoul_l.constprop.0+0xc6>
 8010c38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010c3c:	b106      	cbz	r6, 8010c40 <_strtoul_l.constprop.0+0xc0>
 8010c3e:	4240      	negs	r0, r0
 8010c40:	2a00      	cmp	r2, #0
 8010c42:	d0f9      	beq.n	8010c38 <_strtoul_l.constprop.0+0xb8>
 8010c44:	b107      	cbz	r7, 8010c48 <_strtoul_l.constprop.0+0xc8>
 8010c46:	1e69      	subs	r1, r5, #1
 8010c48:	6011      	str	r1, [r2, #0]
 8010c4a:	e7f5      	b.n	8010c38 <_strtoul_l.constprop.0+0xb8>
 8010c4c:	2430      	movs	r4, #48	; 0x30
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	d1b5      	bne.n	8010bbe <_strtoul_l.constprop.0+0x3e>
 8010c52:	2308      	movs	r3, #8
 8010c54:	e7b3      	b.n	8010bbe <_strtoul_l.constprop.0+0x3e>
 8010c56:	2c30      	cmp	r4, #48	; 0x30
 8010c58:	d0a9      	beq.n	8010bae <_strtoul_l.constprop.0+0x2e>
 8010c5a:	230a      	movs	r3, #10
 8010c5c:	e7af      	b.n	8010bbe <_strtoul_l.constprop.0+0x3e>
 8010c5e:	bf00      	nop
 8010c60:	08012735 	.word	0x08012735

08010c64 <strtoul>:
 8010c64:	4613      	mov	r3, r2
 8010c66:	460a      	mov	r2, r1
 8010c68:	4601      	mov	r1, r0
 8010c6a:	4802      	ldr	r0, [pc, #8]	; (8010c74 <strtoul+0x10>)
 8010c6c:	6800      	ldr	r0, [r0, #0]
 8010c6e:	f7ff bf87 	b.w	8010b80 <_strtoul_l.constprop.0>
 8010c72:	bf00      	nop
 8010c74:	2000006c 	.word	0x2000006c

08010c78 <_vsniprintf_r>:
 8010c78:	b530      	push	{r4, r5, lr}
 8010c7a:	4614      	mov	r4, r2
 8010c7c:	2c00      	cmp	r4, #0
 8010c7e:	b09b      	sub	sp, #108	; 0x6c
 8010c80:	4605      	mov	r5, r0
 8010c82:	461a      	mov	r2, r3
 8010c84:	da05      	bge.n	8010c92 <_vsniprintf_r+0x1a>
 8010c86:	238b      	movs	r3, #139	; 0x8b
 8010c88:	6003      	str	r3, [r0, #0]
 8010c8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010c8e:	b01b      	add	sp, #108	; 0x6c
 8010c90:	bd30      	pop	{r4, r5, pc}
 8010c92:	f44f 7302 	mov.w	r3, #520	; 0x208
 8010c96:	f8ad 300c 	strh.w	r3, [sp, #12]
 8010c9a:	bf14      	ite	ne
 8010c9c:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8010ca0:	4623      	moveq	r3, r4
 8010ca2:	9302      	str	r3, [sp, #8]
 8010ca4:	9305      	str	r3, [sp, #20]
 8010ca6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010caa:	9100      	str	r1, [sp, #0]
 8010cac:	9104      	str	r1, [sp, #16]
 8010cae:	f8ad 300e 	strh.w	r3, [sp, #14]
 8010cb2:	4669      	mov	r1, sp
 8010cb4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8010cb6:	f000 f9e3 	bl	8011080 <_svfiprintf_r>
 8010cba:	1c43      	adds	r3, r0, #1
 8010cbc:	bfbc      	itt	lt
 8010cbe:	238b      	movlt	r3, #139	; 0x8b
 8010cc0:	602b      	strlt	r3, [r5, #0]
 8010cc2:	2c00      	cmp	r4, #0
 8010cc4:	d0e3      	beq.n	8010c8e <_vsniprintf_r+0x16>
 8010cc6:	9b00      	ldr	r3, [sp, #0]
 8010cc8:	2200      	movs	r2, #0
 8010cca:	701a      	strb	r2, [r3, #0]
 8010ccc:	e7df      	b.n	8010c8e <_vsniprintf_r+0x16>
	...

08010cd0 <vsniprintf>:
 8010cd0:	b507      	push	{r0, r1, r2, lr}
 8010cd2:	9300      	str	r3, [sp, #0]
 8010cd4:	4613      	mov	r3, r2
 8010cd6:	460a      	mov	r2, r1
 8010cd8:	4601      	mov	r1, r0
 8010cda:	4803      	ldr	r0, [pc, #12]	; (8010ce8 <vsniprintf+0x18>)
 8010cdc:	6800      	ldr	r0, [r0, #0]
 8010cde:	f7ff ffcb 	bl	8010c78 <_vsniprintf_r>
 8010ce2:	b003      	add	sp, #12
 8010ce4:	f85d fb04 	ldr.w	pc, [sp], #4
 8010ce8:	2000006c 	.word	0x2000006c

08010cec <__assert_func>:
 8010cec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010cee:	4614      	mov	r4, r2
 8010cf0:	461a      	mov	r2, r3
 8010cf2:	4b09      	ldr	r3, [pc, #36]	; (8010d18 <__assert_func+0x2c>)
 8010cf4:	681b      	ldr	r3, [r3, #0]
 8010cf6:	4605      	mov	r5, r0
 8010cf8:	68d8      	ldr	r0, [r3, #12]
 8010cfa:	b14c      	cbz	r4, 8010d10 <__assert_func+0x24>
 8010cfc:	4b07      	ldr	r3, [pc, #28]	; (8010d1c <__assert_func+0x30>)
 8010cfe:	9100      	str	r1, [sp, #0]
 8010d00:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010d04:	4906      	ldr	r1, [pc, #24]	; (8010d20 <__assert_func+0x34>)
 8010d06:	462b      	mov	r3, r5
 8010d08:	f000 f8f0 	bl	8010eec <fiprintf>
 8010d0c:	f000 febc 	bl	8011a88 <abort>
 8010d10:	4b04      	ldr	r3, [pc, #16]	; (8010d24 <__assert_func+0x38>)
 8010d12:	461c      	mov	r4, r3
 8010d14:	e7f3      	b.n	8010cfe <__assert_func+0x12>
 8010d16:	bf00      	nop
 8010d18:	2000006c 	.word	0x2000006c
 8010d1c:	080128ae 	.word	0x080128ae
 8010d20:	080128bb 	.word	0x080128bb
 8010d24:	080128e9 	.word	0x080128e9

08010d28 <__env_lock>:
 8010d28:	4801      	ldr	r0, [pc, #4]	; (8010d30 <__env_lock+0x8>)
 8010d2a:	f000 b911 	b.w	8010f50 <__retarget_lock_acquire_recursive>
 8010d2e:	bf00      	nop
 8010d30:	2000c0d0 	.word	0x2000c0d0

08010d34 <__env_unlock>:
 8010d34:	4801      	ldr	r0, [pc, #4]	; (8010d3c <__env_unlock+0x8>)
 8010d36:	f000 b90c 	b.w	8010f52 <__retarget_lock_release_recursive>
 8010d3a:	bf00      	nop
 8010d3c:	2000c0d0 	.word	0x2000c0d0

08010d40 <std>:
 8010d40:	2300      	movs	r3, #0
 8010d42:	b510      	push	{r4, lr}
 8010d44:	4604      	mov	r4, r0
 8010d46:	e9c0 3300 	strd	r3, r3, [r0]
 8010d4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010d4e:	6083      	str	r3, [r0, #8]
 8010d50:	8181      	strh	r1, [r0, #12]
 8010d52:	6643      	str	r3, [r0, #100]	; 0x64
 8010d54:	81c2      	strh	r2, [r0, #14]
 8010d56:	6183      	str	r3, [r0, #24]
 8010d58:	4619      	mov	r1, r3
 8010d5a:	2208      	movs	r2, #8
 8010d5c:	305c      	adds	r0, #92	; 0x5c
 8010d5e:	f7ff fd01 	bl	8010764 <memset>
 8010d62:	4b05      	ldr	r3, [pc, #20]	; (8010d78 <std+0x38>)
 8010d64:	6263      	str	r3, [r4, #36]	; 0x24
 8010d66:	4b05      	ldr	r3, [pc, #20]	; (8010d7c <std+0x3c>)
 8010d68:	62a3      	str	r3, [r4, #40]	; 0x28
 8010d6a:	4b05      	ldr	r3, [pc, #20]	; (8010d80 <std+0x40>)
 8010d6c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010d6e:	4b05      	ldr	r3, [pc, #20]	; (8010d84 <std+0x44>)
 8010d70:	6224      	str	r4, [r4, #32]
 8010d72:	6323      	str	r3, [r4, #48]	; 0x30
 8010d74:	bd10      	pop	{r4, pc}
 8010d76:	bf00      	nop
 8010d78:	0801185d 	.word	0x0801185d
 8010d7c:	0801187f 	.word	0x0801187f
 8010d80:	080118b7 	.word	0x080118b7
 8010d84:	080118db 	.word	0x080118db

08010d88 <_cleanup_r>:
 8010d88:	4901      	ldr	r1, [pc, #4]	; (8010d90 <_cleanup_r+0x8>)
 8010d8a:	f000 b8c1 	b.w	8010f10 <_fwalk_reent>
 8010d8e:	bf00      	nop
 8010d90:	08011bc5 	.word	0x08011bc5

08010d94 <__sfmoreglue>:
 8010d94:	b570      	push	{r4, r5, r6, lr}
 8010d96:	2268      	movs	r2, #104	; 0x68
 8010d98:	1e4d      	subs	r5, r1, #1
 8010d9a:	4355      	muls	r5, r2
 8010d9c:	460e      	mov	r6, r1
 8010d9e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010da2:	f7ff fd69 	bl	8010878 <_malloc_r>
 8010da6:	4604      	mov	r4, r0
 8010da8:	b140      	cbz	r0, 8010dbc <__sfmoreglue+0x28>
 8010daa:	2100      	movs	r1, #0
 8010dac:	e9c0 1600 	strd	r1, r6, [r0]
 8010db0:	300c      	adds	r0, #12
 8010db2:	60a0      	str	r0, [r4, #8]
 8010db4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010db8:	f7ff fcd4 	bl	8010764 <memset>
 8010dbc:	4620      	mov	r0, r4
 8010dbe:	bd70      	pop	{r4, r5, r6, pc}

08010dc0 <__sfp_lock_acquire>:
 8010dc0:	4801      	ldr	r0, [pc, #4]	; (8010dc8 <__sfp_lock_acquire+0x8>)
 8010dc2:	f000 b8c5 	b.w	8010f50 <__retarget_lock_acquire_recursive>
 8010dc6:	bf00      	nop
 8010dc8:	2000c0d2 	.word	0x2000c0d2

08010dcc <__sfp_lock_release>:
 8010dcc:	4801      	ldr	r0, [pc, #4]	; (8010dd4 <__sfp_lock_release+0x8>)
 8010dce:	f000 b8c0 	b.w	8010f52 <__retarget_lock_release_recursive>
 8010dd2:	bf00      	nop
 8010dd4:	2000c0d2 	.word	0x2000c0d2

08010dd8 <__sinit_lock_acquire>:
 8010dd8:	4801      	ldr	r0, [pc, #4]	; (8010de0 <__sinit_lock_acquire+0x8>)
 8010dda:	f000 b8b9 	b.w	8010f50 <__retarget_lock_acquire_recursive>
 8010dde:	bf00      	nop
 8010de0:	2000c0d3 	.word	0x2000c0d3

08010de4 <__sinit_lock_release>:
 8010de4:	4801      	ldr	r0, [pc, #4]	; (8010dec <__sinit_lock_release+0x8>)
 8010de6:	f000 b8b4 	b.w	8010f52 <__retarget_lock_release_recursive>
 8010dea:	bf00      	nop
 8010dec:	2000c0d3 	.word	0x2000c0d3

08010df0 <__sinit>:
 8010df0:	b510      	push	{r4, lr}
 8010df2:	4604      	mov	r4, r0
 8010df4:	f7ff fff0 	bl	8010dd8 <__sinit_lock_acquire>
 8010df8:	69a3      	ldr	r3, [r4, #24]
 8010dfa:	b11b      	cbz	r3, 8010e04 <__sinit+0x14>
 8010dfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010e00:	f7ff bff0 	b.w	8010de4 <__sinit_lock_release>
 8010e04:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010e08:	6523      	str	r3, [r4, #80]	; 0x50
 8010e0a:	4b13      	ldr	r3, [pc, #76]	; (8010e58 <__sinit+0x68>)
 8010e0c:	4a13      	ldr	r2, [pc, #76]	; (8010e5c <__sinit+0x6c>)
 8010e0e:	681b      	ldr	r3, [r3, #0]
 8010e10:	62a2      	str	r2, [r4, #40]	; 0x28
 8010e12:	42a3      	cmp	r3, r4
 8010e14:	bf04      	itt	eq
 8010e16:	2301      	moveq	r3, #1
 8010e18:	61a3      	streq	r3, [r4, #24]
 8010e1a:	4620      	mov	r0, r4
 8010e1c:	f000 f820 	bl	8010e60 <__sfp>
 8010e20:	6060      	str	r0, [r4, #4]
 8010e22:	4620      	mov	r0, r4
 8010e24:	f000 f81c 	bl	8010e60 <__sfp>
 8010e28:	60a0      	str	r0, [r4, #8]
 8010e2a:	4620      	mov	r0, r4
 8010e2c:	f000 f818 	bl	8010e60 <__sfp>
 8010e30:	2200      	movs	r2, #0
 8010e32:	60e0      	str	r0, [r4, #12]
 8010e34:	2104      	movs	r1, #4
 8010e36:	6860      	ldr	r0, [r4, #4]
 8010e38:	f7ff ff82 	bl	8010d40 <std>
 8010e3c:	68a0      	ldr	r0, [r4, #8]
 8010e3e:	2201      	movs	r2, #1
 8010e40:	2109      	movs	r1, #9
 8010e42:	f7ff ff7d 	bl	8010d40 <std>
 8010e46:	68e0      	ldr	r0, [r4, #12]
 8010e48:	2202      	movs	r2, #2
 8010e4a:	2112      	movs	r1, #18
 8010e4c:	f7ff ff78 	bl	8010d40 <std>
 8010e50:	2301      	movs	r3, #1
 8010e52:	61a3      	str	r3, [r4, #24]
 8010e54:	e7d2      	b.n	8010dfc <__sinit+0xc>
 8010e56:	bf00      	nop
 8010e58:	08012838 	.word	0x08012838
 8010e5c:	08010d89 	.word	0x08010d89

08010e60 <__sfp>:
 8010e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e62:	4607      	mov	r7, r0
 8010e64:	f7ff ffac 	bl	8010dc0 <__sfp_lock_acquire>
 8010e68:	4b1e      	ldr	r3, [pc, #120]	; (8010ee4 <__sfp+0x84>)
 8010e6a:	681e      	ldr	r6, [r3, #0]
 8010e6c:	69b3      	ldr	r3, [r6, #24]
 8010e6e:	b913      	cbnz	r3, 8010e76 <__sfp+0x16>
 8010e70:	4630      	mov	r0, r6
 8010e72:	f7ff ffbd 	bl	8010df0 <__sinit>
 8010e76:	3648      	adds	r6, #72	; 0x48
 8010e78:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010e7c:	3b01      	subs	r3, #1
 8010e7e:	d503      	bpl.n	8010e88 <__sfp+0x28>
 8010e80:	6833      	ldr	r3, [r6, #0]
 8010e82:	b30b      	cbz	r3, 8010ec8 <__sfp+0x68>
 8010e84:	6836      	ldr	r6, [r6, #0]
 8010e86:	e7f7      	b.n	8010e78 <__sfp+0x18>
 8010e88:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010e8c:	b9d5      	cbnz	r5, 8010ec4 <__sfp+0x64>
 8010e8e:	4b16      	ldr	r3, [pc, #88]	; (8010ee8 <__sfp+0x88>)
 8010e90:	60e3      	str	r3, [r4, #12]
 8010e92:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010e96:	6665      	str	r5, [r4, #100]	; 0x64
 8010e98:	f000 f859 	bl	8010f4e <__retarget_lock_init_recursive>
 8010e9c:	f7ff ff96 	bl	8010dcc <__sfp_lock_release>
 8010ea0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010ea4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010ea8:	6025      	str	r5, [r4, #0]
 8010eaa:	61a5      	str	r5, [r4, #24]
 8010eac:	2208      	movs	r2, #8
 8010eae:	4629      	mov	r1, r5
 8010eb0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010eb4:	f7ff fc56 	bl	8010764 <memset>
 8010eb8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010ebc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010ec0:	4620      	mov	r0, r4
 8010ec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010ec4:	3468      	adds	r4, #104	; 0x68
 8010ec6:	e7d9      	b.n	8010e7c <__sfp+0x1c>
 8010ec8:	2104      	movs	r1, #4
 8010eca:	4638      	mov	r0, r7
 8010ecc:	f7ff ff62 	bl	8010d94 <__sfmoreglue>
 8010ed0:	4604      	mov	r4, r0
 8010ed2:	6030      	str	r0, [r6, #0]
 8010ed4:	2800      	cmp	r0, #0
 8010ed6:	d1d5      	bne.n	8010e84 <__sfp+0x24>
 8010ed8:	f7ff ff78 	bl	8010dcc <__sfp_lock_release>
 8010edc:	230c      	movs	r3, #12
 8010ede:	603b      	str	r3, [r7, #0]
 8010ee0:	e7ee      	b.n	8010ec0 <__sfp+0x60>
 8010ee2:	bf00      	nop
 8010ee4:	08012838 	.word	0x08012838
 8010ee8:	ffff0001 	.word	0xffff0001

08010eec <fiprintf>:
 8010eec:	b40e      	push	{r1, r2, r3}
 8010eee:	b503      	push	{r0, r1, lr}
 8010ef0:	4601      	mov	r1, r0
 8010ef2:	ab03      	add	r3, sp, #12
 8010ef4:	4805      	ldr	r0, [pc, #20]	; (8010f0c <fiprintf+0x20>)
 8010ef6:	f853 2b04 	ldr.w	r2, [r3], #4
 8010efa:	6800      	ldr	r0, [r0, #0]
 8010efc:	9301      	str	r3, [sp, #4]
 8010efe:	f000 f9e9 	bl	80112d4 <_vfiprintf_r>
 8010f02:	b002      	add	sp, #8
 8010f04:	f85d eb04 	ldr.w	lr, [sp], #4
 8010f08:	b003      	add	sp, #12
 8010f0a:	4770      	bx	lr
 8010f0c:	2000006c 	.word	0x2000006c

08010f10 <_fwalk_reent>:
 8010f10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010f14:	4606      	mov	r6, r0
 8010f16:	4688      	mov	r8, r1
 8010f18:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010f1c:	2700      	movs	r7, #0
 8010f1e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010f22:	f1b9 0901 	subs.w	r9, r9, #1
 8010f26:	d505      	bpl.n	8010f34 <_fwalk_reent+0x24>
 8010f28:	6824      	ldr	r4, [r4, #0]
 8010f2a:	2c00      	cmp	r4, #0
 8010f2c:	d1f7      	bne.n	8010f1e <_fwalk_reent+0xe>
 8010f2e:	4638      	mov	r0, r7
 8010f30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010f34:	89ab      	ldrh	r3, [r5, #12]
 8010f36:	2b01      	cmp	r3, #1
 8010f38:	d907      	bls.n	8010f4a <_fwalk_reent+0x3a>
 8010f3a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010f3e:	3301      	adds	r3, #1
 8010f40:	d003      	beq.n	8010f4a <_fwalk_reent+0x3a>
 8010f42:	4629      	mov	r1, r5
 8010f44:	4630      	mov	r0, r6
 8010f46:	47c0      	blx	r8
 8010f48:	4307      	orrs	r7, r0
 8010f4a:	3568      	adds	r5, #104	; 0x68
 8010f4c:	e7e9      	b.n	8010f22 <_fwalk_reent+0x12>

08010f4e <__retarget_lock_init_recursive>:
 8010f4e:	4770      	bx	lr

08010f50 <__retarget_lock_acquire_recursive>:
 8010f50:	4770      	bx	lr

08010f52 <__retarget_lock_release_recursive>:
 8010f52:	4770      	bx	lr

08010f54 <__malloc_lock>:
 8010f54:	4801      	ldr	r0, [pc, #4]	; (8010f5c <__malloc_lock+0x8>)
 8010f56:	f7ff bffb 	b.w	8010f50 <__retarget_lock_acquire_recursive>
 8010f5a:	bf00      	nop
 8010f5c:	2000c0d1 	.word	0x2000c0d1

08010f60 <__malloc_unlock>:
 8010f60:	4801      	ldr	r0, [pc, #4]	; (8010f68 <__malloc_unlock+0x8>)
 8010f62:	f7ff bff6 	b.w	8010f52 <__retarget_lock_release_recursive>
 8010f66:	bf00      	nop
 8010f68:	2000c0d1 	.word	0x2000c0d1

08010f6c <_realloc_r>:
 8010f6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f70:	4680      	mov	r8, r0
 8010f72:	4614      	mov	r4, r2
 8010f74:	460e      	mov	r6, r1
 8010f76:	b921      	cbnz	r1, 8010f82 <_realloc_r+0x16>
 8010f78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010f7c:	4611      	mov	r1, r2
 8010f7e:	f7ff bc7b 	b.w	8010878 <_malloc_r>
 8010f82:	b92a      	cbnz	r2, 8010f90 <_realloc_r+0x24>
 8010f84:	f7ff fc0c 	bl	80107a0 <_free_r>
 8010f88:	4625      	mov	r5, r4
 8010f8a:	4628      	mov	r0, r5
 8010f8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f90:	f000 fee6 	bl	8011d60 <_malloc_usable_size_r>
 8010f94:	4284      	cmp	r4, r0
 8010f96:	4607      	mov	r7, r0
 8010f98:	d802      	bhi.n	8010fa0 <_realloc_r+0x34>
 8010f9a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010f9e:	d812      	bhi.n	8010fc6 <_realloc_r+0x5a>
 8010fa0:	4621      	mov	r1, r4
 8010fa2:	4640      	mov	r0, r8
 8010fa4:	f7ff fc68 	bl	8010878 <_malloc_r>
 8010fa8:	4605      	mov	r5, r0
 8010faa:	2800      	cmp	r0, #0
 8010fac:	d0ed      	beq.n	8010f8a <_realloc_r+0x1e>
 8010fae:	42bc      	cmp	r4, r7
 8010fb0:	4622      	mov	r2, r4
 8010fb2:	4631      	mov	r1, r6
 8010fb4:	bf28      	it	cs
 8010fb6:	463a      	movcs	r2, r7
 8010fb8:	f7ff fbc6 	bl	8010748 <memcpy>
 8010fbc:	4631      	mov	r1, r6
 8010fbe:	4640      	mov	r0, r8
 8010fc0:	f7ff fbee 	bl	80107a0 <_free_r>
 8010fc4:	e7e1      	b.n	8010f8a <_realloc_r+0x1e>
 8010fc6:	4635      	mov	r5, r6
 8010fc8:	e7df      	b.n	8010f8a <_realloc_r+0x1e>

08010fca <__ssputs_r>:
 8010fca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010fce:	688e      	ldr	r6, [r1, #8]
 8010fd0:	429e      	cmp	r6, r3
 8010fd2:	4682      	mov	sl, r0
 8010fd4:	460c      	mov	r4, r1
 8010fd6:	4690      	mov	r8, r2
 8010fd8:	461f      	mov	r7, r3
 8010fda:	d838      	bhi.n	801104e <__ssputs_r+0x84>
 8010fdc:	898a      	ldrh	r2, [r1, #12]
 8010fde:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010fe2:	d032      	beq.n	801104a <__ssputs_r+0x80>
 8010fe4:	6825      	ldr	r5, [r4, #0]
 8010fe6:	6909      	ldr	r1, [r1, #16]
 8010fe8:	eba5 0901 	sub.w	r9, r5, r1
 8010fec:	6965      	ldr	r5, [r4, #20]
 8010fee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010ff2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010ff6:	3301      	adds	r3, #1
 8010ff8:	444b      	add	r3, r9
 8010ffa:	106d      	asrs	r5, r5, #1
 8010ffc:	429d      	cmp	r5, r3
 8010ffe:	bf38      	it	cc
 8011000:	461d      	movcc	r5, r3
 8011002:	0553      	lsls	r3, r2, #21
 8011004:	d531      	bpl.n	801106a <__ssputs_r+0xa0>
 8011006:	4629      	mov	r1, r5
 8011008:	f7ff fc36 	bl	8010878 <_malloc_r>
 801100c:	4606      	mov	r6, r0
 801100e:	b950      	cbnz	r0, 8011026 <__ssputs_r+0x5c>
 8011010:	230c      	movs	r3, #12
 8011012:	f8ca 3000 	str.w	r3, [sl]
 8011016:	89a3      	ldrh	r3, [r4, #12]
 8011018:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801101c:	81a3      	strh	r3, [r4, #12]
 801101e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011022:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011026:	6921      	ldr	r1, [r4, #16]
 8011028:	464a      	mov	r2, r9
 801102a:	f7ff fb8d 	bl	8010748 <memcpy>
 801102e:	89a3      	ldrh	r3, [r4, #12]
 8011030:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011034:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011038:	81a3      	strh	r3, [r4, #12]
 801103a:	6126      	str	r6, [r4, #16]
 801103c:	6165      	str	r5, [r4, #20]
 801103e:	444e      	add	r6, r9
 8011040:	eba5 0509 	sub.w	r5, r5, r9
 8011044:	6026      	str	r6, [r4, #0]
 8011046:	60a5      	str	r5, [r4, #8]
 8011048:	463e      	mov	r6, r7
 801104a:	42be      	cmp	r6, r7
 801104c:	d900      	bls.n	8011050 <__ssputs_r+0x86>
 801104e:	463e      	mov	r6, r7
 8011050:	6820      	ldr	r0, [r4, #0]
 8011052:	4632      	mov	r2, r6
 8011054:	4641      	mov	r1, r8
 8011056:	f000 fe69 	bl	8011d2c <memmove>
 801105a:	68a3      	ldr	r3, [r4, #8]
 801105c:	1b9b      	subs	r3, r3, r6
 801105e:	60a3      	str	r3, [r4, #8]
 8011060:	6823      	ldr	r3, [r4, #0]
 8011062:	4433      	add	r3, r6
 8011064:	6023      	str	r3, [r4, #0]
 8011066:	2000      	movs	r0, #0
 8011068:	e7db      	b.n	8011022 <__ssputs_r+0x58>
 801106a:	462a      	mov	r2, r5
 801106c:	f7ff ff7e 	bl	8010f6c <_realloc_r>
 8011070:	4606      	mov	r6, r0
 8011072:	2800      	cmp	r0, #0
 8011074:	d1e1      	bne.n	801103a <__ssputs_r+0x70>
 8011076:	6921      	ldr	r1, [r4, #16]
 8011078:	4650      	mov	r0, sl
 801107a:	f7ff fb91 	bl	80107a0 <_free_r>
 801107e:	e7c7      	b.n	8011010 <__ssputs_r+0x46>

08011080 <_svfiprintf_r>:
 8011080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011084:	4698      	mov	r8, r3
 8011086:	898b      	ldrh	r3, [r1, #12]
 8011088:	061b      	lsls	r3, r3, #24
 801108a:	b09d      	sub	sp, #116	; 0x74
 801108c:	4607      	mov	r7, r0
 801108e:	460d      	mov	r5, r1
 8011090:	4614      	mov	r4, r2
 8011092:	d50e      	bpl.n	80110b2 <_svfiprintf_r+0x32>
 8011094:	690b      	ldr	r3, [r1, #16]
 8011096:	b963      	cbnz	r3, 80110b2 <_svfiprintf_r+0x32>
 8011098:	2140      	movs	r1, #64	; 0x40
 801109a:	f7ff fbed 	bl	8010878 <_malloc_r>
 801109e:	6028      	str	r0, [r5, #0]
 80110a0:	6128      	str	r0, [r5, #16]
 80110a2:	b920      	cbnz	r0, 80110ae <_svfiprintf_r+0x2e>
 80110a4:	230c      	movs	r3, #12
 80110a6:	603b      	str	r3, [r7, #0]
 80110a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80110ac:	e0d1      	b.n	8011252 <_svfiprintf_r+0x1d2>
 80110ae:	2340      	movs	r3, #64	; 0x40
 80110b0:	616b      	str	r3, [r5, #20]
 80110b2:	2300      	movs	r3, #0
 80110b4:	9309      	str	r3, [sp, #36]	; 0x24
 80110b6:	2320      	movs	r3, #32
 80110b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80110bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80110c0:	2330      	movs	r3, #48	; 0x30
 80110c2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801126c <_svfiprintf_r+0x1ec>
 80110c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80110ca:	f04f 0901 	mov.w	r9, #1
 80110ce:	4623      	mov	r3, r4
 80110d0:	469a      	mov	sl, r3
 80110d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80110d6:	b10a      	cbz	r2, 80110dc <_svfiprintf_r+0x5c>
 80110d8:	2a25      	cmp	r2, #37	; 0x25
 80110da:	d1f9      	bne.n	80110d0 <_svfiprintf_r+0x50>
 80110dc:	ebba 0b04 	subs.w	fp, sl, r4
 80110e0:	d00b      	beq.n	80110fa <_svfiprintf_r+0x7a>
 80110e2:	465b      	mov	r3, fp
 80110e4:	4622      	mov	r2, r4
 80110e6:	4629      	mov	r1, r5
 80110e8:	4638      	mov	r0, r7
 80110ea:	f7ff ff6e 	bl	8010fca <__ssputs_r>
 80110ee:	3001      	adds	r0, #1
 80110f0:	f000 80aa 	beq.w	8011248 <_svfiprintf_r+0x1c8>
 80110f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80110f6:	445a      	add	r2, fp
 80110f8:	9209      	str	r2, [sp, #36]	; 0x24
 80110fa:	f89a 3000 	ldrb.w	r3, [sl]
 80110fe:	2b00      	cmp	r3, #0
 8011100:	f000 80a2 	beq.w	8011248 <_svfiprintf_r+0x1c8>
 8011104:	2300      	movs	r3, #0
 8011106:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801110a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801110e:	f10a 0a01 	add.w	sl, sl, #1
 8011112:	9304      	str	r3, [sp, #16]
 8011114:	9307      	str	r3, [sp, #28]
 8011116:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801111a:	931a      	str	r3, [sp, #104]	; 0x68
 801111c:	4654      	mov	r4, sl
 801111e:	2205      	movs	r2, #5
 8011120:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011124:	4851      	ldr	r0, [pc, #324]	; (801126c <_svfiprintf_r+0x1ec>)
 8011126:	f7ef f88b 	bl	8000240 <memchr>
 801112a:	9a04      	ldr	r2, [sp, #16]
 801112c:	b9d8      	cbnz	r0, 8011166 <_svfiprintf_r+0xe6>
 801112e:	06d0      	lsls	r0, r2, #27
 8011130:	bf44      	itt	mi
 8011132:	2320      	movmi	r3, #32
 8011134:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011138:	0711      	lsls	r1, r2, #28
 801113a:	bf44      	itt	mi
 801113c:	232b      	movmi	r3, #43	; 0x2b
 801113e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011142:	f89a 3000 	ldrb.w	r3, [sl]
 8011146:	2b2a      	cmp	r3, #42	; 0x2a
 8011148:	d015      	beq.n	8011176 <_svfiprintf_r+0xf6>
 801114a:	9a07      	ldr	r2, [sp, #28]
 801114c:	4654      	mov	r4, sl
 801114e:	2000      	movs	r0, #0
 8011150:	f04f 0c0a 	mov.w	ip, #10
 8011154:	4621      	mov	r1, r4
 8011156:	f811 3b01 	ldrb.w	r3, [r1], #1
 801115a:	3b30      	subs	r3, #48	; 0x30
 801115c:	2b09      	cmp	r3, #9
 801115e:	d94e      	bls.n	80111fe <_svfiprintf_r+0x17e>
 8011160:	b1b0      	cbz	r0, 8011190 <_svfiprintf_r+0x110>
 8011162:	9207      	str	r2, [sp, #28]
 8011164:	e014      	b.n	8011190 <_svfiprintf_r+0x110>
 8011166:	eba0 0308 	sub.w	r3, r0, r8
 801116a:	fa09 f303 	lsl.w	r3, r9, r3
 801116e:	4313      	orrs	r3, r2
 8011170:	9304      	str	r3, [sp, #16]
 8011172:	46a2      	mov	sl, r4
 8011174:	e7d2      	b.n	801111c <_svfiprintf_r+0x9c>
 8011176:	9b03      	ldr	r3, [sp, #12]
 8011178:	1d19      	adds	r1, r3, #4
 801117a:	681b      	ldr	r3, [r3, #0]
 801117c:	9103      	str	r1, [sp, #12]
 801117e:	2b00      	cmp	r3, #0
 8011180:	bfbb      	ittet	lt
 8011182:	425b      	neglt	r3, r3
 8011184:	f042 0202 	orrlt.w	r2, r2, #2
 8011188:	9307      	strge	r3, [sp, #28]
 801118a:	9307      	strlt	r3, [sp, #28]
 801118c:	bfb8      	it	lt
 801118e:	9204      	strlt	r2, [sp, #16]
 8011190:	7823      	ldrb	r3, [r4, #0]
 8011192:	2b2e      	cmp	r3, #46	; 0x2e
 8011194:	d10c      	bne.n	80111b0 <_svfiprintf_r+0x130>
 8011196:	7863      	ldrb	r3, [r4, #1]
 8011198:	2b2a      	cmp	r3, #42	; 0x2a
 801119a:	d135      	bne.n	8011208 <_svfiprintf_r+0x188>
 801119c:	9b03      	ldr	r3, [sp, #12]
 801119e:	1d1a      	adds	r2, r3, #4
 80111a0:	681b      	ldr	r3, [r3, #0]
 80111a2:	9203      	str	r2, [sp, #12]
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	bfb8      	it	lt
 80111a8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80111ac:	3402      	adds	r4, #2
 80111ae:	9305      	str	r3, [sp, #20]
 80111b0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801127c <_svfiprintf_r+0x1fc>
 80111b4:	7821      	ldrb	r1, [r4, #0]
 80111b6:	2203      	movs	r2, #3
 80111b8:	4650      	mov	r0, sl
 80111ba:	f7ef f841 	bl	8000240 <memchr>
 80111be:	b140      	cbz	r0, 80111d2 <_svfiprintf_r+0x152>
 80111c0:	2340      	movs	r3, #64	; 0x40
 80111c2:	eba0 000a 	sub.w	r0, r0, sl
 80111c6:	fa03 f000 	lsl.w	r0, r3, r0
 80111ca:	9b04      	ldr	r3, [sp, #16]
 80111cc:	4303      	orrs	r3, r0
 80111ce:	3401      	adds	r4, #1
 80111d0:	9304      	str	r3, [sp, #16]
 80111d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80111d6:	4826      	ldr	r0, [pc, #152]	; (8011270 <_svfiprintf_r+0x1f0>)
 80111d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80111dc:	2206      	movs	r2, #6
 80111de:	f7ef f82f 	bl	8000240 <memchr>
 80111e2:	2800      	cmp	r0, #0
 80111e4:	d038      	beq.n	8011258 <_svfiprintf_r+0x1d8>
 80111e6:	4b23      	ldr	r3, [pc, #140]	; (8011274 <_svfiprintf_r+0x1f4>)
 80111e8:	bb1b      	cbnz	r3, 8011232 <_svfiprintf_r+0x1b2>
 80111ea:	9b03      	ldr	r3, [sp, #12]
 80111ec:	3307      	adds	r3, #7
 80111ee:	f023 0307 	bic.w	r3, r3, #7
 80111f2:	3308      	adds	r3, #8
 80111f4:	9303      	str	r3, [sp, #12]
 80111f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80111f8:	4433      	add	r3, r6
 80111fa:	9309      	str	r3, [sp, #36]	; 0x24
 80111fc:	e767      	b.n	80110ce <_svfiprintf_r+0x4e>
 80111fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8011202:	460c      	mov	r4, r1
 8011204:	2001      	movs	r0, #1
 8011206:	e7a5      	b.n	8011154 <_svfiprintf_r+0xd4>
 8011208:	2300      	movs	r3, #0
 801120a:	3401      	adds	r4, #1
 801120c:	9305      	str	r3, [sp, #20]
 801120e:	4619      	mov	r1, r3
 8011210:	f04f 0c0a 	mov.w	ip, #10
 8011214:	4620      	mov	r0, r4
 8011216:	f810 2b01 	ldrb.w	r2, [r0], #1
 801121a:	3a30      	subs	r2, #48	; 0x30
 801121c:	2a09      	cmp	r2, #9
 801121e:	d903      	bls.n	8011228 <_svfiprintf_r+0x1a8>
 8011220:	2b00      	cmp	r3, #0
 8011222:	d0c5      	beq.n	80111b0 <_svfiprintf_r+0x130>
 8011224:	9105      	str	r1, [sp, #20]
 8011226:	e7c3      	b.n	80111b0 <_svfiprintf_r+0x130>
 8011228:	fb0c 2101 	mla	r1, ip, r1, r2
 801122c:	4604      	mov	r4, r0
 801122e:	2301      	movs	r3, #1
 8011230:	e7f0      	b.n	8011214 <_svfiprintf_r+0x194>
 8011232:	ab03      	add	r3, sp, #12
 8011234:	9300      	str	r3, [sp, #0]
 8011236:	462a      	mov	r2, r5
 8011238:	4b0f      	ldr	r3, [pc, #60]	; (8011278 <_svfiprintf_r+0x1f8>)
 801123a:	a904      	add	r1, sp, #16
 801123c:	4638      	mov	r0, r7
 801123e:	f3af 8000 	nop.w
 8011242:	1c42      	adds	r2, r0, #1
 8011244:	4606      	mov	r6, r0
 8011246:	d1d6      	bne.n	80111f6 <_svfiprintf_r+0x176>
 8011248:	89ab      	ldrh	r3, [r5, #12]
 801124a:	065b      	lsls	r3, r3, #25
 801124c:	f53f af2c 	bmi.w	80110a8 <_svfiprintf_r+0x28>
 8011250:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011252:	b01d      	add	sp, #116	; 0x74
 8011254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011258:	ab03      	add	r3, sp, #12
 801125a:	9300      	str	r3, [sp, #0]
 801125c:	462a      	mov	r2, r5
 801125e:	4b06      	ldr	r3, [pc, #24]	; (8011278 <_svfiprintf_r+0x1f8>)
 8011260:	a904      	add	r1, sp, #16
 8011262:	4638      	mov	r0, r7
 8011264:	f000 f9d4 	bl	8011610 <_printf_i>
 8011268:	e7eb      	b.n	8011242 <_svfiprintf_r+0x1c2>
 801126a:	bf00      	nop
 801126c:	0801294c 	.word	0x0801294c
 8011270:	08012956 	.word	0x08012956
 8011274:	00000000 	.word	0x00000000
 8011278:	08010fcb 	.word	0x08010fcb
 801127c:	08012952 	.word	0x08012952

08011280 <__sfputc_r>:
 8011280:	6893      	ldr	r3, [r2, #8]
 8011282:	3b01      	subs	r3, #1
 8011284:	2b00      	cmp	r3, #0
 8011286:	b410      	push	{r4}
 8011288:	6093      	str	r3, [r2, #8]
 801128a:	da08      	bge.n	801129e <__sfputc_r+0x1e>
 801128c:	6994      	ldr	r4, [r2, #24]
 801128e:	42a3      	cmp	r3, r4
 8011290:	db01      	blt.n	8011296 <__sfputc_r+0x16>
 8011292:	290a      	cmp	r1, #10
 8011294:	d103      	bne.n	801129e <__sfputc_r+0x1e>
 8011296:	f85d 4b04 	ldr.w	r4, [sp], #4
 801129a:	f000 bb23 	b.w	80118e4 <__swbuf_r>
 801129e:	6813      	ldr	r3, [r2, #0]
 80112a0:	1c58      	adds	r0, r3, #1
 80112a2:	6010      	str	r0, [r2, #0]
 80112a4:	7019      	strb	r1, [r3, #0]
 80112a6:	4608      	mov	r0, r1
 80112a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80112ac:	4770      	bx	lr

080112ae <__sfputs_r>:
 80112ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112b0:	4606      	mov	r6, r0
 80112b2:	460f      	mov	r7, r1
 80112b4:	4614      	mov	r4, r2
 80112b6:	18d5      	adds	r5, r2, r3
 80112b8:	42ac      	cmp	r4, r5
 80112ba:	d101      	bne.n	80112c0 <__sfputs_r+0x12>
 80112bc:	2000      	movs	r0, #0
 80112be:	e007      	b.n	80112d0 <__sfputs_r+0x22>
 80112c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80112c4:	463a      	mov	r2, r7
 80112c6:	4630      	mov	r0, r6
 80112c8:	f7ff ffda 	bl	8011280 <__sfputc_r>
 80112cc:	1c43      	adds	r3, r0, #1
 80112ce:	d1f3      	bne.n	80112b8 <__sfputs_r+0xa>
 80112d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080112d4 <_vfiprintf_r>:
 80112d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112d8:	460d      	mov	r5, r1
 80112da:	b09d      	sub	sp, #116	; 0x74
 80112dc:	4614      	mov	r4, r2
 80112de:	4698      	mov	r8, r3
 80112e0:	4606      	mov	r6, r0
 80112e2:	b118      	cbz	r0, 80112ec <_vfiprintf_r+0x18>
 80112e4:	6983      	ldr	r3, [r0, #24]
 80112e6:	b90b      	cbnz	r3, 80112ec <_vfiprintf_r+0x18>
 80112e8:	f7ff fd82 	bl	8010df0 <__sinit>
 80112ec:	4b89      	ldr	r3, [pc, #548]	; (8011514 <_vfiprintf_r+0x240>)
 80112ee:	429d      	cmp	r5, r3
 80112f0:	d11b      	bne.n	801132a <_vfiprintf_r+0x56>
 80112f2:	6875      	ldr	r5, [r6, #4]
 80112f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80112f6:	07d9      	lsls	r1, r3, #31
 80112f8:	d405      	bmi.n	8011306 <_vfiprintf_r+0x32>
 80112fa:	89ab      	ldrh	r3, [r5, #12]
 80112fc:	059a      	lsls	r2, r3, #22
 80112fe:	d402      	bmi.n	8011306 <_vfiprintf_r+0x32>
 8011300:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011302:	f7ff fe25 	bl	8010f50 <__retarget_lock_acquire_recursive>
 8011306:	89ab      	ldrh	r3, [r5, #12]
 8011308:	071b      	lsls	r3, r3, #28
 801130a:	d501      	bpl.n	8011310 <_vfiprintf_r+0x3c>
 801130c:	692b      	ldr	r3, [r5, #16]
 801130e:	b9eb      	cbnz	r3, 801134c <_vfiprintf_r+0x78>
 8011310:	4629      	mov	r1, r5
 8011312:	4630      	mov	r0, r6
 8011314:	f000 fb4a 	bl	80119ac <__swsetup_r>
 8011318:	b1c0      	cbz	r0, 801134c <_vfiprintf_r+0x78>
 801131a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801131c:	07dc      	lsls	r4, r3, #31
 801131e:	d50e      	bpl.n	801133e <_vfiprintf_r+0x6a>
 8011320:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011324:	b01d      	add	sp, #116	; 0x74
 8011326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801132a:	4b7b      	ldr	r3, [pc, #492]	; (8011518 <_vfiprintf_r+0x244>)
 801132c:	429d      	cmp	r5, r3
 801132e:	d101      	bne.n	8011334 <_vfiprintf_r+0x60>
 8011330:	68b5      	ldr	r5, [r6, #8]
 8011332:	e7df      	b.n	80112f4 <_vfiprintf_r+0x20>
 8011334:	4b79      	ldr	r3, [pc, #484]	; (801151c <_vfiprintf_r+0x248>)
 8011336:	429d      	cmp	r5, r3
 8011338:	bf08      	it	eq
 801133a:	68f5      	ldreq	r5, [r6, #12]
 801133c:	e7da      	b.n	80112f4 <_vfiprintf_r+0x20>
 801133e:	89ab      	ldrh	r3, [r5, #12]
 8011340:	0598      	lsls	r0, r3, #22
 8011342:	d4ed      	bmi.n	8011320 <_vfiprintf_r+0x4c>
 8011344:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011346:	f7ff fe04 	bl	8010f52 <__retarget_lock_release_recursive>
 801134a:	e7e9      	b.n	8011320 <_vfiprintf_r+0x4c>
 801134c:	2300      	movs	r3, #0
 801134e:	9309      	str	r3, [sp, #36]	; 0x24
 8011350:	2320      	movs	r3, #32
 8011352:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011356:	f8cd 800c 	str.w	r8, [sp, #12]
 801135a:	2330      	movs	r3, #48	; 0x30
 801135c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011520 <_vfiprintf_r+0x24c>
 8011360:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011364:	f04f 0901 	mov.w	r9, #1
 8011368:	4623      	mov	r3, r4
 801136a:	469a      	mov	sl, r3
 801136c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011370:	b10a      	cbz	r2, 8011376 <_vfiprintf_r+0xa2>
 8011372:	2a25      	cmp	r2, #37	; 0x25
 8011374:	d1f9      	bne.n	801136a <_vfiprintf_r+0x96>
 8011376:	ebba 0b04 	subs.w	fp, sl, r4
 801137a:	d00b      	beq.n	8011394 <_vfiprintf_r+0xc0>
 801137c:	465b      	mov	r3, fp
 801137e:	4622      	mov	r2, r4
 8011380:	4629      	mov	r1, r5
 8011382:	4630      	mov	r0, r6
 8011384:	f7ff ff93 	bl	80112ae <__sfputs_r>
 8011388:	3001      	adds	r0, #1
 801138a:	f000 80aa 	beq.w	80114e2 <_vfiprintf_r+0x20e>
 801138e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011390:	445a      	add	r2, fp
 8011392:	9209      	str	r2, [sp, #36]	; 0x24
 8011394:	f89a 3000 	ldrb.w	r3, [sl]
 8011398:	2b00      	cmp	r3, #0
 801139a:	f000 80a2 	beq.w	80114e2 <_vfiprintf_r+0x20e>
 801139e:	2300      	movs	r3, #0
 80113a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80113a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80113a8:	f10a 0a01 	add.w	sl, sl, #1
 80113ac:	9304      	str	r3, [sp, #16]
 80113ae:	9307      	str	r3, [sp, #28]
 80113b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80113b4:	931a      	str	r3, [sp, #104]	; 0x68
 80113b6:	4654      	mov	r4, sl
 80113b8:	2205      	movs	r2, #5
 80113ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80113be:	4858      	ldr	r0, [pc, #352]	; (8011520 <_vfiprintf_r+0x24c>)
 80113c0:	f7ee ff3e 	bl	8000240 <memchr>
 80113c4:	9a04      	ldr	r2, [sp, #16]
 80113c6:	b9d8      	cbnz	r0, 8011400 <_vfiprintf_r+0x12c>
 80113c8:	06d1      	lsls	r1, r2, #27
 80113ca:	bf44      	itt	mi
 80113cc:	2320      	movmi	r3, #32
 80113ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80113d2:	0713      	lsls	r3, r2, #28
 80113d4:	bf44      	itt	mi
 80113d6:	232b      	movmi	r3, #43	; 0x2b
 80113d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80113dc:	f89a 3000 	ldrb.w	r3, [sl]
 80113e0:	2b2a      	cmp	r3, #42	; 0x2a
 80113e2:	d015      	beq.n	8011410 <_vfiprintf_r+0x13c>
 80113e4:	9a07      	ldr	r2, [sp, #28]
 80113e6:	4654      	mov	r4, sl
 80113e8:	2000      	movs	r0, #0
 80113ea:	f04f 0c0a 	mov.w	ip, #10
 80113ee:	4621      	mov	r1, r4
 80113f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80113f4:	3b30      	subs	r3, #48	; 0x30
 80113f6:	2b09      	cmp	r3, #9
 80113f8:	d94e      	bls.n	8011498 <_vfiprintf_r+0x1c4>
 80113fa:	b1b0      	cbz	r0, 801142a <_vfiprintf_r+0x156>
 80113fc:	9207      	str	r2, [sp, #28]
 80113fe:	e014      	b.n	801142a <_vfiprintf_r+0x156>
 8011400:	eba0 0308 	sub.w	r3, r0, r8
 8011404:	fa09 f303 	lsl.w	r3, r9, r3
 8011408:	4313      	orrs	r3, r2
 801140a:	9304      	str	r3, [sp, #16]
 801140c:	46a2      	mov	sl, r4
 801140e:	e7d2      	b.n	80113b6 <_vfiprintf_r+0xe2>
 8011410:	9b03      	ldr	r3, [sp, #12]
 8011412:	1d19      	adds	r1, r3, #4
 8011414:	681b      	ldr	r3, [r3, #0]
 8011416:	9103      	str	r1, [sp, #12]
 8011418:	2b00      	cmp	r3, #0
 801141a:	bfbb      	ittet	lt
 801141c:	425b      	neglt	r3, r3
 801141e:	f042 0202 	orrlt.w	r2, r2, #2
 8011422:	9307      	strge	r3, [sp, #28]
 8011424:	9307      	strlt	r3, [sp, #28]
 8011426:	bfb8      	it	lt
 8011428:	9204      	strlt	r2, [sp, #16]
 801142a:	7823      	ldrb	r3, [r4, #0]
 801142c:	2b2e      	cmp	r3, #46	; 0x2e
 801142e:	d10c      	bne.n	801144a <_vfiprintf_r+0x176>
 8011430:	7863      	ldrb	r3, [r4, #1]
 8011432:	2b2a      	cmp	r3, #42	; 0x2a
 8011434:	d135      	bne.n	80114a2 <_vfiprintf_r+0x1ce>
 8011436:	9b03      	ldr	r3, [sp, #12]
 8011438:	1d1a      	adds	r2, r3, #4
 801143a:	681b      	ldr	r3, [r3, #0]
 801143c:	9203      	str	r2, [sp, #12]
 801143e:	2b00      	cmp	r3, #0
 8011440:	bfb8      	it	lt
 8011442:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8011446:	3402      	adds	r4, #2
 8011448:	9305      	str	r3, [sp, #20]
 801144a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011530 <_vfiprintf_r+0x25c>
 801144e:	7821      	ldrb	r1, [r4, #0]
 8011450:	2203      	movs	r2, #3
 8011452:	4650      	mov	r0, sl
 8011454:	f7ee fef4 	bl	8000240 <memchr>
 8011458:	b140      	cbz	r0, 801146c <_vfiprintf_r+0x198>
 801145a:	2340      	movs	r3, #64	; 0x40
 801145c:	eba0 000a 	sub.w	r0, r0, sl
 8011460:	fa03 f000 	lsl.w	r0, r3, r0
 8011464:	9b04      	ldr	r3, [sp, #16]
 8011466:	4303      	orrs	r3, r0
 8011468:	3401      	adds	r4, #1
 801146a:	9304      	str	r3, [sp, #16]
 801146c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011470:	482c      	ldr	r0, [pc, #176]	; (8011524 <_vfiprintf_r+0x250>)
 8011472:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011476:	2206      	movs	r2, #6
 8011478:	f7ee fee2 	bl	8000240 <memchr>
 801147c:	2800      	cmp	r0, #0
 801147e:	d03f      	beq.n	8011500 <_vfiprintf_r+0x22c>
 8011480:	4b29      	ldr	r3, [pc, #164]	; (8011528 <_vfiprintf_r+0x254>)
 8011482:	bb1b      	cbnz	r3, 80114cc <_vfiprintf_r+0x1f8>
 8011484:	9b03      	ldr	r3, [sp, #12]
 8011486:	3307      	adds	r3, #7
 8011488:	f023 0307 	bic.w	r3, r3, #7
 801148c:	3308      	adds	r3, #8
 801148e:	9303      	str	r3, [sp, #12]
 8011490:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011492:	443b      	add	r3, r7
 8011494:	9309      	str	r3, [sp, #36]	; 0x24
 8011496:	e767      	b.n	8011368 <_vfiprintf_r+0x94>
 8011498:	fb0c 3202 	mla	r2, ip, r2, r3
 801149c:	460c      	mov	r4, r1
 801149e:	2001      	movs	r0, #1
 80114a0:	e7a5      	b.n	80113ee <_vfiprintf_r+0x11a>
 80114a2:	2300      	movs	r3, #0
 80114a4:	3401      	adds	r4, #1
 80114a6:	9305      	str	r3, [sp, #20]
 80114a8:	4619      	mov	r1, r3
 80114aa:	f04f 0c0a 	mov.w	ip, #10
 80114ae:	4620      	mov	r0, r4
 80114b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80114b4:	3a30      	subs	r2, #48	; 0x30
 80114b6:	2a09      	cmp	r2, #9
 80114b8:	d903      	bls.n	80114c2 <_vfiprintf_r+0x1ee>
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	d0c5      	beq.n	801144a <_vfiprintf_r+0x176>
 80114be:	9105      	str	r1, [sp, #20]
 80114c0:	e7c3      	b.n	801144a <_vfiprintf_r+0x176>
 80114c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80114c6:	4604      	mov	r4, r0
 80114c8:	2301      	movs	r3, #1
 80114ca:	e7f0      	b.n	80114ae <_vfiprintf_r+0x1da>
 80114cc:	ab03      	add	r3, sp, #12
 80114ce:	9300      	str	r3, [sp, #0]
 80114d0:	462a      	mov	r2, r5
 80114d2:	4b16      	ldr	r3, [pc, #88]	; (801152c <_vfiprintf_r+0x258>)
 80114d4:	a904      	add	r1, sp, #16
 80114d6:	4630      	mov	r0, r6
 80114d8:	f3af 8000 	nop.w
 80114dc:	4607      	mov	r7, r0
 80114de:	1c78      	adds	r0, r7, #1
 80114e0:	d1d6      	bne.n	8011490 <_vfiprintf_r+0x1bc>
 80114e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80114e4:	07d9      	lsls	r1, r3, #31
 80114e6:	d405      	bmi.n	80114f4 <_vfiprintf_r+0x220>
 80114e8:	89ab      	ldrh	r3, [r5, #12]
 80114ea:	059a      	lsls	r2, r3, #22
 80114ec:	d402      	bmi.n	80114f4 <_vfiprintf_r+0x220>
 80114ee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80114f0:	f7ff fd2f 	bl	8010f52 <__retarget_lock_release_recursive>
 80114f4:	89ab      	ldrh	r3, [r5, #12]
 80114f6:	065b      	lsls	r3, r3, #25
 80114f8:	f53f af12 	bmi.w	8011320 <_vfiprintf_r+0x4c>
 80114fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80114fe:	e711      	b.n	8011324 <_vfiprintf_r+0x50>
 8011500:	ab03      	add	r3, sp, #12
 8011502:	9300      	str	r3, [sp, #0]
 8011504:	462a      	mov	r2, r5
 8011506:	4b09      	ldr	r3, [pc, #36]	; (801152c <_vfiprintf_r+0x258>)
 8011508:	a904      	add	r1, sp, #16
 801150a:	4630      	mov	r0, r6
 801150c:	f000 f880 	bl	8011610 <_printf_i>
 8011510:	e7e4      	b.n	80114dc <_vfiprintf_r+0x208>
 8011512:	bf00      	nop
 8011514:	0801290c 	.word	0x0801290c
 8011518:	0801292c 	.word	0x0801292c
 801151c:	080128ec 	.word	0x080128ec
 8011520:	0801294c 	.word	0x0801294c
 8011524:	08012956 	.word	0x08012956
 8011528:	00000000 	.word	0x00000000
 801152c:	080112af 	.word	0x080112af
 8011530:	08012952 	.word	0x08012952

08011534 <_printf_common>:
 8011534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011538:	4616      	mov	r6, r2
 801153a:	4699      	mov	r9, r3
 801153c:	688a      	ldr	r2, [r1, #8]
 801153e:	690b      	ldr	r3, [r1, #16]
 8011540:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011544:	4293      	cmp	r3, r2
 8011546:	bfb8      	it	lt
 8011548:	4613      	movlt	r3, r2
 801154a:	6033      	str	r3, [r6, #0]
 801154c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011550:	4607      	mov	r7, r0
 8011552:	460c      	mov	r4, r1
 8011554:	b10a      	cbz	r2, 801155a <_printf_common+0x26>
 8011556:	3301      	adds	r3, #1
 8011558:	6033      	str	r3, [r6, #0]
 801155a:	6823      	ldr	r3, [r4, #0]
 801155c:	0699      	lsls	r1, r3, #26
 801155e:	bf42      	ittt	mi
 8011560:	6833      	ldrmi	r3, [r6, #0]
 8011562:	3302      	addmi	r3, #2
 8011564:	6033      	strmi	r3, [r6, #0]
 8011566:	6825      	ldr	r5, [r4, #0]
 8011568:	f015 0506 	ands.w	r5, r5, #6
 801156c:	d106      	bne.n	801157c <_printf_common+0x48>
 801156e:	f104 0a19 	add.w	sl, r4, #25
 8011572:	68e3      	ldr	r3, [r4, #12]
 8011574:	6832      	ldr	r2, [r6, #0]
 8011576:	1a9b      	subs	r3, r3, r2
 8011578:	42ab      	cmp	r3, r5
 801157a:	dc26      	bgt.n	80115ca <_printf_common+0x96>
 801157c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011580:	1e13      	subs	r3, r2, #0
 8011582:	6822      	ldr	r2, [r4, #0]
 8011584:	bf18      	it	ne
 8011586:	2301      	movne	r3, #1
 8011588:	0692      	lsls	r2, r2, #26
 801158a:	d42b      	bmi.n	80115e4 <_printf_common+0xb0>
 801158c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011590:	4649      	mov	r1, r9
 8011592:	4638      	mov	r0, r7
 8011594:	47c0      	blx	r8
 8011596:	3001      	adds	r0, #1
 8011598:	d01e      	beq.n	80115d8 <_printf_common+0xa4>
 801159a:	6823      	ldr	r3, [r4, #0]
 801159c:	68e5      	ldr	r5, [r4, #12]
 801159e:	6832      	ldr	r2, [r6, #0]
 80115a0:	f003 0306 	and.w	r3, r3, #6
 80115a4:	2b04      	cmp	r3, #4
 80115a6:	bf08      	it	eq
 80115a8:	1aad      	subeq	r5, r5, r2
 80115aa:	68a3      	ldr	r3, [r4, #8]
 80115ac:	6922      	ldr	r2, [r4, #16]
 80115ae:	bf0c      	ite	eq
 80115b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80115b4:	2500      	movne	r5, #0
 80115b6:	4293      	cmp	r3, r2
 80115b8:	bfc4      	itt	gt
 80115ba:	1a9b      	subgt	r3, r3, r2
 80115bc:	18ed      	addgt	r5, r5, r3
 80115be:	2600      	movs	r6, #0
 80115c0:	341a      	adds	r4, #26
 80115c2:	42b5      	cmp	r5, r6
 80115c4:	d11a      	bne.n	80115fc <_printf_common+0xc8>
 80115c6:	2000      	movs	r0, #0
 80115c8:	e008      	b.n	80115dc <_printf_common+0xa8>
 80115ca:	2301      	movs	r3, #1
 80115cc:	4652      	mov	r2, sl
 80115ce:	4649      	mov	r1, r9
 80115d0:	4638      	mov	r0, r7
 80115d2:	47c0      	blx	r8
 80115d4:	3001      	adds	r0, #1
 80115d6:	d103      	bne.n	80115e0 <_printf_common+0xac>
 80115d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80115dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80115e0:	3501      	adds	r5, #1
 80115e2:	e7c6      	b.n	8011572 <_printf_common+0x3e>
 80115e4:	18e1      	adds	r1, r4, r3
 80115e6:	1c5a      	adds	r2, r3, #1
 80115e8:	2030      	movs	r0, #48	; 0x30
 80115ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80115ee:	4422      	add	r2, r4
 80115f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80115f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80115f8:	3302      	adds	r3, #2
 80115fa:	e7c7      	b.n	801158c <_printf_common+0x58>
 80115fc:	2301      	movs	r3, #1
 80115fe:	4622      	mov	r2, r4
 8011600:	4649      	mov	r1, r9
 8011602:	4638      	mov	r0, r7
 8011604:	47c0      	blx	r8
 8011606:	3001      	adds	r0, #1
 8011608:	d0e6      	beq.n	80115d8 <_printf_common+0xa4>
 801160a:	3601      	adds	r6, #1
 801160c:	e7d9      	b.n	80115c2 <_printf_common+0x8e>
	...

08011610 <_printf_i>:
 8011610:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011614:	7e0f      	ldrb	r7, [r1, #24]
 8011616:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011618:	2f78      	cmp	r7, #120	; 0x78
 801161a:	4691      	mov	r9, r2
 801161c:	4680      	mov	r8, r0
 801161e:	460c      	mov	r4, r1
 8011620:	469a      	mov	sl, r3
 8011622:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011626:	d807      	bhi.n	8011638 <_printf_i+0x28>
 8011628:	2f62      	cmp	r7, #98	; 0x62
 801162a:	d80a      	bhi.n	8011642 <_printf_i+0x32>
 801162c:	2f00      	cmp	r7, #0
 801162e:	f000 80d8 	beq.w	80117e2 <_printf_i+0x1d2>
 8011632:	2f58      	cmp	r7, #88	; 0x58
 8011634:	f000 80a3 	beq.w	801177e <_printf_i+0x16e>
 8011638:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801163c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011640:	e03a      	b.n	80116b8 <_printf_i+0xa8>
 8011642:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011646:	2b15      	cmp	r3, #21
 8011648:	d8f6      	bhi.n	8011638 <_printf_i+0x28>
 801164a:	a101      	add	r1, pc, #4	; (adr r1, 8011650 <_printf_i+0x40>)
 801164c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011650:	080116a9 	.word	0x080116a9
 8011654:	080116bd 	.word	0x080116bd
 8011658:	08011639 	.word	0x08011639
 801165c:	08011639 	.word	0x08011639
 8011660:	08011639 	.word	0x08011639
 8011664:	08011639 	.word	0x08011639
 8011668:	080116bd 	.word	0x080116bd
 801166c:	08011639 	.word	0x08011639
 8011670:	08011639 	.word	0x08011639
 8011674:	08011639 	.word	0x08011639
 8011678:	08011639 	.word	0x08011639
 801167c:	080117c9 	.word	0x080117c9
 8011680:	080116ed 	.word	0x080116ed
 8011684:	080117ab 	.word	0x080117ab
 8011688:	08011639 	.word	0x08011639
 801168c:	08011639 	.word	0x08011639
 8011690:	080117eb 	.word	0x080117eb
 8011694:	08011639 	.word	0x08011639
 8011698:	080116ed 	.word	0x080116ed
 801169c:	08011639 	.word	0x08011639
 80116a0:	08011639 	.word	0x08011639
 80116a4:	080117b3 	.word	0x080117b3
 80116a8:	682b      	ldr	r3, [r5, #0]
 80116aa:	1d1a      	adds	r2, r3, #4
 80116ac:	681b      	ldr	r3, [r3, #0]
 80116ae:	602a      	str	r2, [r5, #0]
 80116b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80116b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80116b8:	2301      	movs	r3, #1
 80116ba:	e0a3      	b.n	8011804 <_printf_i+0x1f4>
 80116bc:	6820      	ldr	r0, [r4, #0]
 80116be:	6829      	ldr	r1, [r5, #0]
 80116c0:	0606      	lsls	r6, r0, #24
 80116c2:	f101 0304 	add.w	r3, r1, #4
 80116c6:	d50a      	bpl.n	80116de <_printf_i+0xce>
 80116c8:	680e      	ldr	r6, [r1, #0]
 80116ca:	602b      	str	r3, [r5, #0]
 80116cc:	2e00      	cmp	r6, #0
 80116ce:	da03      	bge.n	80116d8 <_printf_i+0xc8>
 80116d0:	232d      	movs	r3, #45	; 0x2d
 80116d2:	4276      	negs	r6, r6
 80116d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80116d8:	485e      	ldr	r0, [pc, #376]	; (8011854 <_printf_i+0x244>)
 80116da:	230a      	movs	r3, #10
 80116dc:	e019      	b.n	8011712 <_printf_i+0x102>
 80116de:	680e      	ldr	r6, [r1, #0]
 80116e0:	602b      	str	r3, [r5, #0]
 80116e2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80116e6:	bf18      	it	ne
 80116e8:	b236      	sxthne	r6, r6
 80116ea:	e7ef      	b.n	80116cc <_printf_i+0xbc>
 80116ec:	682b      	ldr	r3, [r5, #0]
 80116ee:	6820      	ldr	r0, [r4, #0]
 80116f0:	1d19      	adds	r1, r3, #4
 80116f2:	6029      	str	r1, [r5, #0]
 80116f4:	0601      	lsls	r1, r0, #24
 80116f6:	d501      	bpl.n	80116fc <_printf_i+0xec>
 80116f8:	681e      	ldr	r6, [r3, #0]
 80116fa:	e002      	b.n	8011702 <_printf_i+0xf2>
 80116fc:	0646      	lsls	r6, r0, #25
 80116fe:	d5fb      	bpl.n	80116f8 <_printf_i+0xe8>
 8011700:	881e      	ldrh	r6, [r3, #0]
 8011702:	4854      	ldr	r0, [pc, #336]	; (8011854 <_printf_i+0x244>)
 8011704:	2f6f      	cmp	r7, #111	; 0x6f
 8011706:	bf0c      	ite	eq
 8011708:	2308      	moveq	r3, #8
 801170a:	230a      	movne	r3, #10
 801170c:	2100      	movs	r1, #0
 801170e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011712:	6865      	ldr	r5, [r4, #4]
 8011714:	60a5      	str	r5, [r4, #8]
 8011716:	2d00      	cmp	r5, #0
 8011718:	bfa2      	ittt	ge
 801171a:	6821      	ldrge	r1, [r4, #0]
 801171c:	f021 0104 	bicge.w	r1, r1, #4
 8011720:	6021      	strge	r1, [r4, #0]
 8011722:	b90e      	cbnz	r6, 8011728 <_printf_i+0x118>
 8011724:	2d00      	cmp	r5, #0
 8011726:	d04d      	beq.n	80117c4 <_printf_i+0x1b4>
 8011728:	4615      	mov	r5, r2
 801172a:	fbb6 f1f3 	udiv	r1, r6, r3
 801172e:	fb03 6711 	mls	r7, r3, r1, r6
 8011732:	5dc7      	ldrb	r7, [r0, r7]
 8011734:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011738:	4637      	mov	r7, r6
 801173a:	42bb      	cmp	r3, r7
 801173c:	460e      	mov	r6, r1
 801173e:	d9f4      	bls.n	801172a <_printf_i+0x11a>
 8011740:	2b08      	cmp	r3, #8
 8011742:	d10b      	bne.n	801175c <_printf_i+0x14c>
 8011744:	6823      	ldr	r3, [r4, #0]
 8011746:	07de      	lsls	r6, r3, #31
 8011748:	d508      	bpl.n	801175c <_printf_i+0x14c>
 801174a:	6923      	ldr	r3, [r4, #16]
 801174c:	6861      	ldr	r1, [r4, #4]
 801174e:	4299      	cmp	r1, r3
 8011750:	bfde      	ittt	le
 8011752:	2330      	movle	r3, #48	; 0x30
 8011754:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011758:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801175c:	1b52      	subs	r2, r2, r5
 801175e:	6122      	str	r2, [r4, #16]
 8011760:	f8cd a000 	str.w	sl, [sp]
 8011764:	464b      	mov	r3, r9
 8011766:	aa03      	add	r2, sp, #12
 8011768:	4621      	mov	r1, r4
 801176a:	4640      	mov	r0, r8
 801176c:	f7ff fee2 	bl	8011534 <_printf_common>
 8011770:	3001      	adds	r0, #1
 8011772:	d14c      	bne.n	801180e <_printf_i+0x1fe>
 8011774:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011778:	b004      	add	sp, #16
 801177a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801177e:	4835      	ldr	r0, [pc, #212]	; (8011854 <_printf_i+0x244>)
 8011780:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8011784:	6829      	ldr	r1, [r5, #0]
 8011786:	6823      	ldr	r3, [r4, #0]
 8011788:	f851 6b04 	ldr.w	r6, [r1], #4
 801178c:	6029      	str	r1, [r5, #0]
 801178e:	061d      	lsls	r5, r3, #24
 8011790:	d514      	bpl.n	80117bc <_printf_i+0x1ac>
 8011792:	07df      	lsls	r7, r3, #31
 8011794:	bf44      	itt	mi
 8011796:	f043 0320 	orrmi.w	r3, r3, #32
 801179a:	6023      	strmi	r3, [r4, #0]
 801179c:	b91e      	cbnz	r6, 80117a6 <_printf_i+0x196>
 801179e:	6823      	ldr	r3, [r4, #0]
 80117a0:	f023 0320 	bic.w	r3, r3, #32
 80117a4:	6023      	str	r3, [r4, #0]
 80117a6:	2310      	movs	r3, #16
 80117a8:	e7b0      	b.n	801170c <_printf_i+0xfc>
 80117aa:	6823      	ldr	r3, [r4, #0]
 80117ac:	f043 0320 	orr.w	r3, r3, #32
 80117b0:	6023      	str	r3, [r4, #0]
 80117b2:	2378      	movs	r3, #120	; 0x78
 80117b4:	4828      	ldr	r0, [pc, #160]	; (8011858 <_printf_i+0x248>)
 80117b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80117ba:	e7e3      	b.n	8011784 <_printf_i+0x174>
 80117bc:	0659      	lsls	r1, r3, #25
 80117be:	bf48      	it	mi
 80117c0:	b2b6      	uxthmi	r6, r6
 80117c2:	e7e6      	b.n	8011792 <_printf_i+0x182>
 80117c4:	4615      	mov	r5, r2
 80117c6:	e7bb      	b.n	8011740 <_printf_i+0x130>
 80117c8:	682b      	ldr	r3, [r5, #0]
 80117ca:	6826      	ldr	r6, [r4, #0]
 80117cc:	6961      	ldr	r1, [r4, #20]
 80117ce:	1d18      	adds	r0, r3, #4
 80117d0:	6028      	str	r0, [r5, #0]
 80117d2:	0635      	lsls	r5, r6, #24
 80117d4:	681b      	ldr	r3, [r3, #0]
 80117d6:	d501      	bpl.n	80117dc <_printf_i+0x1cc>
 80117d8:	6019      	str	r1, [r3, #0]
 80117da:	e002      	b.n	80117e2 <_printf_i+0x1d2>
 80117dc:	0670      	lsls	r0, r6, #25
 80117de:	d5fb      	bpl.n	80117d8 <_printf_i+0x1c8>
 80117e0:	8019      	strh	r1, [r3, #0]
 80117e2:	2300      	movs	r3, #0
 80117e4:	6123      	str	r3, [r4, #16]
 80117e6:	4615      	mov	r5, r2
 80117e8:	e7ba      	b.n	8011760 <_printf_i+0x150>
 80117ea:	682b      	ldr	r3, [r5, #0]
 80117ec:	1d1a      	adds	r2, r3, #4
 80117ee:	602a      	str	r2, [r5, #0]
 80117f0:	681d      	ldr	r5, [r3, #0]
 80117f2:	6862      	ldr	r2, [r4, #4]
 80117f4:	2100      	movs	r1, #0
 80117f6:	4628      	mov	r0, r5
 80117f8:	f7ee fd22 	bl	8000240 <memchr>
 80117fc:	b108      	cbz	r0, 8011802 <_printf_i+0x1f2>
 80117fe:	1b40      	subs	r0, r0, r5
 8011800:	6060      	str	r0, [r4, #4]
 8011802:	6863      	ldr	r3, [r4, #4]
 8011804:	6123      	str	r3, [r4, #16]
 8011806:	2300      	movs	r3, #0
 8011808:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801180c:	e7a8      	b.n	8011760 <_printf_i+0x150>
 801180e:	6923      	ldr	r3, [r4, #16]
 8011810:	462a      	mov	r2, r5
 8011812:	4649      	mov	r1, r9
 8011814:	4640      	mov	r0, r8
 8011816:	47d0      	blx	sl
 8011818:	3001      	adds	r0, #1
 801181a:	d0ab      	beq.n	8011774 <_printf_i+0x164>
 801181c:	6823      	ldr	r3, [r4, #0]
 801181e:	079b      	lsls	r3, r3, #30
 8011820:	d413      	bmi.n	801184a <_printf_i+0x23a>
 8011822:	68e0      	ldr	r0, [r4, #12]
 8011824:	9b03      	ldr	r3, [sp, #12]
 8011826:	4298      	cmp	r0, r3
 8011828:	bfb8      	it	lt
 801182a:	4618      	movlt	r0, r3
 801182c:	e7a4      	b.n	8011778 <_printf_i+0x168>
 801182e:	2301      	movs	r3, #1
 8011830:	4632      	mov	r2, r6
 8011832:	4649      	mov	r1, r9
 8011834:	4640      	mov	r0, r8
 8011836:	47d0      	blx	sl
 8011838:	3001      	adds	r0, #1
 801183a:	d09b      	beq.n	8011774 <_printf_i+0x164>
 801183c:	3501      	adds	r5, #1
 801183e:	68e3      	ldr	r3, [r4, #12]
 8011840:	9903      	ldr	r1, [sp, #12]
 8011842:	1a5b      	subs	r3, r3, r1
 8011844:	42ab      	cmp	r3, r5
 8011846:	dcf2      	bgt.n	801182e <_printf_i+0x21e>
 8011848:	e7eb      	b.n	8011822 <_printf_i+0x212>
 801184a:	2500      	movs	r5, #0
 801184c:	f104 0619 	add.w	r6, r4, #25
 8011850:	e7f5      	b.n	801183e <_printf_i+0x22e>
 8011852:	bf00      	nop
 8011854:	0801295d 	.word	0x0801295d
 8011858:	0801296e 	.word	0x0801296e

0801185c <__sread>:
 801185c:	b510      	push	{r4, lr}
 801185e:	460c      	mov	r4, r1
 8011860:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011864:	f000 fa84 	bl	8011d70 <_read_r>
 8011868:	2800      	cmp	r0, #0
 801186a:	bfab      	itete	ge
 801186c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801186e:	89a3      	ldrhlt	r3, [r4, #12]
 8011870:	181b      	addge	r3, r3, r0
 8011872:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011876:	bfac      	ite	ge
 8011878:	6563      	strge	r3, [r4, #84]	; 0x54
 801187a:	81a3      	strhlt	r3, [r4, #12]
 801187c:	bd10      	pop	{r4, pc}

0801187e <__swrite>:
 801187e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011882:	461f      	mov	r7, r3
 8011884:	898b      	ldrh	r3, [r1, #12]
 8011886:	05db      	lsls	r3, r3, #23
 8011888:	4605      	mov	r5, r0
 801188a:	460c      	mov	r4, r1
 801188c:	4616      	mov	r6, r2
 801188e:	d505      	bpl.n	801189c <__swrite+0x1e>
 8011890:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011894:	2302      	movs	r3, #2
 8011896:	2200      	movs	r2, #0
 8011898:	f000 f9d0 	bl	8011c3c <_lseek_r>
 801189c:	89a3      	ldrh	r3, [r4, #12]
 801189e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80118a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80118a6:	81a3      	strh	r3, [r4, #12]
 80118a8:	4632      	mov	r2, r6
 80118aa:	463b      	mov	r3, r7
 80118ac:	4628      	mov	r0, r5
 80118ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80118b2:	f000 b869 	b.w	8011988 <_write_r>

080118b6 <__sseek>:
 80118b6:	b510      	push	{r4, lr}
 80118b8:	460c      	mov	r4, r1
 80118ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80118be:	f000 f9bd 	bl	8011c3c <_lseek_r>
 80118c2:	1c43      	adds	r3, r0, #1
 80118c4:	89a3      	ldrh	r3, [r4, #12]
 80118c6:	bf15      	itete	ne
 80118c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80118ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80118ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80118d2:	81a3      	strheq	r3, [r4, #12]
 80118d4:	bf18      	it	ne
 80118d6:	81a3      	strhne	r3, [r4, #12]
 80118d8:	bd10      	pop	{r4, pc}

080118da <__sclose>:
 80118da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80118de:	f000 b8db 	b.w	8011a98 <_close_r>
	...

080118e4 <__swbuf_r>:
 80118e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80118e6:	460e      	mov	r6, r1
 80118e8:	4614      	mov	r4, r2
 80118ea:	4605      	mov	r5, r0
 80118ec:	b118      	cbz	r0, 80118f6 <__swbuf_r+0x12>
 80118ee:	6983      	ldr	r3, [r0, #24]
 80118f0:	b90b      	cbnz	r3, 80118f6 <__swbuf_r+0x12>
 80118f2:	f7ff fa7d 	bl	8010df0 <__sinit>
 80118f6:	4b21      	ldr	r3, [pc, #132]	; (801197c <__swbuf_r+0x98>)
 80118f8:	429c      	cmp	r4, r3
 80118fa:	d12b      	bne.n	8011954 <__swbuf_r+0x70>
 80118fc:	686c      	ldr	r4, [r5, #4]
 80118fe:	69a3      	ldr	r3, [r4, #24]
 8011900:	60a3      	str	r3, [r4, #8]
 8011902:	89a3      	ldrh	r3, [r4, #12]
 8011904:	071a      	lsls	r2, r3, #28
 8011906:	d52f      	bpl.n	8011968 <__swbuf_r+0x84>
 8011908:	6923      	ldr	r3, [r4, #16]
 801190a:	b36b      	cbz	r3, 8011968 <__swbuf_r+0x84>
 801190c:	6923      	ldr	r3, [r4, #16]
 801190e:	6820      	ldr	r0, [r4, #0]
 8011910:	1ac0      	subs	r0, r0, r3
 8011912:	6963      	ldr	r3, [r4, #20]
 8011914:	b2f6      	uxtb	r6, r6
 8011916:	4283      	cmp	r3, r0
 8011918:	4637      	mov	r7, r6
 801191a:	dc04      	bgt.n	8011926 <__swbuf_r+0x42>
 801191c:	4621      	mov	r1, r4
 801191e:	4628      	mov	r0, r5
 8011920:	f000 f950 	bl	8011bc4 <_fflush_r>
 8011924:	bb30      	cbnz	r0, 8011974 <__swbuf_r+0x90>
 8011926:	68a3      	ldr	r3, [r4, #8]
 8011928:	3b01      	subs	r3, #1
 801192a:	60a3      	str	r3, [r4, #8]
 801192c:	6823      	ldr	r3, [r4, #0]
 801192e:	1c5a      	adds	r2, r3, #1
 8011930:	6022      	str	r2, [r4, #0]
 8011932:	701e      	strb	r6, [r3, #0]
 8011934:	6963      	ldr	r3, [r4, #20]
 8011936:	3001      	adds	r0, #1
 8011938:	4283      	cmp	r3, r0
 801193a:	d004      	beq.n	8011946 <__swbuf_r+0x62>
 801193c:	89a3      	ldrh	r3, [r4, #12]
 801193e:	07db      	lsls	r3, r3, #31
 8011940:	d506      	bpl.n	8011950 <__swbuf_r+0x6c>
 8011942:	2e0a      	cmp	r6, #10
 8011944:	d104      	bne.n	8011950 <__swbuf_r+0x6c>
 8011946:	4621      	mov	r1, r4
 8011948:	4628      	mov	r0, r5
 801194a:	f000 f93b 	bl	8011bc4 <_fflush_r>
 801194e:	b988      	cbnz	r0, 8011974 <__swbuf_r+0x90>
 8011950:	4638      	mov	r0, r7
 8011952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011954:	4b0a      	ldr	r3, [pc, #40]	; (8011980 <__swbuf_r+0x9c>)
 8011956:	429c      	cmp	r4, r3
 8011958:	d101      	bne.n	801195e <__swbuf_r+0x7a>
 801195a:	68ac      	ldr	r4, [r5, #8]
 801195c:	e7cf      	b.n	80118fe <__swbuf_r+0x1a>
 801195e:	4b09      	ldr	r3, [pc, #36]	; (8011984 <__swbuf_r+0xa0>)
 8011960:	429c      	cmp	r4, r3
 8011962:	bf08      	it	eq
 8011964:	68ec      	ldreq	r4, [r5, #12]
 8011966:	e7ca      	b.n	80118fe <__swbuf_r+0x1a>
 8011968:	4621      	mov	r1, r4
 801196a:	4628      	mov	r0, r5
 801196c:	f000 f81e 	bl	80119ac <__swsetup_r>
 8011970:	2800      	cmp	r0, #0
 8011972:	d0cb      	beq.n	801190c <__swbuf_r+0x28>
 8011974:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8011978:	e7ea      	b.n	8011950 <__swbuf_r+0x6c>
 801197a:	bf00      	nop
 801197c:	0801290c 	.word	0x0801290c
 8011980:	0801292c 	.word	0x0801292c
 8011984:	080128ec 	.word	0x080128ec

08011988 <_write_r>:
 8011988:	b538      	push	{r3, r4, r5, lr}
 801198a:	4d07      	ldr	r5, [pc, #28]	; (80119a8 <_write_r+0x20>)
 801198c:	4604      	mov	r4, r0
 801198e:	4608      	mov	r0, r1
 8011990:	4611      	mov	r1, r2
 8011992:	2200      	movs	r2, #0
 8011994:	602a      	str	r2, [r5, #0]
 8011996:	461a      	mov	r2, r3
 8011998:	f7ef fccb 	bl	8001332 <_write>
 801199c:	1c43      	adds	r3, r0, #1
 801199e:	d102      	bne.n	80119a6 <_write_r+0x1e>
 80119a0:	682b      	ldr	r3, [r5, #0]
 80119a2:	b103      	cbz	r3, 80119a6 <_write_r+0x1e>
 80119a4:	6023      	str	r3, [r4, #0]
 80119a6:	bd38      	pop	{r3, r4, r5, pc}
 80119a8:	2000c0d4 	.word	0x2000c0d4

080119ac <__swsetup_r>:
 80119ac:	4b32      	ldr	r3, [pc, #200]	; (8011a78 <__swsetup_r+0xcc>)
 80119ae:	b570      	push	{r4, r5, r6, lr}
 80119b0:	681d      	ldr	r5, [r3, #0]
 80119b2:	4606      	mov	r6, r0
 80119b4:	460c      	mov	r4, r1
 80119b6:	b125      	cbz	r5, 80119c2 <__swsetup_r+0x16>
 80119b8:	69ab      	ldr	r3, [r5, #24]
 80119ba:	b913      	cbnz	r3, 80119c2 <__swsetup_r+0x16>
 80119bc:	4628      	mov	r0, r5
 80119be:	f7ff fa17 	bl	8010df0 <__sinit>
 80119c2:	4b2e      	ldr	r3, [pc, #184]	; (8011a7c <__swsetup_r+0xd0>)
 80119c4:	429c      	cmp	r4, r3
 80119c6:	d10f      	bne.n	80119e8 <__swsetup_r+0x3c>
 80119c8:	686c      	ldr	r4, [r5, #4]
 80119ca:	89a3      	ldrh	r3, [r4, #12]
 80119cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80119d0:	0719      	lsls	r1, r3, #28
 80119d2:	d42c      	bmi.n	8011a2e <__swsetup_r+0x82>
 80119d4:	06dd      	lsls	r5, r3, #27
 80119d6:	d411      	bmi.n	80119fc <__swsetup_r+0x50>
 80119d8:	2309      	movs	r3, #9
 80119da:	6033      	str	r3, [r6, #0]
 80119dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80119e0:	81a3      	strh	r3, [r4, #12]
 80119e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80119e6:	e03e      	b.n	8011a66 <__swsetup_r+0xba>
 80119e8:	4b25      	ldr	r3, [pc, #148]	; (8011a80 <__swsetup_r+0xd4>)
 80119ea:	429c      	cmp	r4, r3
 80119ec:	d101      	bne.n	80119f2 <__swsetup_r+0x46>
 80119ee:	68ac      	ldr	r4, [r5, #8]
 80119f0:	e7eb      	b.n	80119ca <__swsetup_r+0x1e>
 80119f2:	4b24      	ldr	r3, [pc, #144]	; (8011a84 <__swsetup_r+0xd8>)
 80119f4:	429c      	cmp	r4, r3
 80119f6:	bf08      	it	eq
 80119f8:	68ec      	ldreq	r4, [r5, #12]
 80119fa:	e7e6      	b.n	80119ca <__swsetup_r+0x1e>
 80119fc:	0758      	lsls	r0, r3, #29
 80119fe:	d512      	bpl.n	8011a26 <__swsetup_r+0x7a>
 8011a00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011a02:	b141      	cbz	r1, 8011a16 <__swsetup_r+0x6a>
 8011a04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011a08:	4299      	cmp	r1, r3
 8011a0a:	d002      	beq.n	8011a12 <__swsetup_r+0x66>
 8011a0c:	4630      	mov	r0, r6
 8011a0e:	f7fe fec7 	bl	80107a0 <_free_r>
 8011a12:	2300      	movs	r3, #0
 8011a14:	6363      	str	r3, [r4, #52]	; 0x34
 8011a16:	89a3      	ldrh	r3, [r4, #12]
 8011a18:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011a1c:	81a3      	strh	r3, [r4, #12]
 8011a1e:	2300      	movs	r3, #0
 8011a20:	6063      	str	r3, [r4, #4]
 8011a22:	6923      	ldr	r3, [r4, #16]
 8011a24:	6023      	str	r3, [r4, #0]
 8011a26:	89a3      	ldrh	r3, [r4, #12]
 8011a28:	f043 0308 	orr.w	r3, r3, #8
 8011a2c:	81a3      	strh	r3, [r4, #12]
 8011a2e:	6923      	ldr	r3, [r4, #16]
 8011a30:	b94b      	cbnz	r3, 8011a46 <__swsetup_r+0x9a>
 8011a32:	89a3      	ldrh	r3, [r4, #12]
 8011a34:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011a38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011a3c:	d003      	beq.n	8011a46 <__swsetup_r+0x9a>
 8011a3e:	4621      	mov	r1, r4
 8011a40:	4630      	mov	r0, r6
 8011a42:	f000 f933 	bl	8011cac <__smakebuf_r>
 8011a46:	89a0      	ldrh	r0, [r4, #12]
 8011a48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011a4c:	f010 0301 	ands.w	r3, r0, #1
 8011a50:	d00a      	beq.n	8011a68 <__swsetup_r+0xbc>
 8011a52:	2300      	movs	r3, #0
 8011a54:	60a3      	str	r3, [r4, #8]
 8011a56:	6963      	ldr	r3, [r4, #20]
 8011a58:	425b      	negs	r3, r3
 8011a5a:	61a3      	str	r3, [r4, #24]
 8011a5c:	6923      	ldr	r3, [r4, #16]
 8011a5e:	b943      	cbnz	r3, 8011a72 <__swsetup_r+0xc6>
 8011a60:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011a64:	d1ba      	bne.n	80119dc <__swsetup_r+0x30>
 8011a66:	bd70      	pop	{r4, r5, r6, pc}
 8011a68:	0781      	lsls	r1, r0, #30
 8011a6a:	bf58      	it	pl
 8011a6c:	6963      	ldrpl	r3, [r4, #20]
 8011a6e:	60a3      	str	r3, [r4, #8]
 8011a70:	e7f4      	b.n	8011a5c <__swsetup_r+0xb0>
 8011a72:	2000      	movs	r0, #0
 8011a74:	e7f7      	b.n	8011a66 <__swsetup_r+0xba>
 8011a76:	bf00      	nop
 8011a78:	2000006c 	.word	0x2000006c
 8011a7c:	0801290c 	.word	0x0801290c
 8011a80:	0801292c 	.word	0x0801292c
 8011a84:	080128ec 	.word	0x080128ec

08011a88 <abort>:
 8011a88:	b508      	push	{r3, lr}
 8011a8a:	2006      	movs	r0, #6
 8011a8c:	f000 f9aa 	bl	8011de4 <raise>
 8011a90:	2001      	movs	r0, #1
 8011a92:	f7ef fc27 	bl	80012e4 <_exit>
	...

08011a98 <_close_r>:
 8011a98:	b538      	push	{r3, r4, r5, lr}
 8011a9a:	4d06      	ldr	r5, [pc, #24]	; (8011ab4 <_close_r+0x1c>)
 8011a9c:	2300      	movs	r3, #0
 8011a9e:	4604      	mov	r4, r0
 8011aa0:	4608      	mov	r0, r1
 8011aa2:	602b      	str	r3, [r5, #0]
 8011aa4:	f7ef fc61 	bl	800136a <_close>
 8011aa8:	1c43      	adds	r3, r0, #1
 8011aaa:	d102      	bne.n	8011ab2 <_close_r+0x1a>
 8011aac:	682b      	ldr	r3, [r5, #0]
 8011aae:	b103      	cbz	r3, 8011ab2 <_close_r+0x1a>
 8011ab0:	6023      	str	r3, [r4, #0]
 8011ab2:	bd38      	pop	{r3, r4, r5, pc}
 8011ab4:	2000c0d4 	.word	0x2000c0d4

08011ab8 <__sflush_r>:
 8011ab8:	898a      	ldrh	r2, [r1, #12]
 8011aba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011abe:	4605      	mov	r5, r0
 8011ac0:	0710      	lsls	r0, r2, #28
 8011ac2:	460c      	mov	r4, r1
 8011ac4:	d458      	bmi.n	8011b78 <__sflush_r+0xc0>
 8011ac6:	684b      	ldr	r3, [r1, #4]
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	dc05      	bgt.n	8011ad8 <__sflush_r+0x20>
 8011acc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	dc02      	bgt.n	8011ad8 <__sflush_r+0x20>
 8011ad2:	2000      	movs	r0, #0
 8011ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ad8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011ada:	2e00      	cmp	r6, #0
 8011adc:	d0f9      	beq.n	8011ad2 <__sflush_r+0x1a>
 8011ade:	2300      	movs	r3, #0
 8011ae0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011ae4:	682f      	ldr	r7, [r5, #0]
 8011ae6:	602b      	str	r3, [r5, #0]
 8011ae8:	d032      	beq.n	8011b50 <__sflush_r+0x98>
 8011aea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011aec:	89a3      	ldrh	r3, [r4, #12]
 8011aee:	075a      	lsls	r2, r3, #29
 8011af0:	d505      	bpl.n	8011afe <__sflush_r+0x46>
 8011af2:	6863      	ldr	r3, [r4, #4]
 8011af4:	1ac0      	subs	r0, r0, r3
 8011af6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011af8:	b10b      	cbz	r3, 8011afe <__sflush_r+0x46>
 8011afa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011afc:	1ac0      	subs	r0, r0, r3
 8011afe:	2300      	movs	r3, #0
 8011b00:	4602      	mov	r2, r0
 8011b02:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011b04:	6a21      	ldr	r1, [r4, #32]
 8011b06:	4628      	mov	r0, r5
 8011b08:	47b0      	blx	r6
 8011b0a:	1c43      	adds	r3, r0, #1
 8011b0c:	89a3      	ldrh	r3, [r4, #12]
 8011b0e:	d106      	bne.n	8011b1e <__sflush_r+0x66>
 8011b10:	6829      	ldr	r1, [r5, #0]
 8011b12:	291d      	cmp	r1, #29
 8011b14:	d82c      	bhi.n	8011b70 <__sflush_r+0xb8>
 8011b16:	4a2a      	ldr	r2, [pc, #168]	; (8011bc0 <__sflush_r+0x108>)
 8011b18:	40ca      	lsrs	r2, r1
 8011b1a:	07d6      	lsls	r6, r2, #31
 8011b1c:	d528      	bpl.n	8011b70 <__sflush_r+0xb8>
 8011b1e:	2200      	movs	r2, #0
 8011b20:	6062      	str	r2, [r4, #4]
 8011b22:	04d9      	lsls	r1, r3, #19
 8011b24:	6922      	ldr	r2, [r4, #16]
 8011b26:	6022      	str	r2, [r4, #0]
 8011b28:	d504      	bpl.n	8011b34 <__sflush_r+0x7c>
 8011b2a:	1c42      	adds	r2, r0, #1
 8011b2c:	d101      	bne.n	8011b32 <__sflush_r+0x7a>
 8011b2e:	682b      	ldr	r3, [r5, #0]
 8011b30:	b903      	cbnz	r3, 8011b34 <__sflush_r+0x7c>
 8011b32:	6560      	str	r0, [r4, #84]	; 0x54
 8011b34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011b36:	602f      	str	r7, [r5, #0]
 8011b38:	2900      	cmp	r1, #0
 8011b3a:	d0ca      	beq.n	8011ad2 <__sflush_r+0x1a>
 8011b3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011b40:	4299      	cmp	r1, r3
 8011b42:	d002      	beq.n	8011b4a <__sflush_r+0x92>
 8011b44:	4628      	mov	r0, r5
 8011b46:	f7fe fe2b 	bl	80107a0 <_free_r>
 8011b4a:	2000      	movs	r0, #0
 8011b4c:	6360      	str	r0, [r4, #52]	; 0x34
 8011b4e:	e7c1      	b.n	8011ad4 <__sflush_r+0x1c>
 8011b50:	6a21      	ldr	r1, [r4, #32]
 8011b52:	2301      	movs	r3, #1
 8011b54:	4628      	mov	r0, r5
 8011b56:	47b0      	blx	r6
 8011b58:	1c41      	adds	r1, r0, #1
 8011b5a:	d1c7      	bne.n	8011aec <__sflush_r+0x34>
 8011b5c:	682b      	ldr	r3, [r5, #0]
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	d0c4      	beq.n	8011aec <__sflush_r+0x34>
 8011b62:	2b1d      	cmp	r3, #29
 8011b64:	d001      	beq.n	8011b6a <__sflush_r+0xb2>
 8011b66:	2b16      	cmp	r3, #22
 8011b68:	d101      	bne.n	8011b6e <__sflush_r+0xb6>
 8011b6a:	602f      	str	r7, [r5, #0]
 8011b6c:	e7b1      	b.n	8011ad2 <__sflush_r+0x1a>
 8011b6e:	89a3      	ldrh	r3, [r4, #12]
 8011b70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011b74:	81a3      	strh	r3, [r4, #12]
 8011b76:	e7ad      	b.n	8011ad4 <__sflush_r+0x1c>
 8011b78:	690f      	ldr	r7, [r1, #16]
 8011b7a:	2f00      	cmp	r7, #0
 8011b7c:	d0a9      	beq.n	8011ad2 <__sflush_r+0x1a>
 8011b7e:	0793      	lsls	r3, r2, #30
 8011b80:	680e      	ldr	r6, [r1, #0]
 8011b82:	bf08      	it	eq
 8011b84:	694b      	ldreq	r3, [r1, #20]
 8011b86:	600f      	str	r7, [r1, #0]
 8011b88:	bf18      	it	ne
 8011b8a:	2300      	movne	r3, #0
 8011b8c:	eba6 0807 	sub.w	r8, r6, r7
 8011b90:	608b      	str	r3, [r1, #8]
 8011b92:	f1b8 0f00 	cmp.w	r8, #0
 8011b96:	dd9c      	ble.n	8011ad2 <__sflush_r+0x1a>
 8011b98:	6a21      	ldr	r1, [r4, #32]
 8011b9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011b9c:	4643      	mov	r3, r8
 8011b9e:	463a      	mov	r2, r7
 8011ba0:	4628      	mov	r0, r5
 8011ba2:	47b0      	blx	r6
 8011ba4:	2800      	cmp	r0, #0
 8011ba6:	dc06      	bgt.n	8011bb6 <__sflush_r+0xfe>
 8011ba8:	89a3      	ldrh	r3, [r4, #12]
 8011baa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011bae:	81a3      	strh	r3, [r4, #12]
 8011bb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011bb4:	e78e      	b.n	8011ad4 <__sflush_r+0x1c>
 8011bb6:	4407      	add	r7, r0
 8011bb8:	eba8 0800 	sub.w	r8, r8, r0
 8011bbc:	e7e9      	b.n	8011b92 <__sflush_r+0xda>
 8011bbe:	bf00      	nop
 8011bc0:	20400001 	.word	0x20400001

08011bc4 <_fflush_r>:
 8011bc4:	b538      	push	{r3, r4, r5, lr}
 8011bc6:	690b      	ldr	r3, [r1, #16]
 8011bc8:	4605      	mov	r5, r0
 8011bca:	460c      	mov	r4, r1
 8011bcc:	b913      	cbnz	r3, 8011bd4 <_fflush_r+0x10>
 8011bce:	2500      	movs	r5, #0
 8011bd0:	4628      	mov	r0, r5
 8011bd2:	bd38      	pop	{r3, r4, r5, pc}
 8011bd4:	b118      	cbz	r0, 8011bde <_fflush_r+0x1a>
 8011bd6:	6983      	ldr	r3, [r0, #24]
 8011bd8:	b90b      	cbnz	r3, 8011bde <_fflush_r+0x1a>
 8011bda:	f7ff f909 	bl	8010df0 <__sinit>
 8011bde:	4b14      	ldr	r3, [pc, #80]	; (8011c30 <_fflush_r+0x6c>)
 8011be0:	429c      	cmp	r4, r3
 8011be2:	d11b      	bne.n	8011c1c <_fflush_r+0x58>
 8011be4:	686c      	ldr	r4, [r5, #4]
 8011be6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011bea:	2b00      	cmp	r3, #0
 8011bec:	d0ef      	beq.n	8011bce <_fflush_r+0xa>
 8011bee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011bf0:	07d0      	lsls	r0, r2, #31
 8011bf2:	d404      	bmi.n	8011bfe <_fflush_r+0x3a>
 8011bf4:	0599      	lsls	r1, r3, #22
 8011bf6:	d402      	bmi.n	8011bfe <_fflush_r+0x3a>
 8011bf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011bfa:	f7ff f9a9 	bl	8010f50 <__retarget_lock_acquire_recursive>
 8011bfe:	4628      	mov	r0, r5
 8011c00:	4621      	mov	r1, r4
 8011c02:	f7ff ff59 	bl	8011ab8 <__sflush_r>
 8011c06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011c08:	07da      	lsls	r2, r3, #31
 8011c0a:	4605      	mov	r5, r0
 8011c0c:	d4e0      	bmi.n	8011bd0 <_fflush_r+0xc>
 8011c0e:	89a3      	ldrh	r3, [r4, #12]
 8011c10:	059b      	lsls	r3, r3, #22
 8011c12:	d4dd      	bmi.n	8011bd0 <_fflush_r+0xc>
 8011c14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011c16:	f7ff f99c 	bl	8010f52 <__retarget_lock_release_recursive>
 8011c1a:	e7d9      	b.n	8011bd0 <_fflush_r+0xc>
 8011c1c:	4b05      	ldr	r3, [pc, #20]	; (8011c34 <_fflush_r+0x70>)
 8011c1e:	429c      	cmp	r4, r3
 8011c20:	d101      	bne.n	8011c26 <_fflush_r+0x62>
 8011c22:	68ac      	ldr	r4, [r5, #8]
 8011c24:	e7df      	b.n	8011be6 <_fflush_r+0x22>
 8011c26:	4b04      	ldr	r3, [pc, #16]	; (8011c38 <_fflush_r+0x74>)
 8011c28:	429c      	cmp	r4, r3
 8011c2a:	bf08      	it	eq
 8011c2c:	68ec      	ldreq	r4, [r5, #12]
 8011c2e:	e7da      	b.n	8011be6 <_fflush_r+0x22>
 8011c30:	0801290c 	.word	0x0801290c
 8011c34:	0801292c 	.word	0x0801292c
 8011c38:	080128ec 	.word	0x080128ec

08011c3c <_lseek_r>:
 8011c3c:	b538      	push	{r3, r4, r5, lr}
 8011c3e:	4d07      	ldr	r5, [pc, #28]	; (8011c5c <_lseek_r+0x20>)
 8011c40:	4604      	mov	r4, r0
 8011c42:	4608      	mov	r0, r1
 8011c44:	4611      	mov	r1, r2
 8011c46:	2200      	movs	r2, #0
 8011c48:	602a      	str	r2, [r5, #0]
 8011c4a:	461a      	mov	r2, r3
 8011c4c:	f7ef fbb4 	bl	80013b8 <_lseek>
 8011c50:	1c43      	adds	r3, r0, #1
 8011c52:	d102      	bne.n	8011c5a <_lseek_r+0x1e>
 8011c54:	682b      	ldr	r3, [r5, #0]
 8011c56:	b103      	cbz	r3, 8011c5a <_lseek_r+0x1e>
 8011c58:	6023      	str	r3, [r4, #0]
 8011c5a:	bd38      	pop	{r3, r4, r5, pc}
 8011c5c:	2000c0d4 	.word	0x2000c0d4

08011c60 <__swhatbuf_r>:
 8011c60:	b570      	push	{r4, r5, r6, lr}
 8011c62:	460e      	mov	r6, r1
 8011c64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011c68:	2900      	cmp	r1, #0
 8011c6a:	b096      	sub	sp, #88	; 0x58
 8011c6c:	4614      	mov	r4, r2
 8011c6e:	461d      	mov	r5, r3
 8011c70:	da08      	bge.n	8011c84 <__swhatbuf_r+0x24>
 8011c72:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8011c76:	2200      	movs	r2, #0
 8011c78:	602a      	str	r2, [r5, #0]
 8011c7a:	061a      	lsls	r2, r3, #24
 8011c7c:	d410      	bmi.n	8011ca0 <__swhatbuf_r+0x40>
 8011c7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011c82:	e00e      	b.n	8011ca2 <__swhatbuf_r+0x42>
 8011c84:	466a      	mov	r2, sp
 8011c86:	f000 f8c9 	bl	8011e1c <_fstat_r>
 8011c8a:	2800      	cmp	r0, #0
 8011c8c:	dbf1      	blt.n	8011c72 <__swhatbuf_r+0x12>
 8011c8e:	9a01      	ldr	r2, [sp, #4]
 8011c90:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011c94:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011c98:	425a      	negs	r2, r3
 8011c9a:	415a      	adcs	r2, r3
 8011c9c:	602a      	str	r2, [r5, #0]
 8011c9e:	e7ee      	b.n	8011c7e <__swhatbuf_r+0x1e>
 8011ca0:	2340      	movs	r3, #64	; 0x40
 8011ca2:	2000      	movs	r0, #0
 8011ca4:	6023      	str	r3, [r4, #0]
 8011ca6:	b016      	add	sp, #88	; 0x58
 8011ca8:	bd70      	pop	{r4, r5, r6, pc}
	...

08011cac <__smakebuf_r>:
 8011cac:	898b      	ldrh	r3, [r1, #12]
 8011cae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011cb0:	079d      	lsls	r5, r3, #30
 8011cb2:	4606      	mov	r6, r0
 8011cb4:	460c      	mov	r4, r1
 8011cb6:	d507      	bpl.n	8011cc8 <__smakebuf_r+0x1c>
 8011cb8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011cbc:	6023      	str	r3, [r4, #0]
 8011cbe:	6123      	str	r3, [r4, #16]
 8011cc0:	2301      	movs	r3, #1
 8011cc2:	6163      	str	r3, [r4, #20]
 8011cc4:	b002      	add	sp, #8
 8011cc6:	bd70      	pop	{r4, r5, r6, pc}
 8011cc8:	ab01      	add	r3, sp, #4
 8011cca:	466a      	mov	r2, sp
 8011ccc:	f7ff ffc8 	bl	8011c60 <__swhatbuf_r>
 8011cd0:	9900      	ldr	r1, [sp, #0]
 8011cd2:	4605      	mov	r5, r0
 8011cd4:	4630      	mov	r0, r6
 8011cd6:	f7fe fdcf 	bl	8010878 <_malloc_r>
 8011cda:	b948      	cbnz	r0, 8011cf0 <__smakebuf_r+0x44>
 8011cdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011ce0:	059a      	lsls	r2, r3, #22
 8011ce2:	d4ef      	bmi.n	8011cc4 <__smakebuf_r+0x18>
 8011ce4:	f023 0303 	bic.w	r3, r3, #3
 8011ce8:	f043 0302 	orr.w	r3, r3, #2
 8011cec:	81a3      	strh	r3, [r4, #12]
 8011cee:	e7e3      	b.n	8011cb8 <__smakebuf_r+0xc>
 8011cf0:	4b0d      	ldr	r3, [pc, #52]	; (8011d28 <__smakebuf_r+0x7c>)
 8011cf2:	62b3      	str	r3, [r6, #40]	; 0x28
 8011cf4:	89a3      	ldrh	r3, [r4, #12]
 8011cf6:	6020      	str	r0, [r4, #0]
 8011cf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011cfc:	81a3      	strh	r3, [r4, #12]
 8011cfe:	9b00      	ldr	r3, [sp, #0]
 8011d00:	6163      	str	r3, [r4, #20]
 8011d02:	9b01      	ldr	r3, [sp, #4]
 8011d04:	6120      	str	r0, [r4, #16]
 8011d06:	b15b      	cbz	r3, 8011d20 <__smakebuf_r+0x74>
 8011d08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011d0c:	4630      	mov	r0, r6
 8011d0e:	f000 f897 	bl	8011e40 <_isatty_r>
 8011d12:	b128      	cbz	r0, 8011d20 <__smakebuf_r+0x74>
 8011d14:	89a3      	ldrh	r3, [r4, #12]
 8011d16:	f023 0303 	bic.w	r3, r3, #3
 8011d1a:	f043 0301 	orr.w	r3, r3, #1
 8011d1e:	81a3      	strh	r3, [r4, #12]
 8011d20:	89a0      	ldrh	r0, [r4, #12]
 8011d22:	4305      	orrs	r5, r0
 8011d24:	81a5      	strh	r5, [r4, #12]
 8011d26:	e7cd      	b.n	8011cc4 <__smakebuf_r+0x18>
 8011d28:	08010d89 	.word	0x08010d89

08011d2c <memmove>:
 8011d2c:	4288      	cmp	r0, r1
 8011d2e:	b510      	push	{r4, lr}
 8011d30:	eb01 0402 	add.w	r4, r1, r2
 8011d34:	d902      	bls.n	8011d3c <memmove+0x10>
 8011d36:	4284      	cmp	r4, r0
 8011d38:	4623      	mov	r3, r4
 8011d3a:	d807      	bhi.n	8011d4c <memmove+0x20>
 8011d3c:	1e43      	subs	r3, r0, #1
 8011d3e:	42a1      	cmp	r1, r4
 8011d40:	d008      	beq.n	8011d54 <memmove+0x28>
 8011d42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011d46:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011d4a:	e7f8      	b.n	8011d3e <memmove+0x12>
 8011d4c:	4402      	add	r2, r0
 8011d4e:	4601      	mov	r1, r0
 8011d50:	428a      	cmp	r2, r1
 8011d52:	d100      	bne.n	8011d56 <memmove+0x2a>
 8011d54:	bd10      	pop	{r4, pc}
 8011d56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011d5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011d5e:	e7f7      	b.n	8011d50 <memmove+0x24>

08011d60 <_malloc_usable_size_r>:
 8011d60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011d64:	1f18      	subs	r0, r3, #4
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	bfbc      	itt	lt
 8011d6a:	580b      	ldrlt	r3, [r1, r0]
 8011d6c:	18c0      	addlt	r0, r0, r3
 8011d6e:	4770      	bx	lr

08011d70 <_read_r>:
 8011d70:	b538      	push	{r3, r4, r5, lr}
 8011d72:	4d07      	ldr	r5, [pc, #28]	; (8011d90 <_read_r+0x20>)
 8011d74:	4604      	mov	r4, r0
 8011d76:	4608      	mov	r0, r1
 8011d78:	4611      	mov	r1, r2
 8011d7a:	2200      	movs	r2, #0
 8011d7c:	602a      	str	r2, [r5, #0]
 8011d7e:	461a      	mov	r2, r3
 8011d80:	f7ef faba 	bl	80012f8 <_read>
 8011d84:	1c43      	adds	r3, r0, #1
 8011d86:	d102      	bne.n	8011d8e <_read_r+0x1e>
 8011d88:	682b      	ldr	r3, [r5, #0]
 8011d8a:	b103      	cbz	r3, 8011d8e <_read_r+0x1e>
 8011d8c:	6023      	str	r3, [r4, #0]
 8011d8e:	bd38      	pop	{r3, r4, r5, pc}
 8011d90:	2000c0d4 	.word	0x2000c0d4

08011d94 <_raise_r>:
 8011d94:	291f      	cmp	r1, #31
 8011d96:	b538      	push	{r3, r4, r5, lr}
 8011d98:	4604      	mov	r4, r0
 8011d9a:	460d      	mov	r5, r1
 8011d9c:	d904      	bls.n	8011da8 <_raise_r+0x14>
 8011d9e:	2316      	movs	r3, #22
 8011da0:	6003      	str	r3, [r0, #0]
 8011da2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011da6:	bd38      	pop	{r3, r4, r5, pc}
 8011da8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011daa:	b112      	cbz	r2, 8011db2 <_raise_r+0x1e>
 8011dac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011db0:	b94b      	cbnz	r3, 8011dc6 <_raise_r+0x32>
 8011db2:	4620      	mov	r0, r4
 8011db4:	f000 f830 	bl	8011e18 <_getpid_r>
 8011db8:	462a      	mov	r2, r5
 8011dba:	4601      	mov	r1, r0
 8011dbc:	4620      	mov	r0, r4
 8011dbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011dc2:	f000 b817 	b.w	8011df4 <_kill_r>
 8011dc6:	2b01      	cmp	r3, #1
 8011dc8:	d00a      	beq.n	8011de0 <_raise_r+0x4c>
 8011dca:	1c59      	adds	r1, r3, #1
 8011dcc:	d103      	bne.n	8011dd6 <_raise_r+0x42>
 8011dce:	2316      	movs	r3, #22
 8011dd0:	6003      	str	r3, [r0, #0]
 8011dd2:	2001      	movs	r0, #1
 8011dd4:	e7e7      	b.n	8011da6 <_raise_r+0x12>
 8011dd6:	2400      	movs	r4, #0
 8011dd8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011ddc:	4628      	mov	r0, r5
 8011dde:	4798      	blx	r3
 8011de0:	2000      	movs	r0, #0
 8011de2:	e7e0      	b.n	8011da6 <_raise_r+0x12>

08011de4 <raise>:
 8011de4:	4b02      	ldr	r3, [pc, #8]	; (8011df0 <raise+0xc>)
 8011de6:	4601      	mov	r1, r0
 8011de8:	6818      	ldr	r0, [r3, #0]
 8011dea:	f7ff bfd3 	b.w	8011d94 <_raise_r>
 8011dee:	bf00      	nop
 8011df0:	2000006c 	.word	0x2000006c

08011df4 <_kill_r>:
 8011df4:	b538      	push	{r3, r4, r5, lr}
 8011df6:	4d07      	ldr	r5, [pc, #28]	; (8011e14 <_kill_r+0x20>)
 8011df8:	2300      	movs	r3, #0
 8011dfa:	4604      	mov	r4, r0
 8011dfc:	4608      	mov	r0, r1
 8011dfe:	4611      	mov	r1, r2
 8011e00:	602b      	str	r3, [r5, #0]
 8011e02:	f7ef fa5f 	bl	80012c4 <_kill>
 8011e06:	1c43      	adds	r3, r0, #1
 8011e08:	d102      	bne.n	8011e10 <_kill_r+0x1c>
 8011e0a:	682b      	ldr	r3, [r5, #0]
 8011e0c:	b103      	cbz	r3, 8011e10 <_kill_r+0x1c>
 8011e0e:	6023      	str	r3, [r4, #0]
 8011e10:	bd38      	pop	{r3, r4, r5, pc}
 8011e12:	bf00      	nop
 8011e14:	2000c0d4 	.word	0x2000c0d4

08011e18 <_getpid_r>:
 8011e18:	f7ef ba4c 	b.w	80012b4 <_getpid>

08011e1c <_fstat_r>:
 8011e1c:	b538      	push	{r3, r4, r5, lr}
 8011e1e:	4d07      	ldr	r5, [pc, #28]	; (8011e3c <_fstat_r+0x20>)
 8011e20:	2300      	movs	r3, #0
 8011e22:	4604      	mov	r4, r0
 8011e24:	4608      	mov	r0, r1
 8011e26:	4611      	mov	r1, r2
 8011e28:	602b      	str	r3, [r5, #0]
 8011e2a:	f7ef faaa 	bl	8001382 <_fstat>
 8011e2e:	1c43      	adds	r3, r0, #1
 8011e30:	d102      	bne.n	8011e38 <_fstat_r+0x1c>
 8011e32:	682b      	ldr	r3, [r5, #0]
 8011e34:	b103      	cbz	r3, 8011e38 <_fstat_r+0x1c>
 8011e36:	6023      	str	r3, [r4, #0]
 8011e38:	bd38      	pop	{r3, r4, r5, pc}
 8011e3a:	bf00      	nop
 8011e3c:	2000c0d4 	.word	0x2000c0d4

08011e40 <_isatty_r>:
 8011e40:	b538      	push	{r3, r4, r5, lr}
 8011e42:	4d06      	ldr	r5, [pc, #24]	; (8011e5c <_isatty_r+0x1c>)
 8011e44:	2300      	movs	r3, #0
 8011e46:	4604      	mov	r4, r0
 8011e48:	4608      	mov	r0, r1
 8011e4a:	602b      	str	r3, [r5, #0]
 8011e4c:	f7ef faa9 	bl	80013a2 <_isatty>
 8011e50:	1c43      	adds	r3, r0, #1
 8011e52:	d102      	bne.n	8011e5a <_isatty_r+0x1a>
 8011e54:	682b      	ldr	r3, [r5, #0]
 8011e56:	b103      	cbz	r3, 8011e5a <_isatty_r+0x1a>
 8011e58:	6023      	str	r3, [r4, #0]
 8011e5a:	bd38      	pop	{r3, r4, r5, pc}
 8011e5c:	2000c0d4 	.word	0x2000c0d4

08011e60 <_init>:
 8011e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e62:	bf00      	nop
 8011e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011e66:	bc08      	pop	{r3}
 8011e68:	469e      	mov	lr, r3
 8011e6a:	4770      	bx	lr

08011e6c <_fini>:
 8011e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e6e:	bf00      	nop
 8011e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011e72:	bc08      	pop	{r3}
 8011e74:	469e      	mov	lr, r3
 8011e76:	4770      	bx	lr
